define('universal-app/components/about-us-popup', ['exports', 'ember', './modal-popup', '../models/shared/shared-service', '../models/shared/language/language-data-store', '../config/app-config'], function (exports, _ember, _modalPopup, _sharedService, _languageDataStore, _appConfig) {
    'use strict';

    exports.default = _modalPopup.default.extend({
        layoutName: 'components/about-us-popup',
        title: '',
        address: '',
        longVersion: _appConfig.default.longVersion,
        userSettings: _sharedService.default.userSettings,

        app: _languageDataStore.default.getLanguageObj(),

        expose: function () {
            var parentController = this.get('targetObject');
            var exposedName = this.get('id');
            parentController.set(exposedName, this);

            if (this.get('isRegistered')) {
                _sharedService.default.getService('sharedUI').registerService('aboutUsPopup', this);
            }
        }.on('didInsertElement'),

        isPopupEnabled: function () {
            this.setContent();
            return this.get('isEnabled');
        }.property('isEnabled'),

        setContent: function setContent() {
            var that = this;
            var itemArray = [];
            var configArray = _appConfig.default.customisation.supportedContacts;

            if (configArray && configArray.length > 0) {
                _ember.default.$.each(configArray, function (key, item) {
                    var contact = {};
                    var lanKey = item.key;

                    if (lanKey) {
                        contact.value = item.value;
                        contact.lanKey = that.get('app').lang.labels[lanKey] + ' : ';

                        if (item.type === 'T') {
                            contact.isTel = true;
                        } else if (item.type === 'E') {
                            contact.isEmail = true;
                        } else if (item.type === 'U') {
                            contact.isUrl = true;
                        }

                        itemArray[itemArray.length] = contact;
                    }
                });
            }

            this.set('address', this.get('app').lang.labels.brokerageAddress);
            this.set('title', this.get('app').lang.labels.aboutUs);
            this.set('supportedContacts', itemArray);
            this.set('imgSrc', _appConfig.default.customisation.imgSrc);
        },

        isArabic: function () {
            return this.userSettings.currentLanguage === 'AR';
        }.property('userSettings.currentLanguage'),

        actions: {
            onCancel: function onCancel() {
                this.send('closeModalPopup');
            },

            showModalPopup: function showModalPopup() {
                if (!this.get('isEnabled')) {
                    this.set('isEnabled', true);
                }
            }
        }
    });
});
define('universal-app/components/add-to-watchlist-item', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports.default = _ember.default.Component.extend({
    layoutName: 'components/add-to-watchlist-item'
  });
});
define('universal-app/components/connection-status', ['exports', 'ember', '../models/shared/shared-service', '../models/shared/language/language-data-store', '../app-events'], function (exports, _ember, _sharedService, _languageDataStore, _appEvents) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        priceService: _sharedService.default.getService('price'),
        tradeService: _sharedService.default.getService('trade'),
        priceConnectionStatusStyle: 'appttl-down-fore-color',
        tradeConnectionStatusStyle: 'appttl-down-fore-color',
        app: _languageDataStore.default.getLanguageObj(),
        priceConnectionStatusTitle: '',
        tradeConnectionStatusTitle: '',
        priceMessageStyle: '',
        tradeMessageStyle: '',
        priceHintStyle: '',
        tradeHintStyle: '',
        subscriptionKey: 'connectionStatus',

        initializeConnectionStat: function () {
            _appEvents.default.subscribeLanguageChanged(this, this.get('subscriptionKey'));
        }.on('init'),

        onPriceConnectionStatusStyleChanged: function () {
            if (this.get('priceService').connectionStatus) {
                this.set('priceConnectionStatusStyle', 'appttl-up-fore-color');
                this.set('priceConnectionStatusTitle', this.get('app').lang.messages.priceConnected);
                this.set('priceHintStyle', 'hint--success');
            } else {
                this.set('priceConnectionStatusStyle', 'appttl-down-fore-color');
                this.set('priceConnectionStatusTitle', this.get('app').lang.messages.priceDisconnected);
                this.set('priceHintStyle', 'hint--error');
            }
        }.observes('priceService.connectionStatus'),

        onTradeConnectionStatusStyleChanged: function () {
            if (this.get('tradeService').connectionStatus) {
                this.set('tradeConnectionStatusStyle', 'appttl-up-fore-color');
                this.set('tradeConnectionStatusTitle', this.get('app').lang.labels.tradeConnected);
                this.set('tradeHintStyle', 'hint--success');
            } else {
                this.set('tradeConnectionStatusStyle', 'appttl-down-fore-color');
                this.set('tradeConnectionStatusTitle', this.get('app').lang.labels.tradeDisconnected);
                this.set('tradeHintStyle', 'hint--error');
            }
        }.observes('tradeService.connectionStatus'),

        _setConnectionStatusTitle: function _setConnectionStatusTitle() {
            if (this.get('priceService').connectionStatus) {
                this.set('priceConnectionStatusTitle', this.get('app').lang.messages.priceConnected);
            } else {
                this.set('priceConnectionStatusTitle', this.get('app').lang.messages.priceDisconnected);
            }

            if (this.get('isTradingEnabled')) {
                if (this.get('tradeService').connectionStatus) {
                    this.set('tradeConnectionStatusTitle', this.get('app').lang.labels.tradeConnected);
                } else {
                    this.set('tradeConnectionStatusTitle', this.get('app').lang.labels.tradeDisconnected);
                }
            }
        },

        languageChanged: function languageChanged() {
            this._setConnectionStatusTitle();
        }
    });
});
define('universal-app/components/custom-watchlist-dialog', ['exports', 'ember', '../models/shared/shared-service', '../config/app-config', '../utils/utils'], function (exports, _ember, _sharedService, _appConfig, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        isSaveDisabled: true,
        isMobile: _appConfig.default.customisation.isMobile,
        layoutName: 'components/custom-watchlist-dialog',
        priceService: _sharedService.default.getService('price'),
        actionsTypes: {
            addNew: 'addNewWL',
            rename: 'renameWL',
            addNewWithStock: 'addNewWithStock'
        },

        checkEmpty: function () {
            if (_utils.default.validators.isAvailable(this.get('watchListName'))) {
                this.set('isSaveDisabled', false);
            } else {
                this.set('isSaveDisabled', true);
                this.set('isCustomWLExist', false);
            }
        }.observes('watchListName'),

        click: function click(event) {
            var target = _ember.default.$(event.target);

            if (!target.hasClass('btn') || this.get('isCustomWLExist') || this.get('isEmptyName')) {
                event.stopPropagation();
            }
        },

        displayTitle: function () {
            var name = this.get('title') ? this.get('title') : 'createNewWL';
            return this.get('app') ? this.get('app').lang.labels[name] : '';
        }.property(),

        addNewWL: function addNewWL(name) {
            var watchListId = this.priceService.watchListDS.addNewWatchList(name);
            this.sendAction('customWLCallBack', watchListId);
        },

        renameWL: function renameWL(name) {
            this.priceService.watchListDS.renameCustomWatchList(name, this.get('currentCustomWLId'));
            this.sendAction('customWLCallBack');
        },

        addNewWithStock: function addNewWithStock(name) {
            var watchListId = this.priceService.watchListDS.addNewWatchList(name);

            if (watchListId) {
                this.priceService.watchListDS.addStocksToCustomWL(this.get('symbol'), watchListId);
                this.sendAction('customWLCallBack', watchListId);
            }
        },

        closePopup: function closePopup() {
            if (this.get('isMobile')) {
                var parentController = this.get('targetObject');

                parentController.set('showPopup', false);
                parentController.set('isRenameWL', false);
                parentController.set('isAddNewWL', false);
            } else {
                var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');

                if (modal) {
                    modal.send('closeModalPopup');
                }
            }
        },

        actions: {
            saveWL: function saveWL(name) {
                var actionType = this.get('actionType');

                this.set('isCustomWLExist', this.priceService.watchListDS.isCustomWatchListAvailable(name));
                this.set('isEmptyName', name === '');

                if (!this.get('isCustomWLExist') && !this.get('isEmptyName')) {
                    if (actionType !== this.actionsTypes.rename) {
                        this.set('watchListName', null);
                    }

                    switch (actionType) {
                        case this.actionsTypes.addNew:
                            this.addNewWL(name);
                            break;

                        case this.actionsTypes.rename:
                            this.renameWL(name);
                            break;

                        case this.actionsTypes.addNewWithStock:
                            this.addNewWithStock(name);
                            break;

                        default:
                            this.sendAction('saveAction', name);
                            break;
                    }

                    this.closePopup();
                }
            },

            closePopup: function closePopup() {
                this.closePopup();
            }
        }
    });
});
define('universal-app/components/global-search', ['exports', 'ember', '../models/shared/shared-service', '../models/price/price-constants', '../config/app-config', '../app-events', '../utils/utils', '../controllers/controller-factory', '../models/shared/language/language-data-store'], function (exports, _ember, _sharedService, _priceConstants, _appConfig, _appEvents, _utils, _controllerFactory, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Component.extend(_ember.default.SortableMixin, {
        layoutName: 'components/global-search',
        priceService: _sharedService.default.getService('price'),
        app: _languageDataStore.default.getLanguageObj(),

        // Parameters related to the symbol search
        content: _sharedService.default.getService('price').searchDS.getSymbolSearchResults(),
        sortProperties: ['rank'],
        sortAscending: true,

        // Parameters related to the announcement search
        filteredContent: _sharedService.default.getService('price').announcementDS.getContentSearchResult(),
        isEnabledAnnSearch: false,
        isEnabledNewsSearch: false,
        showAnnTabs: false,
        isInvokedBySearch: true,
        isAnnUnavailable: false,
        excludedInstruments: [],
        currentButton: 0,
        showSubMarket: _sharedService.default.getService('price').settings.configs.symbolSearchConfigs.showSubMarket,

        // Parameters related to custom watchlist
        customWatchListArray: _sharedService.default.getService('price').watchListDS.customWatchListArray,

        isTablet: _appConfig.default.customisation.isTablet,

        didInsertElement: function () {
            _ember.default.appGlobal.activeWidget = this.get('wkey');

            if (this.get('isTablet')) {
                this.searchKeyDidChange();
            }
        }.on('didInsertElement'),

        bindMousetrap: function bindMousetrap() {
            var that = this;
            var rowIndex, symbolCollection;
            var isWidget = false;
            var symbolSet = 0;
            var widgetId = 'global-search' + this.get('wkey');

            if (!_appConfig.default.customisation.isMobile && !this.get('isTablet')) {
                // Mousetrap is not applicable for Mobile
                _ember.default.run.later(function () {
                    if (that && that.get('content')[symbolSet] && that.get('content')[symbolSet].get('contents')) {
                        _ember.default.$('div.search-row.full-width').first().addClass('search-row-hover');
                        symbolCollection = that.get('content')[symbolSet].get('contents').get('0');
                    }
                }, 250);

                Mousetrap.bind('arrowdown', function () {
                    // Ember.$('.search-title')[0].focus(); TODO [AROSHA] make scroll bar move with arrow
                    var next = _ember.default.$('div.search-row.full-width.search-row-hover').removeClass('search-row-hover').next();
                    that.currentButton = 0;

                    if (next && next.length > 0) {
                        if (next[0].className === 'search-title bold font-l pad-s-b') {
                            next = _ember.default.$('h2.search-title.bold.font-l.pad-s-b').last().next();
                            symbolSet = 1;
                        }

                        if (next.attr('index')) {
                            next.addClass('search-row-hover');
                            next.click();
                            rowIndex = next.attr('index');
                        }
                    } else {
                        symbolSet = 0;
                        var first = _ember.default.$('div.search-row.full-width').first();

                        if (first.attr('index')) {
                            rowIndex = first.attr('index');
                        }

                        _ember.default.$('div.search-row.full-width').first().addClass('search-row-hover');
                    }

                    symbolCollection = that.get('content')[symbolSet].get('contents').get(rowIndex);

                    that._setSymbolCollection(widgetId);
                }, widgetId);

                Mousetrap.bind('arrowup', function () {
                    var previous = _ember.default.$('div.search-row.full-width.search-row-hover').removeClass('search-row-hover').prev();
                    that.currentButton = 0;

                    if (previous && previous.length > 0) {
                        if (previous[0].className === 'search-title bold font-l pad-s-b') {
                            previous = _ember.default.$('h2.search-title.bold.font-l.pad-s-b').last().prev();
                            symbolSet = 0;
                        }

                        if (previous.attr('index')) {
                            previous.addClass('search-row-hover');
                            rowIndex = previous.attr('index');
                        }
                    } else {
                        var next = _ember.default.$('div.search-row.full-width').first().addClass('search-row-hover');
                        rowIndex = next.attr('index');
                    }

                    symbolCollection = that.get('content')[symbolSet].get('contents').get(rowIndex);

                    that._setSymbolCollection(widgetId);
                }, widgetId);

                Mousetrap.bind('enter', function () {
                    if (that && !_utils.default.validators.isAvailable(that.get('content')[0].isDataUnavailable) && !that.get('content')[0].isDataUnavailable) {
                        if (!symbolCollection.get('sym') && that.get('sortedSymbolContent.length') > 0 && that.get('sortedSymbolContent')[0].get('contents') && that.get('sortedSymbolContent')[0].get('contents')[0]) {
                            symbolCollection = that.get('sortedSymbolContent')[0].get('contents')[0];
                        }

                        that._selectSymbol(symbolCollection, isWidget);

                        _ember.default.appGlobal.activeWidget = that.get('wkey');

                        return false;
                    }
                }, widgetId);

                Mousetrap.bind('tab', function () {
                    if (that && !_utils.default.validators.isAvailable(that.get('content')[0].isDataUnavailable) && !that.get('content')[0].isDataUnavailable) {
                        if (!symbolCollection.get('sym') && that.get('sortedSymbolContent.length') > 0 && that.get('sortedSymbolContent')[0].get('contents') && that.get('sortedSymbolContent')[0].get('contents')[0]) {
                            symbolCollection = that.get('sortedSymbolContent')[0].get('contents')[0];
                        }

                        that._selectSymbol(symbolCollection, isWidget);

                        _ember.default.appGlobal.activeWidget = that.get('wkey');

                        return false;
                    }
                }, widgetId);

                Mousetrap.bind('esc', function () {
                    that.sendAction('closePopup');
                    that._unbindKeyboardShortcuts();
                }, widgetId);
            }
        },

        selectFirstRow: function () {
            this.bindMousetrap();
        }.observes('content.@each.contents.length'),

        isEnabledContentSearch: function () {
            return this.get('enableContentSettings') && (this.isEnabledAnnSearch || this.isEnabledNewsSearch);
        }.property('isEnabledAnnSearch', 'isEnabledNewsSearch'),

        sortedSymbolContent: function () {
            return this.get('arrangedContent');
        }.property('arrangedContent'),

        isMobile: function () {
            return _appConfig.default.customisation.isMobile;
        }.property(),

        symbolSearchCellCss: function () {
            return this.get('isMobile') ? 'layout-container full-width' : 'layout-col';
        }.property(),

        symbolSearchContainerCss: function () {
            return this.get('isMobile') ? 'layout-col-24' : 'layout-col';
        }.property(),

        hasChangedContentSearchSettings: function () {
            this.getContentSearchResult();
        }.observes('isEnabledContentSearch'),

        showSearchResultContainer: function () {
            _ember.default.appGlobal.activeWidget = 'global-search' + this.get('wkey');
            return this.get('content').length > 0 && this.get('searchKey');
        }.property('content.@each'),

        getSearchResult: function getSearchResult() {
            this.getSymbolSearchResult();
            this.getContentSearchResult();
        },

        getSymbolSearchResult: function getSymbolSearchResult() {
            var searchKey = this.get('searchKey');
            var exclInst = this.get('excludedInstruments');

            if (searchKey) {
                this.get('content').clear();

                if (searchKey.length >= _appConfig.default.searchConfig.minCharLenForSymbol) {
                    this.priceService.searchDS.filterSymbolSearchResults(searchKey, _sharedService.default.userSettings.currentLanguage, exclInst, {
                        isOptionMode: this.get('isOptionMode')
                    });

                    if (_appConfig.default.customisation.isMobile) {
                        this.setAddToWatchListIconCss();
                    }
                }
            }
        },

        getContentSearchResult: function getContentSearchResult() {
            var searchKey = this.get('searchKey');
            var that = this;
            this.get('filteredContent').clear();

            if (this.get('isEnabledContentSearch') && searchKey.length >= _appConfig.default.searchConfig.minCharLenForContent) {
                this.priceService.announcementDS.filterContentSearchResults(searchKey, _sharedService.default.userSettings.currentLanguage, this.isEnabledAnnSearch, this.isEnabledNewsSearch, function () {
                    that.onContentResultNotFound(that);
                });
            }
        },

        onContentResultNotFound: function onContentResultNotFound(that) {
            //eslint-disable-line
            that.set('isAnnUnavailable', true);
        },

        onItemSelected: function onItemSelected(item, link) {
            var that = this;
            var stopNotify = this.get('stopGlobalNotification');

            this.priceService.searchDS.addRecentSearchedItem(item);

            if (!stopNotify) {
                var isTablet = this.get('isTablet');

                if (isTablet) {
                    _sharedService.default.getService('sharedUI').getService('mainPanel').onSymbolChanged(item.sym, item.exg, item.inst);
                }

                _appEvents.default.onSymbolChanged(item.sym, item.exg, item.inst, isTablet ? 1 : link);
                _appEvents.default.onExchangeChanged(isTablet ? 1 : link, item.exg);

                // Change Exchange of whole app - Mobile
                if (that.get('isMobile') && item.exg !== _sharedService.default.userSettings.price.currentExchange) {
                    that.priceService.exchangeDS.getExchangeMetadata(item.exg, true);
                }
            }

            _utils.default.analyticsService.trackEvent(this.get('analyticsKey'), _utils.default.Constants.GAActions.search, ['query:' + this.get('searchKey') + ',sym:', item.sym, '~', item.exg].join(''));
            this.sendAction('clickAction', item);
            this.sendAction('closePopup');
            this._unbindKeyboardShortcuts();
        },

        _onWidgetSelected: function _onWidgetSelected(item, widgetId) {
            var symbolPopupView = _controllerFactory.default.createController(this.container, 'view:symbol-popup-view');

            _utils.default.analyticsService.trackEvent(this.get('analyticsKey'), _utils.default.Constants.GAActions.rowIconClick, ['popup:', widgetId, ',', 'sym:', item.sym, '~', item.exg].join(''));
            symbolPopupView.show(widgetId, item.sym, item.exg, item.inst);
            this.sendAction('closePopup');
            this._unbindKeyboardShortcuts();
        },

        searchKeyDidChange: function () {
            if (this.get('searchKey')) {
                _ember.default.set(this, 'searchKey', this.get('searchKey').toUpperCase());
            }

            // Every time a key is pressed, this event fires, and that event will start the filter in given time interval
            _ember.default.run.debounce(this, this.getSearchResult, _priceConstants.default.TimeIntervals.SearchAutoCompleteInterval);
        }.observes('searchKey'),

        initCustomWL: function () {
            this.priceService.watchListDS.initializeCustomWL();
        }.on('init'),

        setAddToWatchListIconCss: function setAddToWatchListIconCss() {
            var symbolIndex = 0;
            var content = this.get('content')[symbolIndex];
            var that = this;

            if (content && content.contents) {
                _ember.default.$.each(content.contents, function (key, symbol) {
                    symbol.set('isAddedToCustomWatchList', that.priceService.watchListDS.isSymbolAvailableInCustomWL(symbol));
                });
            }
        },

        _unbindKeyboardShortcuts: function _unbindKeyboardShortcuts() {
            if (!_appConfig.default.customisation.isMobile && !this.get('isTablet')) {
                Mousetrap.unbind('arrowdown');
                Mousetrap.unbind('arrowup');
                Mousetrap.unbind('enter');
                Mousetrap.unbind('tab');
                Mousetrap.unbind('esc');
            }
        },

        _setSymbolCollection: function _setSymbolCollection(widgetKey) {
            _ember.default.$('div.search-row.full-width').find('a.cursor-pointer').removeClass('highlight-fore-color');
            _ember.default.appGlobal.activeWidget = widgetKey;
        },

        _selectSymbol: function _selectSymbol(symbolCollection, isWidget) {
            if (symbolCollection && symbolCollection.get('sym')) {
                if (!isWidget) {
                    this.onItemSelected(symbolCollection);
                } else {
                    this._onWidgetSelected(symbolCollection, this.currentButton);
                }
            }
        },

        actions: {
            addStocksToCustomWL: function addStocksToCustomWL(content) {
                var myFavoriteCustomWL = 0;

                content.set('isAddedToCustomWatchList', true);
                this.priceService.watchListDS.addStocksToCustomWL(content, myFavoriteCustomWL);
            },

            searchClick: function searchClick() {
                this.getSearchResult();
            },

            onItemSelected: function onItemSelected(item, link) {
                this.onItemSelected(item, link);
            },

            onWidgetSelected: function onWidgetSelected(item, widgetId) {
                this._onWidgetSelected(item, widgetId);
            }
        }
    });
});
define('universal-app/components/gms-tab-panel', ['exports', 'ember', '../models/shared/shared-service', '../models/price/price-constants', '../models/shared/language/language-data-store'], function (exports, _ember, _sharedService, _priceConstants, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'components/gms-tab-panel',
        gmsTabs: [],
        app: _languageDataStore.default.getLanguageObj(),

        settings: {
            tabs: [{ id: 0, displayKey: 'summary', assetType: _priceConstants.default.GmsType.Summary }, { id: 1, displayKey: 'indices', assetType: _priceConstants.default.GmsType.Indices }, { id: 2, displayKey: 'commodities', assetType: _priceConstants.default.GmsType.Commodities }, { id: 3, displayKey: 'currencies', assetType: _priceConstants.default.GmsType.Currencies }]
        },

        onPrepareData: function () {
            var that = this;
            var app = this.get('app');
            var gmsTabs = this.get('settings').tabs;

            _ember.default.$.each(gmsTabs, function (key, tab) {
                tab.displayName = app.lang.labels[tab.displayKey];
                tab.css = tab.assetType === that.get('assetType') ? 'active' : '';
            });

            this.set('gmsTabs', gmsTabs);
        }.on('didInsertElement'),

        actions: {
            onGmsTabItemSelected: function onGmsTabItemSelected(tabItem) {
                var menuContent = this.get('menuContent');

                if (menuContent) {
                    _sharedService.default.getService('sharedUI').getService('mainPanel').onRenderTabItems(menuContent.tab[tabItem.id]);
                }
            }
        }
    });
});
define('universal-app/components/mobile/global-search', ['exports', 'ember', '../../models/shared/shared-service', '../../models/price/business-entities/search-result-item', '../../config/price-widget-config', '../../models/price/price-constants', '../../helpers/responsive-handler', '../global-search', '../../models/shared/language/language-data-store', '../../utils/utils'], function (exports, _ember, _sharedService, _searchResultItem, _priceWidgetConfig, _priceConstants, _responsiveHandler, _globalSearch, _languageDataStore, _utils) {
    'use strict';

    exports.default = _globalSearch.default.extend({
        layoutName: 'components/mobile/global-search',
        priceService: _sharedService.default.getService('price'),
        app: _languageDataStore.default.getLanguageObj(),

        isMultipleExgAvailable: false,
        isEnableOptionSearch: false,
        isCall: true,

        showContent: function () {
            var that = this;

            _ember.default.run.later(function () {
                that.checkResponsive(that);
            }, 100);
        }.observes('content', 'content.[]'),

        searchKeyDidChange: function () {
            _ember.default.set(this, 'searchKey', this.get('searchKey').toUpperCase());

            if (this.get('isEnableOptionSearch')) {
                // Every time a key is pressed, this event fires, and that event will start the filter in given time interval
                _ember.default.run.debounce(this, this.getOptionSymbolSearchResult, _priceConstants.default.TimeIntervals.SearchAutoCompleteInterval);
            } else {
                _ember.default.run.debounce(this, this.getSearchResult, _priceConstants.default.TimeIntervals.SearchAutoCompleteInterval);
            }
        }.observes('searchKey'),

        isSymbolSelect: function () {
            this.set('isDisableBtn', !this.get('selectedSymbol'));
        }.observes('selectedSymbol'),

        getOptionSymbolSearchResult: function () {
            if (this.get('isEnableOptionSearch')) {
                // Focus search area
                _ember.default.$('#titlePanelSearchArea').find('#titlePanelSeach')[0].focus();

                var searchKey = this.get('searchKey');
                var exclInst = this.get('excludedInstruments.length') > 0 ? this.get('excludedInstruments') : [_utils.default.AssetTypes.Option];

                // Clear data
                this.set('optionSymbolContent', []);
                this.set('optionDates', []);
                this.set('optionPrices', []);
                this.set('selectedSymbol', '');
                this.set('isShowNotAvailable', false);

                if (searchKey) {
                    this.priceService.searchDS.filterSymbolSearchResults(searchKey, _sharedService.default.userSettings.currentLanguage, exclInst, { isOptionMode: false });
                    this.setAddToWatchListIconCss();
                }
            }
        }.observes('isEnableOptionSearch'),

        changeSymbol: function () {
            var selectedSymbol = this.get('selectedSymbol');

            if (selectedSymbol) {
                var status = this.get('isCall') ? 'call' : 'put';
                this.set('selectedSymbolDes', this._getSymbolDes(selectedSymbol, status));
            }
        }.observes('isCall'),

        getOptionSymbol: function () {
            if (this.get('isEnableOptionSearch') && this.get('content')) {
                var content = this.get('content');
                var contentFirstElement = content[0];

                if (contentFirstElement && contentFirstElement.contents && contentFirstElement.contents[0]) {
                    // Content available
                    _ember.default.run.debounce(this, this.sortOptionSymbol, content, 600);
                }
            }
        }.observes('content', 'content.[]'),

        sortOptionSymbol: function sortOptionSymbol(content) {
            var optionSymbolContent = [];

            if (content && content.length > 0) {
                _ember.default.$.each(content, function (key, group) {
                    if (group.contents && group.contents.length > 0) {
                        _ember.default.$.each(group.contents, function (id, symbol) {
                            optionSymbolContent[optionSymbolContent.length] = _ember.default.Object.create({ sym: symbol.sym, exg: symbol.exg, inst: symbol.inst, lDes: symbol.lDes });
                        });
                    }
                });
            }

            this.set('optionSymbolContent', optionSymbolContent);

            if (optionSymbolContent[0]) {
                this._onFirstSymbolSelect(optionSymbolContent[0], '0');
            }
        },

        checkResponsive: function checkResponsive(controller) {
            if (controller.get('content')) {
                var content = controller.get('content');
                var contentFirstElement = content[0];

                if (contentFirstElement && contentFirstElement.contents && contentFirstElement.contents[0]) {
                    // Content available
                    controller.setResponsive(controller, content);
                }
            }
        },

        setResponsive: function setResponsive(controller, content) {
            controller.set('responsive', _responsiveHandler.default.create({ controller: controller, widgetId: 'globalSearch', callback: controller.onResponsive }));

            _ember.default.$.each(content, function (key, group) {
                _ember.default.$.each(group.contents, function (id, symbol) {
                    var responsiveKey = [key, id].join('');

                    _ember.default.set(symbol, 'responsiveID', responsiveKey);
                    controller.responsive.addList(responsiveKey, [{ id: 'row-' + responsiveKey, width: 5 }]);
                });
            });

            controller.responsive.initialize();
        },

        onResponsive: function onResponsive() {
            // Called from responsive-handler when responsive level changed.
        },

        setModalPopup: function () {
            var that = this;
            var firstElementIndex = 0;
            var additionalHeight = 0;
            var maxOffScreenLength = '25000px';
            var searchMenuHeight = 62;
            var searchSubmenuHeight = 29;
            var optionSubmenuHeight = 35;

            var searchPanel = _ember.default.$('#nav-mid');
            var popup = _ember.default.$('#modalContainer');
            var fullHeight = _ember.default.$('#mainPanelOutletContainer');
            var notificationPanel = _ember.default.$('#notificationPanel');
            var horizontalNav = _ember.default.$('#hnavPanel');
            var popupFirstElement = popup[firstElementIndex];

            // Generate popup off the screen
            if (popup && popup.length > 0) {
                popupFirstElement.style.left = maxOffScreenLength;
                popupFirstElement.style.top = maxOffScreenLength;
            }

            // Change popup styles dynamically after showing modal popup
            _ember.default.run.later(function () {
                if (notificationPanel && notificationPanel.length > 0) {
                    additionalHeight = notificationPanel[firstElementIndex].offsetHeight + 1;
                }

                if (horizontalNav && horizontalNav.length > 0) {
                    additionalHeight = additionalHeight + horizontalNav[firstElementIndex].offsetHeight + 1;
                }

                if (searchPanel && popup && popup.length > 0 && searchPanel.length > 0) {
                    var popUpHeight = fullHeight[firstElementIndex].offsetHeight + additionalHeight;
                    var searchPopUpHeight = popUpHeight + 'px';
                    var searchPopUpHeightMenu = popUpHeight - searchSubmenuHeight + 'px';

                    // set height for option symbol column height
                    var searchPopUpHeightOption = popUpHeight - searchMenuHeight + 'px';
                    var dateColumnHeight = popUpHeight - searchMenuHeight - optionSubmenuHeight + 'px';

                    that.set('searchPopUpHeight', searchPopUpHeightMenu);
                    that.set('searchPopUpHeightOption', searchPopUpHeightOption);
                    that.set('dateColumnHeight', dateColumnHeight);
                    popup[firstElementIndex].style.width = searchPanel[firstElementIndex].offsetWidth + 'px';

                    _ember.default.$('div.search-pop-up').css('height', searchPopUpHeight);

                    popup[firstElementIndex].style.height = searchPopUpHeight;
                    popup.addClass('container-back-color');
                    popup.addClass('border-bottom hide-scroll left-zero');
                }

                that.getSymbolResultContent(that);
                that.setMultipleExgAvailability(that);

                popup[firstElementIndex].style.left = 0;
                popup[firstElementIndex].style.top = 0;
            }, 50);
        }.on('didInsertElement'),

        getSymbolResultContent: function getSymbolResultContent(controller) {
            var symbol;
            var groupingObj;
            var myFavoriteSymbols;
            var isAvailableInRecentArray = false;
            var config = _priceWidgetConfig.default.globalSearch.groups;
            var recentSearched = controller.priceService.searchDS.getRecentSearchedItems();
            var searchResultContent = recentSearched.slice();
            var customWl = controller.priceService.watchListDS.customWatchListArray;
            var languageObj = _languageDataStore.default.getLanguageObj();

            if (customWl.length > 0) {
                _ember.default.$.each(customWl, function (customWlKey, watchList) {
                    myFavoriteSymbols = watchList.stkArray;

                    _ember.default.$.each(myFavoriteSymbols, function (wlKey, WLSymbol) {
                        isAvailableInRecentArray = false;

                        _ember.default.$.each(searchResultContent, function (key, recentSymbol) {
                            if (recentSymbol.sym === WLSymbol.sym) {
                                isAvailableInRecentArray = true;
                            }
                        });

                        if (!isAvailableInRecentArray) {
                            var stockFromStore = controller.priceService.stockDS.getStock(WLSymbol.exg, WLSymbol.sym);
                            var exchange = controller.priceService.exchangeDS.getExchange(stockFromStore.exg);

                            symbol = _searchResultItem.default.create();
                            groupingObj = config[stockFromStore.ast] ? config[stockFromStore.ast] : config.other;

                            symbol.setData({
                                sym: stockFromStore.sym,
                                exg: stockFromStore.exg,
                                dSym: stockFromStore.dSym,
                                inst: stockFromStore.inst,
                                lDes: stockFromStore.lDes,
                                sDes: stockFromStore.sDes,
                                ast: stockFromStore.ast,
                                subMkt: stockFromStore.subMkt,
                                dispProp1: stockFromStore.get('dispProp1'),
                                groupingObj: groupingObj
                            });

                            symbol.set('de', exchange.de);
                            symbol.set('isAddedToCustomWatchList', controller.priceService.watchListDS.isSymbolAvailableInCustomWL(symbol));

                            searchResultContent[searchResultContent.length] = symbol;
                        }
                    });
                });
            }

            _ember.default.$.each(searchResultContent, function (key, searchResult) {
                var stockFromStore = controller.priceService.stockDS.getStock(searchResult.exg, searchResult.sym);
                searchResult.set('lDes', stockFromStore.get('lDes') ? stockFromStore.get('lDes') : searchResult.get('lDes'));
            });

            controller.get('content').clear();

            controller.get('content').pushObject(_ember.default.Object.create({
                name: languageObj.lang.labels.recentSymbols,
                contents: searchResultContent
            }));
        },

        setMultipleExgAvailability: function setMultipleExgAvailability(controller) {
            var userExg = _sharedService.default.getService('price').userDS.get('userExchg');

            if (userExg && userExg.length > 1) {
                controller.set('isMultipleExgAvailable', true);
            }
        },

        _onItemSelected: function _onItemSelected(item) {
            _sharedService.default.userState.globalArgs.exg = item.exg;

            // Check whether notification enabled for particular search
            var stopNotify = this.get('stopGlobalNotification');

            if (!stopNotify) {
                var currentExchange = _sharedService.default.userSettings.price.currentExchange;

                // Since exchange is changed globally when setting globalArgs.exg (for Mobile), exchange meta should be retrieved
                // If meta data already available, only meta version will be checked, this is further restricted by checking current exg
                if (item.exg !== currentExchange) {
                    this.priceService.exchangeDS.getExchangeMetadata(item.exg, true);
                }
            }

            // this._super(item, link); // Enable this after fixing issue in Exg
        },

        // Commented to fixed popup height issue

        // setPopUpHeight: function () {
        //    this.resizeEventHandler = this.setModalPopup.bind(this);
        //    window.addEventListener('resize', this.resizeEventHandler);
        // } .on('didInsertElement'),

        _getSymbolDes: function _getSymbolDes(symObj, status) {
            // Generate symbol description
            var optPrd = _utils.default.moment(_utils.default.formatters.convertStringToDate(symObj.optPrd)).format('MMM YYYY');

            return [symObj.baseSym, optPrd, symObj.strkPrc, status].join(' ');
        },

        _setSymbol: function _setSymbol(symObj, status) {
            this.set('selectedSymbol', symObj);
            this.set('selectedSymbolDes', this._getSymbolDes(symObj, status));
        },

        _sendOptionDataRequest: function _sendOptionDataRequest(exg, sym, index) {
            var that = this;

            this.priceService.sendOptionChainRequest({ sym: sym, exg: exg, inst: 0, optPeriod: '', optListType: 0, nearMon: 0, optType: 2 }, function () {
                that._setOptionPeriod(exg, sym, index);
            });

            this.set('isDateLoading', true);
        },

        _setOptionPeriod: function _setOptionPeriod(exg, sym, index) {
            var that = this;
            var dataID = index ? index : '0';
            var optPeriods = this.priceService.optionPeriodDS.getOptionPeriodList(exg, sym);

            if (optPeriods.length) {
                this.set('isShowNotAvailable', false);

                _ember.default.$.each(optPeriods, function (id, period) {
                    // Check period.optPrd is date string or not (Date string has 8 characters 'YYYYMMDD')
                    period.isMonthOption = period.optPrd && period.optPrd.length < 8;
                });

                this.set('optionDates', optPeriods);

                // Set default view
                var stockArr = this.priceService.optionStockDS.getOptionStockList(exg, sym, optPeriods[0].optPrd);

                if (stockArr.length) {
                    var fistPriceRow = stockArr[0];
                    var status = this.get('isCall') ? 'call' : 'put';

                    this.set('optionPrices', stockArr);
                    this._setSymbol(fistPriceRow, status);

                    _ember.default.run.later(function () {
                        that._addRowColor('symbol-' + dataID, that.previousSymbolID, 'active-symbol-row');
                        that._addRowColor('date-0', that.previousDateID, 'active-date-row');
                        that._addRowColor('price-0', that.previousPriceID, 'active-price-row');

                        that.previousSymbolID = 'symbol-' + dataID;
                        that.previousDateID = 'date-0';
                        that.previousPriceID = 'price-0';
                    }, 10);
                }
            } else {
                this.set('isShowNotAvailable', true);
            }

            this.set('isDateLoading', false);
        },

        _setOptionPrice: function _setOptionPrice(exg, sym, optPrd, index) {
            var that = this;
            var stockArr = this.priceService.optionStockDS.getOptionStockList(exg, sym, optPrd);
            var selectDateID = 'date-' + index;

            this.set('isPriceLoading', false);
            this.set('optionPrices', stockArr);
            this._addRowColor(selectDateID, this.previousDateID, 'active-date-row');
            this.set('previousDateID', selectDateID);

            // Set default view
            if (stockArr.length) {
                var fistPriceRow = stockArr[0];
                var status = this.get('isCall') ? 'call' : 'put';

                this._setSymbol(fistPriceRow, status);

                _ember.default.run.later(function () {
                    that._addRowColor('price-0', undefined, 'active-price-row');
                    that.previousPriceID = 'price-0';
                }, 10);
            }
        },

        _addRowColor: function _addRowColor(selectSymbolID, previousSymbolID, className) {
            if (previousSymbolID) {
                _ember.default.$('[data-id=' + previousSymbolID + ']').removeClass(className);
            }

            _ember.default.$('[data-id=' + selectSymbolID + ']').addClass(className);
        },

        _onFirstSymbolSelect: function _onFirstSymbolSelect(row, index) {
            this.set('optionDates', []);
            this.set('optionPrices', []);
            this.set('selectedSymbol', '');
            this.set('isShowNotAvailable', false);

            var selectSymbolID = 'symbol-' + index;
            this._addRowColor(selectSymbolID, this.previousSymbolID, 'active-symbol-row');

            this._sendOptionDataRequest(row.exg, row.sym, index);
            this.set('previousSymbolID', selectSymbolID);
        },

        isOptionSymbolSearchEnabled: function () {
            return this.priceService.userDS.get('isOptionSymbolSearchEnabled');
        }.property(),

        actions: {
            onOptionSymbolSelect: function onOptionSymbolSelect(row, index) {
                this._onFirstSymbolSelect(row, index);
            },

            onOptionDateSelect: function onOptionDateSelect(row, index) {
                var that = this;

                this.set('optionPrices', []);
                this.set('selectedSymbol', '');

                var stockArr = this.priceService.optionStockDS.getOptionStockList(row.exg, row.sym, row.optPrd);

                if (stockArr.length > 0) {
                    this._setOptionPrice(row.exg, row.sym, row.optPrd, index);
                } else {
                    var optType = row.optPrd.length === 8 ? 1 : 0;
                    this.set('isPriceLoading', true);

                    this.priceService.sendOptionChainRequest({ sym: row.sym, exg: row.exg, inst: 0, optPeriod: row.optPrd, optListType: 1, nearMon: 0, optType: optType }, function () {
                        that._setOptionPrice(row.exg, row.sym, row.optPrd, index);
                    });
                }
            },

            onOptionPriceSelect: function onOptionPriceSelect(row, index) {
                var selectPriceID = 'price-' + index;
                var status = this.get('isCall') ? 'call' : 'put';

                this._setSymbol(row, status);

                // Add color to selected row
                this._addRowColor(selectPriceID, this.previousPriceID, 'active-price-row');
                this.set('previousPriceID', selectPriceID);
            },

            onSelect: function onSelect() {
                var symbol = this.get('selectedSymbol');

                if (symbol) {
                    if (this.get('isCall')) {
                        this.onItemSelected(symbol.cStock, this.get('defaultLink'));
                    } else {
                        this.onItemSelected(symbol.pStock, this.get('defaultLink'));
                    }
                }
            }
        }
    });
});
define('universal-app/components/mobile/watchlist-menu-popup', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'components/mobile/watchlist-menu-popup',

        sortByTrades: false,
        detailedView: false,

        initWatchListMenu: function () {
            this.set('sortByTrades', this.get('sortProperties') && this.get('sortProperties')[0] === 'trades');

            if (!this.get('secondarySort')) {
                this.set('secondarySort', { sortCols: ['dispProp1'], sortAsc: true });
            }
        }.on('init'),

        onSortByTrades: function () {
            var secondarySort = this.get('secondarySort');

            this.set('sortAscending', this.get('sortByTrades') ? false : secondarySort.sortAsc);
            this.set('sortProperties', this.get('sortByTrades') ? ['trades'] : secondarySort.sortCols);
        }.observes('sortByTrades'),

        click: function click(event) {
            event.stopPropagation();
        }
    });
});
define('universal-app/components/more-columns-dropdown', ['exports', './base-popup'], function (exports, _basePopup) {
    'use strict';

    exports.default = _basePopup.default.extend({
        layoutName: 'components/more-columns-dropdown'
    });
});
define('universal-app/components/more-markets-dropdown', ['exports', 'ember', '../models/shared/shared-service', '../models/shared/language/language-data-store'], function (exports, _ember, _sharedService, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'components/more-markets-dropdown',

        app: _languageDataStore.default.getLanguageObj(),
        defaultExchangeForDropdown: '',
        exchanges: [],
        disableMoreMarkets: true,
        subscriptionKey: 'moreMarketsDropdown',
        isAddAllOption: false,

        setExchanges: function () {
            this.set('priceService', _sharedService.default.getService('price'));

            if (this.get('isShowOnlyDefault')) {
                this.set('valueKey', null);
            } else {
                this.set('valueKey', 'code');
            }

            this.priceService.subscribePriceExchangeSummaryMetaReady(this, [this.subscriptionKey, this.get('key')].join('-'));
            this._setExchangeDesc();
        }.on('init'),

        onPriceExchangeSummaryMetaReady: function onPriceExchangeSummaryMetaReady() {
            this._setExchangeDesc();
        },

        _setExchangeDesc: function _setExchangeDesc() {
            var that = this;
            var exchangeArray = [];
            var allLabel = this.get('app').lang.labels.all;
            var optionAll = { code: '', des: allLabel, displayDesc: allLabel, isShowAll: true };
            var exchangeCodes = this.priceService.userDS.get('userExchg');

            if (this.get('isAddAllOption')) {
                exchangeArray = [optionAll];
            }

            if (!this._isDestroying()) {
                if (this.get('isShowDefaultMarket')) {
                    var exg = this.get('exg') ? this.get('exg') : _sharedService.default.userState.globalArgs.exg;
                    var defaultExg = this.priceService.exchangeDS.getExchange(exg);

                    this.set('defaultExchangeForDropdown', { code: defaultExg.code, des: defaultExg.des, displayDesc: defaultExg.de });
                } else if (this.get('isAddAllOption')) {
                    this.set('defaultExchangeForDropdown', optionAll);
                } else {
                    this.set('defaultExchangeForDropdown', { code: '', displayDesc: this.get('app').lang.labels.moreMarkets });
                }
            }

            _ember.default.$.each(exchangeCodes, function (key, item) {
                if (item) {
                    var description = that.priceService.exchangeDS.getExchange(item);
                    exchangeArray.pushObject({ code: item, des: description.des, displayDesc: description.de });

                    if (that.get('exchangeValue') && that.get('exchangeValue') === description) {
                        that.set('value', item);
                    }
                }
            });

            if (exchangeArray && !this._isDestroying()) {
                this.set('exchanges', exchangeArray);
            }

            if (!this._isDestroying()) {
                this.set('disableMoreMarkets', this.get('isAddAllOption') ? false : exchangeArray.length <= 1);
            }
        },

        _isDestroying: function _isDestroying() {
            return this.get('isDestroyed') || this.get('isDestroying'); // TODO: [Bashitha] Move this implementation to a common place
        },

        actions: {
            setExchange: function setExchange(option) {
                this.sendAction('setExchange', option);
            }
        }
    });
});
define('universal-app/components/password-change', ['exports', './modal-popup', '../config/app-config', '../utils/utils', '../models/shared/shared-service', '../models/shared/language/language-data-store'], function (exports, _modalPopup, _appConfig, _utils, _sharedService, _languageDataStore) {
    'use strict';

    exports.default = _modalPopup.default.extend({
        layoutName: 'components/password-change',
        app: _languageDataStore.default.getLanguageObj(),

        service: {},
        isEnabledTransactionPw: _appConfig.default.customisation.isEnabledTransactionPwChange,
        isEnabledPwRules: _appConfig.default.customisation.isEnabledPwRules,
        isCancelEnabled: true,
        forceChgPwAuthTyp: 2,

        ChangePwStatus: {
            Success: 1,
            Failed: 0,
            FailedLocked: 3
        },

        L2AuthType: {
            NoPassword: 1,
            PasswordOnce: 2,
            Password: 3
        },

        /* *
         * Temporarily overwriting this method to register  this component to sharedService.
         */
        expose: function () {
            var parentController = this.get('targetObject');
            var exposedName = this.get('id');
            parentController.set(exposedName, this);

            if (this.get('isRegistered')) {
                _sharedService.default.getService('sharedUI').registerService('changePasswordPopup', this);
            }
        }.on('didInsertElement'),

        _onChangePasswordResponse: function _onChangePasswordResponse(chgPwdSts, chgPwMsg) {
            if (chgPwdSts === this.ChangePwStatus.Success) {
                var app = this.get('app');

                this.send('closeModalPopup');
                this.set('message', '');

                _utils.default.messageService.showMessage(app.lang.messages.passwordChange, _utils.default.Constants.MessageTypes.Info, false, app.lang.labels.changePassword);

                if (this.get('isMobile')) {
                    _sharedService.default.getService('priceUI').closeChildView('components/password-change');
                }

                if (_appConfig.default.customisation.isTradingEnabled && _sharedService.default.getService('trade').userDS.authSts === _sharedService.default.getService('trade').constants.AuthStatus.NotActivated) {
                    _utils.default.applicationSessionHandler.logout();
                }
            } else {
                this.set('message', chgPwMsg);
            }
        },

        isPopupEnabled: function () {
            if (!_appConfig.default.customisation.isMobile) {
                this.set('popupCss', this.get('isEnabledTransactionPw') ? 'change-tx-password' : 'change-login-password');
            }

            return this.get('isEnabled') || _appConfig.default.customisation.isMobile;
        }.property('isEnabled'),

        _changePassword: function _changePassword() {
            var that = this;
            var reqObj = {};
            var app = this.get('app');

            var currentPwd = this.get('currentPassword');
            var newPwd = this.get('newPassword');
            var confirmPwd = this.get('confirmPassword');
            var currentTxPwd = this.get('currentTxPassword');
            var newTxPwd = this.get('newTxPassword');
            var confirmTxPwd = this.get('confirmTxPassword');

            var isLoginPwdChange = _utils.default.validators.isAvailable(currentPwd) && _utils.default.validators.isAvailable(newPwd) && _utils.default.validators.isAvailable(confirmPwd);
            var isTxPwdChange = _utils.default.validators.isAvailable(currentTxPwd) && _utils.default.validators.isAvailable(newTxPwd) && _utils.default.validators.isAvailable(confirmTxPwd);
            var isLoginPwdEntered = _utils.default.validators.isAvailable(currentPwd) || _utils.default.validators.isAvailable(newPwd) || _utils.default.validators.isAvailable(confirmPwd);
            var isTxPwdEntered = _utils.default.validators.isAvailable(currentTxPwd) || _utils.default.validators.isAvailable(newTxPwd) || _utils.default.validators.isAvailable(confirmTxPwd);
            var isMismatch = newPwd !== confirmPwd;

            this.set('message', '');
            this.set('crntPwdLblCss', '');
            this.set('newPwdLblCss', '');
            this.set('cfmPwdLblCss', '');
            this.set('txCrntPwdLblCss', '');
            this.set('txNewPwdLblCss', '');
            this.set('txCfmPwdLblCss', '');

            if (this.get('isEnabledTransactionPw') && isTxPwdChange) {
                var isTxPwdMismatch = newTxPwd !== confirmTxPwd;
            }

            if (!isLoginPwdChange && !isTxPwdChange) {
                if (isLoginPwdEntered || !isTxPwdEntered && !isLoginPwdEntered) {
                    this._setMandatoryFieldsCss(currentPwd, 'crntPwdLblCss');
                    this._setMandatoryFieldsCss(newPwd, 'newPwdLblCss');
                    this._setMandatoryFieldsCss(confirmPwd, 'cfmPwdLblCss');
                }

                if (isTxPwdEntered || !isTxPwdEntered && !isLoginPwdEntered) {
                    this._setMandatoryFieldsCss(currentTxPwd, 'txCrntPwdLblCss');
                    this._setMandatoryFieldsCss(newTxPwd, 'txNewPwdLblCss');
                    this._setMandatoryFieldsCss(confirmTxPwd, 'txCfmPwdLblCss');
                }

                this.set('message', app.lang.messages.mandatoryFields);
                return;
            } else {
                if (isMismatch && isTxPwdMismatch) {
                    this.set('message', app.lang.messages.passwordMismatch + '<br>' + app.lang.messages.txPasswordMismatch);
                    return;
                } else if (isMismatch) {
                    this.set('message', app.lang.messages.passwordMismatch);
                    return;
                } else if (isTxPwdMismatch) {
                    this.set('message', app.lang.messages.txPasswordMismatch);
                    return;
                }
            }

            if (isLoginPwdChange) {
                reqObj.username = this.get('username');
                reqObj.oldPwd = _utils.default.crypto.generateHashedText(currentPwd);
                reqObj.newPwd = _utils.default.crypto.generateHashedText(newPwd);
            }

            if (isTxPwdChange) {
                reqObj.oldTxPwd = _utils.default.crypto.generateHashedText(currentTxPwd);
                reqObj.newTxPwd = _utils.default.crypto.generateHashedText(newTxPwd);
            }

            if (!this.isEnabledPwRules || (!this.isEnabledTransactionPw || !isTxPwdEntered || this.isTxPwdRulesMatch) && (!isLoginPwdEntered || this.isPwdRulesMatch)) {
                this.get('service').changePassword(reqObj, function (authSts, authMsg) {
                    that._onChangePasswordResponse(authSts, authMsg);
                });

                this.set('message', app.lang.messages.pleaseWait);
            } else {
                this.set('message', app.lang.messages.didNotMeetPwRules);
            }

            this.set('currentPassword', '');
            this.set('newPassword', '');
            this.set('confirmPassword', '');

            if (this.get('isEnabledTransactionPw')) {
                this.set('currentTxPassword', '');
                this.set('newTxPassword', '');
                this.set('confirmTxPassword', '');
            }
        },

        _setMandatoryFieldsCss: function _setMandatoryFieldsCss(value, lbl) {
            if (!_utils.default.validators.isAvailable(value)) {
                this.set(lbl, 'down-fore-color');
            }
        },

        isMobile: function () {
            return _appConfig.default.customisation.isMobile;
        }.property(),

        actions: {
            onSave: function onSave() {
                this._changePassword();
            },

            onCancel: function onCancel() {
                this.set('currentPassword', '');
                this.set('newPassword', '');
                this.set('confirmPassword', '');

                if (this.get('isEnabledTransactionPw')) {
                    this.set('currentTxPassword', '');
                    this.set('newTxPassword', '');
                    this.set('confirmTxPassword', '');
                }

                this.send('closeModalPopup');
            },

            showModalPopup: function showModalPopup(isCancelEnabled) {
                var service, userName;

                if (_appConfig.default.customisation.isTradingEnabled) {
                    service = _sharedService.default.getService('trade');
                    userName = service.userDS.lgnAls;
                } else {
                    service = _sharedService.default.getService('price');
                    userName = service.userDS.username;
                }

                this.set('isCancelEnabled', isCancelEnabled);
                this.set('service', service);

                if (!this.get('isEnabled')) {
                    this.set('isEnabled', true);
                    this.set('message', '');
                    this.set('crntPwdLblCss', '');
                    this.set('newPwdLblCss', '');
                    this.set('cfmPwdLblCss', '');
                    this.set('txCrntPwdLblCss', '');
                    this.set('txNewPwdLblCss', '');
                    this.set('txCfmPwdLblCss', '');
                    this.set('username', _sharedService.default.userSettings.username ? _sharedService.default.userSettings.username : userName);

                    // TODO [Arosha] Enable below after testing transaction password logic
                    // var l2AuthTyp = this.get('service').userDS.l2AuthTyp;
                    //
                    // if (l2AuthTyp === this.L2AuthType.PasswordOnce || l2AuthTyp === this.L2AuthType.Password) {
                    //    this.set('isEnabledTransactionPw', true);
                    // }
                }
            }
        }
    });
});
define('universal-app/components/password-rules-check', ['exports', 'ember', '../config/app-config', '../models/shared/language/language-data-store', '../utils/utils'], function (exports, _ember, _appConfig, _languageDataStore, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        app: _languageDataStore.default.getLanguageObj(),

        isUNameRulesMatch: false,
        isPwdRulesMatch: false,

        passwordRules: _appConfig.default.customisation.passwordRules,
        usernameRules: _appConfig.default.customisation.usernameRules,

        passwordRulesCollection: [],
        userNameRulesCollection: [],

        initialize: function () {
            var passwordRulesCollection;
            var userNameRulesCollection;
            var langMsg = this.app.lang.messages;
            var passwordRules = this.passwordRules;
            var usernameRules = this.usernameRules;

            if (passwordRules) {
                passwordRulesCollection = [{ ruleName: langMsg.passwordValidLength.replace('[length]', [this.passwordRules.minLength, this.passwordRules.maxLength].join('-')), isEnabled: passwordRules.checkLength }, { ruleName: langMsg.passwordNumberRequired, isEnabled: passwordRules.checkContainNumber }, { ruleName: langMsg.passwordStartCharacter, isEnabled: passwordRules.checkStartWithLetter }, { ruleName: langMsg.passwordContainSimple, isEnabled: passwordRules.checkContainSmallLetter }, { ruleName: langMsg.passwordContainCapital, isEnabled: passwordRules.checkContainCapitalLetter }, { ruleName: langMsg.passwordContainIdentical, isEnabled: passwordRules.checkIdenticalCharacter }, { ruleName: langMsg.passwordContainSpecial, isEnabled: passwordRules.checkSpecialCharacter }, { ruleName: langMsg.passwordNotSame, isEnabled: passwordRules.checkUsernameMatch }, { ruleName: langMsg.passwordOnlyAlphaNumeric, isEnabled: passwordRules.checkOnlyAlphaNumeric }, { ruleName: langMsg.passwordNotStartWithNumber, isEnabled: passwordRules.checkNotStartWithNumber }, { ruleName: langMsg.passwordContainLetter, isEnabled: passwordRules.checkContainLetter }];

                this.set('passwordRulesCollection', passwordRulesCollection);
            }

            if (usernameRules) {
                userNameRulesCollection = [{ ruleName: langMsg.userNameValidLength.replace('[length]', [this.usernameRules.minLength, this.usernameRules.maxLength].join('-')), isEnabled: usernameRules.checkLength }, { ruleName: langMsg.userNameContainAplhaNumeric, isEnabled: usernameRules.checkEngAlphaNumeric }, { ruleName: langMsg.userNameNotStartNum, isEnabled: usernameRules.checkStartWithLetter }, { ruleName: langMsg.userNameContainIdentical, isEnabled: usernameRules.checkIdenticalCharacter }];

                this.set('userNameRulesCollection', userNameRulesCollection);
            }

            this.set('isUNameRulesMatch', this.isOnlyPwdCheck);
            this.checkUserNamePasswordRules();
        }.on('init'),

        checkUserNamePasswordRules: function checkUserNamePasswordRules() {
            var userName = this.get('userName');
            var password = this.get('password');
            var isPasswordAvailable = _utils.default.validators.isAvailable(password);
            var isUserNameAvailable = _utils.default.validators.isAvailable(userName);

            if (isUserNameAvailable && this.usernameRules) {
                this.set('isUNameRulesMatch', this.validateUserName(userName));
            } else {
                this.userNameRulesCollection.forEach(function (ruleObj) {
                    _ember.default.set(ruleObj, 'satisfiedIcon', '');
                });

                this.set('isPwdSubmitDisabled', true);
            }

            if (isPasswordAvailable) {
                this.set('isPwdRulesMatch', this.validatePassword(password, userName));
            } else {
                this.passwordRulesCollection.forEach(function (ruleObj) {
                    _ember.default.set(ruleObj, 'satisfiedIcon', '');
                });

                this.set('isPwdSubmitDisabled', true);
            }

            this.checkPwdSubmitEnabled();
        },

        checkPwdSubmitEnabled: function checkPwdSubmitEnabled() {
            var isPwdSubmitDisabled = (this.get('isOnlyPwdCheck') || _utils.default.validators.isAvailable(this.get('userName'))) && _utils.default.validators.isAvailable(this.get('password')) && _utils.default.validators.isAvailable(this.get('retypePwd'));
            this.set('isPwdSubmitDisabled', !isPwdSubmitDisabled);
        },

        usernamePasswordDidChange: function () {
            _ember.default.run.debounce(this, this.checkUserNamePasswordRules, 100);
            _ember.default.run.debounce(this, this.checkPwdSubmitEnabled, 100);
        }.observes('userName', 'password', 'retypePwd'),

        validatePassword: function validatePassword(pwd, userName) {
            var pwdLength = this.passwordRules.checkLength ? this.passwordLength(pwd, this.passwordRules.maxLength, this.passwordRules.minLength, this.passwordRulesCollection[0]) : true;
            var pwdContainNumber = this.passwordRules.checkContainNumber ? this.passwordContainNumber(pwd, this.passwordRulesCollection[1]) : true;
            var pwdStartWithLetter = this.passwordRules.checkStartWithLetter ? this.passwordStartWithLetter(pwd, this.passwordRulesCollection[2]) : true;
            var pwdContainSmallLetter = this.passwordRules.checkContainSmallLetter ? this.passwordContainSmallLetter(pwd, this.passwordRulesCollection[3]) : true;
            var pwdContainCapitalLetter = this.passwordRules.checkContainCapitalLetter ? this.passwordContainCapitalLetter(pwd, this.passwordRulesCollection[4]) : true;
            var pwdIdenticalChar = this.passwordRules.checkIdenticalCharacter ? this.passwordIdenticalCharacter(pwd, this.passwordRulesCollection[5]) : true;
            // var pwdConsecutiveChar = this.passwordRules.checkConsecutiveCharacter ? this.passwordConsecutiveCharacter(pwd, this.passwordRulesCollection[6]) : true;
            var pwdSpecialChar = this.passwordRules.checkSpecialCharacter ? this.passwordSpecialCharacter(pwd, this.passwordRulesCollection[6]) : true;
            var pwdUsernameMatch = this.passwordRules.checkUsernameMatch ? this.passwordUserNameMatch(pwd, userName, this.passwordRulesCollection[7]) : true;
            var pwdOnlyAlphaNumeric = this.passwordRules.checkOnlyAlphaNumeric ? this.passwordOnlyAlphanumeric(pwd, this.passwordRulesCollection[8]) : true;
            var pwdNotStartWithNumber = this.passwordRules.checkNotStartWithNumber ? this.passwordNotStartWithNumber(pwd, this.passwordRulesCollection[9]) : true;
            var pwdContainLetter = this.passwordRules.checkContainLetter ? this.passwordContainLetter(pwd, this.passwordRulesCollection[10]) : true;

            return pwdLength && pwdContainNumber && pwdStartWithLetter && pwdContainSmallLetter && pwdContainCapitalLetter && pwdIdenticalChar && pwdSpecialChar && pwdUsernameMatch && pwdOnlyAlphaNumeric && pwdNotStartWithNumber && pwdContainLetter;
        },

        validateUserName: function validateUserName(username) {
            var unLength = this.usernameRules.checkLength ? this.passwordLength(username, this.usernameRules.maxLength, this.usernameRules.minLength, this.userNameRulesCollection[0]) : true;
            var unAlphaNumVal = this.usernameRules.checkEngAlphaNumeric ? this.usernameEngAlphaNumVal(username, this.userNameRulesCollection[1]) : true;
            var unStartWithLetter = this.usernameRules.checkStartWithLetter ? this.passwordStartWithLetter(username, this.userNameRulesCollection[2]) : true;
            var unIdenticalChar = this.usernameRules.checkIdenticalCharacter ? this.passwordIdenticalCharacter(username, this.userNameRulesCollection[3]) : true;

            return unLength && unAlphaNumVal && unStartWithLetter && unIdenticalChar;
        },

        passwordLength: function passwordLength(password, max, min, ruleObj) {
            if (!(password.length >= min && password.length <= max)) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordContainNumber: function passwordContainNumber(password, ruleObj) {
            if (!/\d/.test(password)) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordContainLetter: function passwordContainLetter(password, ruleObj) {
            if (!/[a-zA-Z]/.test(password)) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordStartWithLetter: function passwordStartWithLetter(password, ruleObj) {
            if (!/^[a-zA-Z]+$/.test(password.substring(0, 1))) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordNotStartWithNumber: function passwordNotStartWithNumber(password, ruleObj) {
            if (/^[0-9]+$/.test(password.substring(0, 1))) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordOnlyAlphanumeric: function passwordOnlyAlphanumeric(password, ruleObj) {
            if (!/^[a-zA-Z0-9]+$/.test(password)) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordContainSmallLetter: function passwordContainSmallLetter(password, ruleObj) {
            if (password.toUpperCase() !== password) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

                return true;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

            return false;
        },

        passwordContainCapitalLetter: function passwordContainCapitalLetter(password, ruleObj) {
            if (password.toLowerCase() !== password) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

                return true;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

            return false;
        },

        passwordIdenticalCharacter: function passwordIdenticalCharacter(password, ruleObj) {
            if (/([\w\\])\1{2}/.test(password)) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordSpecialCharacter: function passwordSpecialCharacter(password, ruleObj) {
            if (/^[a-zA-Z0-9- ]*$/.test(password) === true) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordUserNameMatch: function passwordUserNameMatch(pwd, username, ruleObj) {
            if (pwd === username) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        passwordConsecutiveCharacter: function passwordConsecutiveCharacter(password, ruleObj) {
            var regex = /(abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz|012|123|234|345|456|567|678|789)+/ig;

            if (regex.test(password)) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        },

        usernameEngAlphaNumVal: function usernameEngAlphaNumVal(uName, ruleObj) {
            if (!/^[a-zA-Z0-9- ]*$/.test(uName)) {
                _ember.default.set(ruleObj, 'satisfiedIcon', 'down-fore-color glyphicon glyphicon-remove');

                // this.set('message', 'User Name must contain only English aplha-numeric characters');
                return false;
            }

            _ember.default.set(ruleObj, 'satisfiedIcon', 'up-fore-color glyphicon glyphicon-ok');

            return true;
        }
    });
});
define('universal-app/components/rename-custom-workspace', ['exports', './base-popup'], function (exports, _basePopup) {
    'use strict';

    exports.default = _basePopup.default.extend({
        layoutName: 'components/rename-custom-workspace'
    });
});
define('universal-app/components/renew-subscription', ['exports', 'ember', '../models/shared/shared-service', '../config/app-config', '../utils/utils'], function (exports, _ember, _sharedService, _appConfig, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        _renewSubscription: function _renewSubscription() {
            window.open(this._generateRenewUrl(), '_blank');
        },

        _generateRenewUrl: function _generateRenewUrl() {
            return _utils.default.requestHelper.generateQueryString(_appConfig.default.subscriptionConfig.renewSubscriptionPath, {
                user: _sharedService.default.getService('price').userDS.username,
                language: _sharedService.default.userSettings.get('currentLanguage')
            });
        },

        actions: {
            renewSubscription: function renewSubscription() {
                this._renewSubscription();
            }
        }
    });
});
define('universal-app/components/session-timeout', ['exports', 'ember', './modal-popup', '../config/app-config', '../models/shared/shared-service', '../models/shared/language/language-data-store'], function (exports, _ember, _modalPopup, _appConfig, _sharedService, _languageDataStore) {
    'use strict';

    exports.default = _modalPopup.default.extend({
        layoutName: 'components/session-timeout',
        isCancelEnabled: true,
        currentSessionTime: '',
        sessionTimeout: '',
        minMaxTimeoutRange: '2 - 120 ',
        defaultSessionTime: _appConfig.default.customisation.applicationIdleCheckConfig.defaultIdleTime,
        app: _languageDataStore.default.getLanguageObj(),

        /* *
         * Temporarily overwriting this method to register  this component to sharedService.
         */
        expose: function () {
            var parentController = this.get('targetObject');
            var exposedName = this.get('id');

            parentController.set(exposedName, this);

            if (this.get('isRegistered')) {
                _sharedService.default.getService('sharedUI').registerService('sessionTimeoutPopup', this);
            }

            this.getSessionTimeoutValue();
            this.set('minMaxRangeLabel', this.get('minMaxTimeoutRange') + this.get('app').lang.labels.minutes);
        }.on('didInsertElement'),

        getSessionTimeoutValue: function getSessionTimeoutValue() {
            var timeValue = _sharedService.default.userSettings.get('sessionTimeout');
            var sessionTime = timeValue ? timeValue : this.get('defaultSessionTime');

            this.set('defaultSessionTime', sessionTime);
            this.set('currentSessionTime', [sessionTime, this.get('app').lang.labels.minutes].join(' '));
        },

        isPopupEnabled: function () {
            if (!_appConfig.default.customisation.isMobile) {
                this.set('popupCss', this.get('isEnabledTransactionPw') ? 'change-tx-password' : 'change-login-password');
            }

            return this.get('isEnabled');
        }.property('isEnabled'),

        _changeSessionTimeout: function _changeSessionTimeout() {
            var that = this;
            var app = this.get('app');
            var newValue = this.get('newSession');

            // TODO: [Chathuranga] Update this with OMS request validation
            if (newValue >= 2 && newValue <= 120) {
                _sharedService.default.userSettings.set('sessionTimeout', newValue);
                _sharedService.default.userSettings.save();

                this.set('message', app.lang.labels.done);

                _ember.default.run.later(function () {
                    that.send('closeModalPopup');
                }, 1000);
            } else {
                this.set('message', app.lang.messages.sessionTimeoutErrorValidation);
            }
        },

        actions: {
            onSave: function onSave() {
                this._changeSessionTimeout();
            },

            onCancel: function onCancel() {
                this.set('newSession', '');

                this.send('closeModalPopup');
            },

            showModalPopup: function showModalPopup() {
                if (!this.get('isEnabled')) {
                    this.set('isEnabled', true);
                    this.set('newSession', '');
                    this.set('message', '');
                }
            }
        }
    });
});
define('universal-app/components/stk-specific-components/cash-map', ['exports', 'ember', '../../utils/utils', '../../config/app-config'], function (exports, _ember, _utils, _appConfig) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'components/stk-specific-components/cash-map',
        prevBarUpdatedValue: 0,
        prevBarUpdatedSymbol: '',
        isMobile: false,

        didInsertElement: function didInsertElement() {
            this.set('isMobile', _appConfig.default.customisation.isMobile);
            this.setStyles();
        },

        cashMapSettings: {
            styles: {
                upForeColor: 'up-fore-color',
                downForeColor: 'down-fore-color',
                upBackColor: 'up-back-color',
                downBackColor: 'down-back-color'
            }
        },

        calculateCash: function () {
            var stock = this.get('stock');
            var value;

            if (stock) {
                value = stock.cit / (stock.cit + stock.cot);
            }

            return isNaN(value) ? 0 : value * 100;
        }.property('stock.cit', 'stock.cot'),

        showValue: function () {
            return _utils.default.formatters.formatNumber(this.get('calculateCash'), 2) + '%';
        }.property('calculateCash'),

        setStyles: function () {
            var prevBarUpdatedValue = this.get('prevBarUpdatedValue');
            var progress = parseInt(this.get('calculateCash'), 10);
            var currentSymbol = this.get('stock.sym');

            if (progress === 0 || Math.abs(progress - prevBarUpdatedValue) > 5 || currentSymbol !== this.get('prevBarUpdatedSymbol')) {
                var progressBackStyle = progress >= 0 && progress <= 50 && !this.get('isMobile') ? this.cashMapSettings.styles.downBackColor : this.cashMapSettings.styles.upBackColor;
                this.set('prevBarUpdatedValue', progress);
                this.set('prevBarUpdatedSymbol', currentSymbol);
                this.set('progressBackStyle', progressBackStyle);
                this.set('progressWidth', 'width:' + progress + '%;'); // Used inline styles since width is dynamically
            }
        }.observes('calculateCash'),

        valueStyle: function () {
            var calculateCash = this.get('calculateCash');

            return calculateCash > 50 ? this.cashMapSettings.styles.upForeColor : calculateCash !== 0 ? this.cashMapSettings.styles.downForeColor : this.cashMapSettings.styles.foreColor;
        }.property('calculateCash')
    });
});
define('universal-app/components/stk-specific-components/days-range', ['exports', 'ember', '../../utils/utils'], function (exports, _ember, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'components/stk-specific-components/days-range',
        prevBarUpdatedValue: 0,
        prevBarUpdatedSymbol: '',
        styles: '',

        didInsertElement: function didInsertElement() {
            this.setStyles();
        },

        dayRangeSettings: {
            styles: {
                green: 'up-back-color',
                red: 'down-back-color'
            }
        },

        dayRangePosition: function () {
            var stock = this.get('stock');
            var value = 0;

            if (stock) {
                var lowValue = stock.low;
                var highValue = stock.high;
                var currentValue = stock.ltp;
                var diff = highValue - lowValue;

                if (diff !== 0) {
                    value = parseFloat((currentValue - lowValue) / diff * 100);
                    value = value > 0 && value < 100 ? value : 0;
                }

                return _utils.default.formatters.formatNumber(value, stock.deci);
            }
        }.property('stock.ltp', 'stock.low', 'stock.high'),

        highValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.high, stock.deci);
        }.property('stock.high'),

        lowValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.low, stock.deci);
        }.property('stock.low'),

        lastTradeValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.ltp, stock.deci);
        }.property('stock.ltp'),

        setStyles: function () {
            var prevBarUpdatedValue = this.get('prevBarUpdatedValue');
            var progress = parseInt(this.get('dayRangePosition'), 10);
            var currentSymbol = this.get('stock.sym');

            if (progress === 0 || Math.abs(progress - prevBarUpdatedValue) > 5 || currentSymbol !== this.get('prevBarUpdatedSymbol')) {
                var backgroundColor = progress >= 0 && progress <= 50 ? this.dayRangeSettings.styles.red : this.dayRangeSettings.styles.green;
                this.set('progressBarClass', backgroundColor);
                this.set('prevBarUpdatedValue', progress);
                this.set('prevBarUpdatedSymbol', currentSymbol);
                this.set('styles', 'width:' + progress + '%;'); // Used inline styles since width is dynamically
            }
        }.observes('dayRangePosition')
    });
});
define('universal-app/components/stk-specific-components/fifty-two-wk-hl', ['exports', 'ember', '../../utils/utils'], function (exports, _ember, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'components/stk-specific-components/fifty-two-wk-hl',
        prevBarUpdatedValue: 0,
        prevBarUpdatedSymbol: '',
        styles: '',

        didInsertElement: function didInsertElement() {
            this.setStyles();
        },

        fiftyTwoWkSettings: {
            styles: {
                green: 'up-back-color',
                red: 'down-back-color'
            }
        },

        fiftyTwoWkPosition: function () {
            var stock = this.get('stock');
            var value = 0;

            if (stock) {
                var lowValue = stock.l52;
                var highValue = stock.h52;
                var currentValue = stock.ltp;
                var diff = highValue - lowValue;

                if (diff !== 0) {
                    value = parseFloat((currentValue - lowValue) / diff * 100);
                    value = value > 0 && value < 100 ? value : 0;
                }

                return _utils.default.formatters.formatNumber(value, stock.deci);
            }

            return value;
        }.property('stock.ltp', 'stock.l52', 'stock.h52'),

        highValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.h52, stock.deci);
        }.property('stock.h52'),

        lowValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.l52, stock.deci);
        }.property('stock.l52'),

        setStyles: function () {
            var prevBarUpdatedValue = this.get('prevBarUpdatedValue');
            var progress = parseInt(this.get('fiftyTwoWkPosition'), 10);
            var backgroundColor = progress >= 0 && progress <= 50 ? this.fiftyTwoWkSettings.styles.red : this.fiftyTwoWkSettings.styles.green;
            var currentSymbol = this.get('stock.sym');

            if (progress === 0 || Math.abs(progress - prevBarUpdatedValue) > 5 || currentSymbol !== this.get('prevBarUpdatedSymbol')) {
                this.set('progressBarClass', backgroundColor);
                this.set('prevBarUpdatedValue', progress);
                this.set('prevBarUpdatedSymbol', currentSymbol);
                this.set('styles', 'width:' + progress + '%;'); // Used inline styles since width is dynamically
            }
        }.observes('fiftyTwoWkPosition')
    });
});
define('universal-app/components/sub-markets-dropdown', ['exports', 'ember', '../models/shared/shared-service', '../models/shared/language/language-data-store'], function (exports, _ember, _sharedService, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'components/sub-markets-dropdown',

        app: _languageDataStore.default.getLanguageObj(),
        exchange: {},
        exg: '',
        subMarkets: [],
        currentMarketId: '',
        isAddAllOption: false,
        allDescription: '',
        isLanguageChanged: false,

        isSubMarketsAvailable: function () {
            return this.get('subMarkets.length') >= 1;
        }.property('subMarkets.length'),

        isDisableSubMarkets: function () {
            return this.get('subMarkets.length') <= 1;
        }.property('subMarkets.length'),

        didInsertElement: function didInsertElement() {
            _sharedService.default.getService('price').subscribePriceExchangeSummaryMetaReady(this, ['sub-market', this.get('key')].join('-'));
            this.setSubMarkets();
        },

        onChangingLanguage: function () {
            _ember.default.run.once(this, this._loadSubMarkets);
        }.observes('isLanguageChanged'),

        willDestroyElement: function willDestroyElement() {
            this.set('subMarkets', []);
            this.set('exchange', {});
            this.set('currentMarketId', '');

            this._super();
        },

        onPriceExchangeSummaryMetaReady: function onPriceExchangeSummaryMetaReady() {
            this.setSubMarkets();
        },

        setSubMarkets: function () {
            _ember.default.run.once(this, this._loadSubMarkets);
        }.observes('exchange.subMarketArray.@each'),

        _loadSubMarkets: function _loadSubMarkets() {
            var currentSubMkt = this.get('currentMarketId');
            var prevExg = this.get('exg');
            var currentExg = this.get('exchange.exg');
            var allDescription = this.get('allDescription');
            var optionAll = { marketId: '', lDes: allDescription ? allDescription : this.get('app').lang.labels.all, isShowAll: true };

            if (!this._isDestroying()) {
                if (!currentSubMkt || currentSubMkt === -1 || prevExg !== '' && prevExg !== undefined && prevExg !== currentExg) {
                    this.set('currentMarketId', _sharedService.default.getService('price').exchangeDS.getDefaultSubMarket(currentExg));
                    this.set('exg', this.get('exchange.exg'));
                } else if (prevExg === '') {
                    this.set('exg', this.get('exchange.exg'));
                }

                if (this.get('isAddAllOption')) {
                    this.set('currentSubMarket', optionAll);
                    this.set('currentMarketId', '');
                    this.set('subMarkets', _ember.default.A([optionAll]));
                } else {
                    this.set('subMarkets', _ember.default.A());
                }

                if (this.get('exchange.subMarketArray')) {
                    this.subMarkets.pushObjects(this.get('exchange.subMarketArray'));
                }
            }
        },

        _isDestroying: function _isDestroying() {
            return this.get('isDestroyed') || this.get('isDestroying'); // TODO: [Bashitha] Move this implementation to a common place
        },

        actions: {
            setSubMarket: function setSubMarket(option) {
                this.sendAction('onSubMarketChanged', option.marketId);
            }
        }
    });
});
define('universal-app/components/symbol-click-menu-popup', ['exports', 'ember', '../components/base-context-menu', '../utils/utils', '../models/shared/language/language-data-store', '../config/app-config', '../models/shared/shared-service', '../models/price/price-constants'], function (exports, _ember, _baseContextMenu, _utils, _languageDataStore, _appConfig, _sharedService, _priceConstants) {
    'use strict';

    exports.default = _baseContextMenu.default.extend({
        layoutName: 'components/symbol-click-menu-popup',

        // Pop up Widget Parameters
        selectedSymbol: undefined,
        mainContextMenu: [],
        contextMap: {},

        app: _languageDataStore.default.getLanguageObj(),
        userSettings: _sharedService.default.userSettings,

        isArabic: function () {
            return this.userSettings.currentLanguage === 'AR';
        }.property('userSettings.currentLanguage'),

        load: function () {
            this.set('priceService', _sharedService.default.getService('price'));
            this.set('priceUIService', _sharedService.default.getService('priceUI'));

            var sharedUIService = _sharedService.default.getService('sharedUI');
            var callbackFunc = this.priceUIService.showPopupWidget;

            var contextItem = [[{ view: { key: 'detailQuote', name: this.get('app').lang.labels.detailQuote, iconClass: 'icon-list-ul', shortcut: 'Alt + D' }, config: { callbackFunc: callbackFunc, controllerString: 'view:symbol-popup-view' }, args: { tabId: 0 } }, { view: { key: 'timeAndSales', name: this.get('app').lang.labels.timeAndSales, iconClass: 'icon-clock', shortcut: 'Alt + T' }, config: { callbackFunc: callbackFunc, controllerString: 'view:symbol-popup-view' }, args: { tabId: 1 } }, { view: { key: 'depthByPrice', name: this.get('app').lang.labels.depthByPrice, iconClass: 'icon-add-fav', shortcut: 'Alt + P' }, config: { callbackFunc: callbackFunc, controllerString: 'view:symbol-popup-view' }, args: { tabId: 2 } }, { view: { key: 'depthByOrder', name: this.get('app').lang.labels.depthByOrder, iconClass: 'icon-sitemap', shortcut: 'Alt + O' }, config: { callbackFunc: callbackFunc, controllerString: 'view:symbol-popup-view' }, args: { tabId: 3 } }, { view: { key: 'chart', name: this.get('app').lang.labels.chart, iconClass: 'icon-chart-bar', shortcut: 'Alt + C' }, config: { callbackFunc: callbackFunc, controllerString: 'view:symbol-popup-view' }, args: { tabId: 4 } }, { view: { key: 'alerts', name: this.get('app').lang.labels.alerts, iconClass: 'icon-bell', shortcut: 'Alt + A' }, config: { callbackFunc: callbackFunc, controllerString: 'view:symbol-popup-view' }, args: { tabId: 5 } }]];

            this.set('fullContextMenu', contextItem);

            if (_appConfig.default.customisation.isTradingEnabled) {
                // Save for later usage when binding dynamic order sides
                this.contextMap['trade'] = {
                    controllerString: 'controller:trade/widgets/order-ticket/order-ticket-portrait',
                    routeString: 'trade/widgets/order-ticket/order-ticket-portrait',
                    viewName: 'view:widget-popup-view',
                    callbackFunc: sharedUIService.showPopupWidget.bind(sharedUIService)
                };

                this.set('tradeService', _sharedService.default.getService('trade'));
                var tradeContextData = this.contextMap['trade'];

                var trdContextItems = [{
                    view: { key: 'orderSide_1', name: this.get('app').lang.labels.orderSide_1, menuClass: 'up-fore-color', iconClass: 'icon-arrow-circle-up up-fore-color', shortcut: 'Alt + B' },
                    config: { callbackFunc: tradeContextData.callbackFunc, controllerString: tradeContextData.controllerString, routeString: tradeContextData.routeString, viewName: tradeContextData.viewName },
                    args: { tabId: '1' }
                }, {
                    view: { key: 'orderSide_2', name: this.get('app').lang.labels.orderSide_2, menuClass: 'down-fore-color', iconClass: 'icon-arrow-circle-down down-fore-color', shortcut: 'Alt + S' },
                    config: { callbackFunc: tradeContextData.callbackFunc, controllerString: tradeContextData.controllerString, routeString: tradeContextData.routeString, viewName: tradeContextData.viewName },
                    args: { tabId: '2' }
                }];

                this.set('tradeContextMenu', trdContextItems);
            }
        }.observes('app.lang').on('init'),

        prepareContextMenu: function prepareContextMenu(rowData) {
            this.set('selectedSymbol', rowData);
            this._prepareCommonContextMenu(rowData);

            if (_appConfig.default.customisation.isTradingEnabled) {
                this._prepareTradeContextMenu(rowData);
            }
        },

        bindKeyboardShortcut: function bindKeyboardShortcut(wkey) {
            var that = this;

            // Keyboard functions
            Mousetrap.bind('alt+d', function () {
                // Show Detail Quote
                that.priceUIService.showPopupWidget({ container: that.container, controllerString: 'view:symbol-popup-view' }, { tabId: 0, sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst });

                _utils.default.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+d', ',', 'popup:', 0, ',', 'sym:', that.get('selectedSymbol.sym'), '~', that.get('selectedSymbol.exg')].join(''));
                return false;
            }, wkey);

            Mousetrap.bind('alt+t', function () {
                // Show Time and Sales
                that.priceUIService.showPopupWidget({ container: that.container, controllerString: 'view:symbol-popup-view' }, { tabId: 1, sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst });

                _utils.default.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+t', ',', 'popup:', 1, ',', 'sym:', that.get('selectedSymbol.sym'), '~', that.get('selectedSymbol.exg')].join(''));
                return false;
            }, wkey);

            Mousetrap.bind('alt+p', function () {
                // Show Depth by Price
                if (that.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByPrice, _priceConstants.default.WindowType.MarketDepthByPriceAdvanced], that.selectedSymbol.exg)) {
                    that.priceUIService.showPopupWidget({ container: that.container, controllerString: 'view:symbol-popup-view' }, { tabId: 2, sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst });

                    _utils.default.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+p', ',', 'popup:', 2, ',', 'sym:', that.get('selectedSymbol.sym'), '~', that.get('selectedSymbol.exg')].join(''));
                }

                return false;
            }, wkey);

            Mousetrap.bind('alt+o', function () {
                // Show Depth by Order
                if (that.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByOrder, _priceConstants.default.WindowType.MarketDepthByOrderAdvanced], that.selectedSymbol.exg)) {
                    that.priceUIService.showPopupWidget({ container: that.container, controllerString: 'view:symbol-popup-view' }, { tabId: 3, sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst });

                    _utils.default.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+o', ',', 'popup:', 3, ',', 'sym:', that.get('selectedSymbol.sym'), '~', that.get('selectedSymbol.exg')].join(''));
                }

                return false;
            }, wkey);

            Mousetrap.bind('alt+c', function () {
                // Show Chart
                that.priceUIService.showPopupWidget({ container: that.container, controllerString: 'view:symbol-popup-view' }, { tabId: 4, sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst });

                _utils.default.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+c', ',', 'popup:', 4, ',', 'sym:', that.get('selectedSymbol.sym'), '~', that.get('selectedSymbol.exg')].join(''));
                return false;
            }, wkey);

            Mousetrap.bind('alt+a', function () {
                // Show Alerts
                that.priceUIService.showPopupWidget({ container: that.container, controllerString: 'view:symbol-popup-view' }, { tabId: 5, sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst });

                _utils.default.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+a', ',', 'popup:', 5, ',', 'sym:', that.get('selectedSymbol.sym'), '~', that.get('selectedSymbol.exg')].join(''));
                return false;
            }, wkey);

            if (_appConfig.default.customisation.isTradingEnabled) {
                var controllerString = 'controller:trade/widgets/order-ticket/order-ticket-portrait';
                var routeString = 'trade/widgets/order-ticket/order-ticket-portrait';
                var viewName = 'view:widget-popup-view';
                var sharedUIService = _sharedService.default.getService('sharedUI');

                Mousetrap.bind('alt+b', function () {
                    // Show Buy Order ticket
                    sharedUIService.showPopupWidget({ container: that.container, controllerString: controllerString, routeString: routeString, viewName: viewName }, { tabId: '1', sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst });

                    _utils.default.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+b', ',', 'popup:', 5, ',', 'sym:', that.get('clickedRowSymbol'), '~', that.get('clickedRowExchange')].join(''));
                    return false;
                }, wkey);

                Mousetrap.bind('alt+s', function () {
                    // Show Buy Order ticket
                    sharedUIService.showPopupWidget({ container: that.container, controllerString: controllerString, routeString: routeString, viewName: viewName }, { tabId: '2', sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst });

                    _utils.default.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+s', ',', 'popup:', 6, ',', 'sym:', that.get('clickedRowSymbol'), '~', that.get('clickedRowExchange')].join(''));
                    return false;
                }, wkey);

                /* Mousetrap.bind('alt+l', function () {
                    // Show Buy Order ticket
                    sharedUIService.showPopupWidget({container: that.container, controllerString: controllerString, routeString: routeString, viewName: viewName}, {tabId: '2', sym: that.selectedSymbol.sym, exg: that.selectedSymbol.exg, inst: that.selectedSymbol.inst, qty: that.selectedSymbol.qty});
                      utils.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', 'alt+l', ',',
                        'popup:', 7, ',', 'sym:', that.get('clickedRowSymbol'), '~', that.get('clickedRowExchange')].join(''));
                    return false;
                }, wkey);*/
            }
        },

        _prepareCommonContextMenu: function _prepareCommonContextMenu(rowData) {
            var winTypeAvailable;
            var fullMenu = this.get('fullContextMenu');
            var that = this;

            _ember.default.$.each(fullMenu, function (outerIndex, outerMenu) {
                _ember.default.$.each(outerMenu, function (innerIndex, innerMenu) {
                    var isDelayedExg = that.priceService.userDS.isExchangeDelayed(rowData.exg);

                    if (innerMenu.view) {
                        switch (innerMenu.view.key) {
                            case 'depthByOrder':
                                winTypeAvailable = that.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByOrder, _priceConstants.default.WindowType.MarketDepthByOrderAdvanced], rowData.exg);

                                if (!_utils.default.AssetTypes.isEquityAssetType(rowData.inst) || !winTypeAvailable || isDelayedExg) {
                                    innerMenu.view.displayStyle = 'display-none';
                                }

                                break;

                            case 'timeAndSales':
                                if (!_utils.default.AssetTypes.isEquityAssetType(rowData.inst) || isDelayedExg) {
                                    innerMenu.view.displayStyle = 'display-none';
                                }

                                break;

                            case 'depthByPrice':
                                winTypeAvailable = that.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByPrice, _priceConstants.default.WindowType.MarketDepthByPriceAdvanced], rowData.exg);

                                if (!_utils.default.AssetTypes.isEquityAssetType(rowData.inst) || !winTypeAvailable || isDelayedExg) {
                                    innerMenu.view.displayStyle = 'display-none';
                                }

                                break;

                            case 'chart':
                                if (_utils.default.AssetTypes.isOption(rowData.inst)) {
                                    innerMenu.view.displayStyle = 'display-none';
                                }

                                break;

                            case 'alerts':
                                if (_utils.default.AssetTypes.isIndices(rowData.inst) || !_appConfig.default.customisation.isAlertEnabled) {
                                    innerMenu.view.displayStyle = 'display-none';
                                }

                                break;

                            default:
                                innerMenu.view.displayStyle = '';
                                break;
                        }
                    }
                });
            });

            this.set('fullContextMenu', fullMenu);
        },

        _prepareTradeContextMenu: function _prepareTradeContextMenu(rowData) {
            var tradeMenu = this.get('tradeContextMenu');
            this._amendDynamicOrderSides(tradeMenu, rowData.exg);

            var displayStyle = !_utils.default.AssetTypes.isTradableAssetType(rowData.inst) ? 'display-none' : '';

            _ember.default.$.each(tradeMenu, function (index, menu) {
                menu.view.displayStyle = displayStyle;
            });

            this.set('tradeContextMenu', tradeMenu);
        },

        _amendDynamicOrderSides: function _amendDynamicOrderSides(tradeMenu, exchange) {
            var that = this;
            var tradeMetaDS = this.get('tradeService.tradeMetaDS');
            var tradeConstants = this.get('tradeService.constants');
            var tradeContextData = this.contextMap['trade'];

            if (tradeMetaDS) {
                var orderSideList = tradeMetaDS.getOrderSideMapByExchange(exchange);

                _ember.default.$.each(orderSideList, function (index, orderSide) {
                    if (orderSide.code !== tradeConstants.OrderSide.Buy && orderSide.code !== tradeConstants.OrderSide.Sell) {
                        var sideKey = 'orderSide_' + orderSide.code;

                        tradeMenu[tradeMenu.length] = {
                            view: {
                                key: sideKey,
                                name: that.get('app').lang.labels[sideKey],
                                iconClass: 'icon-trade'
                            },
                            config: {
                                callbackFunc: tradeContextData.callbackFunc,
                                controllerString: tradeContextData.controllerString,
                                routeString: tradeContextData.routeString,
                                viewName: tradeContextData.viewName
                            },
                            args: {
                                tabId: orderSide.code
                            }
                        };
                    }
                });
            }
        },

        _setRightClickMenu: function _setRightClickMenu(config, args) {
            // Add selected symbol details to args object
            args.sym = this.selectedSymbol.sym;
            args.exg = this.selectedSymbol.exg;
            args.inst = this.selectedSymbol.inst;
            config.container = this.container;

            if (args.tabId === 7) {
                // Todo [Anushka] Move the delete symbol option to watch-list data store
                this.priceService.watchListDS.deleteSymbol({ sym: args.sym, exg: args.exg }, this.associatedController.get('currentCustomWLId'));
                this.closeModal();
            } else {
                config.callbackFunc(config, args);
            }
        },

        closeModal: function closeModal() {
            var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');
            modal.send('closeModalPopup');
        },

        actions: {
            rightClickItem: function rightClickItem(config, args) {
                this._setRightClickMenu(config, args);
            },

            addNewWLWithStockCBAction: function addNewWLWithStockCBAction(id) {
                this.associatedController.onCustomWlSelect(id);
                this.closeModal();

                _utils.default.analyticsService.trackEvent(this.associatedController.get('gaKey'), _utils.default.Constants.GAActions.click, ['newWatchListName:', this.associatedController.get('currentCustomWLName'), '~', 'symbol:', this.get('selectedSymbol').sym].join(''));
            },

            addStocksFromMenu: function addStocksFromMenu(id) {
                this.priceService.watchListDS.addStocksToCustomWL(this.get('selectedSymbol'), id);
                this.closeModal();
            },

            position: function position() {
                var fullHeight = document.documentElement.clientHeight;
                var fullWidth = document.documentElement.clientWidth;
                var popupParent = _ember.default.$('#rightClickExpanded1');
                var popup = _ember.default.$('#popup');
                var OffsetBottom = 4;
                var leftPosition;

                if (_sharedService.default.userSettings.currentLanguage === 'AR') {
                    if (popupParent.offset().left > popup.width()) {
                        leftPosition = 0 - popupParent.innerWidth();
                    } else {
                        leftPosition = popupParent.innerWidth();
                        popup.css({ 'right': 'inherit' });
                    }
                } else {
                    leftPosition = fullWidth > popup.width() + popupParent.offset().left + popupParent.outerWidth() ? popupParent.innerWidth() : 0 - popupParent.innerWidth();
                }

                var top = fullHeight > popup.height() + popupParent.offset().top ? 0 : fullHeight - popup.outerHeight() - popupParent.offset().top - OffsetBottom;

                popup.css({ 'left': leftPosition, 'top': top, 'position': 'absolute' });
            }
        }
    });
});
define('universal-app/components/symbol-summary', ['exports', './base-component'], function (exports, _baseComponent) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        QuoteSettings: {
            IntZero: 0,
            EmptyString: '',

            Styles: {
                Green: 'up-fore-color',
                DarkGreen: 'up-fore-color',
                Red: 'down-fore-color',
                DarkRed: 'down-fore-color',
                White: 'white',
                UpArrow: 'glyphicon-triangle-top glyphicon ',
                DownArrow: 'glyphicon-triangle-bottom glyphicon '
            }
        },

        changeSign: '',
        perChgCss: '',
        changeCss: '',

        isShowLtp: true,

        didInsertElement: function didInsertElement() {
            this._super();
            this.updatePercentageChangeCss();
        },

        updatePercentageChangeCss: function () {
            var stockObj = this.get('stockObj');

            if (stockObj) {
                var pctChg = stockObj.get('pctChg');
                var changeSign = '';
                var perChgCss = '';
                var changeCss = '';

                if (pctChg > this.QuoteSettings.IntZero) {
                    changeSign = this.QuoteSettings.Styles.UpArrow;
                    perChgCss = this.QuoteSettings.Styles.Green;
                    changeCss = this.QuoteSettings.Styles.DarkGreen;
                } else if (pctChg < this.QuoteSettings.IntZero) {
                    changeSign = this.QuoteSettings.Styles.DownArrow;
                    perChgCss = this.QuoteSettings.Styles.Red;
                    changeCss = this.QuoteSettings.Styles.DarkRed;
                } else {
                    changeSign = this.QuoteSettings.EmptyString;
                    perChgCss = this.QuoteSettings.Styles.White;
                }

                this.set('changeSign', changeSign);
                this.set('perChgCss', perChgCss);
                this.set('changeCss', changeCss);
            }
        }.observes('stockObj.pctChg')
    });
});
define('universal-app/components/tell-a-friend', ['exports', 'ember', '../models/shared/shared-service', '../models/shared/language/language-data-store'], function (exports, _ember, _sharedService, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        app: _languageDataStore.default.getLanguageObj(),
        isSendEnabled: false,
        recipient1: '',
        recipient2: '',
        displayCss: '',

        sendEmail: function sendEmail(image) {
            var recipientsArray = [];

            if (this.get('recipient1')) {
                recipientsArray.pushObject(this.get('recipient1'));
            }

            if (this.get('recipient2')) {
                recipientsArray.pushObject(this.get('recipient2'));
            }

            _sharedService.default.getService('price').sendToEmail(image, recipientsArray.join(','));
        },

        _onLoadToCanvas: function _onLoadToCanvas() {
            var that = this;
            this.set('displayCss', 'display-none');

            html2canvas(document.body, {
                useCORS: true,
                allowTaint: true,

                onrendered: function onrendered(canvas) {
                    that.sendEmail(canvas.toDataURL('image/png'));
                    that.set('displayCss', '');
                }
            });
        },

        actions: {
            onLoadToCanvas: function onLoadToCanvas() {
                this._onLoadToCanvas();
            },

            onEnableTellAFried: function onEnableTellAFried() {
                this.set('isSendEnabled', true);
            }
        }
    });
});
define('universal-app/components/top-panel/exchange-status-1', ['exports', './exchange-status', '../../templates/components/top-panel/exchange-status-1'], function (exports, _exchangeStatus, _exchangeStatus2) {
    'use strict';

    exports.default = _exchangeStatus.default.extend({
        layout: _exchangeStatus2.default
    });
});
define('universal-app/components/top-panel/exchange-status-2', ['exports', './exchange-status', '../../templates/components/top-panel/exchange-status-2'], function (exports, _exchangeStatus, _exchangeStatus2) {
    'use strict';

    exports.default = _exchangeStatus.default.extend({
        layout: _exchangeStatus2.default
    });
});
define('universal-app/components/top-panel/exchange-status', ['exports', 'ember', '../../models/price/price-constants', './../base-component', '../../utils/utils', '../../templates/components/top-panel/exchange-status', '../../config/app-config'], function (exports, _ember, _priceConstants, _baseComponent, _utils, _exchangeStatus, _appConfig) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        exchange: undefined,
        exchanges: undefined,
        disableMoreMarkets: true,
        currentIndex: undefined,

        marketTime: '', // Formatted market time
        mktTime: '',
        isEnabledTimer: false, // Status of timer for market time
        marketStatusCSS: '', // Market status colour. ex : Green Market Open , red Market close
        prevUpdatedBar: 0,

        // Market Open, Close remaining time bar and countdown data
        openExgTime: '0000',
        closeExgTime: '0000',

        openTimeIndex: 0,
        closeTimeIndex: 0,
        currentTimeIndex: 0,
        criticalTimeIndex: 0,

        criticalTimeMin: 25,
        isCriticalTime: false,
        isMarketOpen: false,

        openTimeHour: 0,
        openTimeMins: 0,

        bar: '',
        progressStyle: '',
        showTime: false,
        showTimeText: '',

        layout: _exchangeStatus.default,

        isTablet: _appConfig.default.customisation.isTablet,

        topPanelSettings: {
            intZero: 0,
            emptyString: '',

            styles: {
                upColor: 'up-fore-color',
                downColor: 'down-fore-color',
                foreColor: 'fore-color'
            },

            timeInterval: {
                OneSecondInMillis: 1000,
                OneMinuteInMillis: 60000
            }
        },

        /* *
         * Update Market time of top panel
         * Observing exchange status and date and change ui accordingly
         * Observes : exchange.status and exchange.date
         */
        _updateMarketTime: function () {
            if (this.get('exchange.stat') === _priceConstants.default.MarketStatus.Close || this.get('exchange.stat') === _priceConstants.default.MarketStatus.PreClose) {
                var dateTimeStr = _utils.default.formatters.formatToDate(this.exchange.date, this.get('exchange.exg'));
                this.set('isEnabledTimer', false);
                this.set('marketTime', dateTimeStr);
            } else {
                if (!this.get('isEnabledTimer')) {
                    this.set('isEnabledTimer', true);
                    this._updateClock();
                }
            }
        }.observes('exchange.date', 'exchange.stat'),

        _setMarketTime: function () {
            var marketTime = _utils.default.formatters.getAdjustedDateTime(this.exchange.time, this.get('exchange.tzo'));
            this.set('mktTime', marketTime);
        }.observes('exchange.time'),

        exchangeArray: function () {
            var marketTime = _utils.default.formatters.getAdjustedDateTime(this.exchange.time, this.get('exchange.tzo'));
            this.set('mktTime', marketTime);
        }.observes('exchanges.@each'),

        _updateClock: function _updateClock() {
            var that = this;
            var sleepTime = this.topPanelSettings.timeInterval.OneSecondInMillis;

            _ember.default.run.once(this, this._updateUITime);

            setTimeout(function () {
                if (that.get('isEnabledTimer')) {
                    that._updateClock();
                }
            }, sleepTime);
        },

        _updateUITime: function _updateUITime() {
            var time = this.get('mktTime');
            var dateTimeStr;

            if (_utils.default.validators.isAvailable(time)) {
                time.setSeconds(time.getSeconds() + 1);
                this.set('mktTime', time);
                dateTimeStr = _utils.default.formatters.convertToDisplayTimeFormat(time);
                this.set('marketTime', dateTimeStr);
            }
        },

        /* *
         * Change market status colour according to market status
         * Observes : exchange.stat
         */
        _updateMarketStatusColor: function () {
            var marketStatusCSS;
            var stat = this.get('exchange.stat');
            var marketStatusElement = _ember.default.$('#marketSummaryExchangeStatusContainer');

            if (stat === _priceConstants.default.MarketStatus.Close || stat === _priceConstants.default.MarketStatus.PreClose) {
                marketStatusCSS = this.topPanelSettings.styles.downColor;
                marketStatusElement.addClass('ms-top-bar-exchange-status-alert');
            } else {
                marketStatusCSS = this.topPanelSettings.styles.upColor;
                marketStatusElement.addClass('ms-top-bar-exchange-status-alert');
            }

            setTimeout(function () {
                marketStatusElement.removeClass('ms-top-bar-exchange-status-alert');
            }, 1000);

            this.set('marketStatusCSS', marketStatusCSS);
        }.observes('exchange.stat'),

        /* * Start of progress bar - time
         * Calculate market open, close bar percentage
         * @param hour market time hours (GMT hours + time zone offset) int
         * @param min market time minutes (GMT minutes) int
         */
        _calculateIndex: function _calculateIndex(hour, min) {
            // Args are int
            var openHour = this.get('openTimeHour'); // Market open hours
            var openMin = this.get('openTimeMin'); // Market open minutes
            var hourIndex = hour - openHour;
            var minIndex = min - openMin;

            if (hourIndex >= 0) {
                return hourIndex * 3600 + minIndex * 60;
            } else {
                return 0;
            }
        },

        _setInitialTimeIndices: function () {
            var exg = this.get('exchange');

            if (exg) {
                var openTime = exg.openTime;
                var closeTime = exg.closeTime;

                this.set('openExgTime', openTime);
                this.set('closeExgTime', closeTime);

                if (openTime && closeTime) {
                    this.set('openTimeHour', parseInt(openTime.substr(0, 2), 10));
                    this.set('openTimeMin', parseInt(openTime.substr(2, 2), 10));
                    this.set('closeTimeIndex', this._calculateIndex(parseInt(closeTime.substr(0, 2), 10), parseInt(closeTime.substr(2, 2), 10)));

                    var criticalMin = this.get('criticalTimeMin');
                    this.set('criticalTimeIndex', this.get('closeTimeIndex') - criticalMin * 60);
                }
            }
        }.observes('exchange.tzo'),

        _updateProgressTime: function () {
            var exg = this.get('exchange');

            if (exg && exg.time) {
                var currentTime = exg.time;
                var currentIndex = this._calculateIndex(parseInt(currentTime.substr(0, 2), 10) + exg.tzo, parseInt(currentTime.substr(2, 2), 10)) + parseInt(currentTime.substr(4, 2), 10);

                this.set('currentTimeIndex', currentIndex);

                if (exg.stat === _priceConstants.default.MarketStatus.Open && currentIndex >= 0) {
                    this.set('isMarketOpen', true);
                } else if (exg.stat !== _priceConstants.default.MarketStatus.Open || currentIndex >= this.get('closeTimeIndex')) {
                    this.set('isMarketOpen', false);
                }

                if (currentIndex >= this.get('criticalTimeIndex') && this.get('closeTimeIndex') >= currentIndex) {
                    this.set('isCriticalTime', true);
                } else {
                    this.set('isCriticalTime', false);
                }

                if (this.get('isMarketOpen')) {
                    this._showProgressTimeBar();

                    if (this.get('isCriticalTime')) {
                        var timeStamp = this.get('closeTimeIndex') - currentIndex;
                        var timeStampInt = parseInt(timeStamp / 60, 10);
                        var space = _utils.default.Constants.StringConst.Space;

                        if (!isNaN(timeStampInt)) {
                            this.set('showTime', true);

                            if (timeStampInt >= 2) {
                                this.set('showTimeText', [timeStampInt, this.get('app').lang.labels.minsLeft].join(space));
                            } else if (timeStampInt === 1 && timeStamp >= 60) {
                                this.set('showTimeText', [timeStampInt, this.get('app').lang.labels.minLeft].join(space));
                            } else {
                                this.set('showTimeText', [timeStampInt, this.get('app').lang.labels.secLeft].join(space));
                            }
                        }
                    } else {
                        this.set('showTime', false);
                    }
                } else {
                    this.set('showTime', false);
                }
            }
        }.observes('exchange.time'),

        _showProgressTimeBar: function _showProgressTimeBar() {
            var bar;
            var style;
            var timeDiffInSecs = this.get('currentTimeIndex');
            var fullTimeDiffInSecs = this.get('closeTimeIndex');
            var prevUpdatedBar = this.get('prevUpdatedBar');

            if (fullTimeDiffInSecs) {
                var differenceInPercentage = timeDiffInSecs / fullTimeDiffInSecs * 100;
                differenceInPercentage = differenceInPercentage > 0 && differenceInPercentage <= 100 ? differenceInPercentage : 0;

                if (differenceInPercentage === 0 || Math.abs(differenceInPercentage - prevUpdatedBar) > 1) {
                    this.set('prevUpdatedBar', differenceInPercentage);
                    bar = 'width:' + differenceInPercentage + '%;';

                    if (this.get('isCriticalTime')) {
                        style = 'progress-bar mkt-close-indicator';
                    } else {
                        style = 'progress-bar';
                    }

                    this.set('bar', bar);
                    this.set('progressStyle', style);
                }
            }
        },

        actions: {
            onPrepareData: function onPrepareData() {
                this._setInitialTimeIndices();
            },

            setExchange: function setExchange(exchg) {
                this.set('exchange', exchg);
                this.sendAction('onExchangeChanged', exchg);
            }
        }
    });
});
define('universal-app/components/top-panel/main-index-chart-2', ['exports', './main-index-chart', '../../templates/components/top-panel/main-index-chart-2'], function (exports, _mainIndexChart, _mainIndexChart2) {
    'use strict';

    exports.default = _mainIndexChart.default.extend({
        layout: _mainIndexChart2.default
    });
});
define('universal-app/components/top-panel/main-index-chart-3', ['exports', './main-index-chart', '../../templates/components/top-panel/main-index-chart-3'], function (exports, _mainIndexChart, _mainIndexChart2) {
    'use strict';

    exports.default = _mainIndexChart.default.extend({
        layout: _mainIndexChart2.default,

        getChartConfig: function getChartConfig() {
            return {
                size: {
                    width: 90,
                    height: 56
                },
                padding: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                },
                axis: {
                    x: { show: false },
                    y: { show: false }
                }
            };
        }
    });
});
define('universal-app/components/top-panel/main-index-chart', ['exports', 'ember', '../../models/price/price-constants', '../../models/shared/shared-service', '../../models/chart/chart-constants', '../../controllers/chart/data/chart-data-provider', './../base-component', '../../controllers/controller-factory', '../../utils/utils', '../../templates/components/top-panel/main-index-chart', '../../utils/asset-types', '../../config/app-config'], function (exports, _ember, _priceConstants, _sharedService, _chartConstants, _chartDataProvider, _baseComponent, _controllerFactory, _utils, _mainIndexChart, _assetTypes, _appConfig) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        exchange: undefined,
        currentIndex: undefined,
        indexCollection: _ember.default.A(),
        indexCollectionArray: _ember.default.A(),
        priceService: _sharedService.default.getService('price'),
        defaultIndexForDropdown: _sharedService.default.getService('price').stockDS.getStock(_sharedService.default.userSettings.price.currentExchange, _sharedService.default.userSettings.price.currentIndex, _utils.default.AssetTypes.Indices),
        intZero: 0,
        emptyString: '',
        signs: { plus: '+', minus: '-', equal: '=' },

        styles: {
            upColor: 'up-fore-color',
            downColor: 'down-fore-color',
            foreColor: 'fore-color',
            upArrow: 'glyphicon-triangle-top glyphicon ',
            downArrow: 'glyphicon-triangle-bottom glyphicon font-x-l ',
            backgroundUp: 'ms-top-bar-index-change-green',
            backgroundDown: 'ms-top-bar-index-change-red',
            backgroundZero: 'ms-top-bar-index-change-none',
            percentageUp: 'ms-top-bar-index-percentage-green',
            percentageDown: 'ms-top-bar-index-percentage-red',
            percentageZero: 'ms-top-bar-index-percentage-none'
        },

        // Chart data
        intradayMainIndexChart: null, // Intra-day main index chart object
        chartDataProvider: null,
        marketStatusChangeCount: 0,

        layout: _mainIndexChart.default,

        chartId: function () {
            return 'c3-' + this.get('id');
        }.property('id'),

        isTablet: function () {
            return _appConfig.default.customisation.isTablet;
        }.property(),

        didInsertElement: function didInsertElement() {
            this.set('exg', _sharedService.default.userSettings.price.currentExchange);
            this.set('mainIndex', _sharedService.default.userSettings.price.currentIndex);

            this._prepareWidget();
        },

        willDestroyElement: function willDestroyElement() {
            this._clearMainIndexChart();
        },

        _prepareWidget: function _prepareWidget() {
            this.set('currentIndex', this.priceService.stockDS.getStock(this.get('exg'), this.get('mainIndex'), _utils.default.AssetTypes.Indices));
            this.set('indexCollection', this.priceService.stockDS.getIndexCollectionByExchange(this.get('exg')));

            this.priceService.addFullMarketIndexRequest(this.get('exg'));
            this._prepareMainIndexChart();
        },

        _prepareMainIndexChart: function _prepareMainIndexChart() {
            var that = this;

            // Create the chart data provider
            var cDP = _chartDataProvider.default.create({
                chartCategory: _chartConstants.default.ChartCategory.Intraday,
                chartDataLevel: _chartConstants.default.ChartDataLevel.IntradayCurrentDay,
                chartViewPeriod: _chartConstants.default.ChartViewPeriod.OneDay,

                onData: function onData(ohlcPoint, exg, sym) {
                    that._amendMainIndexChart(ohlcPoint, exg, sym);
                },

                onDataChunk: function onDataChunk(chartSymbolObj) {
                    that._updateMainIndexChart(chartSymbolObj);
                },

                onErrorFn: function onErrorFn() {
                    // TODO: [Amila] implement this
                }
            });

            that.set('chartDataProvider', cDP);
            cDP.addChartSymbol(this.get('currentIndex.exg'), this.get('currentIndex.sym'), true);

            // Initiate the data download via the CDP
            that.get('chartDataProvider').addChartDataSubscription();
        },

        _clearMainIndexChart: function _clearMainIndexChart() {
            // Stop the data download via the CDP
            if (this.get('chartDataProvider')) {
                this.get('chartDataProvider').removeChartDataSubscription();
                this.get('chartDataProvider').removeChartSymbol(this.get('currentIndex.exg'), this.get('currentIndex.sym'));
            }

            this.set('chartDataProvider', null);
        },

        /* *
         * This is to updated currentIndex relate CSS ( colours and sign +/- )
         * Observes : currentIndex.pctChg
         * Change: indexArrowCss , indexChangeSign, indexCss, indexValCss
         */
        _updateIndexRelatedCss: function () {
            var indexArrowCss, indexCss, indexValCss, indexChangeSign, indexBackgroundCss, indexPercentageCss;
            var pctChg = this.get('currentIndex.pctChg');

            if (pctChg > this.intZero) {
                indexCss = this.styles.upColor;
                indexValCss = this.styles.upColor;
                indexArrowCss = this.styles.upArrow;
                indexChangeSign = this.signs.plus;
                indexBackgroundCss = this.styles.backgroundUp;
                indexPercentageCss = this.styles.percentageUp;
            } else if (pctChg < this.intZero) {
                indexCss = this.styles.downColor;
                indexValCss = this.styles.downColor;
                indexChangeSign = '';
                indexArrowCss = this.styles.downArrow;
                indexBackgroundCss = this.styles.backgroundDown;
                indexPercentageCss = this.styles.percentageDown;
            } else {
                indexCss = this.styles.foreColor;
                indexValCss = this.styles.foreColor;
                indexChangeSign = '';
                indexArrowCss = this.emptyString;
                indexBackgroundCss = this.styles.backgroundZero;
                indexPercentageCss = this.styles.percentageZero;
            }

            this.set('indexArrowCss', indexArrowCss);
            this.set('indexChangeSign', indexChangeSign);
            this.set('indexCss', indexCss);
            this.set('indexValCss', indexValCss);
            this.set('indexBackgroundCss', indexBackgroundCss);
            this.set('indexPercentageCss', indexPercentageCss);
        }.observes('currentIndex.pctChg'),

        /* *
         * Update main index chart
         * draw chart if chart is null
         */
        _onMarketStatusChanged: function () {
            var that = this;
            var exchange = this.get('exchange');

            if (exchange) {
                var stat = exchange.stat;

                if (stat) {
                    var count = that.get('marketStatusChangeCount');

                    if (stat === _priceConstants.default.MarketStatus.Open && that.get('marketStatusChangeCount') > 0) {
                        that._drawMainIndexChart([]);
                    }

                    that.set('marketStatusChangeCount', count + 1);
                }
            }
        }.observes('exchange.stat'),

        _updateMainIndexChart: function _updateMainIndexChart() {
            var that = this;
            var chartDataArray = that.get('chartDataProvider').getDataArray();
            this.set('lastDrawnIndex', chartDataArray.length - 1);

            if (chartDataArray.length > 1) {
                if (that.intradayMainIndexChart === null) {
                    that._drawMainIndexChart();
                } else {
                    that.intradayMainIndexChart.load({
                        json: chartDataArray,
                        keys: {
                            x: 'DT',
                            value: ['Close']
                        }
                    });
                }
            }
        },

        _amendMainIndexChart: function _amendMainIndexChart(ohlcPoint) {
            var that = this;

            if (that.intradayMainIndexChart === null) {
                that._drawMainIndexChart();
            } else {
                if (ohlcPoint) {
                    that.intradayMainIndexChart.flow({
                        json: [ohlcPoint],
                        keys: {
                            x: 'DT',
                            value: ['Close']
                        },
                        length: 0
                    });
                }
            }
        },

        /* *
         * Draw main index chart
         */
        _drawMainIndexChart: function _drawMainIndexChart(chartDataArray) {
            var that = this;
            var isTablet = this.get('isTablet');
            var width = isTablet ? 90 : 115;
            var height = isTablet ? 56 : 60;
            var chartData = chartDataArray ? chartDataArray : that.get('chartDataProvider').getDataArray();

            // Default x axis configs
            var x = {
                type: 'timeseries',
                tick: {
                    // format: '%m %d',
                    format: '%H:%M',
                    culling: {
                        max: 3
                        // count: 5
                    } }
            };

            var c3DefObj = {
                data: {
                    json: chartData,
                    keys: {
                        x: 'DT',
                        value: ['Close']
                    },
                    types: {
                        Close: 'area'
                    },
                    colors: {
                        Close: that._getChartColor()
                    }
                },
                area: {
                    zerobased: false
                },
                point: {
                    show: false
                },
                size: {
                    width: width,
                    height: height
                },
                padding: {
                    top: isTablet ? 0 : 10,
                    right: isTablet ? 0 : 10,
                    bottom: 0,
                    left: isTablet ? 0 : 12
                },
                // TODO [Pathum] Need to fix alignment issues before implementing this.
                bindto: '#' + this.get('chartId'),

                axis: {
                    x: isTablet ? { show: false } : x,
                    y: { show: false }
                },
                legend: {
                    show: false
                },
                tooltip: {
                    show: false
                }
            };

            _ember.default.$.extend(c3DefObj, this.getChartConfig());

            this.intradayMainIndexChart = c3.generate(c3DefObj);
        },

        getChartConfig: function getChartConfig() {
            return {};
        },

        /* *
         * This is  to get top panel chart colour based on change val
         * @param pctChgVal  percentage change
         * @returns {string} colour
         */
        _getChartColor: function _getChartColor(pctChgVal) {
            var pctChg = pctChgVal || this.get('currentIndex.pctChg');
            var lineColor = '#559fd6';

            if (pctChg > this.intZero) {
                lineColor = '#19703e';
            } else if (pctChg < this.intZero) {
                lineColor = '#842424';
            }

            return lineColor;
        },

        /* *
         * this is to update main index colour real time
         * change chart colour if only
         * Observe currentIndex.pctChg
         */
        _updateMainIndexChartColors: function () {
            var that = this;
            var currentMainIndexSide;
            var pctChg = this.get('currentIndex.pctChg');
            var previousMainIndexSide = this.get('previousMainIndexSide');

            if (pctChg > this.intZero) {
                currentMainIndexSide = this.signs.plus;
            } else if (pctChg < this.intZero) {
                currentMainIndexSide = this.signs.minus;
            } else {
                currentMainIndexSide = this.signs.equal;
            }

            if (previousMainIndexSide !== currentMainIndexSide && this.intradayMainIndexChart && this.intradayMainIndexChart.data) {
                this.set('previousMainIndexSide', currentMainIndexSide);

                this.intradayMainIndexChart.data.colors({
                    Close: that._getChartColor()
                });
            }
        }.observes('currentIndex.pctChg'),

        _popUpWidget: function _popUpWidget(id) {
            var sym = this.get('currentIndex.sym');
            var exg = this.get('currentIndex.exg');
            var symbolPopupView = _controllerFactory.default.createController(this.container, 'view:symbol-popup-view');

            symbolPopupView.show(id, sym, exg, _assetTypes.default.indices);
        },

        _changeIndex: function _changeIndex(option) {
            this.set('currentIndex', option);
            this._clearMainIndexChart();
            this._prepareMainIndexChart();
        },

        _loadIndexCollection: function () {
            _ember.default.run.once(this, this._loadIndies);
        }.observes('indexCollection.@each.sDes', 'indexCollection.@each.dSym'),

        _loadIndies: function _loadIndies() {
            if (this.get('indexCollectionArray').length > 0) {
                // On language change, remove previously applied dropdown desc
                this.set('indexCollectionArray', _ember.default.A());
            }

            var that = this;
            var indexArray = this.priceService.stockDS.getIndexCollectionByExchange(this.get('exg'));

            _ember.default.$.each(indexArray, function (key, val) {
                if (val.get('sym') === that.get('mainIndex') || val.isMainIdx) {
                    that.set('defaultIndexForDropdown', val);
                    that.set('currentIndex', val);
                    return false;
                }
            });

            this.get('indexCollectionArray').pushObjects(indexArray);
        },

        actions: {
            popUpChartOptionWidget: function popUpChartOptionWidget() {
                // Chart id = 4
                this._popUpWidget(4);
                _utils.default.analyticsService.trackEvent('market-top-panel', _utils.default.Constants.GAActions.click, ['popup:', 'chart', ', ', 'sym:', this.get('currentIndex.sym'), '~', this.get('exchange').exg].join(''));
            },

            onPrepareData: function onPrepareData(exchange) {
                var mainIndex = this.priceService.exchangeDS.getExchange(exchange).get('mainIdx');
                this.set('exg', exchange);

                if (mainIndex) {
                    this.set('mainIndex', mainIndex);
                }

                this._clearMainIndexChart();
                this._prepareWidget();
                this._loadIndies();
            },

            onClearData: function onClearData() {
                this._clearMainIndexChart();
            },

            onLanguageChanged: function onLanguageChanged() {
                this._loadIndexCollection();
            },

            setIndexData: function setIndexData(option) {
                this._changeIndex(option);
            },

            onAddSubscription: function onAddSubscription() {
                this.priceService.addFullMarketIndexRequest(this.get('exg'));
            },

            onRemoveSubscription: function onRemoveSubscription() {
                this.priceService.removeFullMarketIndexRequest(this.get('exg'));
            }
        }
    });
});
define('universal-app/components/upgrade-subscription', ['exports', 'ember', '../models/shared/shared-service', '../config/app-config', '../utils/utils'], function (exports, _ember, _sharedService, _appConfig, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        isDelayedUserLogged: _sharedService.default.getService('sharedUI').isDelayedUserLogged,
        _upgradeSubscription: function _upgradeSubscription() {
            window.open(this._generateUpgradeUrl(), '_blank');
        },

        _generateUpgradeUrl: function _generateUpgradeUrl() {
            return _utils.default.requestHelper.generateQueryString(_appConfig.default.subscriptionConfig.upgradeSubscriptionPath, {
                user: _sharedService.default.getService('price').userDS.username,
                language: _sharedService.default.userSettings.get('currentLanguage')
            });
        },

        actions: {
            upgradeSubscription: function upgradeSubscription() {
                this._upgradeSubscription();
            }
        }
    });
});
define('universal-app/config/lang-key', ['module'], function (module) {
    'use strict';

    /* global module */

    /*eslint-disable */
    module.exports = {
        labels: ['aboutUs', 'currentMkt', 'calValues', 'mktValues', 'target', 'waTop', 'totOfferVal', 'totOfferQty', 'weightedAvgOfferPrice', 'commoditiesPer', 'tradeConnected', 'tradeDisconnected', 'moreMarkets', 'changePassword', 'detailQuote', 'timeAndSales', 'depthByPrice', 'depthByOrder', 'chart', 'alerts', 'buy', 'sell', 'chartLabels', 'renameWorkspace', 'renameActiveWorkspace', 'addContainer', 'deleteWorkspace', 'minsLeft', 'minLeft', 'secLeft', 'value', 'value', 'addAlert', 'save', 'all', 'announcement', 'newsTab', 'newsAnn', 'search', 'gms', 'commodities', 'currencies', 'indices', 'lastTrade', 'trades', 'volume', 'turnover', 'change', 'perChange', 'subMarket', 'nearMoney', 'perChangeDes', 'changeDes', 'deleteWL', 'allSectors', 'removeSym', 'unknown', 'proChartTitle', 'chartBaseSymbol', 'chartModeTitle', 'chartIntvTitle', 'chartStyleTitle', 'chartIndicator', 'chartIndiAverages', 'chartIndiBands', 'chartIndiOthers', 'chartIndiAll', 'chartShowVol', 'chartShowCrosH', 'chartGridTitle', 'chartCompareSymbol', 'chartLineSTrend', 'chartLineSHorizontal', 'chartLineSVertical', 'chartLineSRec', 'chartLineSEllipse', 'chartVolume', 'create', 'close', 'version', 'addToWL', 'trading', 'price', 'cancel', 'noResultFound', 'username', 'loginPassword', 'currentPassword', 'newPassword', 'confirmNewPassword', 'transactionPassword', 'currentTransactionPassword', 'newTransactionPassword', 'confirmNewTransactionPassword', 'renewSubscription', 'tellFriend', 'enterFriendEmail', 'send', 'upgradeSubscription', 'selectLayout', 'selectWidget', 'searchWidget', 'quote', 'companyProf', 'market', 'mutualFund', 'optionChain', 'transfers', 'userProfile', 'addWidget', 'cashMap', 'netCash', 'indexValue', 'ytd', 'symTraded', 'ups', 'down', 'unchanged', 'newsAnn', 'symbol', 'title', 'from', 'startDate', 'to', 'endDate', 'showAnnouncement', 'exchanges', 'showNews', 'newsProviders', 'companyInfor', 'sector', 'mktCap', 'listedShr', 'trdName', 'currency', 'country', 'estbOn', 'auditor', 'isin', 'bbgid', 'indGrp', 'subInd', 'phn', 'fax', 'mngtNBrdMbrs', 'name', 'asOf', 'owners', 'sherPrs', 'subsidiaries', 'daysRange', 'week52Range', 'perHeatMap', 'sizeRepresenation', 'colorRepresenation', 'quantity', 'bid', 'offer', 'news', 'optionPeriods', 'totalQty', 'bidOffer', 'spread', 'splits', 'seq', 'quoteSummary', 'highReachedFiftyTwoWeekHigh', 'lowReachedFiftyTwoWeekLow', 'lastTradedReachedHigh', 'lastTradedReachedLow', 'annAvailable', 'bestBid', 'bestOffer', 'linkWidgets', 'sectorOverview', 'sortBy', 'up', 'marketTimeAndSales', 'open', 'high', 'low', 'topGainers', 'topLosers', 'mostActive', 'watchList', 'quickView', 'filter', 'marketWatch', 'todaysTraded', 'moreColumns', 'addSymbols', 'renameWL', 'newWatchList', 'quote', 'topStocks', 'news', 'chart', 'netplus', 'market', 'standard', 'classic', 'investor', 'watchList', 'newsAnn', 'announcement', 'newsAnn', 'newsTab', 'newsAnn', 'equity', 'trust', 'indices', 'sukukBonds', 'sukuk', 'etf', 'fullQuote', 'companyProf', 'quoteSummary', 'detailQuote', 'timeAndSales', 'depthByPrice', 'depthByOrder', 'exDividendDate', 'dividend', 'pbRatio', 'peRatio', 'yield1', 'eps', 'fiftyTwoWkL', 'fiftyTwoWkH', 'offerQty', 'bidQty', 'offer', 'bid', 'low', 'high', 'max', 'min', 'mktCap', 'volume', 'vWAP', 'preClosed', 'close', 'perChange', 'change', 'lastQty', 'lastTrade', 'mngtNBrdMbrs', 'owners', 'description', 'last', 'volume', 'trades', 'turnover', 'symbol', 'perHeatMap', 'heatMap', 'lotSize', 'bidOfferRatio', 'sDescription', 'expiryDate', 'strikePrice', 'mktStatus_0', 'mktStatus_1', 'mktStatus_2', 'mktStatus_3', 'mktStatus_4', 'mktStatus_21', 'mktStatus_22', 'mktStatus_33', 'mktStatus_23', 'mktStatus_24', 'mktStatus_25', 'mktStatus_31', 'mktStatus_26', 'mktStatus_27', 'mktStatus_277', 'mktStatus_29', 'mktStatus_30', 'mktStatus_28', 'mktStatus_12', 'mktStatus_32', 'mktStatus_8', 'mktStatus_9', 'mktStatus_20', 'mktStatus_35', 'mktStatusLong_1', 'mktStatusLong_2', 'mktStatusLong_4', 'mktStatusLong_8', 'mktStatusLong_9', 'mktStatusLong_20', 'mktStatusLong_33', 'mktStatusLong_35', 'transactionStatus_1', 'transactionStatus_2', 'instrumentType_0', 'instrumentType_2', 'instrumentType_10', 'instrumentType_65', 'instrumentType_66', 'instrumentType_75', 'instrumentType_86', 'rightSubscription_4', 'rightSubscription_6', 'rightSubscription_8', 'chartIntraday', 'chartHistory', 'chartEveryMinute', 'chartEvery5Minutes', 'chartEvery10Minutes', 'chartEvery15Minutes', 'chartEvery30Minutes', 'chartEvery60Minutes', 'chartDaily', 'chartWeekly', 'chartMonthly', 'chartQuarterly', 'chartYearly', 'chartArea', 'chartCandle', 'chartOHLC', 'chartLine', 'chartCandleWithTrend', 'newsAnnouncement', 'right', 'future', 'chartPeriodMax', 'chartIndiMV', 'chartIndiMP', 'chartIndiTSF', 'chartIndiWS', 'chartIndiBB', 'chartIndiAcDe', 'chartIndiATR', 'chartIndiCMO', 'chartIndiCCI', 'chartIndiDMPlusDI', 'chartIndiDMMinDI', 'chartIndiDMA', 'chartIndiDMADXR', 'chartIndiDMDX', 'chartIndiMACD', 'chartIndiMomentum', 'chartIndiMFI', 'chartIndiRSI', 'chartIndiSO', 'chartIndiWPerR', 'chartIndiOBV', 'standardView', 'classicView', 'TLByPerChg', 'TLByChg', 'TGByPerChg', 'TGByChg', 'MActiveByVol', 'MActiveByTrades', 'MActiveByTurnover', 'addToNewWL', 'egx', 'dfm', 'toggle', 'cvwap', 'twap', 'intrinsicValue', 'chartGridBoth', 'chartGridNone', 'chartGridHoriz', 'chartGridVerti', 'yearToDate', 'oneDay', 'twoDays', 'fiveDays', 'oneMonth', 'threeMonths', 'sixMonths', 'oneYear', 'twoYears', 'threeYears', 'fiveYears', 'tenYears', 'maximum', 'menuItem', 'twapDesc', 'cvwapDecs', 'epsDesc', 'pByeRatio', 'pBybRatio', 'vwapDesc', 'currentValue', 'highValue', 'lowValue', 'couponRate', 'time', 'units', 'shareCapital', 'maturityDate', 'tpGainersByPrstChng', 'openInterest', 'outstandingAmount', 'faceValue', 'bondType', 'dayCountMethod', 'issuedAmount', 'tick', 'totalBidQty', 'menu', 'addr', 'previousCouponDate', 'addNewSymbols', 'spreadPer', 'web', 'couponFreq', 'myFavourites', 'watch', 'fiftyTwoWkHL', 'lastTradedDate', 'lastTradedTime', 'lastTradedTimeAndDate', 'highAndLow', 'outShr', 'freeFltShr', 'authCap', 'totalOfferQty', 'weeksRange52', 'openInterestChange', 'settlementPrice', 'lastUpdated', 'trend', 'mktCapitalization', 'gmsShortDes', 'quoteChart', 'stockPerformance', 'companyManagement', 'companyOwners', 'companySubsidiaries', 'provider', 'symbols', 'summary', 'createNewWL', 'avgPrice', 'orderDate', 'avgCost', 'method', 'averagePrice', 'maximumPrice', 'option', 'preferredStock', 'warrant', 'premium', 'warrantRight', 'equityOption', 'futureSpread', 'indexOption', 'fixedIncome', 'mbs', 'usAgencyBond', 'usTreasuryBill', 'usTreasuryCoupon', 'moneyMarket', 'cd', 'forexFra', 'forexDeposit', 'forexForward', 'statistics', 'indexFuture', 'interestRateFuture', 'interestRateOption', 'commodityOption', 'commodityFuture', 'futureFuture', 'crudeOil', 'heatingOil', 'naturalGas', 'gold', 'silver', 'platinum', 'corn', 'currencyFuture', 'stockBorrowing', 'debenture', 'interventionRates', 'exchangeRates', 'certificate', 'lendingDate', 'borrowingDate', 'interbankDate', 'economicPolicyDebt', 'financialSector', 'publicSector', 'healthPopulationStructure', 'generalCountryData', 'labourSocialProtection', 'cashIn', 'cashOut', 'todayHigh', 'todayLow', 'exgOrderNo', 'marketDepth', 'averageCost', 'totCost', 'buyMore', 'top', 'tov', 'tcp', 'tcv', 'annDate', 'exdvDate', 'pmntDate', 'dividendAmount', 'spltFctr', 'pricedrp', 'dividendYield', 'action', 'effectiveDate', 'factor', 'priceChange', 'lstDvdn', 'nxtDvdn', 'stock', 'index', 'topChange', 'fullMarket', 'toPrice', 'toQty', 'toChange', 'toPerChange', 'topUnusualVolume', 'topTOV5DAvVolume', 'avVol5D', 'topTheoretical', 'thPriceVolume', 'changeTo', 'researchHouse', 'recommendation', 'targetPrice', 'upPotential', 'report', 'forecast', 'theoretical', 'allSymbols', 'marketIsOpened', 'marketIsPreClosed', 'marketIsClosed', 'timeToOpen', 'median12M', 'upSide', 'potential', 'historicalPrice', 'consensus', 'hold', 'count', 'potentialPer', 'oneYearHistoricalPrice', 'twelveMonthsTargetPrice', 'topTheoreticalMoversFor', 'topTheoreticalGainersFor', 'topTheoreticalLosersFor', 'period', 'median', 'rawStockPrice', 'otherCorporateAction', 'oneYearHistoricalAndTargetPrices', 'dateTime', 'closeOn', 'openOn', 'prvClosed', 'callSym', 'callLtp', 'callChg', 'callBestBid', 'callBestAsk', 'callVol', 'putSym', 'putLtp', 'putChg', 'putBestBid', 'putBestAsk', 'putVol', 'fairValue', 'cashStatement', 'wkRange52', 'dayHigh', 'dayLow', 'wkHigh', 'wkLow', 'ytdt', 'unrealizedProfit', 'languages', 'themes', 'condition', 'fundList', 'fundHoldings', 'availBalance', 'fundRiskProfile', 'valuationDate', 'reqCutOffDT', 'subAmount', 'redAmount', 'subFee', 'netInvAmount', 'iqamaIdCR', 'nationality', 'investorType', 'mobileNo', 'subscribe', 'subscription', 'redemption', 'redeem', 'availUnits', 'fullRedemption', 'partRedemption', 'byAmountUnit', 'byAmount', 'byUnits', 'numOfUnits', 'redemptionFee', 'projectedRedAmount', 'continue', 'reject', 'transactionSuccess', 'headOffice', 'url', 'outsideSaudi', 'edit', 'deleteText', 'greaterThan', 'greaterThanOrEqual', 'lessThan', 'lessThanOrEqual', 'equal', 'active', 'triggered', 'expired', 'invalid', 'saudiArabiaAddress', 'sriLankaAddress', 'favourites', 'payableAmount', 't1BuyingPower', 't2BuyingPower', 't3BuyingPower', 'pledgeQty', 'pledgeUnits', 'payableQty', 'receivableQty', 'pendingSubscriptionQty', 'subQty', 'wAvgPrice', 'subPrice', 'tbq', 'taq', 'per', 'inst', 'refValue', 'companyName', 'productTitle', 'screenShare', 'chartIndChaikinMF', 'chartIndPSAR', 'chartIndTRIX', 'chartIndVolOsc', 'portfolioDetails', 'recentOrders', 'recentSymbols', 'cumOrdVal', 'transferBetweenPortfolios', 'rightsSubscription', 'rights', 'corpBond', 'availableRights', 'unitCost', 'unitPrice', 'fundNAV', 'nxtNavDate', 'performYTD', 'orderAmount', 'netAmount', 'navPrice', 'orderFee', 'navDate', 'orderUnits', 'code', 'transDate', 'accBal', 'glRatio', 'kyc', 'rightsSubscriptionList', 'contracts', 'onlineAccOpening', 'back', 'cusAccType_0', 'cusAccType_1', 'cusAccType_2', 'fndRiskPro_1', 'fndRiskPro_2', 'fndRiskPro_3', 'acceptAndContinue', 'accept', 'done', 'optionSymbolSearch', 'select', 'deleteActiveWorkspace', 'optionOrderList', 'brokerageSelection', 'symNewsAnn', 'latestNewsAnn', 'other', 'brkClassic', 'riaClassic', 'english', 'arabic', 'area', 'statement', 'tab1', 'tab2', 'tab3', 'tab4', 'tab5', 'downloadPdf', 'cashACNo', 'marketOverview', 'totalAssets', 'dueSettle', 'blockedAmount', 'searchBy', 'marketSummary', 'tickerSettings', 'tickerSpeed', 'financialsRatios', 'financials', 'ratios', 'compare', 'vs', 'balanceSheet', 'incomeStatement', 'cashFlow', 'roaa', 'netProfitGrwt', 'bookValueGrwt', 'epsGrwt', 'currRatio', 'qkRatio', 'roae', 'netIncome', 'totRevenue', 'oprIncome', 'totAssets', 'totEquity', 'oprActivities', 'touchId', 'touchIdLoginEnable', 'invstActivities', 'accStatement', 'stockStatement', 'subMarkets', 'ver', 'viewLog', 'board', 'session', 'nms', 'correspondence', 'serviceProvider', 'clientDetails', 'feeVatDetails', 'accountNo', 'cusName', 'sar', 'annually', 'quarterly', 'total', 'bpShort', 'glShort', 'compName', 'services', 'outsideKuwait', 'email', 'whatsApp', 'disclosures', 'newsDisclosures', 'callCenter', 'watchListSettings', 'selectWatchLists', 'selectCustomWatchlistSettings', 'createCustomWatchlistSettings', 'companyDisclosures', 'marketDisclosures', 'exchange', 'commonStock', 'commodity', 'countryData', 'alternatives', 'multiAssets', 'middleEast', 'europe', 'asia', 'usa', 'northAfrica', 'expiresOn', 'detailedView', 'currentDailyVolume', 'beta', 'yearToDatePer', 'cdv', 'dy', 'allSubMarkets', 'delayedPriceNote', 'whatsAppDetail'],
        messages: ['priceConnected', 'priceDisconnected', 'mandatoryFields', 'passwordMismatch', 'passwordChange', 'passwordChangeFail', 'txPasswordMismatch', 'pleaseWait', 'didNotMeetPwRules', 'delayedExgTime', 'symAddedAlready', 'symDeletedForm', 'loading', 'authFailed', 'copyrightLaw', 'watchListNameExist', 'dataNotAvailable', 'delayedUserDataNotAvailable', 'availableQtyGTZero', 'subscriptionSuccessMessage', 'redemptionSuccessMessage', 'confirmTransactionCancel', 'alertTriggered', 'symAddedSuccess', 'deleteConfirmation', 'timeDelayedMessage', 'delayedUserNoData', 'existingCustomerInfoMessage', 'existingCustomerConfirmMessage']
    };
    /*eslint-enable */
});
define('universal-app/config/price-settings', ['exports'], function (exports) {
    'use strict';

    exports.default = {
        // UAT - Saudi Awal-net
        // connectionParameters: {
        //    primary: {
        //        ip: '78.93.230.36',
        //        port: '9018',
        //        secure: false // Is connection secure - true or false
        //    },
        //    secondary: {
        //        ip: '78.93.230.36',
        //        port: '9018',
        //        secure: false // Is connection secure - true or false
        //    }
        // }

        // UAT - Saudi-net
        connectionParameters: {
            primary: {
                ip: 'data-sa9.mubasher.net/html5ws',
                port: '',
                secure: true // Is connection secure - true or false
            },
            secondary: {
                ip: 'data-sa9.mubasher.net/html5ws',
                port: '',
                secure: true // Is connection secure - true or false
            }
        },

        // Local
        /* *connectionParameters: {
            primary: {
                ip: '192.168.13.84',
                port: '8090',
                secure: false // Is connection secure - true or false
            },
            secondary: {
                ip: '192.168.13.84',
                port: '8090',
                secure: false // Is connection secure - true or false
            }
        },*/

        configs: {
            defaultExchange: 'TDWL',
            defaultIndex: 'TASI',
            secondaryExchanges: [],

            priceTickerConfigs: {
                tickerSymDisplayField: 'sDes',
                tickerChangeDisplayField: 'chg'
            },

            symbolSearchConfigs: {
                showSubMarket: false
            },

            customWindowTypes: {
                /* <exchange-code>: {
                    include: [], // Window types to be included in user window types
                    exclude: [] // Window types to be excluded from user window types
                }*/
            },

            announcementNews: {
                recentAnnouncementNewsLimit: 25
            }
        },

        urlTypes: {
            price: 'price',
            content: 'content',
            fileServer: 'fileServer',
            chart: 'chart',
            chartTopv: 'chartTopv',
            gms: 'gms',
            report: 'report',
            reportLink: 'reportLink',
            adx: 'adx',
            upload: 'upload',
            analysis: 'analysis',
            brokerLink: 'brokerLink',
            takeATour: 'takeATour'
        }
    };
});
define('universal-app/config/price-widget-config', ['exports'], function (exports) {
    'use strict';

    exports.default = {
        singleRowHeight: 40,

        watchList: {
            defaultColumnMapping: {
                menu: { id: 'menu', width: 25, name: 'menu', headerName: '', headerStyle: 'text-center', iconClass: 'glyphicon glyphicon-menu-hamburger', isColumnSortDisabled: true, type: 'buttonMenu', buttonFunction: 'popUpWidgetButtonMenu' },
                watch: { id: 'watch', width: 25, name: 'watch', headerName: '', headerStyle: 'text-center', iconClass: 'glyphicon glyphicon-eye-open', isColumnSortDisabled: true, type: 'buttonMenu', buttonFunction: 'addStocksFromMenu', buttonMenu: 'watchButton' },
                del: { id: 'del', width: 25, name: 'delete', headerName: '', headerStyle: 'text-center', iconClass: 'glyphicon glyphicon-trash', isColumnSortDisabled: true, type: 'button', buttonFunction: 'deleteSymbol' },
                sym: { id: 'dSym', width: 125, headerName: 'symbol', secondId: 'sDes', headerStyle: 'text-left-header', sortKeyword: 'sDes', type: 'dualText', isndicatorAvailable: true },
                exg: { id: 'de', width: 65, headerName: 'exchange', sortKeyword: 'exg', firstValueStyle: 'symbol-fore-color' },
                trend: { id: 'trend', width: 25, name: 'trend', headerName: '', thirdId: 'trend', sortKeyword: 'chg', type: 'upDown' },
                ltp: { id: 'ltp', width: 90, headerName: 'last', headerSecondName: 'lastQty', secondId: 'ltq', sortKeyword: 'ltp', dataType: 'float', type: 'dualArrow', firstValueStyle: 'highlight-fore-color bold', backgroundStyle: 'watchlist-cell-back-lastqty', isBlink: true, noOfSecValueDecimalPlaces: 0 },
                chg: { id: 'chg', width: 70, headerName: 'change', headerSecondName: 'perChange', secondId: 'pctChg', sortKeyword: 'chg', positiveNegativeChange: true, type: 'dualChange', dataType: 'float' },
                bbp: { id: 'bbp', width: 70, headerName: 'bid', headerSecondName: 'bidQty', secondId: 'bbq', type: 'dual', sortKeyword: 'bbp', firstValueStyle: 'up-fore-color', secondValueStyle: 'green-dark', backgroundStyle: 'watchlist-cell-back-green', isBlink: true, dataType: 'float', noOfSecValueDecimalPlaces: 0 },
                bap: { id: 'bap', width: 70, headerName: 'offer', headerSecondName: 'offerQty', secondId: 'baq', type: 'dual', firstValueStyle: 'down-fore-color', secondValueStyle: 'red-dark', backgroundStyle: 'watchlist-cell-back-red', sortKeyword: 'bap', isBlink: true, dataType: 'float', noOfSecValueDecimalPlaces: 0 },
                l52: { id: 'l52', width: 100, headerName: 'fiftyTwoWkHL', secondId: 'h52', thirdId: 'ltp', type: 'dot', dataType: 'float' },
                vol: { id: 'vol', width: 85, headerName: 'volume', sortKeyword: 'vol', dataType: 'int', firstValueStyle: 'fore-color', isBlink: true, blinkUpStyle: 'blink-font-style-change', blinkDownStyle: 'blink-font-style-change' },
                tovr: { id: 'tovr', width: 90, headerName: 'turnover', sortKeyword: 'tovr', dataType: 'int', firstValueStyle: 'fore-color', isBlink: true, blinkUpStyle: 'blink-font-style-change', blinkDownStyle: 'blink-font-style-change' },
                trades: { id: 'trades', width: 70, headerName: 'trades', sortKeyword: 'trades', dataType: 'int', firstValueStyle: 'fore-color', isBlink: true, blinkUpStyle: 'blink-font-style-change', blinkDownStyle: 'blink-font-style-change' },
                prvCls: { id: 'prvCls', width: 90, headerName: 'preClosed', headerSecondName: 'open', secondId: 'open', type: 'dual', sortKeyword: 'prvCls', firstValueStyle: 'fore-color', dataType: 'float' },
                cit: { id: 'cit', width: 85, headerName: 'cashMap', secondId: 'cot', type: 'progress' },
                dltt: { id: 'dltt', width: 115, headerName: 'lastTradedTime', headerSecondName: 'lastTradedDate', secondId: 'ltd', type: 'dual', sortKeyword: 'dltt', firstValueStyle: 'fore-color', dataType: 'time' },
                high: { id: 'high', width: 70, headerName: 'high', headerSecondName: 'low', secondId: 'low', type: 'dual', sortKeyword: 'high', firstValueStyle: 'fore-color', dataType: 'float' },
                cvwap: { id: 'cvwap', width: 70, headerName: 'cvwap', headerSecondName: 'twap', secondId: 'twap', type: 'dual', sortKeyword: 'cvwap', firstValueStyle: 'fore-color', dataType: 'float' },
                max: { id: 'max', width: 70, headerName: 'max', headerSecondName: 'min', secondId: 'min', type: 'dual', sortKeyword: 'max', firstValueStyle: 'fore-color', dataType: 'float' }
            },

            classicColumnMapping: {
                menu: { id: 'menu', width: 25, headerCellView: 'Ember.ClassicHeaderCell', name: 'Menu', title: 'menuItem', headerName: '', headerStyle: 'text-center', iconClass: 'glyphicon glyphicon-menu-hamburger', isColumnSortDisabled: true, type: 'buttonMenu', buttonFunction: 'popUpWidgetButtonMenu', buttonMenu: 'mainContextMenu' },
                watch: { id: 'watch', width: 25, headerCellView: 'Ember.ClassicHeaderCell', name: 'Watch', headerName: '', headerStyle: 'text-center', iconClass: 'glyphicon glyphicon-eye-open', isColumnSortDisabled: true, type: 'buttonMenu', buttonFunction: 'addStocksFromMenu', buttonMenu: 'watchButton' },
                del: { id: 'del', width: 25, headerCellView: 'Ember.ClassicHeaderCell', name: 'Delete', headerName: '', headerStyle: 'text-center', iconClass: 'glyphicon glyphicon-trash', isColumnSortDisabled: true, type: 'button', buttonFunction: 'deleteSymbol' },
                sym: { id: 'dSym', width: 87, headerName: 'symbol', headerCellView: 'Ember.ClassicHeaderCell', headerStyle: 'text-left-header', sortKeyword: 'sym', cellStyle: 'fore-color text-left-header', type: 'dualText', isndicatorAvailable: true }, // width:94px for worst case scenario
                exg: { id: 'de', width: 70, headerName: 'exchange', headerCellView: 'Ember.ClassicHeaderCell', headerStyle: 'text-center', sortKeyword: 'exg', cellStyle: 'fore-color text-center', type: 'classicCell', firstValueStyle: 'bold' },
                lDes: { id: 'lDes', width: 105, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'description', headerStyle: 'text-left-header', sortKeyword: 'lDes', cellStyle: 'text-left-header', type: 'classicCell', firstValueStyle: 'bold' },
                sDes: { id: 'sDes', width: 105, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'sDescription', headerStyle: 'text-left-header', sortKeyword: 'sDes', cellStyle: 'text-left-header', type: 'classicCell', firstValueStyle: 'bold' },
                trend: { id: 'trend', width: 25, headerCellView: 'Ember.ClassicHeaderCell', name: 'trend', headerName: '', thirdId: 'trend', sortKeyword: 'chg', dataType: 'float', type: 'upDown' },
                ltp: { id: 'ltp', width: 85, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'last', sortKeyword: 'ltp', dataType: 'float', firstValueStyle: 'highlight-fore-color bold', backgroundStyle: 'watchlist-cell-back-lastqty', blinkUpStyle: 'blink-classic-up', blinkDownStyle: 'blink-classic-down', isBlink: true, type: 'classicCell' },
                ltq: { id: 'ltq', width: 65, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'lastQty', sortKeyword: 'ltq', dataType: 'int', firstValueStyle: 'highlight-fore-color bold', type: 'classicCell' },
                chg: { id: 'chg', width: 50, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'change', sortKeyword: 'chg', positiveNegativeChange: true, type: 'changeCell', dataType: 'float' },
                pctChg: { id: 'pctChg', width: 75, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'perChange', sortKeyword: 'pctChg', positiveNegativeChange: true, type: 'changeCell', dataType: 'float' },
                bbp: { id: 'bbp', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'bid', type: 'classicCell', sortKeyword: 'bbp', firstValueStyle: 'up-fore-color bold', backgroundStyle: 'watchlist-cell-back-green', blinkUpStyle: 'blink-classic-up', blinkDownStyle: 'blink-classic-down', isBlink: true, dataType: 'float' },
                bbq: { id: 'bbq', width: 75, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'bidQty', type: 'classicCell', sortKeyword: 'bbq', firstValueStyle: 'bold', backgroundStyle: 'watchlist-cell-back-green', dataType: 'float', noOfDecimalPlaces: 0 },
                bap: { id: 'bap', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'offer', type: 'classicCell', firstValueStyle: 'down-fore-color bold', backgroundStyle: 'watchlist-cell-back-red', sortKeyword: 'bap', blinkUpStyle: 'blink-classic-up', blinkDownStyle: 'blink-classic-down', isBlink: true, dataType: 'float' },
                baq: { id: 'baq', width: 75, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'offerQty', type: 'classicCell', firstValueStyle: 'bold', backgroundStyle: 'watchlist-cell-back-red', sortKeyword: 'baq', dataType: 'float', noOfDecimalPlaces: 0 },
                l52: { id: 'l52', width: 75, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'fiftyTwoWkL', type: 'classicCell', sortKeyword: 'l52', firstValueStyle: 'fore-color bold', dataType: 'float' },
                h52: { id: 'h52', width: 75, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'fiftyTwoWkH', type: 'classicCell', sortKeyword: 'h52', firstValueStyle: 'fore-color bold', dataType: 'float' },
                vol: { id: 'vol', width: 80, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'volume', type: 'classicCell', sortKeyword: 'vol', firstValueStyle: 'fore-color bold', dataType: 'int', blinkUpStyle: 'blink-font-style-change', blinkDownStyle: 'blink-font-style-change', isBlink: true },
                tovr: { id: 'tovr', width: 90, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'turnover', type: 'classicCell', sortKeyword: 'tovr', firstValueStyle: 'fore-color bold', dataType: 'int', blinkUpStyle: 'blink-font-style-change', blinkDownStyle: 'blink-font-style-change', isBlink: true },
                trades: { id: 'trades', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'trades', type: 'classicCell', sortKeyword: 'trades', firstValueStyle: 'fore-color bold', dataType: 'int', blinkUpStyle: 'blink-font-style-change', blinkDownStyle: 'blink-font-style-change', isBlink: true },
                prvCls: { id: 'prvCls', width: 90, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'preClosed', type: 'classicCell', sortKeyword: 'prvCls', firstValueStyle: 'fore-color bold', dataType: 'float' },
                open: { id: 'open', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'open', type: 'classicCell', sortKeyword: 'open', firstValueStyle: 'fore-color bold', dataType: 'float' },
                cit: { id: 'cit', width: 80, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'cashMap', type: 'classicProgressCell', secondId: 'cot', sortKeyword: 'cit', dataType: 'float' },
                ltd: { id: 'ltd', width: 110, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'lastTradedDate', type: 'classicCell', sortKeyword: 'ltd', firstValueStyle: 'fore-color bold', dataType: 'date' },
                dltt: { id: 'dltt', width: 110, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'lastTradedTime', type: 'classicCell', sortKeyword: 'dltt', firstValueStyle: 'fore-color bold' },
                high: { id: 'high', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'high', type: 'classicCell', sortKeyword: 'high', firstValueStyle: 'fore-color bold', dataType: 'float' },
                low: { id: 'low', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'low', type: 'classicCell', sortKeyword: 'low', firstValueStyle: 'fore-color bold', dataType: 'float' },
                cvwap: { id: 'cvwap', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'cvwap', headerTitleName: 'cvwapDecs', type: 'classicCell', sortKeyword: 'cvwap', firstValueStyle: 'fore-color bold', dataType: 'float' },
                twap: { id: 'twap', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'twap', headerTitleName: 'twapDesc', type: 'classicCell', sortKeyword: 'twap', firstValueStyle: 'fore-color bold', dataType: 'float' },
                min: { id: 'min', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'min', type: 'classicCell', sortKeyword: 'min', firstValueStyle: 'fore-color bold', dataType: 'float' },
                max: { id: 'max', width: 60, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'max', type: 'classicCell', sortKeyword: 'max', firstValueStyle: 'fore-color bold', dataType: 'float' },
                intsV: { id: 'intsV', width: 95, headerCellView: 'Ember.ClassicHeaderCell', headerName: 'intrinsicValue', type: 'classicCell', sortKeyword: 'intsV', firstValueStyle: 'fore-color bold', dataType: 'float' }
            },

            quoteColumns: [{ id: 'contextMenu', width: 15, name: 'contextMenu', headerName: '', headerStyle: 'text-center', iconClass: 'glyphicon glyphicon-chevron-right', isColumnSortDisabled: true, type: 'contextMenuMobile', buttonFunction: 'showOrderTicket' }, { id: 'dSym', width: 80, headerCellView: 'Ember.MoreHeaderCell', headerName: 'symbol', headerSecondName: '', headerThirdName: 'description', secondId: 'lDes', thirdId: 'open', headerStyle: 'text-left-header', sortKeyword: 'sDes', type: 'expandedSymbolMobile', expandedWidthRatio: '0.5', defaultWidthRatio: 16 / 37, isndicatorAvailable: true }, { id: 'ltp', width: 45, headerCellView: 'Ember.ExpandedHeaderCell', headerName: 'last', headerSecondName: '', headerThirdName: 'volume', secondId: 'vol', thirdId: 'low', sortKeyword: 'ltp', headerStyle: 'pad-s-r', dataType: 'float', firstValueStyle: 'fore-color bold', type: 'expandedLtpMobile', noOfSecValueDecimalPlaces: 0, expandedWidthRatio: '0.25', blinkUpStyle: 'up-back-color btn-txt-color', blinkDownStyle: 'down-back-color btn-txt-color', isBlink: true, defaultWidthRatio: 9 / 37 }, { id: 'pctChg', width: 60, headerCellView: 'Ember.ExpandedHeaderCell', headerName: 'perChange', headerSecondName: '', headerThirdName: 'change', headerStyle: 'pad-m-r', secondId: 'chg', thirdId: 'prvCls', sortKeyword: 'chg', positiveNegativeChange: true, type: 'expandedChgMobile', dataType: 'float', expandedWidthRatio: '0.25', defaultWidthRatio: 12 / 37 }],

            defaultColumnIds: ['menu', 'sym', 'trend', 'ltp', 'chg', 'bbp', 'bap', 'l52', 'vol', 'tovr', 'trades', 'prvCls', 'cit', 'dltt', 'high'],

            classicColumnIds: ['menu', 'sym', 'sDes', 'trend', 'ltp', 'ltq', 'chg', 'pctChg', 'bbp', 'bbq', 'bap', 'baq', 'vol', 'tovr', 'trades', 'cit', 'h52', 'l52', 'prvCls', 'open', 'ltd', 'dltt', 'high', 'low'],

            moreColumnIds: ['trend', 'ltp', 'chg', 'bbp', 'bap', 'l52', 'vol', 'tovr', 'trades', 'prvCls', 'cit', 'dltt', 'high', 'cvwap', 'max'],

            classicMoreColumnIds: ['sDes', 'lDes', 'trend', 'ltp', 'ltq', 'chg', 'pctChg', 'bbp', 'bbq', 'bap', 'baq', 'h52', 'l52', 'vol', 'tovr', 'trades', 'prvCls', 'open', 'cit', 'ltd', 'dltt', 'high', 'low', 'cvwap', 'twap', 'intsV', 'max', 'min'],

            customDefaultColumnIds: ['menu', 'sym', 'exg', 'trend', 'ltp', 'chg', 'bbp', 'bap', 'l52', 'vol', 'tovr', 'trades', 'prvCls', 'cit', 'dltt', 'high'],

            customClassicColumnIds: ['menu', 'sym', 'sDes', 'exg', 'trend', 'ltp', 'ltq', 'chg', 'pctChg', 'bbp', 'bbq', 'bap', 'baq', 'vol', 'tovr', 'trades', 'cit', 'h52', 'l52', 'prvCls', 'open', 'ltd', 'dltt', 'high', 'low'],

            indexTableColumnIds: ['sym', 'sDes', 'trend', 'ltp', 'chg', 'pctChg', 'high', 'low', 'vol', 'tovr', 'trades', 'h52', 'l52', 'prvCls', 'open'],

            classicAssetTypes: {
                0: ['menu', 'sym', 'sDes', 'trend', 'ltp', 'ltq', 'chg', 'pctChg', 'bbp', 'bbq', 'bap', 'baq', 'vol', 'tovr', 'trades', 'h52', 'l52', 'prvCls', 'open', 'cit', 'ltd', 'dltt', 'high', 'low'], // Equity
                75: ['menu', 'sym', 'sDes', 'trend', 'ltp', 'ltq', 'chg', 'pctChg', 'bbp', 'bbq', 'bap', 'baq', 'vol', 'tovr', 'trades', 'prvCls', 'open', 'high', 'low'], // Bonds (Fixed Income)
                68: ['menu', 'sym', 'sDes', 'trend', 'ltp', 'ltq', 'chg', 'pctChg', 'bbp', 'bbq', 'bap', 'baq', 'vol', 'tovr', 'trades', 'high', 'low'], // Options/Future
                86: ['menu', 'sym', 'sDes', 'trend', 'ltp', 'ltq', 'chg', 'pctChg', 'bbp', 'bbq', 'bap', 'baq', 'vol', 'tovr', 'trades', 'high', 'low'], // ETF (Mutual Funds)
                11: ['menu', 'sym', 'sDes', 'trend', 'ltp', 'ltq', 'chg', 'pctChg', 'bbp', 'bbq', 'bap', 'baq', 'vol', 'tovr', 'trades', 'high', 'low'], // Currency
                7: ['menu', 'sym', 'sDes', 'trend', 'ltp', 'chg', 'pctChg', 'high', 'low', 'vol', 'tovr', 'trades', 'h52', 'l52', 'prvCls', 'open'] // Index
            },

            assetTypes: {
                0: ['menu', 'sym', 'trend', 'ltp', 'chg', 'bbp', 'bap', 'l52', 'vol', 'tovr', 'trades', 'prvCls', 'cit', 'dltt', 'high'], // Equity
                75: ['menu', 'sym', 'trend', 'ltp', 'chg', 'bbp', 'bap', 'vol', 'tovr', 'trades', 'prvCls', 'high'], // Bonds (Fixed Income)
                68: ['menu', 'sym', 'trend', 'ltp', 'chg', 'bbp', 'bap', 'vol', 'tovr', 'trades', 'high'], // Options/Future
                86: ['menu', 'sym', 'trend', 'ltp', 'chg', 'bbp', 'bap', 'vol', 'tovr', 'trades', 'high'], // ETF (Mutual Funds)
                11: ['menu', 'sym', 'trend', 'ltp', 'chg', 'bbp', 'bap', 'vol', 'tovr', 'trades', 'high'], // Currency
                7: ['menu', 'sym', 'trend', 'ltp', 'chg', 'high', 'vol', 'tovr', 'trades', 'l52', 'prvCls'] // Index
            },

            tableParams: {
                MinHeaderHeight: { standard: 36, classic: 26 },
                RowHeight: { standard: 42, classic: 26 },
                MaxTableWidth: 5700
            }
        },

        indices: {
            columns: [{ id: 'dSym', width: 80, headerCellView: 'Ember.MoreHeaderCell', headerName: 'index', headerSecondName: '', headerThirdName: 'description', secondId: 'lDes', thirdId: 'open', headerStyle: 'text-left-header', sortKeyword: 'sDes', type: 'expandedSymbolMobile', expandedWidthRatio: '0.5', defaultWidthRatio: 16 / 37, isndicatorAvailable: true }, { id: 'ltp', width: 55, headerCellView: 'Ember.ExpandedHeaderCell', headerName: 'last', headerSecondName: '', headerThirdName: 'volume', secondId: 'vol', thirdId: 'low', sortKeyword: 'ltp', dataType: 'float', firstValueStyle: 'fore-color bold', type: 'expandedLtpMobile', noOfSecValueDecimalPlaces: 0, expandedWidthRatio: '0.25', defaultWidthRatio: 9 / 37 }, { id: 'pctChg', width: 50, headerCellView: 'Ember.ExpandedHeaderCell', headerName: 'perChange', headerSecondName: '', headerThirdName: 'change', headerStyle: 'pad-m-r', secondId: 'chg', thirdId: 'prvCls', sortKeyword: 'chg', positiveNegativeChange: true, type: 'expandedChgMobile', dataType: 'float', expandedWidthRatio: '0.25', defaultWidthRatio: 12 / 37 }]
        },

        timeAndSales: {
            defaultColumnMapping: { // Column Object parameters : id, width, headerName, sortKeyword, multiValueIds, cellStyle, sortDisable, firstValueStyle, isBold, dataType, backgroundColour,
                dDt: { id: 'dDt', width: 55, headerName: 'time', headerStyle: 'text-left-header font-xxx-l', cellStyle: 'text-left-header font-m', sortKeyword: 'dDt', type: 'classic', firstValueStyle: 'fore-color bold' },
                trp: { id: 'trp', width: 43, headerName: 'price', headerStyle: 'font-xxx-l', cellStyle: 'font-l', sortKeyword: 'trp', dataType: 'float', type: 'classic', firstValueStyle: 'highlight-fore-color bold' },
                trq: { id: 'trq', width: 50, headerName: 'quantity', headerStyle: 'font-xxx-l', cellStyle: 'font-l', sortKeyword: 'trq', dataType: 'int', type: 'classic', firstValueStyle: 'fore-color bold' },
                splits: { id: 'splits', width: 24, headerName: 'splits', headerStyle: 'font-xxx-l panel-table-padding', cellStyle: 'font-l', sortKeyword: 'splits', dataType: 'int', type: 'classic', firstValueStyle: 'fore-color bold' },
                tick: { id: 'tick', width: 16, headerName: '', thirdId: 'tick', headerStyle: 'font-xxx-l', sortKeyword: 'tick', type: 'upDown', cellStyle: 'text-center' },
                trdType: { id: 'trdType', width: 25, headerName: '', headerStyle: 'font-xxx-l', sortKeyword: 'trdType', type: 'buySell', positiveNegativeChange: true, firstValueStyle: 'font-4x-l' },
                nChg: { id: 'nChg', width: 45, headerName: 'change', headerStyle: 'font-xxx-l', isColumnSortDisabled: true, dataType: 'float', type: 'classic', positiveNegativeChange: true, firstValueStyle: 'font-l' }
            },

            defaultColumnIds: ['dDt', 'trp', 'trq', 'splits', 'tick', 'trdType'],

            BacklogBatchSize: 500
        },

        marketTimeAndSales: {
            defaultColumnMapping: { // Column Object parameters : id, width, headerName, sortKeyword, multiValueIds, cellStyle, sortDisable, firstValueStyle, isBold, dataType, backgroundColour,
                dDt: { id: 'dDt', width: 76, headerName: 'time', headerStyle: 'text-left-header font-xxx-l', cellStyle: 'text-left-header font-m', sortKeyword: 'dDt', type: 'classic', firstValueStyle: 'fore-color bold' },
                sym: { id: 'dispProp1', width: 84, headerName: 'symbol', headerStyle: 'text-left-header font-xxx-l', cellStyle: 'font-m symbol-fore-color text-left-header', sortKeyword: 'sym', type: 'classic', firstValueStyle: 'bold' },
                trp: { id: 'trp', width: 62, headerName: 'price', headerStyle: 'font-xxx-l', cellStyle: 'font-m', sortKeyword: 'trp', dataType: 'float', type: 'classic', firstValueStyle: 'highlight-fore-color bold' },
                trq: { id: 'trq', width: 70, headerName: 'quantity', headerStyle: 'font-xxx-l', cellStyle: 'font-m', sortKeyword: 'trq', dataType: 'int', type: 'classic', firstValueStyle: 'fore-color bold' },
                tick: { id: 'tick', width: 30, headerName: '', headerStyle: 'font-xx-l', thirdId: 'tick', sortKeyword: 'tick', type: 'upDown', cellStyle: 'text-center' },
                trdType: { id: 'trdType', width: 35, headerName: '', headerStyle: 'font-xx-l', sortKeyword: 'trdType', type: 'buySell', positiveNegativeChange: true }
            },

            defaultColumnIds: ['dDt', 'sym', 'trp', 'trq', 'tick', 'trdType'],

            BacklogBatchSize: 500
        },

        optionChain: {
            defaultColumnMapping: { // Column Object parameters : id, width, headerName, sortKeyword, multiValueIds, cellStyle, sortDisable, firstValueStyle, isBold, dataType, backgroundColour,
                callBestBid: { id: 'cStock.bbp', width: 40, headerName: 'callBestBid', headerStyle: 'text-left-header', type: 'classicCell', firstValueStyle: 'up-fore-color bold', backgroundStyle: 'watchlist-cell-back-green', blinkUpStyle: 'blink-classic-up', blinkDownStyle: 'blink-classic-down', isBlink: true, dataType: 'float' },
                callBestAsk: { id: 'cStock.bap', width: 40, headerName: 'callBestAsk', headerStyle: 'text-left-header', type: 'classicCell', firstValueStyle: 'down-fore-color bold', backgroundStyle: 'watchlist-cell-back-red', sortKeyword: 'bap', blinkUpStyle: 'blink-classic-up', blinkDownStyle: 'blink-classic-down', isBlink: true, dataType: 'float' },
                strikePrice: { id: 'strkPrc', width: 60, headerName: 'strikePrice', headerStyle: 'text-left-header', dataType: 'float', firstValueStyle: 'highlight-fore-color bold h-middle', backgroundStyle: 'watchlist-cell-back-lastqty', blinkUpStyle: 'blink-classic-up', blinkDownStyle: 'blink-classic-down', isBlink: true, type: 'classicCell' },
                putBestBid: { id: 'pStock.bbp', width: 40, headerName: 'putBestBid', headerStyle: 'text-left-header', type: 'classicCell', firstValueStyle: 'up-fore-color bold', backgroundStyle: 'watchlist-cell-back-green', blinkUpStyle: 'blink-classic-up', blinkDownStyle: 'blink-classic-down', isBlink: true, dataType: 'float' },
                putBestAsk: { id: 'pStock.bap', width: 40, headerName: 'putBestAsk', headerStyle: 'text-left-header', type: 'classicCell', firstValueStyle: 'down-fore-color bold', backgroundStyle: 'watchlist-cell-back-red', sortKeyword: 'bap', blinkUpStyle: 'blink-classic-up', blinkDownStyle: 'blink-classic-down', isBlink: true, dataType: 'float' }
            },

            defaultColumnIds: ['callBestBid', 'callBestAsk', 'strikePrice', 'putBestBid', 'putBestAsk']
        },

        quote: {
            panelIntraday: {
                // Equity
                '1': [{ lanKey: 'bestBid', dataField: 'bbp', formatter: 'C', style: 'up-fore-color' }, { lanKey: 'bidQty', dataField: 'bbq', formatter: 'L', style: 'up-fore-color' }, { lanKey: 'preClosed', dataField: 'prvCls', formatter: 'C' }, { lanKey: 'low', dataField: 'low', formatter: 'C' }, { lanKey: 'volume', dataField: 'vol', formatter: 'L' }, { lanKey: 'turnover', dataField: 'tovr', formatter: 'L' }, { lanKey: 'fiftyTwoWkL', dataField: 'l52', formatter: 'C' }, { lanKey: 'min', dataField: 'min', formatter: 'C' }, { lanKey: 'top', dataField: 'top', formatter: 'C' }, { lanKey: 'mktCap', dataField: 'mktCap', formatter: 'DN' }, { lanKey: 'bestOffer', dataField: 'bap', formatter: 'C', style: 'down-fore-color' }, { lanKey: 'offerQty', dataField: 'baq', formatter: 'L', style: 'down-fore-color' }, { lanKey: 'open', dataField: 'open', formatter: 'C' }, { lanKey: 'high', dataField: 'high', formatter: 'C' }, { lanKey: 'trades', dataField: 'trades', formatter: 'L' }, { lanKey: 'netCash', dataField: 'netCash', formatter: 'L' }, { lanKey: 'fiftyTwoWkH', dataField: 'h52', formatter: 'C' }, { lanKey: 'max', dataField: 'max', formatter: 'C' }, { lanKey: 'tov', dataField: 'tov', formatter: 'L' }, { lanKey: 'lastTradedTime', dataField: 'ltt', formatter: 'T' }],

                // Fixed Income
                6: [{ lanKey: 'bidQty', dataField: 'bbq', formatter: 'L', style: 'up-fore-color' }, { lanKey: 'preClosed', dataField: 'prvCls', formatter: 'C' }, { lanKey: 'low', dataField: 'low', formatter: 'C' }, { lanKey: 'volume', dataField: 'vol', formatter: 'L' }, { lanKey: 'turnover', dataField: 'tovr', formatter: 'L' }, { lanKey: 'fiftyTwoWkL', dataField: 'l52', formatter: 'C' }, { lanKey: 'min', dataField: 'min', formatter: 'C' }, { lanKey: 'top', dataField: 'top', formatter: 'C' }, { lanKey: 'mktCap', dataField: 'mktCap', formatter: 'DN' }, { lanKey: 'offerQty', dataField: 'baq', formatter: 'L', style: 'down-fore-color' }, { lanKey: 'open', dataField: 'open', formatter: 'C' }, { lanKey: 'high', dataField: 'high', formatter: 'C' }, { lanKey: 'trades', dataField: 'trades', formatter: 'L' }, { lanKey: 'netCash', dataField: 'netCash', formatter: 'L' }, { lanKey: 'fiftyTwoWkH', dataField: 'h52', formatter: 'C' }, { lanKey: 'max', dataField: 'max', formatter: 'C' }, { lanKey: 'tov', dataField: 'tov', formatter: 'L' }, { lanKey: 'lastTradedTime', dataField: 'ltt', formatter: 'T' }, { lanKey: 'bid', dataField: 'bbp', formatter: 'C', style: 'up-fore-color' }, { lanKey: 'offer', dataField: 'bap', formatter: 'C', style: 'down-fore-color' }],

                // Future
                4: [{ lanKey: 'bidQty', dataField: 'bbq', formatter: 'L', style: 'up-fore-color' }, { lanKey: 'preClosed', dataField: 'prvCls', formatter: 'C' }, { lanKey: 'low', dataField: 'low', formatter: 'C' }, { lanKey: 'volume', dataField: 'vol', formatter: 'L' }, { lanKey: 'offerQty', dataField: 'baq', formatter: 'L', style: 'down-fore-color' }, { lanKey: 'open', dataField: 'open', formatter: 'C' }, { lanKey: 'high', dataField: 'high', formatter: 'C' }, { lanKey: 'trades', dataField: 'trades', formatter: 'L' }, { lanKey: 'bid', dataField: 'bbp', formatter: 'C', style: 'up-fore-color' }, { lanKey: 'offer', dataField: 'bap', formatter: 'C', style: 'down-fore-color' }],

                // Option
                3: [{ lanKey: 'bidQty', dataField: 'bbq', formatter: 'L', style: 'up-fore-color' }, { lanKey: 'preClosed', dataField: 'prvCls', formatter: 'C' }, { lanKey: 'low', dataField: 'low', formatter: 'C' }, { lanKey: 'volume', dataField: 'vol', formatter: 'L' }, { lanKey: 'offerQty', dataField: 'baq', formatter: 'L', style: 'down-fore-color' }, { lanKey: 'open', dataField: 'open', formatter: 'C' }, { lanKey: 'high', dataField: 'high', formatter: 'C' }, { lanKey: 'trades', dataField: 'trades', formatter: 'L' }, { lanKey: 'bid', dataField: 'bbp', formatter: 'C', style: 'up-fore-color' }, { lanKey: 'offer', dataField: 'bap', formatter: 'C', style: 'down-fore-color' }],

                // Mutual Fund
                5: [{ lanKey: 'bidQty', dataField: 'bbq', formatter: 'L', style: 'up-fore-color' }, { lanKey: 'preClosed', dataField: 'prvCls', formatter: 'C' }, { lanKey: 'low', dataField: 'low', formatter: 'C' }, { lanKey: 'volume', dataField: 'vol', formatter: 'L' }, { lanKey: 'turnover', dataField: 'tovr', formatter: 'L' }, { lanKey: 'fiftyTwoWkL', dataField: 'l52', formatter: 'C' }, { lanKey: 'offerQty', dataField: 'baq', formatter: 'L', style: 'down-fore-color' }, { lanKey: 'open', dataField: 'open', formatter: 'C' }, { lanKey: 'high', dataField: 'high', formatter: 'C' }, { lanKey: 'trades', dataField: 'trades', formatter: 'L' }, { lanKey: 'mktCap', dataField: 'mktCap', formatter: 'DN' }, { lanKey: 'fiftyTwoWkH', dataField: 'h52', formatter: 'C' }, { lanKey: 'bid', dataField: 'bbp', formatter: 'C', style: 'up-fore-color' }, { lanKey: 'offer', dataField: 'bap', formatter: 'C', style: 'down-fore-color' }],

                // Currency
                7: [{ lanKey: 'bidQty', dataField: 'bbq', formatter: 'L', style: 'up-fore-color' }, { lanKey: 'preClosed', dataField: 'prvCls', formatter: 'C' }, { lanKey: 'low', dataField: 'low', formatter: 'C' }, { lanKey: 'fiftyTwoWkL', dataField: 'l52', formatter: 'C' }, { lanKey: 'lastTrade', dataField: 'ltp', formatter: 'C' }, { lanKey: 'offerQty', dataField: 'baq', formatter: 'L', style: 'down-fore-color' }, { lanKey: 'open', dataField: 'open', formatter: 'C' }, { lanKey: 'high', dataField: 'high', formatter: 'C' }, { lanKey: 'fiftyTwoWkH', dataField: 'h52', formatter: 'C' }, { lanKey: 'close', dataField: 'cls', formatter: 'C' }],

                // Index
                '8': [{ lanKey: 'preClosed', dataField: 'prvCls', formatter: 'C' }, { lanKey: 'low', dataField: 'low', formatter: 'C' }, { lanKey: 'volume', dataField: 'vol', formatter: 'L' }, { lanKey: 'turnover', dataField: 'tovr', formatter: 'L' }, { lanKey: 'fiftyTwoWkL', dataField: 'l52', formatter: 'C' }, { lanKey: 'mktCap', dataField: 'mktCap', formatter: 'DN' }, { lanKey: 'open', dataField: 'open', formatter: 'C' }, { lanKey: 'high', dataField: 'high', formatter: 'C' }, { lanKey: 'trades', dataField: 'trades', formatter: 'L' }, { lanKey: 'netCash', dataField: 'netCash', formatter: 'L' }, { lanKey: 'fiftyTwoWkH', dataField: 'h52', formatter: 'C' }, { lanKey: 'lastTradedTime', dataField: 'ltt', formatter: 'T' }]
            },

            panelFundamental: {
                // Equity
                '1': [{ lanKey: 'eps', dataField: 'eps', formatter: 'C' }, { lanKey: 'yield1', dataField: 'yld', formatter: 'C' }, { lanKey: 'peRatio', dataField: 'per', formatter: 'C' }, { lanKey: 'pbRatio', dataField: 'pbr', formatter: 'C' }, { lanKey: 'dividend', dataField: 'div', formatter: 'I' }, { lanKey: 'exDividendDate', dataField: 'edd', formatter: 'D' }],

                // Fixed Income
                6: [{ lanKey: 'couponRate', dataField: 'cor', formatter: 'C' }, { lanKey: 'couponFreq', dataField: 'cof', formatter: 'C' }, { lanKey: 'previousCouponDate', dataField: 'pcd', formatter: 'D' }, { lanKey: 'faceValue', dataField: 'fVal', formatter: 'C' }, { lanKey: 'maturityDate', dataField: 'matD', formatter: 'D' }, { lanKey: 'yield1', dataField: 'yld', formatter: 'C' }, { lanKey: 'bondType', dataField: 'boT', formatter: 'S' }, { lanKey: 'outstandingAmount', dataField: 'outA', formatter: 'C' }, { lanKey: 'settlementDate', dataField: 'setD', formatter: 'D' }, { lanKey: 'dayCountMethod', dataField: 'dcm', formatter: 'S' }],

                // Future
                4: [{ lanKey: 'strikePrice', dataField: 'stkP', formatter: 'C' }, { lanKey: 'expiryDate', dataField: 'expDt', formatter: 'D' }, { lanKey: 'lotSize', dataField: 'lot', formatter: 'I' }, { lanKey: 'openInterest', dataField: 'oInt', formatter: 'C' }, { lanKey: 'openInterestChange', dataField: 'oIntC', formatter: 'P' }, { lanKey: 'settlementPrice', dataField: 'sp', formatter: 'C' }],

                // Option
                3: [{ lanKey: 'strikePrice', dataField: 'stkP', formatter: 'C' }, { lanKey: 'expiryDate', dataField: 'expDt', formatter: 'D' }, { lanKey: 'lotSize', dataField: 'lot', formatter: 'I' }, { lanKey: 'openInterest', dataField: 'oInt', formatter: 'C' }, { lanKey: 'openInterestChange', dataField: 'oIntC', formatter: 'P' }, { lanKey: 'settlementPrice', dataField: 'sp', formatter: 'C' }],

                // Mutual Fund
                5: [{ lanKey: 'dividend', dataField: 'div', formatter: 'I' }, { lanKey: 'exDividendDate', dataField: 'edd', formatter: 'D' }],

                // Currency
                7: [],

                // Index
                '8': []
            }
        },

        globalSearch: {
            maxResultsForGroup: 10,

            groups: {
                topHits: { rank: 1, groupName: 'Top hits', type: 'T', colorCss: 'yellow-back-color' },
                // Equity
                1: { rank: 2, groupName: 'Equity', lanKey: 'equity', type: 1, colorCss: 'blue-back-color' },
                // Fixed Income
                6: { rank: 3, groupName: 'Fixed Income', lanKey: 'fixedIncome', type: 6, colorCss: 'green-back-color-2' },
                // Future
                4: { rank: 4, groupName: 'Future', lanKey: 'future', type: 4, colorCss: 'purple-back-color' },
                // Option
                3: { rank: 5, groupName: 'Option', lanKey: 'option', type: 3, colorCss: 'pink-back-color' },
                // Mutual Fund
                5: { rank: 6, groupName: 'Mutual Fund', lanKey: 'mutualFund', type: 5, colorCss: 'green-back-color' },
                // Index
                8: { rank: 7, groupName: 'Index', lanKey: 'index', type: 8, colorCss: 'blue-back-color-2' },
                other: { rank: 8, groupName: 'Other', lanKey: 'other', type: 'D', colorCss: 'orange-back-color' }
            }
        },

        alert: {
            criteria: [{ value: '>', lanKey: 'greaterThan' }, { value: '>=', lanKey: 'greaterThanOrEqual' }, { value: '<', lanKey: 'lessThan' }, { value: '<=', lanKey: 'lessThanOrEqual' }, { value: '=', lanKey: 'equal' }],

            alertCondition: [{ value: '0', lanKey: 'Match All' }, { value: '1', lanKey: 'Match Any' }],

            frequency: [{ value: '1', lanKey: 'Once Only' }, { value: '2', lanKey: 'Once a day' }],

            parameters: [{ value: 'bbp', lanKey: 'bestBid', field: 'BEST_BID', isDecimalAllowed: true }, { value: 'bap', lanKey: 'bestOffer', field: 'BEST_ASK', isDecimalAllowed: true }, { value: 'baq', lanKey: 'offerQty', field: 'BEST_ASK_QTY', isDecimalAllowed: false }, { value: 'bbq', lanKey: 'bidQty', field: 'BEST_BID_QTY', isDecimalAllowed: false }, { value: 'vol', lanKey: 'volume', field: 'VOLUME', isDecimalAllowed: false }, { value: 'chg', lanKey: 'change', field: 'CHANGE', isDecimalAllowed: true }, { value: 'ltp', lanKey: 'last', field: 'LAST_TRADE_PRICE', isDecimalAllowed: true }, { value: 'ltq', lanKey: 'lastQty', field: 'LAST_TRADE_QTY', isDecimalAllowed: true }, { value: 'pctChg', lanKey: 'perChange', field: 'PCT_CHANGE', isDecimalAllowed: true }],

            paramMap: {
                BEST_BID: 'bestBid',
                BEST_ASK: 'bestOffer',
                BEST_ASK_QTY: 'offerQty',
                BEST_BID_QTY: 'bidQty',
                VOLUME: 'volume',
                CHANGE: 'change',
                PCT_CHANGE: 'perChange'
            }
        },

        financialRatios: {
            types: [{ value: 'BS', lanKey: 'balanceSheet' }, { value: 'IS', lanKey: 'incomeStatement' }, { value: 'CF', lanKey: 'cashFlow' }]
        },

        alertHistory: {
            defaultColumnMapping: {
                contextMenu: { id: 'contextMenu', width: 15, name: 'contextMenu', headerName: '', headerStyle: 'text-center', iconClass: 'glyphicon glyphicon-chevron-right', isColumnSortDisabled: true, type: 'contextMenuMobile', buttonFunction: 'updateAlert' },
                sym: { id: 'sym', width: 55, headerName: 'symbol', secondId: 'lDes', thirdId: 'open', headerStyle: 'text-left-header font-xxx-l', sortKeyword: 'sDes', type: 'alertSymbolMobile' },
                crit: { id: 'crit', width: 80, headerName: 'condition', headerStyle: 'text-left-header font-xxx-l', sortKeyword: 'crit', type: 'alertCriteriaMobile' },
                status: { id: 'status', width: 65, headerName: 'status', headerStyle: 'text-left-header font-xxx-l', sortKeyword: 'status', type: 'alertStatusMobile' }
            },

            defaultColumnIds: ['contextMenu', 'sym', 'crit', 'status']
        },

        topStocks: {
            // TopGainersByPercentageChange
            1: {
                fields: [{ filed: 'description', objName: 'stock.sDes', fontColor: 'fore-color font-3x-l font-thick', textAlign: 'h-left', col: 'layout-col-24', bold: 'bold', padding: 'pad-widget-left' },
                // {filed: 'symbol', objName: 'dSym', fontColor: 'symbol-fore-color', textAlign: 'h-left ', bold: 'bold', padding: 'pad-widget-left'},
                { filed: 'last', objName: 'ltp', fontColor: 'highlight-fore-color font-3x-l', textAlign: 'h-right', formatter: 'formatNumberWithDeci', padding: 'pad-m-l pad-widget-right' }, { filed: 'change', objName: 'chg', fontColor: 'redOrGreen', textAlign: 'h-right ltr', formatter: 'formatNumberWithDeci', padding: 'pad-m-l pad-widget-right' }, { filed: 'perChange', objName: 'pctChg', fontColor: 'redOrGreen', textAlign: 'h-right ltr', formatter: 'formatNumberPercentage', bold: 'bold', padding: 'pad-m-l pad-widget-right' }],
                title: 'topGainers',
                icon: 'glyphicon-triangle-top up-fore-color',
                showTopStockTabs: true
            },
            // TopLosersByPercentageChange
            3: {
                fields: [{ filed: 'description', objName: 'stock.sDes', fontColor: 'fore-color font-3x-l font-thick', textAlign: 'h-left', col: 'layout-col-24', bold: 'bold', padding: 'pad-widget-left' },
                // {filed: 'symbol', objName: 'dSym', fontColor: 'symbol-fore-color', textAlign: 'h-left', bold: 'bold', padding: 'pad-widget-left'},
                { filed: 'last', objName: 'ltp', fontColor: 'highlight-fore-color font-3x-l', textAlign: 'h-right', formatter: 'formatNumberWithDeci', padding: 'pad-m-l pad-widget-right' }, { filed: 'change', objName: 'chg', fontColor: 'redOrGreen', textAlign: 'h-right ltr', formatter: 'formatNumberWithDeci', padding: 'pad-m-l pad-widget-right' }, { filed: 'perChange', objName: 'pctChg', fontColor: 'redOrGreen', textAlign: 'h-right ltr', formatter: 'formatNumberPercentage', bold: 'bold', padding: 'pad-m-l pad-widget-right' }],
                title: 'topLosers',
                icon: 'glyphicon-triangle-bottom  down-fore-color',
                showTopStockTabs: true
            },
            // MostActiveByVolume
            4: {
                fields: [{ filed: 'description', objName: 'stock.sDes', col: 'layout-col-24', fontColor: 'fore-color font-3x-l font-thick', textAlign: 'h-left', bold: 'bold', padding: 'pad-widget-left' }, { filed: 'last', objName: 'ltp', fontColor: 'highlight-fore-color font-3x-l', textAlign: 'h-right', formatter: 'formatNumberWithDeci', padding: 'pad-m-l' },
                // {filed: 'change', objName: 'chg', fontColor: 'redOrGreen', textAlign: 'h-right', formatter: 'formatNumberWithDeci', padding: 'pad-m-l'},
                { filed: 'perChange', objName: 'pctChg', fontColor: 'redOrGreen', textAlign: 'h-right ltr', formatter: 'formatNumberPercentage', padding: 'pad-m-l pad-widget-right' }, { filed: 'volume', objName: 'vol', fontColor: 'highlight-fore-color', textAlign: 'h-right', formatter: 'formatNumber', bold: 'bold', padding: 'pad-m-l pad-widget-right' }],
                title: 'MActiveByVol',
                icon: 'glyphicon glyphicon-transfer fore-color',
                showTopStockTabs: false
            },
            // MostActiveByTrades
            5: {
                fields: [{ filed: 'description', objName: 'stock.sDes', col: 'layout-col-24', fontColor: 'fore-color font-3x-l font-thick', textAlign: 'h-left', bold: 'bold', padding: 'pad-widget-left' }, { filed: 'last', objName: 'ltp', fontColor: 'highlight-fore-color font-3x-l', textAlign: 'h-right', formatter: 'formatNumberWithDeci', padding: 'pad-m-l pad-widget-right' }, { filed: 'perChange', objName: 'pctChg', fontColor: 'redOrGreen', textAlign: 'h-right ltr', formatter: 'formatNumberPercentage', padding: 'pad-m-l pad-widget-right' }, { filed: 'trades', objName: 'trades', fontColor: 'fore-color', textAlign: 'h-right', formatter: 'formatNumber', bold: 'bold', padding: 'pad-m-l pad-widget-right' }],
                title: 'MActiveByTrades',
                icon: 'glyphicon glyphicon-transfer fore-color',
                showTopStockTabs: false
            },
            // MostActiveByTurnover
            6: {
                fields: [{ filed: 'description', objName: 'stock.sDes', col: 'layout-col-24', fontColor: 'fore-color font-3x-l font-thick', textAlign: 'h-left', bold: 'bold', padding: 'pad-widget-left' }, { filed: 'last', objName: 'ltp', fontColor: 'highlight-fore-color font-3x-l', textAlign: 'h-right', formatter: 'formatNumberWithDeci', padding: 'pad-m-l' },
                // {filed: 'change', objName: 'chg', fontColor: 'redOrGreen', textAlign: 'h-right', formatter: 'formatNumberWithDeci', padding: 'pad-m-l'},
                { filed: 'perChange', objName: 'pctChg', fontColor: 'redOrGreen', textAlign: 'h-right ltr', formatter: 'formatNumberPercentage', padding: 'pad-m-l' }, { filed: 'turnover', objName: 'tovr', fontColor: 'highlight-fore-color', textAlign: 'h-right', formatter: 'formatNumber', bold: 'bold', padding: 'pad-m-l pad-widget-right' }],
                title: 'MActiveByTurnover',
                icon: 'glyphicon glyphicon-transfer fore-color',
                showTopStockTabs: false
            }
        },

        gms: {
            'SXAUUSDOZ.SP': { sym: 'SXAUUSDOZ.SP', exg: 'GLOBAL', inst: '0', sDes: 'Gold', icon: 'comm-icon icon-gold' },
            'SXAGUSDOZ.SP': { sym: 'SXAGUSDOZ.SP', exg: 'GLOBAL', inst: '0', sDes: 'Silver', icon: 'comm-icon icon-silver' },
            'EBROUSDBR.SP': { sym: 'EBROUSDBR.SP', exg: 'GLOBAL', inst: '0', sDes: 'Brent Crude', icon: 'comm-icon icon-brent-crude' },
            'EWTIUSDBR.SP': { sym: 'EWTIUSDBR.SP', exg: 'GLOBAL', inst: '0', sDes: 'WTI Crude', icon: 'comm-icon icon-wti-crude' },
            'EURSAR': { sym: 'EURSAR', exg: 'GLOBAL', inst: '0', sDes: 'EURSAR', icon: 'comm-icon icon-euro' }
        }
    };
});
define('universal-app/controllers/authentication/price-retail-authenticator', ['exports', 'ember', '../../models/shared/shared-service', '../../utils/utils'], function (exports, _ember, _sharedService, _utils) {
    'use strict';

    exports.default = _ember.default.Controller.extend({
        resendSubscriptions: false,

        /* *
         * Authenticate user
         * @param username Username
         * @param password Password
         * @param allowInit Allow application to initialize before login
         * @private
         */
        authenticateUser: function authenticateUser(username, password, allowInit, _authSuccess, authFail) {
            var that = this;
            var priceService = _sharedService.default.getService('price');

            // Initialize application if and only if the given user is the last successfully logged-in user
            _authSuccess(username, password, allowInit);

            priceService.authenticateWithUsernameAndPassword({
                username: username,
                password: password,
                resendSubscriptions: that.resendSubscriptions,

                authSuccess: function authSuccess() {
                    _utils.default.logger.logTrace('Authentication success triggered in price-retail-authenticator');

                    if (!_sharedService.default.getService('sharedUI').isDelayedUserLogged) {
                        _sharedService.default.userSettings.set('username', _sharedService.default.getService('price').userDS.get('username'));
                        _sharedService.default.userSettings.save();
                    }

                    // Initialize application if and only if the given user is the last successfully logged-in user
                    _authSuccess(username, password, !allowInit);
                },

                authFailed: function authFailed(reason) {
                    _utils.default.logger.logTrace('Authentication failure triggered in trade-retail-authenticator');

                    that.resendSubscriptions = true;
                    priceService.webSocketManager.closeConnection(priceService.constants.SocketConnectionType.QuoteServer);

                    authFail(reason, username, password);
                }
            });
        }
    }).create();
});
define('universal-app/controllers/authentication/price-sso-authenticator', ['exports', 'ember', '../../utils/utils', '../../models/shared/shared-service', '../../config/app-config', '../../controllers/authentication/authentication-constants'], function (exports, _ember, _utils, _sharedService, _appConfig, _authenticationConstants) {
    'use strict';

    exports.default = _ember.default.Controller.extend({
        /* *
         * Authenticate user
         * @param ssoToken SSO token
         * @private
         */
        authenticateUser: function authenticateUser(ssoToken, _authSuccess, authFail) {
            var priceService = _sharedService.default.getService('price');

            priceService.authenticateWithSsoToken({
                ssoToken: ssoToken,
                ssoType: _utils.default.Constants.SsoTypes.Price,

                authSuccess: function authSuccess() {
                    _utils.default.logger.logTrace('Authentication success triggered in price-sso-authenticator');

                    _sharedService.default.userSettings.set('username', priceService.userDS.get('username'));
                    _sharedService.default.userSettings.save();

                    _authSuccess();

                    if (_authenticationConstants.default.AuthModes.PriceSsoTradeSso === _appConfig.default.customisation.authenticationMode) {
                        var tradeService = _sharedService.default.getService('trade');

                        if (tradeService) {
                            tradeService.authenticateWithSsoToken({
                                // TODO: [Bashitha] Call trade sso authentication
                            });
                        }
                    }
                },

                authFailed: function authFailed(reason) {
                    _utils.default.logger.logTrace('Authentication failure triggered in price-sso-authenticator');

                    priceService.webSocketManager.closeConnection(priceService.constants.SocketConnectionType.QuoteServer);
                    authFail(reason);
                }
            });
        }
    }).create();
});
define('universal-app/controllers/custom-workspace/base-layout', ['exports', 'ember', '../main-panel-container-controller', '../../models/shared/shared-service', '../controller-factory'], function (exports, _ember, _mainPanelContainerController, _sharedService, _controllerFactory) {
    'use strict';

    exports.default = _mainPanelContainerController.default.extend({
        router: undefined,
        menuContent: undefined,
        tabContent: undefined,
        widgetContainer: undefined,

        onLoadLayout: function onLoadLayout(router, menuContent, tabContent, widgetContainer) {
            this.router = router;
            this.menuContent = menuContent;
            this.tabContent = tabContent;
            this.widgetContainer = widgetContainer;

            this.addContainerToMap(this, menuContent, tabContent);
            this.initializeCustomWorkspaceWidget();
        },

        initializeCustomWorkspaceWidget: function initializeCustomWorkspaceWidget() {
            this.innerWidgetMap[this.menuContent.id] = this.innerWidgetMap[this.menuContent.id] || {};
            this.innerWidgetMap[this.menuContent.id][this.tabContent.id] = this.tabContent.w || [];
        },

        onAfterRender: function onAfterRender() {
            // Base override
        },

        onLoadLayoutContainer: function onLoadLayoutContainer(router, menuContent, tabContent, widgetContainer) {
            var that = this;

            this.router = router;
            this.menuContent = menuContent;
            this.tabContent = tabContent;
            this.widgetContainer = widgetContainer;

            this.initializeCustomWorkspaceWidget();
            this._loadLayout(this, widgetContainer);

            if (tabContent.w) {
                // Wait till DOM is ready with loaded template
                _ember.default.run.later(function () {
                    _ember.default.$.each(tabContent.w, function (key, widget) {
                        if (widget) {
                            if (that.outletMap) {
                                _ember.default.set(that.outletMap, 'w' + widget.id, '');
                            }

                            if (that.widgetMap) {
                                _ember.default.set(that.widgetMap, 'w' + widget.id, true);
                            }
                        }
                    });
                }, 200);
            }
        },

        getVacantCoordinates: function getVacantCoordinates() {
            var that = this;
            var maxY = 0;
            var workspace = this.getCustomWorkSpace(_sharedService.default.userState.customWS);

            _ember.default.$.each(workspace, function (key, containerObj) {
                var verticalGap = containerObj.y + containerObj.h;

                if (containerObj.act === that.utils.Constants.Yes && verticalGap > maxY) {
                    maxY = verticalGap;
                }
            });

            return {
                x: 0,
                y: maxY // Maximum Y coordinate is the next vacant Y coordinate as coordinate is zero (0) based
            };
        },

        _loadLayout: function _loadLayout(customLayout, widgetContainer) {
            var route = customLayout.container.lookup('route:application');

            var customLayoutView = _controllerFactory.default.createController(widgetContainer.container, 'view:custom-workspace/custom-layout-view');
            customLayoutView.set('targetController', customLayout);

            route.render('custom-workspace/custom-layout-view', {
                into: 'custom-workspace/custom-layout',
                outlet: 'custom-outlet',
                controller: customLayoutView
            });
        },

        actions: {
            closeInnerWidget: function closeInnerWidget(widgetId) {
                this.closeInnerWidget(widgetId);
            }
        }
    });
});
define('universal-app/controllers/custom-workspace/classic', ['exports', '../widget-container-controller'], function (exports, _widgetContainerController) {
    'use strict';

    exports.default = _widgetContainerController.default.extend({
        outletMap: {
            o1: 'height: calc(100% - 25px)'
        }
    });
});
define('universal-app/controllers/custom-workspace/custom-layout', ['exports', 'ember', './base-layout', '../../models/shared/shared-service', '../controller-factory', '../../config/price-widget-config', '../../app-events'], function (exports, _ember, _baseLayout, _sharedService, _controllerFactory, _priceWidgetConfig, _appEvents) {
    'use strict';

    exports.default = _baseLayout.default.extend({
        widgetList: _priceWidgetConfig.default.WidgetList,
        innerWidgetMap: {},
        outletMap: {},
        widgetMap: {},
        widgetControllerMap: {}, // To keep the rendered widget controllers' details to call resize

        /* *
         * A callback function of the grid container resize
         */
        onResizeContainer: function onResizeContainer(event, ui) {
            var activeContainerId = ui.element[0].attributes['grid-index'].value;
            var innerWidgetObj = this.getInnerWidgetMap(activeContainerId);
            var activeWidget = this._getDefaultInnerWidget(activeContainerId, innerWidgetObj.iw); // private fn of parent

            if (activeContainerId && activeWidget && this.widgetControllerMap[activeContainerId] && this.widgetControllerMap[activeContainerId][activeWidget.id]) {
                this.widgetControllerMap[activeContainerId][activeWidget.id].resizeWidget();
            }

            var customWSContent = _ember.default.$('div#custom-workspace-layout');
            customWSContent.find('div.grid-stack-placeholder').hide();
        },

        onClearInnerWidget: function onClearInnerWidget(menuContentId, tabContentId, widgetDefId) {
            this._super();

            if (this.controllers && this.controllers[menuContentId] && this.controllers[menuContentId][tabContentId]) {
                var controllerMap = this.controllers[menuContentId][tabContentId];

                _ember.default.$.each(controllerMap, function (wid, controller) {
                    if (controller.bid === widgetDefId) {
                        _appEvents.default.unSubscribeLanguageChanged(controller.wkey);
                    }
                });
            }
        },

        /* *
         * Create the map with inner widget related details
         */
        getInnerWidgetMap: function getInnerWidgetMap(widgetId) {
            var innerWidgetMap = this.innerWidgetMap;

            innerWidgetMap[this.menuContent.id] = innerWidgetMap[this.menuContent.id] || {};
            innerWidgetMap[this.menuContent.id][this.tabContent.id] = innerWidgetMap[this.menuContent.id][this.tabContent.id] || {};
            innerWidgetMap[this.menuContent.id][this.tabContent.id][widgetId] = innerWidgetMap[this.menuContent.id][this.tabContent.id][widgetId] || {};

            return innerWidgetMap[this.menuContent.id][this.tabContent.id][widgetId];
        },

        /* *
         * Prepare the object and function to render the inner widget inside the grid container
         */
        setWidgetToContainer: function setWidgetToContainer(widgetId, widget) {
            var isDefaultTemplate = widget.code === 'custom-workspace.widget-selection';
            var widgetDef = this.addInnerWidget(widgetId, widget, isDefaultTemplate); // widgetDef[customWidget, activeWidget]

            this.set('isSelectionWidget', isDefaultTemplate);
            this.saveLastActiveInnerWidget(widgetDef.customWidget, widgetDef.innerWidget);
            this.saveWorkspace();
            this.prepareWidget(this.menuContent, this.tabContent, widgetDef.customWidget, undefined, undefined, widgetId);
        },

        /* *
         * Render the selected widget inside the grid container
         */
        prepareWidget: function prepareWidget(menuContent, tabContent, widgetDef, args, innerWidgetContent, wId) {
            var widgetId = wId ? wId : widgetDef.id;

            if (innerWidgetContent && innerWidgetContent.isSelect) {
                var selectionWidgetController = _controllerFactory.default.createController(this.container, 'controller:custom-workspace.widget-selection');

                selectionWidgetController.initializeWidget(innerWidgetContent, { widgetArgs: { widgetContainer: this, widgetId: widgetId } });
                selectionWidgetController.showWidgetList();
            } else {
                var innerWidgetParams = this._prepareInnerWidget(menuContent, tabContent, widgetDef, innerWidgetContent, args); // Parent's private fn
                var activeInnerWidget = innerWidgetParams ? innerWidgetParams.activeWidget : widgetDef.iw[widgetDef.iw.length - 1];
                var innerWidgetId = activeInnerWidget.id;

                var widgetArgs = {
                    isWidgetHeaderAvailable: true,
                    isWidgetCloseAvailable: true,
                    widgetId: widgetId,
                    innerWidgetId: innerWidgetId,
                    hideSymbol: true,
                    isSearchAvailable: activeInnerWidget && activeInnerWidget.wn !== 'price.widgets.announcement.exchange-announcement',
                    searchID: { popup: 'customWorkspacePopup-' + widgetId, search: 'customWorkspaceSearch-' + widgetId },
                    cursorMoveCss: 'cursor-move',
                    wkey: 'customWorkspace-' + widgetId,
                    isSelectionWidget: widgetDef.iw.length === 1 ? widgetDef.iw[widgetDef.iw.length - 1].wn === 'custom-workspace.widget-selection' : false
                };

                widgetArgs = _ember.default.$.extend({}, widgetArgs, activeInnerWidget.args);

                var widgetController = this.renderWidget(menuContent, tabContent, widgetDef, widgetArgs, innerWidgetParams);

                this.widgetControllerMap[widgetId] = this.widgetControllerMap[widgetId] || {};
                this.widgetControllerMap[widgetId][innerWidgetId] = widgetController;

                // TODO [Atheesan] Enable this is if the container should resize according to widget size
                /* if (widgetController && widgetController.dimensions) {
                 var widgetContainer = Ember.$('div#gs-w-div-' + widgetId);
                 var grid = Ember.$('.grid-stack').data('gridstack');
                 grid.resize(widgetContainer, undefined, widgetController.dimensions.h);
                 } */

                _ember.default.set(this.outletMap, 'o' + widgetId, '');
                _ember.default.set(this.widgetMap, 'w' + widgetId, true);

                this.controllers[widgetId] = this.controllers[widgetId] ? this.controllers[widgetId] : {};
                this.controllers[widgetId][innerWidgetId] = widgetController;

                _appEvents.default.subscribeLanguageChanged(widgetController, widgetController.get('wkey'));
            }
        },

        /* *
         * Create the inner widget object and add it to the inner widget map
         */
        addInnerWidget: function addInnerWidget(widgetId, widget, isSelectionWidget) {
            var customWidget = this.getInnerWidgetMap(widgetId);
            var innerWidget = {};

            customWidget.iw = customWidget.iw ? customWidget.iw : [];
            customWidget.id = parseInt(widgetId, 10);

            var innerWidgetArrayLength = customWidget.iw.length;

            innerWidget.wn = widget.code;
            innerWidget.def = true;
            innerWidget.isShow = true;
            innerWidget.id = innerWidgetArrayLength + 1;
            innerWidget.desc = widget.desc ? widget.desc : 'selectWidget';
            innerWidget.icon = widget.icon;
            innerWidget.isSelect = isSelectionWidget;
            innerWidget.args = widget.args;

            var lastInnerWidget = customWidget.iw[innerWidgetArrayLength - 1];

            if (innerWidgetArrayLength > 0) {
                customWidget.iw.forEach(function (innerCustomWidget) {
                    innerCustomWidget.def = false;
                });
            }

            if (lastInnerWidget && lastInnerWidget.isSelect) {
                customWidget.iw[innerWidgetArrayLength - 1] = innerWidget;
                innerWidget.id = innerWidgetArrayLength;

                var selectionInnerWidget = {};
                selectionInnerWidget.wn = 'custom-workspace.widget-selection';
                selectionInnerWidget.def = true;
                selectionInnerWidget.isShow = true;
                selectionInnerWidget.id = innerWidgetArrayLength + 1;
                selectionInnerWidget.desc = 'selectWidget';
                selectionInnerWidget.isSelect = true;

                customWidget.iw[innerWidgetArrayLength] = selectionInnerWidget;
            } else {
                customWidget.iw[innerWidgetArrayLength] = innerWidget;
            }

            this.innerWidgetMap[this.menuContent.id][this.tabContent.id][widgetId] = customWidget;
            this.saveTabWidget(customWidget);

            return {
                customWidget: customWidget,
                innerWidget: innerWidget
            };
        },

        /* *
         * Close inner widget loaded in a container
         */
        closeInnerWidget: function closeInnerWidget(widgetId, innerWidgetId) {
            if (this.widgetMap['w' + widgetId]) {
                var widgetController = this.controllers[widgetId][innerWidgetId];
                var innerWidgetObj = this.getInnerWidgetMap(widgetId);
                var innerWidget = innerWidgetObj.iw;

                if (widgetController) {
                    widgetController.closeWidget();
                }

                if (innerWidget.length > 1) {
                    if (!innerWidget[innerWidgetId - 1].isSelect) {
                        innerWidget[innerWidgetId - 1] = undefined;

                        var newInnerWidget = [];

                        innerWidget.forEach(function (widgetObj) {
                            if (widgetObj !== undefined) {
                                widgetObj.id = newInnerWidget.length + 1;
                                newInnerWidget[newInnerWidget.length] = widgetObj;
                            }
                        });

                        innerWidgetObj.iw = newInnerWidget;
                        this.innerWidgetMap[this.menuContent.id][this.tabContent.id][widgetId] = innerWidgetObj;

                        this.widgetContainer.saveTabWidget(innerWidgetObj);

                        if (newInnerWidget[newInnerWidget.length - 1].isSelect) {
                            this.saveLastActiveInnerWidget(innerWidgetObj, newInnerWidget[0]);
                        }
                    } else {
                        this.saveLastActiveInnerWidget(innerWidgetObj, innerWidget[innerWidget.length - 2]);
                    }

                    this.prepareWidget(this.menuContent, this.tabContent, innerWidgetObj, undefined, undefined, widgetId);
                } else {
                    this.innerWidgetMap[this.menuContent.id][this.tabContent.id][widgetId] = undefined;
                    this.closeWidgetContainer(widgetId);
                }
            } else {
                this.innerWidgetMap[this.menuContent.id][this.tabContent.id][widgetId] = undefined;
                this.closeWidgetContainer(widgetId);
            }

            this.saveWorkspace();
        },

        /* *
         * Remove the grid widget container from the view of the custom workspace if all the widgets are closed
         */
        closeWidgetContainer: function closeWidgetContainer(widgetId) {
            this.widgetContainer.removeTabWidget(widgetId);

            this.router.render('shared.empty', {
                into: 'custom-workspace.custom-layout',
                outlet: 'w' + widgetId
            });

            var grid, coordinates;
            var containerToRemove = _ember.default.$('div#gs-w-div-' + widgetId);
            containerToRemove.attr('active-c', this.utils.Constants.No);

            coordinates = this.getVacantCoordinates();

            grid = _ember.default.$('.grid-stack').data('gridstack');
            grid.min_height(containerToRemove, 1);
            grid.update(containerToRemove, coordinates.x, coordinates.y, 12, 1);

            _ember.default.set(this.outletMap, 'o' + widgetId, 'display: none');
            _ember.default.set(this.widgetMap, 'w' + widgetId, false);
        },

        /* *
         * Load the active custom workspace related option popup
         */
        customizeCustomWorkspace: function customizeCustomWorkspace(isMenu) {
            var viewName = 'components/bootstrap-dropdown-select-list';
            var instanceName = 'component:bootstrap-dropdown-select';

            var menuOptions = [{ code: 'rename', des: this.app.lang.labels.renameWorkspace }, { code: 'delete', des: this.app.lang.labels.deleteWorkspace }];
            var tabOptions = [{ code: 'rename', des: this.app.lang.labels.renameActiveWorkspace }, { code: 'delete', des: this.app.lang.labels.deleteActiveWorkspace }];
            var options = isMenu ? menuOptions : tabOptions;

            if (!this.tabContent.layoutSelection) {
                options[options.length] = { code: 'add', des: this.app.lang.labels.addContainer };
            }

            _ember.default.set(this, 'options', options);

            var bootstrapDropdown = _controllerFactory.default.createController(this.container, instanceName);
            bootstrapDropdown.set('options', this.options);

            this.set('labelKey', 'des');
            this.set('isMenu', isMenu);

            var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');
            bootstrapDropdown.showPopup(this, viewName, modal, undefined, true);
        },

        /* *
         * Add a new widget container with the widget selection page in the active custom workspace
         */
        addWidgetContainer: function addWidgetContainer() {
            var index = 0;
            var containerToAdd;
            var activeContainer = true;

            while (activeContainer) {
                index++;
                containerToAdd = _ember.default.$('div#gs-w-div-' + index);
                activeContainer = containerToAdd && containerToAdd.attr('active-c') === this.utils.Constants.Yes;
            }

            this.makeContainerActive(index, containerToAdd);
            this.saveWorkspace();

            // Scroll to the added widget's position; make it visible int viewport
            var customWSContent = _ember.default.$('div#custom-workspace-layout');
            customWSContent[0].scrollTop = customWSContent[0].scrollHeight - customWSContent[0].clientHeight;
        },

        /* *
         * Function to delete the Active Custom Workspace
         */
        deleteCustomWorkspace: function deleteCustomWorkspace() {
            var menuContentArray = this.widgetContainer.get('appLayout').layout.mainPanel.content;
            var userStateObj = _sharedService.default.userState;
            var that = this;

            _ember.default.$.each(menuContentArray, function (key, menuContentObj) {
                if (that.menuContent.id === menuContentObj.id) {
                    if (that.get('isMenu')) {
                        menuContentArray.removeObject(menuContentObj);

                        userStateObj.defaultWS[that.get('containerKey')][that.menuContent.id] = undefined;

                        if (userStateObj.customWS && userStateObj.customWS[that.menuContent.id]) {
                            userStateObj.customWS[that.menuContent.id] = undefined;
                        }

                        if (userStateObj.lastInnerWidget && userStateObj.lastInnerWidget[that.menuContent.id]) {
                            userStateObj.lastInnerWidget[that.menuContent.id] = undefined;
                        }

                        if (userStateObj.lastTab && userStateObj.lastTab[that.menuContent.id]) {
                            userStateObj.lastTab[that.menuContent.id] = undefined;
                        }

                        userStateObj.save();

                        _sharedService.default.getService('sharedUI').getService('mainPanel').onRenderMenuItems(menuContentArray[0], menuContentArray[0].tab[0].id);
                    } else {
                        _ember.default.$.each(menuContentObj.tab, function (index, tabContentObj) {
                            if (tabContentObj.id === that.tabContent.id) {
                                menuContentObj.tab.removeObject(tabContentObj);
                                return false;
                            }
                        });

                        userStateObj.defaultWS[that.get('containerKey')][that.menuContent.id].tab[that.tabContent.id] = undefined;

                        if (userStateObj.customWS && userStateObj.customWS[that.menuContent.id] && userStateObj.customWS[that.menuContent.id][that.tabContent.id]) {
                            userStateObj.customWS[that.menuContent.id][that.tabContent.id] = undefined;
                        }

                        if (userStateObj.lastInnerWidget && userStateObj.lastInnerWidget[that.menuContent.id] && userStateObj.lastInnerWidget[that.menuContent.id][that.tabContent.id]) {
                            userStateObj.lastInnerWidget[that.menuContent.id][that.tabContent.id] = undefined;
                        }

                        userStateObj.save();

                        _sharedService.default.getService('sharedUI').getService('mainPanel').onRenderTabItems(menuContentObj.tab[0]);

                        if (menuContentObj.tab.length === 1) {
                            _sharedService.default.getService('sharedUI').getService('menuPanel').setSubMenu(menuContentObj, false);
                        }
                    }

                    return false;
                }
            });

            _sharedService.default.getService('sharedUI').getService('menuPanel').getSubMenuWidths();
            userStateObj.save();
        },

        /* *
         * Make the newly added grid container active
         */
        makeContainerActive: function makeContainerActive(index, containerToActive) {
            var coordinates = this.getVacantCoordinates();

            var grid = _ember.default.$('.grid-stack').data('gridstack');
            grid.min_height(containerToActive, 5); // Number of rows for minimum height
            grid.resizable(containerToActive, true);
            grid.update(containerToActive, coordinates.x, coordinates.y, 6, 25);

            containerToActive.attr('active-c', this.utils.Constants.Yes);

            this.setWidgetToContainer(index, this.widgetList.selection);

            _ember.default.set(this.outletMap, 'o' + index, '');
            _ember.default.set(this.widgetMap, 'w' + index, false);
        },

        /* *
         * Close drop-downs loaded in modal popup
         */
        _closePopup: function _closePopup() {
            var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');

            if (modal) {
                modal.send('closeModalPopup');
            }
        },

        actions: {
            /* *
             * To select active custom workspace related functions like add, rename & delete
             */
            select: function select(item) {
                this._closePopup();

                if (item.code === 'add') {
                    this.addWidgetContainer();
                } else if (item.code === 'rename') {
                    var content = this.get('isMenu') ? this.menuContent : this.tabContent;
                    this.editWorkspaceName(content, this.get('isMenu'));
                } else if (item.code === 'delete') {
                    var that = this;

                    this.utils.messageService.showMessage(this.app.lang.messages.deleteConfirmation, this.utils.Constants.MessageTypes.Question, false, this.app.lang.labels.deleteWorkspace, [{
                        type: 'yes', btnAction: function btnAction() {
                            that.deleteCustomWorkspace();
                        }
                    }, { type: 'no' }], null);
                }
            }
        }
    });
});
define('universal-app/controllers/custom-workspace/investor', ['exports', '../widget-container-controller'], function (exports, _widgetContainerController) {
    'use strict';

    exports.default = _widgetContainerController.default.extend({
        outletMap: {
            o1: 'height: calc(100% - 25px)',
            o2: 'height: 170px',
            o3: 'height: calc(100% - 210px)'
        }
    });
});
define('universal-app/controllers/custom-workspace/layout-selection', ['exports', 'ember', '../base-controller', '../controller-factory'], function (exports, _ember, _baseController, _controllerFactory) {
    'use strict';

    exports.default = _baseController.default.extend({
        router: undefined,
        menuContent: undefined,
        tabContent: undefined,
        widgetContainer: undefined,

        layoutContent: [{ r: [1], c: [1], w: '200px', h: '164px' }, { r: [1], c: [1, 1], w: '100px', h: '164px' }, { r: [1, 1], c: [1], w: '200px', h: '80px' }, { r: [1, 1], c: [1, 1], w: '100px', h: '80px' }, { r: [1, 1], c: [1, 1, 1], w: '67px', h: '80px' }],

        // TODO [Atheesan]: Combine layoutContent and complexLayoutContent
        complexLayoutContent1: { coordinates: [{ x: 0, y: 0 }, { x: 6, y: 0 }, { x: 0, y: 24 }], yCoordinates: [0, 0, 1], widths: [6, 6, 12], widgetCount: 3, rowCounts: [2, 2, 2] },
        complexLayoutContent2: { coordinates: [{ x: 0, y: 0 }, { x: 6, y: 0 }, { x: 0, y: 24 }], yCoordinates: [0, 0, 1], widths: [6, 6, 6], widgetCount: 3, rowCounts: [2, 1, 2] },
        complexLayoutContent3: { coordinates: [{ x: 0, y: 0 }, { x: 0, y: 24 }, { x: 6, y: 24 }], yCoordinates: [0, 1, 1], widths: [12, 6, 6], widgetCount: 3, rowCounts: [2, 2, 2] },
        complexLayoutContent4: { coordinates: [{ x: 0, y: 0 }, { x: 4, y: 0 }, { x: 8, y: 0 }, { x: 0, y: 24 }], yCoordinates: [0, 0, 0, 1], widths: [4, 4, 4, 12], widgetCount: 4, rowCounts: [2, 2, 2, 2] },
        complexLayoutContent5: { coordinates: [{ x: 0, y: 0 }, { x: 4, y: 0 }, { x: 8, y: 0 }, { x: 4, y: 24 }], yCoordinates: [0, 0, 0, 1], widths: [4, 4, 4, 8], widgetCount: 4, rowCounts: [1, 2, 2, 2] },

        onLoadLayoutContainer: function onLoadLayoutContainer(router, menuContent, tabContent, widgetContainer) {
            this.router = router;
            this.menuContent = menuContent;
            this.tabContent = tabContent;
            this.widgetContainer = widgetContainer;

            var customLayoutController = this.router.controllerFor('custom-workspace.custom-layout');
            customLayoutController.onLoadLayout(router, menuContent, tabContent, widgetContainer);
        },

        _selectLayout: function _selectLayout(rCount, cCount, complexLayoutContent) {
            var rowCount = rCount ? rCount : this.tabContent.row;
            var colCount = cCount ? cCount : this.tabContent.col;
            var outletName = 'custom-workspace.custom-layout';

            this.tabContent.outlet = outletName;
            this.tabContent.layoutSelection = false;

            var layoutController = this.router.controllerFor(outletName);
            layoutController.onLoadLayout(this.router, this.menuContent, this.tabContent, this.widgetContainer);

            layoutController.set('rowCount', rowCount); // To ensure row count & column count are available before custom-layout-view init
            layoutController.set('colCount', colCount);
            layoutController.set('complexLayoutContent', complexLayoutContent);

            this.router.render(outletName, {
                into: 'main-panel-container-controller',
                outlet: this.tabContent.title,
                controller: layoutController
            });

            this._loadLayout(layoutController, this.widgetContainer);

            layoutController.saveTabArgs({
                outlet: outletName,
                row: rowCount,
                col: colCount,
                cache: false,
                title: 'standardOutlet',
                custom: true,
                layoutSelection: false
            });

            _ember.default.run.later(function () {
                layoutController.saveWorkspace();
            }, 200);
        },

        _loadLayout: function _loadLayout(customLayout, widgetContainer) {
            var route = customLayout.container.lookup('route:application');

            var customLayoutView = _controllerFactory.default.createController(widgetContainer.container, 'view:custom-workspace/custom-layout-view');
            customLayoutView.set('targetController', customLayout);

            route.render('custom-workspace/custom-layout-view', {
                into: 'custom-workspace/custom-layout',
                outlet: 'custom-outlet',
                controller: customLayoutView
            });
        },

        actions: {
            selectLayout: function selectLayout(layout) {
                this._selectLayout(layout.r.length, layout.c.length);
            },

            selectComplexLayout: function selectComplexLayout(complexLayoutContent) {
                this._selectLayout(1, 1, complexLayoutContent);
            }
        }
    });
});
define('universal-app/controllers/custom-workspace/standard', ['exports', '../widget-container-controller'], function (exports, _widgetContainerController) {
    'use strict';

    exports.default = _widgetContainerController.default.extend({
        outletMap: {
            o1: 'height: calc(100% - 240px)',
            o2: 'height: 208px',
            o3: 'height: 208px'
        }
    });
});
define('universal-app/controllers/custom-workspace/template-generator', ['exports', '../../utils/constants'], function (exports, _constants) {
    'use strict';

    exports.default = function () {
        /* *
         * Generate custom workspace template
         * @param index Index of the widget container in the workspace
         * @param height Height of the widget container
         * @param width Width of the widget container
         * @param coordinates X and Y coordinates
         * @param isActive True if active widget container, false if extra widget container
         * @returns {String} Generate template
         */
        var generateWorkspaceWidgetContainer = function generateWorkspaceWidgetContainer(index, height, width, coordinates, isActive) {
            var layoutHtml = [];

            layoutHtml[layoutHtml.length] = '<div style={{controller.targetController.outletMap.o';
            layoutHtml[layoutHtml.length] = index;
            layoutHtml[layoutHtml.length] = '}} id="gs-w-div-';
            layoutHtml[layoutHtml.length] = index;
            layoutHtml[layoutHtml.length] = '" grid-name="gs-w-c" grid-index="';
            layoutHtml[layoutHtml.length] = index;
            layoutHtml[layoutHtml.length] = '" class="grid-stack-item" data-gs-width="';
            layoutHtml[layoutHtml.length] = width;
            layoutHtml[layoutHtml.length] = '" data-gs-height="';
            layoutHtml[layoutHtml.length] = height;
            layoutHtml[layoutHtml.length] = '" data-gs-y="';
            layoutHtml[layoutHtml.length] = coordinates.y;
            layoutHtml[layoutHtml.length] = '" data-gs-x="';
            layoutHtml[layoutHtml.length] = coordinates.x;
            layoutHtml[layoutHtml.length] = '" active-c="';
            layoutHtml[layoutHtml.length] = isActive ? _constants.default.Yes : _constants.default.No;
            layoutHtml[layoutHtml.length] = '"><div class="grid-stack-item-content">{{outlet "w';
            layoutHtml[layoutHtml.length] = index;
            layoutHtml[layoutHtml.length] = '"}}</div></div>';

            return layoutHtml.join(_constants.default.StringConst.Empty);
        };

        return {
            generateWorkspaceWidgetContainer: generateWorkspaceWidgetContainer
        };
    }();
});
define('universal-app/controllers/custom-workspace/widget-list', ['exports', '../../components/base-popup'], function (exports, _basePopup) {
    'use strict';

    exports.default = _basePopup.default.extend({
        layoutName: 'controllers/custom-workspace/widget-list'
    });
});
define('universal-app/controllers/custom-workspace/widget-selection', ['exports', 'ember', '../base-controller', '../../models/shared/shared-service', '../../config/price-widget-config', '../../config/app-config'], function (exports, _ember, _baseController, _sharedService, _priceWidgetConfig, _appConfig) {
    'use strict';

    exports.default = _baseController.default.extend({
        widgetList: _priceWidgetConfig.default.WidgetList,
        isTradingEnabled: false,

        onLoadWidget: function onLoadWidget() {
            this.set('isTradingEnabled', _appConfig.default.customisation.isTradingEnabled);

            this.set('quoteContent', this.widgetList.quote);
            this.set('companyContent', this.widgetList.company);
            this.set('marketContent', this.widgetList.market);
            this.set('tradeContent', this.widgetList.trade);
            this.set('transferContent', this.widgetList.transfer);
            this.set('mutualFundContent', this.widgetList.mutualFund);
            this.set('optionChainContent', this.widgetList.optionChain);
            this.set('userProfileContent', this.widgetList.userProfile);

            this._setLanguageFields(this.app.lang.labels);
        },

        _setLanguageFields: function _setLanguageFields(langObj) {
            var widgetList = this.widgetList;

            _ember.default.$.each(widgetList, function (type, widgetByTypeArray) {
                if (widgetByTypeArray.length > 0) {
                    widgetByTypeArray.forEach(function (widget) {
                        var description = langObj[widget.desc] ? langObj[widget.desc] : widget.des;
                        _ember.default.set(widget, 'des', description);
                    });
                }
            });
        },

        filterWidget: function filterWidget() {
            var quoteWidgetList = this._getFilteredWidget(this.widgetList.quote);
            var companyWidgetList = this._getFilteredWidget(this.widgetList.company);
            var marketWidgetList = this._getFilteredWidget(this.widgetList.market);
            var tradeWidgetList = this._getFilteredWidget(this.widgetList.trade);
            var transferWidgetList = this._getFilteredWidget(this.widgetList.transfer);
            var mutualFundWidgetList = this._getFilteredWidget(this.widgetList.mutualFund);
            var optionChainWidgetList = this._getFilteredWidget(this.widgetList.optionChain);
            var userProfileWidgetList = this._getFilteredWidget(this.widgetList.userProfile);

            this.set('quoteContent', quoteWidgetList);
            this.set('companyContent', companyWidgetList);
            this.set('marketContent', marketWidgetList);
            this.set('tradeContent', tradeWidgetList);
            this.set('transferContent', transferWidgetList);
            this.set('mutualFundContent', mutualFundWidgetList);
            this.set('optionChainContent', optionChainWidgetList);
            this.set('userProfileContent', userProfileWidgetList);
        },

        onSearchKeyChanged: function () {
            _ember.default.run.debounce(this, this.filterWidget, 500);
        }.observes('widgetSearchKey'),

        _getFilteredWidget: function _getFilteredWidget(widgetList) {
            var that = this;
            var filteredList = [];

            widgetList.forEach(function (widget) {
                if (widget.des.toLowerCase().includes(that.get('widgetSearchKey').toLowerCase())) {
                    filteredList[filteredList.length] = widget;
                }
            });

            return filteredList;
        },

        _closeWidgetList: function _closeWidgetList() {
            this.set('widgetSearchKey', '');

            var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');

            if (modal) {
                modal.send('closeModalPopup');
            }
        },

        showWidgetList: function showWidgetList() {
            var viewName = 'custom-workspace/widget-list';
            var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');
            var popup = this.container.lookupFactory('controller:custom-workspace/widget-list').create();

            popup.showPopup(this, viewName, modal);
            this._dragResizePopup();
        },

        _dragResizePopup: function _dragResizePopup() {
            _ember.default.run.schedule('afterRender', this, function () {
                var elem = document.querySelector('.widget-list-popup');

                new Draggabilly(elem, { // eslint-disable-line
                    handle: '#custom-widget-list',
                    x: 100,
                    y: 200
                });

                _ember.default.$('.widget-list-popup').resizable();
            });
        },

        actions: {
            showWidgetList: function showWidgetList() {
                this.showWidgetList();
            },

            selectWidget: function selectWidget(widget) {
                var widgetId = this.get('widgetId') ? this.get('widgetId') : this.bid;

                if (this.widgetContainer) {
                    this.widgetContainer.setWidgetToContainer(widgetId, widget);
                }

                this._closeWidgetList();
            },

            closeWidgetList: function closeWidgetList() {
                this._closeWidgetList();
            }
        }
    });


    _ember.default.Handlebars.helper('isWidgetAvailable', function (widgetArray) {
        return widgetArray.length > 1;
    });
});
define('universal-app/controllers/price/containers/company-tab', ['exports', 'ember', '../../base-widget-container', '../../../helpers/responsive-handler'], function (exports, _ember, _baseWidgetContainer, _responsiveHandler) {
    'use strict';

    exports.default = _baseWidgetContainer.default.extend({
        onAfterRender: function onAfterRender() {
            _ember.default.$('.nano').nanoScroller();
            this.initializeResponsive();
        },

        initializeResponsive: function initializeResponsive() {
            this.set('responsive', _responsiveHandler.default.create({ controller: this, widgetId: 'companyProfile', callback: this.onResponsive }));
            this.responsive.addList('company-profile', [{ id: 'company-profile', width: 880 }]);

            this.responsive.initialize();
        },

        onResponsive: function onResponsive() {
            _ember.default.run.later(function () {
                _ember.default.$('.nano').nanoScroller();
            }, 1);
        }
    });
});
define('universal-app/controllers/price/containers/heatmap-tab', ['exports', '../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/market-overview-tab', ['exports', 'ember', '../../base-controller', '../../../helpers/responsive-handler'], function (exports, _ember, _baseController, _responsiveHandler) {
    'use strict';

    exports.default = _baseController.default.extend({

        onAfterRender: function onAfterRender() {
            this.initializeResponsive();
        },

        initializeResponsive: function initializeResponsive() {
            this.set('responsive', _responsiveHandler.default.create({ controller: this, widgetId: 'appTitle', callback: this.onResponsive }));
            this.responsive.addList('appTitle', [{ id: 'appTitle', width: 991 }]);

            this.responsive.initialize();
        },

        onResponsive: function onResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            _ember.default.run.later(function () {
                controller.setResponsive(responsiveArgs);
            }, 1);
        },

        setResponsive: function setResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            if (responsiveArgs.responsiveLevel === 1) {
                controller.set('marketRows', 'rows-scroll');
            } else {
                controller.set('marketRows', '');
            }
        }
    });
});
define('universal-app/controllers/price/containers/market-summary-overview-tab', ['exports', '../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/mobile/alert-price-tab', ['exports', '../../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/mobile/gms-summary-tab', ['exports', 'ember', '../../../base-controller', '../../widgets/mobile/market-summary/components/market-status-panel'], function (exports, _ember, _baseController, _marketStatusPanel) {
  'use strict';

  exports.default = _baseController.default.extend({});


  _ember.default.Handlebars.helper('market-status-panel', _marketStatusPanel.default);
});
define('universal-app/controllers/price/containers/mobile/heatmap-tab', ['exports', '../../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/mobile/market-depth-tab', ['exports', '../../../base-controller', '../../../../models/shared/shared-service'], function (exports, _baseController, _sharedService) {
    'use strict';

    exports.default = _baseController.default.extend({
        stock: {},

        onPrepareData: function onPrepareData() {
            _sharedService.default.getService('price').addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
        },

        onClearData: function onClearData() {
            _sharedService.default.getService('price').removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', []);
        }
    });
});
define('universal-app/controllers/price/containers/mobile/market-indices-tab', ['exports', '../../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/mobile/market-summary-tab', ['exports', 'ember', '../../../base-controller', '../../widgets/mobile/market-summary/components/market-status-panel', '../../widgets/mobile/quote-summary/components/quote-status-panel'], function (exports, _ember, _baseController, _marketStatusPanel, _quoteStatusPanel) {
  'use strict';

  exports.default = _baseController.default.extend({});


  _ember.default.Handlebars.helper('market-status-panel', _marketStatusPanel.default);
  _ember.default.Handlebars.helper('quote-status-panel', _quoteStatusPanel.default);
});
define('universal-app/controllers/price/containers/mobile/market-time-and-sales-tab', ['exports', '../../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/mobile/market-top-stock-tab', ['exports', 'ember', '../../../base-controller', '../../widgets/mobile/market-summary/components/market-status-panel'], function (exports, _ember, _baseController, _marketStatusPanel) {
  'use strict';

  exports.default = _baseController.default.extend({});


  _ember.default.Handlebars.helper('market-status-panel', _marketStatusPanel.default);
});
define('universal-app/controllers/price/containers/mobile/quote-market-depth-tab', ['exports', '../../../base-controller', '../../../../models/shared/shared-service', '../../../../models/price/price-constants'], function (exports, _baseController, _sharedService, _priceConstants) {
    'use strict';

    exports.default = _baseController.default.extend({
        stock: {},
        windowTypes: {},
        isDepthByPriceAvailable: true,
        isDepthByOrderAvailable: true,

        priceService: _sharedService.default.getService('price'),

        onPrepareData: function onPrepareData() {
            var symbol = this.get('sym');
            var exchange = this.get('exg');
            var insType = this.get('inst');

            this.priceService.addSymbolRequest(exchange, symbol, insType);
            this.set('stock', this.priceService.stockDS.getStock(exchange, symbol, insType));

            this.set('isDepthByOrderAvailable', this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByOrder, _priceConstants.default.WindowType.MarketDepthByOrderAdvanced], exchange));
            this.set('isDepthByPriceAvailable', this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByPrice, _priceConstants.default.WindowType.MarketDepthByPriceAdvanced], exchange));
        },

        onClearData: function onClearData() {
            this.priceService.removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', []);
        }
    });
});
define('universal-app/controllers/price/containers/mobile/quote-summary-tab', ['exports', '../../../base-controller', '../../../../models/shared/shared-service'], function (exports, _baseController, _sharedService) {
    'use strict';

    exports.default = _baseController.default.extend({
        stock: {},
        priceService: _sharedService.default.getService('price'),

        onPrepareData: function onPrepareData() {
            this.priceService.addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
            this.checkScreenResolution();
        },

        onClearData: function onClearData() {
            this.priceService.removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', []);
        },

        checkScreenResolution: function () {
            var lowResolutionWidth = 340;

            if (window.screen.width <= lowResolutionWidth) {
                this.set('containerPaddingCss', 'low-res-padding-right');
            }
        }.on('init')
    });
});
define('universal-app/controllers/price/containers/mobile/quote-time-and-sales-tab', ['exports', '../../../base-controller', '../../../../models/shared/shared-service'], function (exports, _baseController, _sharedService) {
    'use strict';

    exports.default = _baseController.default.extend({
        stock: {},

        onPrepareData: function onPrepareData() {
            _sharedService.default.getService('price').addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
        },

        onClearData: function onClearData() {
            _sharedService.default.getService('price').removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', []);
        }
    });
});
define('universal-app/controllers/price/containers/mobile/summary-tab', ['exports', '../../../base-controller', '../../../../models/shared/shared-service'], function (exports, _baseController, _sharedService) {
    'use strict';

    exports.default = _baseController.default.extend({
        stock: {},

        onPrepareData: function onPrepareData() {
            _sharedService.default.getService('price').addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
        },

        onClearData: function onClearData() {
            _sharedService.default.getService('price').removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', []);
        }
    });
});
define('universal-app/controllers/price/containers/mobile/time-and-sales-tab', ['exports', '../../../base-controller', '../../../../models/shared/shared-service'], function (exports, _baseController, _sharedService) {
    'use strict';

    exports.default = _baseController.default.extend({
        stock: {},

        onPrepareData: function onPrepareData() {
            _sharedService.default.getService('price').addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
        },

        onClearData: function onClearData() {
            _sharedService.default.getService('price').removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', []);
        }
    });
});
define('universal-app/controllers/price/containers/news-tab', ['exports', '../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/option-chain-tab', ['exports', '../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/quote-tab', ['exports', 'ember', '../../base-widget-container', '../../../helpers/responsive-handler'], function (exports, _ember, _baseWidgetContainer, _responsiveHandler) {
    'use strict';

    exports.default = _baseWidgetContainer.default.extend({
        quoteRowOne: 'quote-row-2',
        quoteRowTwo: 'quote-row-3',
        quoteRows: '',
        quoteWidget: '',

        onAfterRender: function onAfterRender() {
            this.initializeResponsive();
        },

        initializeResponsive: function initializeResponsive() {
            this.set('responsive', _responsiveHandler.default.create({ controller: this, widgetId: 'appTitle', callback: this.onResponsive }));
            this.responsive.addList('appTitle', [{ id: 'appTitle', width: 991 }]);

            this.responsive.initialize();
        },

        onResponsive: function onResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            _ember.default.run.later(function () {
                controller.setResponsive(responsiveArgs);
            }, 1);
        },

        setResponsive: function setResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            if (responsiveArgs.responsiveLevel === 1) {
                controller.set('disableQuoteWL', true);
                controller.set('quoteRows', 'rows-scroll');
                controller.set('quoteRowOne', '');
                controller.set('quoteRowTwo', '');
                controller.set('quoteWidget', 'quote-row-2-responsive');
            } else {
                controller.set('disableQuoteWL', false);
                controller.set('quoteRows', '');
                controller.set('quoteRowOne', 'quote-row-2');
                controller.set('quoteRowTwo', 'quote-row-3');
                controller.set('quoteWidget', '');
            }
        }
    });
});
define('universal-app/controllers/price/containers/top-panel-tab', ['exports', '../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/containers/top-stocks-tab', ['exports', 'ember', '../../base-widget-container', '../../../helpers/responsive-handler'], function (exports, _ember, _baseWidgetContainer, _responsiveHandler) {
    'use strict';

    exports.default = _baseWidgetContainer.default.extend({
        topStocksRows: '',
        topStockRow: 'top-stock-row',

        onAfterRender: function onAfterRender() {
            this.initializeResponsive();
        },

        initializeResponsive: function initializeResponsive() {
            this.set('responsive', _responsiveHandler.default.create({ controller: this, widgetId: 'appTitle', callback: this.onResponsive }));

            this.responsive.addList('appTitle', [{ id: 'appTitle', width: 991 }]);
            this.responsive.initialize();
        },

        onResponsive: function onResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            _ember.default.run.later(function () {
                controller.setResponsive(responsiveArgs);
            }, 1);
        },

        setResponsive: function setResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            if (responsiveArgs.responsiveLevel >= 1) {
                controller.set('topStocksRows', 'overflow-auto');
                controller.set('topStock', 'top-stock-row');
                controller.set('topStockRow', '');
            } else {
                controller.set('topStocksRows', '');
                controller.set('topStock', '');
                controller.set('topStockRow', 'top-stock-row');
            }
        }
    });
});
define('universal-app/controllers/price/initializers/mobile/price-ui-module-initializer-mobile', ['exports', '../../../../controllers/price/initializers/price-ui-module-initializer', '../../../../controllers/price/price-ui-service-mobile'], function (exports, _priceUiModuleInitializer, _priceUiServiceMobile) {
    'use strict';

    exports.default = _priceUiModuleInitializer.default.extend({
        createService: function createService() {
            return _priceUiServiceMobile.default.create();
        }
    });
});
define('universal-app/controllers/price/initializers/price-ui-module-initializer', ['exports', 'ember', '../../../models/shared/initializers/base-module-initializer', '../../../controllers/price/price-ui-service', '../../../app-events', '../../../models/shared/language/language-data-store', '../../../models/shared/shared-service', '../widgets/announcement/components/announcement-context-menu', '../widgets/announcement/components/announcement-news-popup', '../widgets/announcement/components/titlebar-news-announcement', '../../../components/global-search'], function (exports, _ember, _baseModuleInitializer, _priceUiService, _appEvents, _languageDataStore, _sharedService, _announcementContextMenu, _announcementNewsPopup, _titlebarNewsAnnouncement, _globalSearch) {
    'use strict';

    exports.default = _baseModuleInitializer.default.extend({
        preInitialize: function preInitialize() {
            var service = this.createService();

            _sharedService.default.registerService(service.subscriptionKey, service);

            service.initialize(_languageDataStore.default.getLanguageObj());
            _appEvents.default.subscribeLayoutReady(service.subscriptionKey, service);
        },

        createService: function createService() {
            return _priceUiService.default.create();
        }
    });


    _ember.default.Handlebars.helper('announcement-context-menu', _announcementContextMenu.default);
    _ember.default.Handlebars.helper('announcement-news-popup', _announcementNewsPopup.default);
    _ember.default.Handlebars.helper('titlebar-news-announcement', _titlebarNewsAnnouncement.default);
    _ember.default.Handlebars.helper('global-search', _globalSearch.default);
});
define('universal-app/controllers/price/price-ui-service-mobile', ['exports', 'ember', '../../controllers/price/price-ui-service', '../../models/shared/shared-service', '../../utils/utils', '../../app-events', '../../models/price/price-constants', '../../config/app-config'], function (exports, _ember, _priceUiService, _sharedService, _utils, _appEvents, _priceConstants, _appConfig) {
    'use strict';

    exports.default = _priceUiService.default.extend({
        subscriptionKey: 'priceUI',

        lastMenuStack: _ember.default.A(),
        isDeviceAwake: false,

        isInnerTabSwipe: false,
        isRightSwipe: false,
        swipeContainer: "",

        onLayoutReady: function onLayoutReady(appLayout) {
            this.initializeComponents(appLayout);
            this._loadIndexChangeComponent();

            // Load Child View
            this.loadView(appLayout, 'childView', 'component:child-view', 'components/child-view', 'childViewOutlet');
            this.setTitleBarDefaultComponent();
            _appEvents.default.subscribeVisibilityChanged(this, this.get('subscriptionKey'));
        },

        _loadIndexChangeComponent: function _loadIndexChangeComponent() {
            var layoutNameAppTitle = 'price/widgets/mobile/components/title-index-panel';
            var indexChangeComponent = _sharedService.default.getService('sharedUI').getService('title-index-panel');

            _sharedService.default.getService('sharedUI').getService('titleBar').renderAppTitleTemplate(layoutNameAppTitle, indexChangeComponent);
        },

        setTitleBarDefaultComponent: function setTitleBarDefaultComponent() {
            var titleBar = _sharedService.default.getService('sharedUI').getService('tickerPanel');
            var defaultComponentName = _appConfig.default.customisation.titleBarDefaultComponentPath;
            var defaultComponent = this.container.lookupFactory('controller:' + _appConfig.default.customisation.titleBarDefaultComponentPath).create();

            if (defaultComponent && _ember.default.$.isFunction(defaultComponent.initializeWidget)) {
                defaultComponent.initializeWidget({ wn: defaultComponentName.split('/').pop() }, { widgetArgs: { selectedLink: 1 } });
            }

            titleBar.setDefaultComponent(defaultComponentName, defaultComponent);
        },

        pushLastMenuStack: function pushLastMenuStack(menuContent, tabContent) {
            var currentStack = this.get('lastMenuStack');
            var newMenu = { menuContent: menuContent, tabContent: tabContent };

            if (currentStack.indexOf(newMenu) < 0) {
                currentStack.pushObject(newMenu);
            }
        },

        popLastMenuStack: function popLastMenuStack() {
            var currentStack = this.get('lastMenuStack');
            var lastMenu;

            if (currentStack.length > 0) {
                lastMenu = currentStack[currentStack.length - 1];
                currentStack.pop();
            }

            return lastMenu;
        },

        resetLastMenuStack: function resetLastMenuStack() {
            this.set('lastMenuStack', _ember.default.A());
        },

        getLastMenuStack: function getLastMenuStack() {
            return this.get('lastMenuStack');
        },

        loadView: function loadView(appLayout, name, controllerPath, viewPath, outletName) {
            this.container = appLayout.container;

            var route = this.container.lookup('route:application');
            var controller = this.container.lookupFactory(controllerPath).create();

            route.render(viewPath, {
                into: 'application',
                outlet: outletName,
                controller: controller
            });

            _sharedService.default.getService('sharedUI').registerService(name, controller);
        },

        showChildView: function showChildView(viewName, widgetController, widgetName, parentView) {
            _sharedService.default.getService('sharedUI').getService('childView').showChildView(viewName, widgetController, widgetName, parentView);
        },

        closeChildView: function closeChildView(viewName, close) {
            _sharedService.default.getService('sharedUI').getService('childView').closeChildView(viewName, close);
        },

        changeSwipeView: function changeSwipeView(isLeftSwipe, isCloseSwipe) {
            var swipeContainer = this.get('swipeContainer');
            var swipeCss = isLeftSwipe ? 'swipe-view-main swipe-view-left' : 'swipe-view-shadow-right swipe-view-main swipe-view-right';

            if (!swipeContainer) {
                swipeContainer = _ember.default.$('div#swipeContainer');
            }

            swipeContainer.addClass(isCloseSwipe ? 'visibility-hidden' : swipeCss).removeClass(isCloseSwipe ? swipeCss : 'visibility-hidden');
        },

        onVisibilityChanged: function onVisibilityChanged(isHidden) {
            var that = this;

            if (!isHidden) {
                that.set('isDeviceAwake', true);

                _ember.default.run.later(function () {
                    that.set('isDeviceAwake', false);
                }, _priceConstants.default.TimeIntervals.DeviceWakeTimeout);
            }
        },

        enableDeviceAwakeTouchId: function () {
            if (this.get('isDeviceAwake') && _ember.default.$('#touchLogin').css('display') === 'block') {
                this.sharedUIService.invokeBiometricAuth();
                _ember.default.$('#touchLogin').hide();
            }
        }.observes('isDeviceAwake'),

        shareScreenshot: function shareScreenshot(message) {
            var that = this;

            if (navigator && navigator.screenshot) {
                var parentNode;
                var imgElem;
                var canvasElems = document.getElementsByTagName('canvas');
                var canvas = canvasElems[0];

                imgElem = document.createElement('img');

                if (canvas && imgElem) {
                    imgElem.width = canvas.clientWidth;
                    imgElem.height = canvas.clientHeight;
                    imgElem.src = canvas.toDataURL('image/png');

                    parentNode = canvas.parentNode.parentNode; // Parent node to insert image

                    if (parentNode) {
                        parentNode.prepend(imgElem);

                        for (var i = 0; i < canvasElems.length; i++) {
                            if (canvasElems[i]) {
                                canvasElems[i].hidden = true;
                            }
                        }
                    }
                }

                _ember.default.run.later(this, function () {
                    navigator.screenshot.save(function (error, res) {
                        if (!error && res.filePath && window.plugins && window.plugins.socialsharing) {
                            var langLabels = that.get('app').lang.labels;
                            var StringConst = _utils.default.Constants.StringConst;

                            var shareOptions = {
                                message: [message, StringConst.Space, StringConst.NumberSign, langLabels.companyName, StringConst.Space, StringConst.NumberSign, langLabels.productTitle, StringConst.Space, StringConst.Hyphen, StringConst.Space, langLabels.screenShare].join(StringConst.Empty),
                                subject: [langLabels.companyName, langLabels.productTitle, StringConst.Hyphen, langLabels.screenShare].join(StringConst.Space),
                                files: ['file:///' + res.filePath]
                            };

                            window.plugins.socialsharing.shareWithOptions(shareOptions);

                            if (canvasElems && parentNode && imgElem) {
                                for (i = 0; i < canvasElems.length; i++) {
                                    if (canvasElems[i]) {
                                        canvasElems[i].hidden = false;
                                    }
                                }

                                parentNode.removeChild(imgElem);
                            }
                        }
                    });
                }, 100);
            }
        },

        notifyPriceConnectionStatus: function () {
            var that = this;

            if (that.get('isDeviceAwake')) {
                _ember.default.run.later(function () {
                    that._showHideConnectionStatus();
                }, _priceConstants.default.TimeIntervals.ShowNotificationTimeout);
            } else {
                that._showHideConnectionStatus();
            }
        }.observes('priceService', 'priceService.connectionStatus'),

        setInnerTabSwipe: function setInnerTabSwipe(isRightSwipe) {
            this.set('isRightSwipe', isRightSwipe);
            this.toggleProperty('isInnerTabSwipe');
        },

        _showHideConnectionStatus: function _showHideConnectionStatus() {
            var that = this;
            var layoutName = 'components/single-message-viewer';
            var messageComponent = that.sharedUIService.getService('single-message-viewer');
            var titleBar = that.sharedUIService.getTitleBar();

            if (messageComponent && titleBar && titleBar.renderNotificationTemplate) {
                if (!that.get('priceService').connectionStatus) {
                    messageComponent.set('message', that.get('app') ? that.get('app').lang.messages.priceDisconnected : '');
                    messageComponent.set('showMessage', true);
                    messageComponent.set('messageCss', '');
                    messageComponent.set('type', _utils.default.Constants.MessageTypes.Error);
                    titleBar.renderNotificationTemplate(layoutName, messageComponent);
                } else {
                    messageComponent.set('showMessage', false);
                    titleBar.hideNotificationTemplate(layoutName, messageComponent);
                }
            }
        }
    });
});
define('universal-app/controllers/price/price-ui-service', ['exports', 'ember', '../../models/shared/shared-service', '../../utils/utils', '../../controllers/controller-factory', '../../models/price/price-constants'], function (exports, _ember, _sharedService, _utils, _controllerFactory, _priceConstants) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        subscriptionKey: 'priceUI',
        priceService: {},
        sharedUIService: {},
        bidOfferSubscriptionWidgets: {},
        container: undefined,
        defaultComponent: undefined,

        initialize: function initialize(appLanguage) {
            this.set('app', appLanguage);
            this.sharedUIService = _sharedService.default.getService('sharedUI');

            this.set('priceService', _sharedService.default.getService('price'));
            this.priceService.subscribeAuthSuccess(this, this.subscriptionKey);
        },

        onLayoutReady: function onLayoutReady(appLayout) {
            this.initializeComponents(appLayout);
        },

        initializeComponents: function initializeComponents(appLayout) {
            this.container = appLayout;
            appLayout.container.lookupFactory('controller:price/widgets/announcement/components/titlebar-news-announcement').create({ priceService: _sharedService.default.getService('price') }).initialize();

            // this.setTitleBarDefaultComponent(); // TODO [ATHEESAN] Enable this to show delayed message in title-bar
        },

        // Exposed to do things on price authentication success
        onAuthSuccess: function onAuthSuccess() {
            // this.setDelayedExgMessage(); // TODO [ATHEESAN] Enable this to show delayed message in title-bar
        },

        setTitleBarDefaultComponent: function setTitleBarDefaultComponent() {
            var titleBar = this.sharedUIService.getTitleBar();
            var defaultComponent = this.get('container').container.lookupFactory('component:single-message-viewer').create();

            if (defaultComponent && titleBar && titleBar.setDefaultComponent) {
                titleBar.setDefaultComponent('components/single-message-viewer', defaultComponent);
                this.set('defaultComponent', defaultComponent);
            }
        },

        setDelayedExgMessage: function setDelayedExgMessage() {
            var userExgList = _sharedService.default.getService('price').userDS.get('userExchg');
            var isDelayedExgAvailable = false;

            _ember.default.$.each(userExgList, function (key, userExg) {
                var delayedExg = _sharedService.default.getService('price').userDS.get('delayedExchg');

                if (delayedExg.length > 0) {
                    if (delayedExg.indexOf(userExg) > -1) {
                        isDelayedExgAvailable = true;

                        return false; // To break the loop
                    }
                }
            });

            var defaultComponent = this.get('defaultComponent');

            if (defaultComponent && isDelayedExgAvailable) {
                var message = _sharedService.default.userSettings.currentLanguage === 'AR' ? this.get('app').lang.messages.delayedExgTime + ' \'d\'' : '\'d\' ' + this.get('app').lang.messages.delayedExgTime;

                defaultComponent.set('message', message);
                defaultComponent.set('showMessage', true);
            }
        },

        notifyAlertTrigger: function notifyAlertTrigger(alert) {
            var separatorSpace = ' ';
            var separatorColon = ' : ';
            var alertTriggered = this.get('app') ? this.get('app').lang.labels.alerts : '';
            var messageInitial = [alert.dispProp1, this.get('app').lang.labels[alert.param], alert.crit, alert.val].join(separatorSpace);
            var message = [alertTriggered, messageInitial].join(separatorColon);

            _utils.default.messageService.showMessage(message, _utils.default.Constants.MessageTypes.Info, false, alertTriggered);
        },

        notifyAddToWatchList: function notifyAddToWatchList(symbol, watchListName, isAlreadyAdded) {
            var layoutName = 'components/single-message-viewer';
            var messageComponent = this.sharedUIService.getService('single-message-viewer');
            var titleBar = this.sharedUIService.getTitleBar();
            var stockObj = _sharedService.default.getService('price').stockDS.getStock(symbol.exg, symbol.sym);

            var messageDesc = isAlreadyAdded ? this.get('app').lang.messages.symAddedAlready + watchListName : this.get('app').lang.messages.symAddedSuccess + watchListName;
            var message = stockObj.get('dispProp1') + ' ' + messageDesc;

            if (messageComponent && titleBar && titleBar.renderNotificationTemplate) {
                messageComponent.set('message', message);
                messageComponent.set('showMessage', true);
                messageComponent.set('messageCss', 'title-info-message');
                messageComponent.set('type', _utils.default.Constants.MessageTypes.Info);
                titleBar.renderNotificationTemplate(layoutName, messageComponent, false, _priceConstants.default.TimeIntervals.AlertNotificationInterval);
            }
        },

        notifyDeleteFromWatchList: function notifyDeleteFromWatchList(symbol, watchListName) {
            var layoutName = 'components/single-message-viewer';
            var messageComponent = this.sharedUIService.getService('single-message-viewer');
            var titleBar = this.sharedUIService.getTitleBar();
            var stockObj = _sharedService.default.getService('price').stockDS.getStock(symbol.exg, symbol.sym);
            var message = [stockObj.get('dispProp1'), this.get('app').lang.messages.symDeletedForm, watchListName].join(' ');

            if (messageComponent && titleBar && titleBar.renderNotificationTemplate) {
                messageComponent.set('message', message);
                messageComponent.set('showMessage', true);
                messageComponent.set('messageCss', 'title-info-message');
                messageComponent.set('type', _utils.default.Constants.MessageTypes.Info);
                titleBar.renderNotificationTemplate(layoutName, messageComponent, false, _priceConstants.default.TimeIntervals.AlertNotificationInterval);
            }
        },

        notifyAddToPortfolio: function notifyAddToPortfolio(symbol, isAlreadyAdded) {
            var layoutName = 'components/single-message-viewer';
            var messageComponent = this.sharedUIService.getService('single-message-viewer');
            var titleBar = this.sharedUIService.getTitleBar();
            var stockObj = _sharedService.default.getService('price').stockDS.getStock(symbol.exg, symbol.sym);

            var messageDesc = isAlreadyAdded ? this.get('app').lang.messages.symAddedPortfolioAlready : this.get('app').lang.messages.symAddedPortfolioSuccess;
            var message = stockObj.get('dispProp1') + ' ' + messageDesc;

            if (messageComponent && titleBar && titleBar.renderNotificationTemplate) {
                messageComponent.set('message', message);
                messageComponent.set('showMessage', true);
                messageComponent.set('messageCss', 'title-info-message');
                messageComponent.set('type', _utils.default.Constants.MessageTypes.Info);
                titleBar.renderNotificationTemplate(layoutName, messageComponent, false, _priceConstants.default.TimeIntervals.AlertNotificationInterval);
            }
        },

        onBidOfferChanged: function onBidOfferChanged(isBid, link) {
            if (link) {
                var bidOfferSubscriptionWidgets = this.get('bidOfferSubscriptionWidgets');
                var subscribersByLink = bidOfferSubscriptionWidgets ? bidOfferSubscriptionWidgets[link] : '';

                if (subscribersByLink) {
                    _ember.default.$.each(subscribersByLink, function (id, subscriber) {
                        if (subscriber && _ember.default.$.isFunction(subscriber.onBidOfferChanged)) {
                            subscriber.onBidOfferChanged({
                                isBid: isBid
                            });
                        }
                    });
                }
            }
        },

        subscribeBidOfferChanged: function subscribeBidOfferChanged(subscriber, link) {
            if (link) {
                var bidOfferSubscriptionWidgets = this.get('bidOfferSubscriptionWidgets');
                var subscribersForLink = bidOfferSubscriptionWidgets[link];

                if (!subscribersForLink) {
                    subscribersForLink = bidOfferSubscriptionWidgets[link] = [];
                }

                subscribersForLink[subscribersForLink.length] = subscriber;
            }
        },

        unSubscribeBidOfferChanged: function unSubscribeBidOfferChanged(subscriber, link) {
            if (link) {
                var bidOfferSubscriptionWidgets = this.get('bidOfferSubscriptionWidgets');
                var subscribersForLink = bidOfferSubscriptionWidgets[link];

                if (subscribersForLink && subscriber) {
                    _ember.default.$.each(subscribersForLink, function (index, widget) {
                        if (subscriber === widget) {
                            subscribersForLink[index] = null;
                        }
                    });
                }

                if (bidOfferSubscriptionWidgets[subscriber.wkey]) {
                    bidOfferSubscriptionWidgets[subscriber.wkey] = null;
                }
            }
        },

        showPopupWidget: function showPopupWidget(config, args) {
            var symbolPopupView = _controllerFactory.default.createController(config.container, config.controllerString);
            symbolPopupView.show(args.tabId, args.sym, args.exg, args.inst);

            // Close menu
            var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');
            modal.send('closeModalPopup');
        }
    });
});
define('universal-app/controllers/price/top-panel/cash-maps', ['exports', 'ember', 'd3', '../../../utils/utils', '../../../components/base-component', '../../../templates/price/top-panel/cash-maps', '../../../models/price/price-constants', '../../../config/app-config', '../../../models/shared/shared-service', '../../../app-events'], function (exports, _ember, _d, _utils, _baseComponent, _cashMaps, _priceConstants, _appConfig, _sharedService, _appEvents) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        exchange: undefined,

        dataStatus: false,

        netCashPerChart: null,
        cashMapChart: null,

        isTablet: function () {
            return _appConfig.default.customisation.isTablet;
        }.property(),

        netCashPerChartData: {
            columns: [['netCashPer', 0], ['netCashPerRem', 0]],
            lastUpdatedChartValue: 0,
            lastUpdatedNetCashValue: 0
        },

        cashMapChartData: {
            columns: [['cashIn', 0], ['cashOut', 0]],
            lastUpdatedChartValue: 0,
            lastUpdatedCashInValue: 0
        },

        chartDrawingThreshold: 2,
        chartValueUpdatingThreshold: 0.5,

        noOfDecimalPlaces: 2,
        intZero: 0,

        styles: {
            chartDefaultColor: '#262932',
            cashInColor: '#2ecc72',
            cashOutColor: '#ff6b6b'
        },

        layout: _cashMaps.default,

        onInit: function () {
            _appEvents.default.subscribeThemeChanged(this, 'cash-map');
        }.on('init'),

        themeChanged: function themeChanged() {
            this._updateNetCashPerChart();
        },

        _drawNetCashPerChart: function _drawNetCashPerChart() {
            var that = this;

            this.netCashPerChart = c3.generate({
                data: {
                    columns: that.netCashPerChartData.columns,
                    type: 'donut',
                    order: null
                },
                color: {
                    pattern: ['#2ecc71', '#262932']
                },
                donut: {
                    title: '',
                    width: 3,
                    label: {
                        show: false
                    }
                },
                bindto: '#net_cash_chart',
                size: {
                    width: 82,
                    height: 82
                },
                legend: {
                    hide: true
                },
                tooltip: {
                    show: false
                }
            });
        },

        _drawCashMapChart: function _drawCashMapChart() {
            var that = this;

            this.cashMapChart = c3.generate({
                data: {
                    columns: that.cashMapChartData.columns,
                    type: 'donut',
                    order: null
                },
                color: {
                    pattern: [that.styles.cashInColor, that.styles.cashOutColor]
                },
                donut: {
                    title: '',
                    width: 3,
                    label: {
                        show: false
                    }
                },
                bindto: '#cash_map_chart',
                size: {
                    width: 82,
                    height: 82
                },
                legend: {
                    hide: true
                },
                tooltip: {
                    show: false
                }
            });
        },

        _getCashInPer: function _getCashInPer() {
            return this.get('exchange.cashInPer');
        },

        _updateCashMapChart: function _updateCashMapChart() {
            var cashInPer = this.get('cashMapChartData.lastUpdatedCashInValue');
            var chartDefaultColor = this.styles.chartDefaultColor;
            var cashInColor = this.styles.cashInColor;
            var cashOutColor = this.styles.cashOutColor;
            var titleValue = cashInPer;
            var chartDataColumns = this.get('cashMapChartData.columns');

            if (this.cashMapChart === null) {
                this._drawCashMapChart();
            } else if (this.get('cashMapChartData.isChartUpdated')) {
                this.cashMapChart.load({
                    columns: chartDataColumns
                });

                this.set('cashMapChartData.isChartUpdated', false);
            }

            if (!cashInPer) {
                titleValue = '0.00';

                if (this.cashMapChart.data.colors() && this.cashMapChart.data.colors().cashIn === cashInColor) {
                    this.cashMapChart.data.colors({ cashIn: chartDefaultColor, cashOut: chartDefaultColor });
                }
            } else if (cashInPer && this.cashMapChart.data.colors() && this.cashMapChart.data.colors().cashIn === this.styles.chartDefaultColor) {
                this.cashMapChart.data.colors({ cashIn: cashInColor, cashOut: cashOutColor });
            }

            titleValue = _utils.default.formatters.formatNumber(titleValue, this.get('noOfDecimalPlaces'));
            var cashInPerArray = titleValue.toString().split('.');
            var label = _d.default.select('#cash_map_chart text.c3-chart-arcs-title');

            _ember.default.$('.c3-chart-arcs-title', _ember.default.$(this.cashMapChart.element)).empty();
            label.insert('tspan').text(cashInPerArray[0]).attr('x', -7).attr('y', 4).attr('class', 'prominat');
            label.insert('tspan').text('.' + cashInPerArray[1]).attr('x', 6).attr('y', 4).attr('class', 'symbols-title');
        },

        bindCashMapChartData: function () {
            var cashInPer = Math.abs(this._getCashInPer());

            if (isNaN(cashInPer)) {
                cashInPer = 0;
            } else {
                cashInPer = Math.round(cashInPer * 1e2) / 1e2; // TODO [arosha] move this to Formatters in case of high usages
            }

            if (!this.get('isTablet')) {
                var isCashMapUpdated = false;
                var lastUpdatedChartValue = this.get('cashMapChartData').lastUpdatedChartValue;
                var lastUpdatedCashInValue = this.get('cashMapChartData').lastUpdatedCashInValue;

                if (cashInPer === 0 || Math.abs(cashInPer - lastUpdatedCashInValue) > this.chartValueUpdatingThreshold) {
                    lastUpdatedCashInValue = cashInPer;

                    if (cashInPer === 0 || Math.abs(cashInPer - lastUpdatedChartValue) > this.chartDrawingThreshold) {
                        isCashMapUpdated = true;
                        lastUpdatedChartValue = cashInPer;
                    }

                    var chartDataColumns = [['cashIn', cashInPer], ['cashOut', 100 - cashInPer]];
                    this.set('cashMapChartData', {
                        columns: chartDataColumns,
                        lastUpdatedChartValue: lastUpdatedChartValue,
                        lastUpdatedCashInValue: lastUpdatedCashInValue,
                        isChartUpdated: isCashMapUpdated
                    });

                    _ember.default.run.debounce(this, this._updateCashMapChart, _priceConstants.default.TimeIntervals.CashMapChartRefreshInterval);
                }
            } else {
                this.set('cashInPerValue', cashInPer === 0 ? 0 : cashInPer.toFixed(2));
            }
        }.observes('exchange.cashInPer'),

        _updateNetCashPerChart: function _updateNetCashPerChart() {
            var chartColumns = this.get('netCashPerChartData.columns');
            var netCashPer = this.get('netCashPerChartData.lastUpdatedNetCashValue');

            if (this.netCashPerChart === null) {
                this._drawNetCashPerChart();
            } else if (this.get('netCashPerChartData.isChartUpdated')) {
                this.netCashPerChart.load({
                    columns: chartColumns
                });

                this.set('netCashPerChartData.isChartUpdated', false);
            }

            var netCashPerColour = netCashPer > 0 ? '#2ecc71' : '#ff6b6b';
            var netCashPerValue = _utils.default.formatters.formatNumber(netCashPer, 2);
            var netCashPerArray = netCashPerValue.split('.');
            var label = _d.default.select('#net_cash_chart text.c3-chart-arcs-title');
            var netCashPerRemColor = '#d2d2d2';

            if (_sharedService.default.userSettings.get('currentTheme') === 'theme1') {
                netCashPerRemColor = '#505966';
            }

            _ember.default.$('.c3-chart-arcs-title', _ember.default.$(this.netCashPerChart.element)).empty();
            label.insert('tspan').text(netCashPerArray[0]).attr('x', -7).attr('y', 4).attr('class', 'prominat');
            label.insert('tspan').text('.' + netCashPerArray[1]).attr('x', 6).attr('y', 4).attr('class', 'symbols-title');

            this.netCashPerChart.data.colors({
                netCashPer: netCashPerColour,
                netCashPerRem: netCashPerRemColor
            });
        },

        bindNetCashPerChartData: function () {
            var netCashPer = this.get('exchange.netCashPer');

            if (isNaN(netCashPer)) {
                netCashPer = 0;
            }

            var netCashPerAbs = Math.abs(netCashPer);

            if (!this.get('isTablet')) {
                var isChartUpdated = false;
                var lastUpdatedChartValue = this.get('netCashPerChartData').lastUpdatedChartValue;
                var lastUpdatedNetCashValue = this.get('netCashPerChartData').lastUpdatedNetCashValue;

                if (isNaN(netCashPerAbs)) {
                    netCashPerAbs = 0;
                }

                if (netCashPer === 0 || Math.abs(netCashPer - lastUpdatedNetCashValue) > this.chartValueUpdatingThreshold) {
                    lastUpdatedNetCashValue = netCashPer;

                    if (netCashPer === 0 || Math.abs(netCashPer - lastUpdatedChartValue) > this.chartDrawingThreshold) {
                        isChartUpdated = true;
                        lastUpdatedChartValue = netCashPer;
                    }

                    var chartColumns = [['netCashPerRem', 100 - netCashPerAbs], ['netCashPer', netCashPerAbs]];

                    if (netCashPer > this.intZero) {
                        chartColumns = [['netCashPer', netCashPerAbs], ['netCashPerRem', 100 - netCashPerAbs]];
                    }

                    this.set('netCashPerChartData', {
                        columns: chartColumns,
                        lastUpdatedChartValue: lastUpdatedChartValue,
                        lastUpdatedNetCashValue: lastUpdatedNetCashValue,
                        isChartUpdated: isChartUpdated
                    });

                    _ember.default.run.debounce(this, this._updateNetCashPerChart, _priceConstants.default.TimeIntervals.CashMapChartRefreshInterval);
                }
            } else {
                this.set('netCashPerValue', !netCashPerAbs ? 0 : netCashPerAbs.toFixed(2));
            }
        }.observes('exchange.netCashPer')
    });
});
define('universal-app/controllers/price/top-panel/mobile/announcement-panel', ['exports', 'ember', '../../../../app-events', '../../widgets/announcement/exchange-announcement'], function (exports, _ember, _appEvents, _exchangeAnnouncement) {
    'use strict';

    exports.default = _exchangeAnnouncement.default.extend({
        topAnn: [],
        wkey: 'title-panel-ann-ticker', // TODO [Arosha] Remove this when 'wkey' is implemented to Title Panel

        onLoadWidget: function onLoadWidget() {
            this._super();
            _appEvents.default.subscribeLanguageChanged(this, this.get('wkey'));
        },

        onPrepareData: function onPrepareData() {
            this._super();
            this._bindNewsAnnContent();
        },

        onUnloadWidget: function onUnloadWidget() {
            this._super();
            _appEvents.default.unSubscribeLanguageChanged(this.get('wkey'));
        },

        onLanguageChanged: function onLanguageChanged(lang) {
            // TODO: [Anushka] Remove this immediately after refactoring
            this.priceService.announcementDS.store = {};
            this.priceService.announcementDS.annNewsStoreArray.clear();

            this._super(lang);
        },

        _bindNewsAnnContent: function () {
            _ember.default.run.once(this, this._getLatestNewsAnn);
        }.observes('sortedContent.length'),

        _getLatestNewsAnn: function _getLatestNewsAnn() {
            this.set('topAnn', this.get('sortedContent').slice(0, 5));
        }
    });
});
define('universal-app/controllers/price/top-panel/mobile/hnav-panel', ['exports', 'ember', '../../../base-widget-container', '../../../../models/shared/shared-service'], function (exports, _ember, _baseWidgetContainer, _sharedService) {
    'use strict';

    exports.default = _baseWidgetContainer.default.extend({
        containerKey: 'hnavPanel',
        mainOutlet: 'price.widgets.mobile.market-overview-tab',
        currentMenu: '',
        isFullWidthMenu: false,

        options: {
            dragLockToAxis: true,
            dragBlockHorizontal: true
        },

        onLoadContainer: function onLoadContainer() {
            this._super();
            this._setMenuTitle();
        },

        languageChanged: function languageChanged() {
            this._setMenuTitle();
        },

        onAfterRender: function onAfterRender() {
            var that = this;
            var initHorizontalPosition = 0;
            var initVerticalPosition = 0;

            var hammerObj = new Hammer(document.getElementById('mainPanelOutletContainer'), this.options);
            hammerObj.get('swipe').set({ velocity: 0.1 });

            // Prevent default horizontal behavior and let Hammer handles it
            _ember.default.$('#mainPanelOutletContainer').bind('touchstart', function (e) {
                initVerticalPosition = e.originalEvent.touches[0].clientY;
                initHorizontalPosition = e.originalEvent.touches[0].clientX;
            });

            _ember.default.$('#mainPanelOutletContainer').bind('touchmove', function (e) {
                var currentY = e.originalEvent.touches[0].clientY;
                var currentX = e.originalEvent.touches[0].clientX;

                if (Math.abs(initVerticalPosition - currentY) < Math.abs(initHorizontalPosition - currentX) && !_ember.default.isSwipeDisable) {
                    e.preventDefault();
                }

                _ember.default.isSwipeDisable = false;
            });

            hammerObj.on('swipeleft swiperight', function (ev) {
                var activeTab = _sharedService.default.getService('sharedUI').getService('mainPanel').get('activeTab');
                var menuContent = _sharedService.default.getService('sharedUI').getService('mainPanel').get('menuContent');
                var swipeDirection = 'swipeleft';
                var swipedTab = '';
                var isArabic = _sharedService.default.userSettings.currentLanguage === 'AR';

                if (isArabic) {
                    // For Arabic Language
                    swipeDirection = 'swiperight';
                }

                if (!_ember.default.isQuoteStatusSwipeTriggered) {
                    swipedTab = that.getSwipedTabItem(menuContent.tab, activeTab, ev.type === swipeDirection);

                    if (swipedTab) {
                        _sharedService.default.getService('sharedUI').getService('mainPanel').onRenderCss(swipedTab);
                        _sharedService.default.getService('priceUI').changeSwipeView(ev.type === swipeDirection);
                        that.scrollSubMenuItems(swipedTab, menuContent.title);

                        _ember.default.run.later(function () {
                            _sharedService.default.getService('priceUI').changeSwipeView(ev.type === swipeDirection, true);
                        }, 200);

                        _ember.default.run.later(function () {
                            _sharedService.default.getService('sharedUI').getService('mainPanel').onRenderTabItems(swipedTab);
                        }, 200);
                    } else {
                        _sharedService.default.getService('priceUI').setInnerTabSwipe(ev.type === swipeDirection);
                    }
                } else {
                    _ember.default.isQuoteStatusSwipeTriggered = false;
                }
            });
        },

        _setMenuTitle: function _setMenuTitle() {
            var that = this;
            var menuArray = this.get('appLayout').layout.mainPanel.content;

            _ember.default.$.each(menuArray, function (key, menuObj) {
                try {
                    _ember.default.set(menuObj, 'displayMainTitle', that.get('app').lang.labels[menuObj.titleKey] ? that.get('app').lang.labels[menuObj.titleKey] : that.get('app').lang.labels[menuObj.title]);
                } catch (e) {
                    menuObj.displayMainTitle = that.get('app').lang.labels[menuObj.titleKey] ? that.get('app').lang.labels[menuObj.titleKey] : that.get('app').lang.labels[menuObj.title];
                }
            });
        },

        setActiveMenu: function setActiveMenu(currentMenu, tabId) {
            var that = this;
            var menuArray = this.get('appLayout').layout.mainPanel.content;
            var tabContent = '';
            var tabContentId = tabId ? tabId : 1;

            // At first time, object behaves as a normal javascript object
            // After that object is an ember object
            // Still we cannot call .set() directly on the object
            // Need to call Ember.set() instead
            _ember.default.$.each(menuArray, function (key, menuObj) {
                if (menuObj.id === currentMenu.id) {
                    var isFullWidthMenu = that.getFullWidthMenu(menuObj);
                    var subMenuCss = menuObj.tab.length > 1 && !menuObj.expandId ? _sharedService.default.userSettings.currentLanguage === 'AR' && !isFullWidthMenu ? 'dot-panel-container' : isFullWidthMenu ? '' : 'display-inline-block' : 'display-none';

                    that.set('currentMenu', menuObj);
                    that.router.set('disableSubMenu', !(menuObj.tab.length > 1 && !menuObj.expandId));
                    tabContent = menuObj.tab[tabContentId - 1];

                    try {
                        _ember.default.set(menuObj, 'mainMenuCss', 'appmnu-sidebar-active');
                        _ember.default.set(menuObj, 'subMenuCss', subMenuCss);
                    } catch (e) {
                        menuObj.mainMenuCss = 'appmnu-sidebar-active';
                        menuObj.subMenuCss = subMenuCss;
                    }
                } else {
                    try {
                        _ember.default.set(menuObj, 'mainMenuCss', '');
                        _ember.default.set(menuObj, 'subMenuCss', 'display-none');
                    } catch (e) {
                        menuObj.mainMenuCss = '';
                        menuObj.subMenuCss = 'display-none';
                    }
                }
            });

            if (tabContent) {
                _ember.default.run.later(function () {
                    that.scrollSubMenuItems(tabContent, that.get('currentMenu.title'));
                }, 300);
            }
        },

        getFullWidthMenu: function getFullWidthMenu(menuObj) {
            var currentMenu = menuObj ? menuObj : this.get('currentMenu');
            var isFullWidthMenu = false;

            if (currentMenu) {
                var tabArray = currentMenu.tab;
                var tabArrayLength = tabArray.length;

                if (tabArrayLength > 1) {
                    var deviceWidth = window.innerWidth;
                    var totalElementWidth = 0;
                    var arabicCharWidth = 5;
                    var defaultCharWidth = 6.5;
                    var elementHorizontalPadding = 36;
                    var averageCharWidth = _sharedService.default.userSettings.currentLanguage === 'AR' ? arabicCharWidth : defaultCharWidth;

                    _ember.default.$.each(tabArray, function (key, tabObj) {
                        if (tabObj.expandId !== -1) {
                            var tabTitle = tabObj.displayTitle ? tabObj.displayTitle : tabObj.title;
                            var tabTitleLength = tabTitle.length;
                            var elementLength = tabTitleLength * averageCharWidth + elementHorizontalPadding;

                            totalElementWidth = totalElementWidth + elementLength;
                        }

                        if (totalElementWidth > deviceWidth) {
                            return false;
                        }
                    });

                    if (totalElementWidth <= deviceWidth) {
                        isFullWidthMenu = true;
                    }
                }
            }

            this.set('isFullWidthMenu', isFullWidthMenu);

            return isFullWidthMenu;
        },

        showTabPanel: function showTabPanel(tabArray) {
            _ember.default.$.each(tabArray, function (key, tabObj) {
                var tabElement = _ember.default.$('div[name=' + tabObj.title + tabObj.id + ']');
                tabElement.removeClass('visibility-hidden');
            });
        },

        hideTabPanel: function hideTabPanel() {
            var currentMenu = this.get('currentMenu');

            if (currentMenu) {
                var tabArray = currentMenu.tab;

                _ember.default.$.each(tabArray, function (key, tabObj) {
                    var tabElement = _ember.default.$('div[name=' + tabObj.title + tabObj.id + ']');
                    tabElement.removeClass('visibility-hidden');
                });
            }
        },

        getSwipedTabItem: function getSwipedTabItem(menuTabArray, activeTab, isNext) {
            var nextMenu = null;
            var tabArray = menuTabArray;
            var tabArrayLength = tabArray.length;

            if (tabArrayLength > 1) {
                var initialMenuKey = isNext ? 0 : tabArrayLength - 1;
                var endMenuKey = isNext ? tabArrayLength - 1 : 0;

                _ember.default.$.each(tabArray, function (key, tabObj) {
                    if (tabObj.title === activeTab.title) {
                        var menuKey = isNext ? key + 1 : key - 1;

                        if (key === endMenuKey) {
                            nextMenu = tabArray[initialMenuKey];
                            menuKey = initialMenuKey;
                        } else {
                            nextMenu = tabArray[menuKey];
                        }

                        while (nextMenu && nextMenu.expandId === -1) {
                            menuKey = isNext ? menuKey + 1 : menuKey - 1;

                            if (menuKey === endMenuKey) {
                                nextMenu = tabArray[initialMenuKey];
                            } else {
                                nextMenu = tabArray[menuKey];
                            }
                        }

                        return false;
                    }
                });
            }

            return nextMenu;
        },

        scrollSubMenuItems: function scrollSubMenuItems(tabContent, menuTitle) {
            if (tabContent) {
                var element = _ember.default.$('div[name=' + tabContent.title + tabContent.id + ']');
                var menuItem = _ember.default.$('div[name=' + menuTitle + ']');
                var offset = element.offset();
                var elementWidth = element.width();

                if (offset) {
                    var scrollValue = menuItem.scrollLeft();
                    var currentScrollValue = scrollValue ? scrollValue : 0;
                    var scrollGap = window.screen.width - offset.left;

                    if (offset && scrollGap < elementWidth * 2) {
                        var newScrollWidth = elementWidth;

                        if (scrollGap < 0) {
                            newScrollWidth = elementWidth * 2 - scrollGap;
                        }

                        menuItem.animate({ scrollLeft: currentScrollValue + newScrollWidth }, 200, 'swing');
                    } else if (offset.left < 0) {
                        menuItem.animate({ scrollLeft: currentScrollValue + offset.left }, 200, 'swing');
                    }
                }
            }
        },

        actions: {
            renderSubMenuItems: function renderSubMenuItems(tabContent) {
                var that = this;
                _sharedService.default.getService('sharedUI').getService('mainPanel').onRenderTabItems(tabContent);

                if (tabContent) {
                    _ember.default.run.later(function () {
                        that.scrollSubMenuItems(tabContent, that.get('currentMenu.title'));
                    }, 200);
                }
            }
        }
    });
});
define('universal-app/controllers/price/top-panel/mobile/price-ticker-panel', ['exports', '../../top-panel/price-ticker'], function (exports, _priceTicker) {
  'use strict';

  exports.default = _priceTicker.default.extend({});
});
define('universal-app/controllers/price/top-panel/mobile/title-panel', ['exports', 'ember', '../../../base-widget-container', '../../../../models/shared/shared-service', '../../../../config/app-config', '../../../../components/mobile/global-search'], function (exports, _ember, _baseWidgetContainer, _sharedService, _appConfig, _globalSearch) {
    'use strict';

    exports.default = _baseWidgetContainer.default.extend({
        containerKey: 'titleBar',
        layouts: {},
        isMainNavShown: false,
        activeTabName: 'market',
        activeMainId: 0,
        activeTabId: '',
        activeTabCss: '',

        titlePanelContainerCss: '',
        inputContainerCss: '',
        defaultLink: '1',
        isSearchEnable: false,
        searchKey: '',
        isBackEnable: false,
        isArabic: _sharedService.default.userSettings.currentLanguage === 'AR',

        sharedUIService: _sharedService.default.getService('sharedUI'),

        options: {
            dragLockToAxis: true,
            dragBlockHorizontal: true
        },

        languageChanged: function languageChanged() {
            this.set('activeTabName', this.get('app').lang.labels[this.get('activeTabKey')]);
            this.set('isArabic', _sharedService.default.userSettings.currentLanguage === 'AR');
        },

        setActiveTabName: function setActiveTabName(activeTab, activeMainId) {
            var activeTabName = activeTab.titleSubKey && !activeMainId ? activeTab.titleSubKey : activeTab.titleKey;
            var tabName = this.get('app').lang.labels[activeTabName];

            this.set('activeTabName', tabName);
            this.set('activeTabKey', activeTabName);

            if (tabName) {
                var minimumLabelLength = 13;
                this.set('activeTabCss', tabName.length < minimumLabelLength ? 'font-x-l' : '');
            }

            if (activeMainId) {
                this.set('activeMainId', activeMainId);
            }

            if (activeTab && activeTab.title) {
                this.set('activeTabId', activeTab.title);
            }

            if (this.sharedUIService.getService('leftPanel')) {
                this.sharedUIService.getService('leftPanel').hideMainMenu();
            }
        },

        onAfterRender: function onAfterRender() {
            this.set('inputContainerCss', 'hide-container pos-abs');
            this.set('titlePanelSearchArea', _ember.default.$('#titlePanelSearchArea'));
        },

        onSymbolSelected: function onSymbolSelected(isForceLoadMenu) {
            var watchListMenuId = _appConfig.default.widgetId.watchListMenuId;
            var portfolioMenuId = _appConfig.default.widgetId.portfolioMenuId;
            var quoteMenuId = _appConfig.default.widgetId ? _appConfig.default.widgetId.quoteMenuId : '';

            if (quoteMenuId && (isForceLoadMenu || this.get('activeMainId') === watchListMenuId || this.get('activeMainId') === portfolioMenuId)) {
                this._navigateOnSymbolChange(watchListMenuId, quoteMenuId);
            }
        },

        renderAppTitleTemplate: function renderAppTitleTemplate(templateName, comp) {
            var route = this.container.lookup('route:application');
            route.render(templateName, {
                into: 'price/top-panel/mobile/title-panel',
                outlet: 'titlePanelGLOutlet',
                controller: comp
            });
        },

        showSearchPopup: function showSearchPopup() {
            var modal = this.get('topBarSymbolSearch');
            modal.send('showModalPopup');
        },

        closeSearchPopup: function closeSearchPopup() {
            var modal = this.get('topBarSymbolSearch');

            if (modal) {
                modal.send('closeModalPopup');
            }

            this.set('searchKey', '');
        },

        toggleDisplay: function toggleDisplay(isCloseSearch, enableAddToWatchList, currentWatchListId, currentController) {
            var hideStyle = 'hide-container pos-abs';
            var fullWidth = 'full-width';

            this.set('isEnableAddToWatchList', enableAddToWatchList);
            this.set('currentWatchListId', currentWatchListId);
            this.set('invokeController', currentController);
            this.set('isEnableAddToPortfolio', currentController && currentController.isEnableAddToPortfolio);
            this.set('isEnableCompareSymbol', currentController && currentController.isEnableCompareSymbol);
            this.set('isEnableMarginSymbol', currentController && currentController.isEnableMarginSymbol);

            if (isCloseSearch || this.get('titlePanelContainerCss') === hideStyle) {
                this.set('titlePanelContainerCss', fullWidth);
                this.set('inputContainerCss', hideStyle);
                this.set('isSearchEnable', false);
                this.closeSearchPopup();
            } else {
                this.set('titlePanelContainerCss', hideStyle);
                this.set('inputContainerCss', fullWidth);
                this.set('isSearchEnable', true);

                this.get('titlePanelSearchArea').find('#titlePanelSeach')[0].focus();
                this.showSearchPopup();
                this.set('searchKey', '');
            }
        },

        loadMenuByConfig: function loadMenuByConfig(menuId, isAddedToLastMenuStack) {
            var menuContent = this.get('appLayout').layout.mainPanel.content[menuId - 1];
            this.sharedUIService.getService('mainPanel').onRenderMenuItems(menuContent, undefined, undefined, !isAddedToLastMenuStack);
        },

        _navigateOnSymbolChange: function _navigateOnSymbolChange(menuId, tabId) {
            if (_appConfig.default.customisation.isCompactMenuEnabled) {
                _sharedService.default.getService('sharedUI').navigateMenu(menuId, tabId);
            } else {
                _sharedService.default.getService('sharedUI').navigateMenu(tabId);
            }
        },

        actions: {
            toggleMainMenuView: function toggleMainMenuView() {
                this.sharedUIService.getService('leftPanel').toggleMainMenuView();
            },

            showSearchPopup: function showSearchPopup() {
                this.get('topBarSymbolSearch').send('showModalPopup');
            },

            closeSearchPopup: function closeSearchPopup() {
                this.closeSearchPopup();
            },

            toggleDisplay: function toggleDisplay(isCloseSearch, enableAddToWatchList) {
                this.toggleDisplay(isCloseSearch, enableAddToWatchList);
            },

            widgetBackAction: function widgetBackAction() {
                this.sharedUIService.getService('mainPanel').loadLastMenuFromStack();
                _sharedService.default.getService('priceUI').resetLastMenuStack(); // Remove this if full stack is required.
            },

            onSearchSymbolSelected: function onSearchSymbolSelected(stock) {
                var myFavoriteCustomWL = 0;
                var watchListId = this.get('currentWatchListId') ? this.get('currentWatchListId') : myFavoriteCustomWL;
                var quoteMenuId = _appConfig.default.widgetId ? _appConfig.default.widgetId.quoteMenuId : '';
                var watchListMenuId = _appConfig.default.widgetId.watchListMenuId;
                var activeMenuId = this.get('activeMainId');
                var isCompactMenuEnabled = _appConfig.default.customisation.isCompactMenuEnabled;
                var isLevelTwoDataAvailable = _sharedService.default.getService('price').userDS.isLevelTwoDataAvailable(stock.inst);

                if (_appConfig.default.customisation.isTradingEnabled) {
                    var orderTicketMenuId = _appConfig.default.widgetId.orderTicketMenuId;

                    if (activeMenuId === orderTicketMenuId) {
                        _sharedService.default.getService('tradeUI').showOrderTicket(this.container, undefined, stock);
                    } else if (this.get('isEnableAddToWatchList')) {
                        _sharedService.default.getService('price').watchListDS.addStocksToCustomWL(stock, watchListId);
                    } else if (this.get('isEnableMarginSymbol')) {
                        this.get('invokeController').addSymbolToDeal(stock);
                    } else if (quoteMenuId && (!isLevelTwoDataAvailable || activeMenuId !== quoteMenuId) && !isCompactMenuEnabled || isCompactMenuEnabled && (activeMenuId !== watchListMenuId || this.get('activeTabId') === watchListMenuId)) {
                        this._navigateOnSymbolChange(watchListMenuId, quoteMenuId);
                    }
                } else if (this.get('isEnableAddToWatchList')) {
                    _sharedService.default.getService('price').watchListDS.addStocksToCustomWL(stock, watchListId);
                } else if (this.get('isEnableCompareSymbol')) {
                    this.get('invokeController').addToCompareSymbol(stock);
                } else if (this.get('isEnableAddToPortfolio')) {
                    this.get('invokeController').addToPortfolioCollection(stock, myFavoriteCustomWL);
                } else if (quoteMenuId && (!isLevelTwoDataAvailable || activeMenuId !== quoteMenuId)) {
                    this._navigateOnSymbolChange(watchListMenuId, quoteMenuId);
                }

                this.toggleDisplay(true);
            }
        }
    });


    _ember.default.Handlebars.helper('global-search-mobile', _globalSearch.default);
});
define('universal-app/controllers/price/top-panel/price-ticker', ['exports', 'ember', '../../../models/shared/shared-service', '../../../models/price/price-constants', '../../../components/base-component', '../../../templates/price/top-panel/price-ticker', '../../controller-factory', '../../../config/app-config', '../../../utils/utils', '../../../config/user-settings', '../../../app-events'], function (exports, _ember, _sharedService, _priceConstants, _baseComponent, _priceTicker, _controllerFactory, _appConfig, _utils, _userSettings, _appEvents) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        wkey: 'price-ticker',
        exchange: undefined, // User Default exchange reference
        fullMarket: undefined, // ticker setting : to keep full market tickers
        priceService: _sharedService.default.getService('price'),
        tickerSettings: _sharedService.default.userSettings,
        tickerSymDisplayField: _sharedService.default.getService('price').settings.configs.priceTickerConfigs.tickerSymDisplayField,
        tickerChangeDisplayField: _sharedService.default.getService('price').settings.configs.priceTickerConfigs.tickerChangeDisplayField,

        // Ticker related settings
        previousRunTime: undefined, // last run time
        tickerIndex: 0, // global variable to keep last used index of ticker list
        noOfItemsToAddToQ: 24, // number of symbols to add to Q in one loop
        numberOfIteration: 0, // number of iterations
        isInitialTickerItemsAdded: false,

        timeInterval: {
            OneSecondInMillis: 1000,
            OneMinuteInMillis: 60000
        },

        /* *
         * Warning : Change css style according to millisecondsToTransformOneItem
         * Default settings
         * @type {{elementQueueMaxSize: number, numberOfHtmlElementsInTicker: number, itemWidth: number, millisecondsToTransformOneItem: number, millisecondsToWait: number}}
         */
        settings: {
            elementQueueMaxSize: 24,
            itemWidth: 125,
            itemWidthStyle: 'width: 125px', // Added this to remove "Binding style" warning. Update this if itemWidth is changed
            millisecondsToWait: 2500,
            singleTickerWidth: 1500,
            singleTickerItemCount: 12,
            tickerSpeed: '',
            tickerDelay: ''
        },

        elementQueue: undefined,

        // Ticker div 1 related properties
        tickerElementOne: undefined,
        tickerOneItems: _ember.default.A([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]),
        tickerOneArrayIndex: 0,

        // Ticker div 2 related properties
        tickerElementTwo: undefined,
        tickerTwoItems: _ember.default.A([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]),
        tickerTwoArrayIndex: 0,

        tickerDivWidth: undefined,
        visibleTicker: 1,
        animationTime: 60, // This should be equal to animation time given in CSS
        animationTimeoutFunction: undefined,
        activeTicker: 1,
        isFirstRound: true,
        addedElementCount: 0,

        isTickerRunning: false, // Play or pause ticker
        isAnimationStarted: false, // To stabilise the animation

        layout: _priceTicker.default,
        isHorizontalTickerAnimation: _appConfig.default.customisation.isHorizontalTickerAnimation,
        isTablet: _appConfig.default.customisation.isTablet,

        willDestroyElement: function willDestroyElement() {
            this._clearPriceTicker();
        },

        initializeTicker: function () {
            this._setTickerItemCount();
            this._setTickerExchange();

            this.priceService.addFullMarketSymbolRequest(this.get('exchange.exg'));

            if (_appConfig.default.customisation.isMobile) {
                _appEvents.default.subscribeLanguageChanged(this, this.get('wkey'));
            }
        }.on('init'),

        changeSettings: function () {
            this._setTickerSpeed();
        }.observes('tickerSettings.tickerSpeed'),

        onFullMarketSnapshotReceived: function onFullMarketSnapshotReceived() {
            this._startPriceTicker();
            this.priceService.unSubscribeFullMarketReceived(this.get('wkey'), this);
        },

        languageChanged: function languageChanged() {
            this._changeTickerLanguage();
        },

        _setTickerItemCount: function _setTickerItemCount() {
            if (this.isHorizontalTickerAnimation) {
                var itemWidth = this.settings.itemWidth;
                var tickerWidth = _ember.default.$('#tickerPanel').width();
                var tickerItems = Math.floor(tickerWidth / itemWidth);

                tickerItems = tickerItems > this.settings.singleTickerItemCount ? this.settings.singleTickerItemCount : tickerItems;

                this.set('settings.singleTickerItemCount', tickerItems);
            }

            this.priceService.subscribeFullMarketReceived(this.get('wkey'), this);
        },

        _startPriceTicker: function _startPriceTicker() {
            this._setTickerExchange();
            this._preparePriceTicker();
        },

        _setTickerExchange: function _setTickerExchange() {
            if (!this.get('exchange')) {
                var exchange = _userSettings.default.customisation.defaultExchange;
                this.set('exchange', this.priceService.exchangeDS.getExchange(exchange));
            }
        },

        _setTickerSpeed: function _setTickerSpeed() {
            var speed = _sharedService.default.userSettings.tickerSpeed;

            if (speed) {
                var tickerTwoDelay = speed / 2;
                var tickerSpeed = '-webkit-animation: tickerMove ' + speed + 's linear infinite both; -moz-animation: tickerMove ' + speed + 's linear infinite both; animation: tickerMove ' + speed + 's linear infinite both;';
                var tickerDelay = tickerSpeed + '-webkit-animation-delay: -' + tickerTwoDelay + 's !important; -moz-animation-delay: -' + tickerTwoDelay + 's !important; animation-delay: -' + tickerTwoDelay + 's !important;';

                this.set('isSpeedChange', true);
                this.set('settings.tickerSpeed', tickerSpeed);
                this.set('settings.tickerDelay', tickerDelay);
            }
        },

        _preparePriceTicker: function _preparePriceTicker() {
            // get and set full market symbols
            this._setFullMarketSymbols();

            this._initPriceTicker();
            this._initPriceTickerData();
            this._setTickerSpeed();
        },

        _clearPriceTicker: function _clearPriceTicker() {
            var exchange = this.get('exchange');

            if (exchange) {
                this.priceService.removeFullMarketSymbolRequest(exchange.exg);
            }
        },

        /* *
         * Setting full market tickers to local variable
         */
        _setFullMarketSymbols: function _setFullMarketSymbols() {
            var exchange = this.get('exchange');
            var store = this.priceService.stockDS.get('stockMapByExg');

            if (exchange) {
                var fullMarket = store[exchange.exg];
                this.set('fullMarket', fullMarket);
            }
        },

        /* *
         * Initializing price ticker data
         * Run every 1 minute if market is not open
         * Run every 1 seconds if Market open but no data to show in ticker
         * Run every 30 seconds if required elements are added to Q
         */
        _initPriceTickerData: function _initPriceTickerData() {
            var exchange = this.get('exchange');

            if (exchange) {
                var marketTime = exchange.time;
                var marketStatus = exchange.stat;

                // Initial sleep time
                var sleepTime = this.timeInterval.OneSecondInMillis;
                var that = this;

                if (marketStatus !== _priceConstants.default.MarketStatus.Open) {
                    if (marketStatus === _priceConstants.default.MarketStatus.PreOpen) {
                        this._clearTicker();
                        this.isInitialTickerItemsAdded = false;
                    }

                    // If market is not open, no need to check last traded time
                    this.set('previousRunTime', undefined);

                    if (this.isInitialTickerItemsAdded) {
                        sleepTime = this.timeInterval.OneMinuteInMillis;
                    } else {
                        this._addElementsToQ();
                        sleepTime = this.timeInterval.OneSecondInMillis;
                    }
                } else {
                    this._addElementsToQ();

                    // set last run time after running above function
                    this.set('previousRunTime', marketTime);

                    // run this every 30 seconds
                    if (this._getQueueSize() > 0) {
                        sleepTime = this.timeInterval.OneSecondInMillis * 30;
                    }
                }

                setTimeout(function () {
                    if (!that.get('isDestroyed') || !that.get('isDestroying')) {
                        that._initPriceTickerData();
                    }
                }, sleepTime);
            }
        },

        /* *
         * @param initEffectiveElementsCount
         */
        _addElementsToQ: function _addElementsToQ(initEffectiveElementsCount) {
            var previousRunTime = this.get('previousRunTime');
            var maxNumberOfIterationPerInvoke = 2;
            var effectiveElementsCount = initEffectiveElementsCount || 0;
            var numberOfIterationPerInvoke = this.get('numberOfIteration');

            var fullMarket = this.get('fullMarket');
            var exchange = this.get('exchange');
            var tickerIndex = this.tickerIndex;

            if (fullMarket && exchange) {
                var noOfTickersInList = fullMarket.length;
                var marketStatus = exchange.stat;

                // Add 20 elements in each loop or until complete the full list
                while (noOfTickersInList !== tickerIndex && effectiveElementsCount < this.noOfItemsToAddToQ) {
                    var stock = fullMarket[tickerIndex];

                    if (stock && _utils.default.AssetTypes.isEquityAssetType(stock.inst)) {
                        // Last traded time of this ticker
                        var ltt = stock.ltt;
                        var isValidStock;

                        if (previousRunTime === undefined) {
                            // This is first time. No need to check last traded time condition
                            // Just add to Q if there are trades
                            isValidStock = stock.trades > 0;
                        } else {
                            isValidStock = stock.trades > 0 && previousRunTime < ltt;
                        }

                        if (isValidStock) {
                            if (marketStatus !== _priceConstants.default.MarketStatus.Open) {
                                this.isInitialTickerItemsAdded = true;
                                this._addItemToQueueWhenMarketClosed(stock);
                            } else {
                                this._addItemToQueue(stock);
                            }

                            effectiveElementsCount++;
                        }
                    }

                    tickerIndex++;
                }

                numberOfIterationPerInvoke++;

                // full list is completed
                if (noOfTickersInList === tickerIndex) {
                    // reset tickerIndex
                    tickerIndex = 0;
                }

                this.set('tickerIndex', tickerIndex);

                // Iterate through the list from the beginning if there is no 20 elements to add
                // Iterate only twice even though there are no enough elements
                if (effectiveElementsCount < this.noOfItemsToAddToQ && numberOfIterationPerInvoke < maxNumberOfIterationPerInvoke) {
                    this.set('numberOfIteration', numberOfIterationPerInvoke);
                    this.set('numberOfIteration', numberOfIterationPerInvoke);
                    this.set('tickerIndex', 0);
                    this._addElementsToQ(effectiveElementsCount);
                }
            }
        },

        /* *
         * Initializing ticker
         */
        _initPriceTicker: function _initPriceTicker() {
            this._setTickerUI();
            this.elementQueue = new Queue(this.settings.elementQueueMaxSize);
            this._moveTicker();
            this._startCounterTimeout();
        },

        _setTickerUI: function _setTickerUI() {
            this.tickerElementOne = _ember.default.$('#tickerOne');
            this.tickerElementTwo = _ember.default.$('#tickerTwo');

            if (_ember.default.$('.tickerDiv').css('width')) {
                this.set('tickerDivWidth', parseInt(_ember.default.$('.tickerDiv').css('width').split('.')[0], 10));

                _ember.default.$('.tickerDiv::first-letter').bind('webkitAnimationIteration', this._animationIterationFinished.bind(this));
                _ember.default.$('.tickerDiv::first-letter').bind('mozAnimationIteration', this._animationIterationFinished.bind(this));
                _ember.default.$('.tickerDiv::first-letter').bind('animationiteration', this._animationIterationFinished.bind(this));
            }
        },

        /* *
         * Start a timeout to periodically update addedElementCount and pause the ticker if new elements are not added
         */
        _startCounterTimeout: function _startCounterTimeout() {
            var that = this;

            if (this.addedElementCount <= 1) {
                if (this.get('isAnimationStarted')) {
                    this.set('isTickerRunning', false);
                }
            } else {
                this.addedElementCount--;
            }

            setTimeout(function () {
                if (!that.get('isDestroyed') || !that.get('isDestroying')) {
                    that._startCounterTimeout();
                }
            }, this.settings.millisecondsToWait);
        },

        /* *
         * Callback function for AnimationIteration CSS event to toggle visible ticker property
         */
        _animationIterationFinished: function _animationIterationFinished() {
            if (this.isFirstRound) {
                this.isFirstRound = false;
                this.visibleTicker = 1;
            } else {
                if (this.visibleTicker === 1) {
                    this.visibleTicker = 2;
                    this.activeTicker = 1;
                    this.tickerOneArrayIndex = 0;
                } else {
                    this.visibleTicker = 1;
                    this.activeTicker = 2;
                    this.tickerTwoArrayIndex = 0;
                }
            }
        },

        /* *
         * Add item to queue
         * Removing element before add if queue is already reached the max limit
         * @param itemObject
         */
        _addItemToQueue: function _addItemToQueue(itemObject) {
            var elementQueueLength = this.elementQueue.getLength();

            if (elementQueueLength >= this.settings.elementQueueMaxSize) {
                this.elementQueue.dequeue();
            }

            // adding element to queue
            this.elementQueue.enqueue(itemObject);
        },

        _addItemToQueueWhenMarketClosed: function _addItemToQueueWhenMarketClosed(itemObject) {
            this._moveTickerWhenMarketClosed(itemObject);
        },

        /* *
         * @returns size of queue
         */
        _getQueueSize: function _getQueueSize() {
            return this.elementQueue.getLength();
        },

        _getIconCssClass: function _getIconCssClass(value) {
            return value > 0 ? 'glyphicon-triangle-top glyphicon font-m up-fore-color' : 'glyphicon-triangle-bottom glyphicon font-m down-fore-color';
        },

        _getUpDwnCssClass: function _getUpDwnCssClass(value) {
            return value > 0 ? 'up-fore-color' : value < 0 ? 'down-fore-color' : 'highlight-fore-color';
        },

        /* *
         * This function is to update ticker div which is not visible by updating respective element in th array
         * @param itemObject item object
         */
        _addItemToTicker: function _addItemToTicker(itemObject) {
            if (this.isFirstRound || this.activeTicker !== this.visibleTicker) {
                if (this.activeTicker === 1) {
                    this._addItemToSingleTicker(itemObject, 1);
                } else {
                    this._addItemToSingleTicker(itemObject, 2);
                }
            } else {
                this.activeTicker = this.activeTicker === 1 ? 2 : 1;
            }
        },

        _addItemToSingleTicker: function _addItemToSingleTicker(itemObject, ticker) {
            var item;
            var tickerArrayIndex = ticker === 1 ? this.tickerOneArrayIndex : this.tickerTwoArrayIndex;
            var tickerItems = ticker === 1 ? 'tickerOneItems' : 'tickerTwoItems';

            item = this.get(tickerItems).objectAt(tickerArrayIndex);
            this._fillItem(item, itemObject);

            this.set('isAnimationStarted', true);
            this.set('isTickerRunning', true);

            tickerArrayIndex++;
            this.tickerOneArrayIndex = ticker === 1 ? tickerArrayIndex : this.tickerOneArrayIndex;
            this.tickerTwoArrayIndex = ticker === 2 ? tickerArrayIndex : this.tickerTwoArrayIndex;

            if (tickerArrayIndex === this.settings.singleTickerItemCount) {
                this.tickerOneArrayIndex = ticker === 1 ? 0 : this.tickerOneArrayIndex;
                this.tickerTwoArrayIndex = ticker === 2 ? 0 : this.tickerTwoArrayIndex;
                this.activeTicker = ticker === 1 ? 2 : 1;
            }

            this.addedElementCount++;
        },

        _fillItem: function _fillItem(item, itemObject) {
            var cssClass = this._getIconCssClass(itemObject.chg);
            var chgCssClass = this._getUpDwnCssClass(itemObject.chg);
            var pctChgCssClass = this._getUpDwnCssClass(itemObject.pctChg);

            var description = itemObject.get(this.tickerSymDisplayField);
            var chg = itemObject.get(this.tickerChangeDisplayField);

            var exchange = itemObject.exg;
            var symbol = itemObject.sym;
            var instrumentType = itemObject.inst;
            var ltp = itemObject.ltp;
            var pctChg = itemObject.pctChg;
            var change, decimalPlaces;

            if (this.tickerChangeDisplayField === 'pctChg' || !_utils.default.validators.isAvailable(itemObject.deci) || itemObject.deci < -1) {
                decimalPlaces = _sharedService.default.userSettings.displayFormat.decimalPlaces;
            } else {
                decimalPlaces = itemObject.deci;
            }

            change = _utils.default.formatters.formatNumber(chg, decimalPlaces);

            if (description && description.length > 6) {
                description = description.substr(0, 6) + '...';
            }

            _ember.default.set(item, 'des', description);
            _ember.default.set(item, 'iconClass', cssClass);
            _ember.default.set(item, 'chgCssClass', chgCssClass);
            _ember.default.set(item, 'pctChgCssClass', pctChgCssClass);
            _ember.default.set(item, 'chg', change);
            _ember.default.set(item, 'sym', symbol);
            _ember.default.set(item, 'exg', exchange);
            _ember.default.set(item, 'inst', instrumentType);
            _ember.default.set(item, 'ltp', ltp);
            _ember.default.set(item, 'pctChg', pctChg);
        },

        /* *
         *  This function to add items to ticker periodically
         */
        _moveTicker: function _moveTicker() {
            // get item object from elements queue
            var itemObject = this.elementQueue.dequeue();
            var that = this;

            // no need to take any action if object is null or empty
            if (itemObject) {
                this._addItemToTicker(itemObject);
            }

            setTimeout(function () {
                if (!that.get('isDestroyed') || !that.get('isDestroying')) {
                    that._moveTicker();
                }
            }, this.settings.millisecondsToWait);
        },

        _moveTickerWhenMarketClosed: function _moveTickerWhenMarketClosed(itemObject) {
            // No need to take any action if object is null or empty
            if (itemObject) {
                this._addItemToTicker(itemObject);
            }
        },

        // TODO: [Sahan] Merge this with _clearPriceTicker after implementing widget level subscription.
        _clearTicker: function _clearTicker() {
            this.set('tickerOneItems', _ember.default.A([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]));
            this.set('tickerTwoItems', _ember.default.A([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]));
        },

        _popUpWidget: function _popUpWidget(tickerItem) {
            var symbolPopupView = _controllerFactory.default.createController(this.container, 'view:symbol-popup-view');

            // 0 for detail quote
            symbolPopupView.show(0, tickerItem.sym, tickerItem.exg, tickerItem.inst);
        },

        _changeTickerLanguage: function _changeTickerLanguage() {
            var that = this;

            _ember.default.run.next(this, function () {
                that.set('isAnimationStarted', false);

                that._clearPriceTicker();
                that._clearTicker();

                that.isInitialTickerItemsAdded = false;
                that._preparePriceTicker();
            });
        },

        actions: {
            onPrepareData: function onPrepareData(exchange) {
                this.set('exchange', this.priceService.exchangeDS.getExchange(exchange));

                this._clearTicker();
                this._preparePriceTicker();
            },

            onAddSubscription: function onAddSubscription() {},

            onClearData: function onClearData() {
                this._clearPriceTicker();
            },

            onRemoveSubscription: function onRemoveSubscription() {},

            onLanguageChanged: function onLanguageChanged() {
                this._changeTickerLanguage();
            },

            openPopup: function openPopup(tickerItem) {
                if (!_appConfig.default.customisation.isTablet) {
                    this._popUpWidget(tickerItem);
                }
            }
        }
    });
});
define('universal-app/controllers/price/top-panel/top-panel-2', ['exports', 'ember', './top-panel', './../../../components/top-panel/main-index-chart-2', './../../../components/top-panel/exchange-status-2'], function (exports, _ember, _topPanel, _mainIndexChart, _exchangeStatus) {
    'use strict';

    exports.default = _topPanel.default.extend({
        exgStatusArea: 'top-panel/exchange-status-2',

        _callComponentsMethod: function _callComponentsMethod(method) {
            var mainIndexChartComponent = _ember.default.View.views['price-top-panel-main-index-chart-2'];
            var exchangeStatusCmponent = _ember.default.View.views['price-top-panel-exchange-status-2'];
            var priceTickerComponent = _ember.default.View.views['price-top-panel-price-ticker'];
            var cashMapsComponent = _ember.default.View.views['price-top-panel-cash-maps'];

            try {
                if (mainIndexChartComponent) {
                    mainIndexChartComponent.send(method, this.get('exg'));
                }
            } catch (e) {
                this.utils.logger.logError(e);
            }

            try {
                if (priceTickerComponent) {
                    priceTickerComponent.send(method, this.get('exg'));
                }
            } catch (e) {
                this.utils.logger.logError(e);
            }

            try {
                if (cashMapsComponent) {
                    cashMapsComponent.send(method);
                }
            } catch (e) {
                this.utils.logger.logError(e);
            }

            try {
                if (exchangeStatusCmponent) {
                    exchangeStatusCmponent.send(method, this.get('exg'));
                }
            } catch (e) {
                this.utils.logger.logError(e);
            }
        },

        netCashPerCss: function () {
            var netCashPer = this.get('exchange.netCashPer');

            return netCashPer >= 0 ? 'up-fore-color' : 'down-fore-color';
        }.property('exchange.netCashPer'),

        cashInPerCss: function () {
            var cashInPer = this.get('exchange.cashInPer');

            return cashInPer >= 50 ? 'up-fore-color' : 'down-fore-color';
        }.property('exchange.cashInPer')
    });


    _ember.default.Handlebars.helper('main-index-chart-2', _mainIndexChart.default);
    _ember.default.Handlebars.helper('exchange-status-2', _exchangeStatus.default);
});
define('universal-app/controllers/price/top-panel/top-panel', ['exports', 'ember', '../../../models/shared/shared-service', '../../base-controller', './../../../components/top-panel/main-index-chart', './../../../components/top-panel/main-index-chart-3', './../../../components/top-panel/exchange-status', './../../../components/top-panel/exchange-status-1', './price-ticker', './cash-maps', '../../../helpers/responsive-handler', '../../../app-events', '../../../config/app-config'], function (exports, _ember, _sharedService, _baseController, _mainIndexChart, _mainIndexChart2, _exchangeStatus, _exchangeStatus2, _priceTicker, _cashMaps, _responsiveHandler, _appEvents, _appConfig) {
    'use strict';

    exports.default = _baseController.default.extend({
        // Ember objects references
        exchange: undefined, // User Default exchange reference
        exgSymCollection: undefined, // Exchange Symbol Collection
        prevUpdatedBar: 0,
        exchanges: [],
        selectedExg: {},
        disableMoreMarkets: true,
        subscriptionKey: 'topPanel',
        priceService: _sharedService.default.getService('price'),

        // Updating below properties according to some values of 'exchange' or 'index'
        marketStatusCSS: '', // Market status colour. ex : Green Market Open , red Market close
        ytdCss: 'up-fore-color',
        isRender: false,
        isCashMapDisabled: _appConfig.default.customisation.isCashMapDisabled,
        exgStatusArea: 'top-panel/exchange-status',
        mainIndexArea: 'top-panel/main-index-chart',

        topPanelSettings: {
            intZero: 0,
            emptyString: '',

            styles: {
                upColor: 'up-fore-color',
                downColor: 'down-fore-color',
                foreColor: 'fore-color'
            },

            timeInterval: {
                OneSecondInMillis: 1000,
                OneMinuteInMillis: 60000
            }
        },

        /* *
         * Calculate up,down,unchanged progress bar percentage
         * Observes : exchange.ups,exchange.dwns,exchange.nChg
         */
        upsDownsNoChgValueArray: function () {
            var exg = this.get('exchange');

            if (exg) {
                var ups = exg.ups;
                var down = exg.dwns;
                var unchanged = exg.nChg;
                var maxValue = Math.max(ups, down, unchanged);

                var upsDownsNoChgValueArray = [{ value: ups, barClass: 'progress-bar up-back-color', barWidth: '' }, { value: down, barClass: 'progress-bar down-back-color', barWidth: '' }, { value: unchanged, barClass: 'progress-bar highlight-back-color-2', barWidth: '' }];

                _ember.default.$.each(upsDownsNoChgValueArray, function (index, item) {
                    var percentage;

                    if (isNaN(item.value) || item.value === 0 || maxValue === 0) {
                        percentage = 0;
                    } else {
                        percentage = Math.round(item.value / maxValue * 90) + 10;
                    }

                    item.barWidth = 'width:' + percentage + '%;';
                });

                return upsDownsNoChgValueArray;
            }
        }.property('exchange.ups', 'exchange.dwns', 'exchange.nChg'),

        isTablet: function () {
            return _appConfig.default.customisation.isTablet;
        }.property(),

        onLoadWidget: function onLoadWidget() {
            this.set('exg', this.get('exg') ? this.get('exg') : _sharedService.default.userSettings.price.currentExchange);
            this.set('idx', this.get('idx') ? this.get('idx') : _sharedService.default.userSettings.price.currentIndex);
        },

        initializeResponsive: function initializeResponsive() {
            this.set('responsive', _responsiveHandler.default.create({ controller: this, widgetId: 'topPanel-' + this.get('wkey'), callback: this.onResponsive }));

            this.responsive.addList('topPanel-left', [{ id: 'topPanel-cashmaps', width: 5, responsiveMarginRatio: 4 }, { id: 'topPanel-ytd', width: 20, responsiveMarginRatio: 4 }, { id: 'topPanel-chartIcon', width: 20, responsiveMarginRatio: 4 }, { id: 'topPanel-volume', width: 20, responsiveMarginRatio: 4 }, { id: 'topPanel-turnover', width: 20, responsiveMarginRatio: 4 }, { id: 'topPanel-symbol', width: 20, responsiveMarginRatio: 4 }]);

            this.responsive.initialize();
        },

        onResponsive: function onResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            if (responsiveArgs.responsiveLevel === 0) {
                _ember.default.run.later(function () {
                    _ember.default.set(controller, 'cashMapStyle', 'position: relative; top: 0; left: 0');
                }, 1);
            } else {
                _ember.default.set(controller, 'cashMapStyle', 'position: absolute; top: 25000px; left: 25000px');
            }
        },

        onPrepareData: function onPrepareData() {
            this.set('exchange', this.priceService.exchangeDS.getExchange(this.get('exg')));
            this.set('exgSymCollection', this.priceService.stockDS.getSymbolCollectionByExchange(this.get('exg')));
            this.set('idx', this.utils.validators.isAvailable(this.get('idx')) ? this.get('idx') : this.get('exchange.mainIdx'));
            this.set('index', this.priceService.stockDS.getStock(this.get('exg'), this.get('idx'), this.utils.AssetTypes.Indices));

            // Keyboard search
            Mousetrap.bind('ctrl+f', function () {
                _ember.default.$('#appGlobalSymbolSearch').focus();
                return false;
            }, 'global');

            this._callComponentsMethod('onPrepareData');
            this.priceService.subscribeAuthSuccess(this, this.get('subscriptionKey'));
        },

        onAddSubscription: function onAddSubscription() {
            this.priceService.addExchangeRequest(this.get('exg'));
            this.priceService.addIndexRequest(this.get('exg'), this.get('idx'));

            this._callComponentsMethod('onAddSubscription');
        },

        onAfterRender: function onAfterRender() {
            _ember.default.run.later(this, this.renderComponents, 1000);
        },

        renderComponents: function renderComponents() {
            this.set('isRender', true);
        },

        onClearData: function onClearData() {
            this.set('exchange', {});
            this.set('index', {});
            this.set('idx', '');

            this._callComponentsMethod('onClearData');
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this.priceService.removeExchangeRequest(this.get('exg'));
            this.priceService.removeIndexRequest(this.get('exg'), this.get('idx'));

            this._callComponentsMethod('onRemoveSubscription');
        },

        onLanguageChanged: function onLanguageChanged() {
            this._callComponentsMethod('onLanguageChanged');
            _ember.default.run.later(this, this._setExchangeDesc, 100);
        },

        onThemeChanged: function onThemeChanged() {
            this._callComponentsMethod('onThemeChanged');
        },

        onVisibilityChanged: function onVisibilityChanged() {
            this._callComponentsMethod('onVisibilityChanged');
        },

        onAuthSuccess: function onAuthSuccess() {
            var that = this;
            var exchangeCodes = this.priceService.userDS.get('userExchg');

            this.set('userExgArray', _ember.default.A());

            _ember.default.$.each(exchangeCodes, function (key, item) {
                var exgObj = that.priceService.exchangeDS.getExchange(item);
                that.get('userExgArray').pushObject(exgObj);
            });
        },

        _callComponentsMethod: function _callComponentsMethod(method) {
            var mainIndexChartComponent = _ember.default.View.views['price-top-panel-main-index-chart'];
            var exchangeStatusComponent = _ember.default.View.views['price-top-panel-exchange-status'];
            var priceTickerComponent = _ember.default.View.views['price-top-panel-price-ticker'];
            var cashMapsComponent = _ember.default.View.views['price-top-panel-cash-maps'];

            try {
                if (mainIndexChartComponent) {
                    mainIndexChartComponent.send(method, this.get('exg'));
                }
            } catch (e) {
                this.utils.logger.logError(e);
            }

            try {
                if (priceTickerComponent) {
                    priceTickerComponent.send(method, this.get('exg'));
                }
            } catch (e) {
                this.utils.logger.logError(e);
            }

            try {
                if (cashMapsComponent) {
                    cashMapsComponent.send(method);
                }
            } catch (e) {
                this.utils.logger.logError(e);
            }

            try {
                if (exchangeStatusComponent) {
                    exchangeStatusComponent.send(method);
                }
            } catch (e) {
                this.utils.logger.logError(e);
            }
        },

        /* *
         * Returns no of symbols of selected exchange
         */
        _exgSymbolCount: function () {
            return this.get('exgSymCollection').length;
        }.property('exgSymCollection.@each'),

        _symbolsTradedPer: function () {
            var symbolTraded = this.get('exchange.symt');
            var noOfSymbols = this.get('_exgSymbolCount');
            return noOfSymbols ? symbolTraded / noOfSymbols * 100 : 0;
        }.property('exchange.symt', '_exgSymbolCount'),

        /* *
         * Change YTD percentage change css according to ytd value
         * Observes : exchange.pctYtd
         */
        _updateYTDColor: function () {
            var ytdCss;
            var pctYtd = this.get('index.pctYtd');

            if (pctYtd >= this.topPanelSettings.intZero) {
                ytdCss = this.topPanelSettings.styles.upColor;
            } else if (pctYtd < this.topPanelSettings.intZero) {
                ytdCss = this.topPanelSettings.styles.downColor;
            } else {
                ytdCss = this.topPanelSettings.styles.foreColor;
            }

            this.set('ytdCss', ytdCss);
        }.observes('index.pctYtd'),

        _setExchangeDesc: function _setExchangeDesc() {
            var that = this;
            var exchangeArray = [];
            var userExgs = this.get('userExgArray');

            if (userExgs) {
                _ember.default.$.each(userExgs, function (index, item) {
                    exchangeArray[index] = { code: item.exg, desc: item.des, de: that.get('isTablet') ? item.des : item.de };

                    if (item.exg === _sharedService.default.userSettings.price.currentExchange) {
                        that.set('selectedExg', exchangeArray[index]);
                    }
                });
            }

            this.set('exchanges', exchangeArray);
            this.set('disableMoreMarkets', exchangeArray.length <= 1);
        },

        _observeUserExchanges: function () {
            _ember.default.run.once(this, this._setExchangeDesc);
        }.observes('userExgArray.@each', 'userExgArray.@each.de'),

        actions: {
            setExchange: function setExchange(exchg) {
                var that = this;
                this.priceService.exchangeDS.getExchangeMetadata(exchg.code);

                _ember.default.$.each(this.get('exchanges'), function (key, val) {
                    if (val.code === exchg.code) {
                        that.set('selectedExg', val);
                    }
                });

                this.refreshWidget({ exg: exchg.code });
                _appEvents.default.onExchangeChanged(-1, exchg.code);
            }
        }
    });


    _ember.default.Handlebars.helper('main-index-chart', _mainIndexChart.default);
    _ember.default.Handlebars.helper('main-index-chart-3', _mainIndexChart2.default);
    _ember.default.Handlebars.helper('exchange-status', _exchangeStatus.default);
    _ember.default.Handlebars.helper('exchange-status-1', _exchangeStatus2.default);
    _ember.default.Handlebars.helper('price-ticker', _priceTicker.default);
    _ember.default.Handlebars.helper('cash-maps', _cashMaps.default);
});
define('universal-app/controllers/price/widgets/alert-price', ['exports', 'ember', '../../shared/table-controller', '../../../models/shared/shared-service', '../../../config/price-widget-config', '../../../config/app-config', '../../../app-events', '../../../views/table/dual-cells/header-cell', '../../../views/table/dual-cells/expanded-header-cell', '../../../views/table/alert/alert-symbol-cell', '../../../views/table/alert/alert-criteria-cell', '../../../views/table/alert/alert-status-cell', '../../../views/table/alert/alert-menu-cell', '../../../views/table/table-row'], function (exports, _ember, _tableController, _sharedService, _priceWidgetConfig, _appConfig, _appEvents, _headerCell, _expandedHeaderCell, _alertSymbolCell, _alertCriteriaCell, _alertStatusCell, _alertMenuCell, _tableRow) {
    'use strict';

    exports.default = _tableController.default.extend({
        title: 'alerts',
        alertArray: _ember.default.A(),
        content: _ember.default.A(),
        alertInfo: {},

        // Alert Place Properties
        searchKey: '',
        parameters: null,
        selectedParameter: null,
        criteria: null,
        selectedCriteria: null,
        currentToken: '',
        value: null,
        stock: {},
        isEditAlert: false,
        valueDecimalPlaces: '',
        searchPopupTop: '',
        tableHeight: '',

        wkey: 'alert-price',

        priceService: _sharedService.default.getService('price'),
        defaultColumnIds: _priceWidgetConfig.default.alertHistory.defaultColumnIds,

        isTablet: _appConfig.default.customisation.isTablet,

        settings: {
            noOfDefaultDecimalsForValues: 2, // No of Decimals allowed from server for alert
            noOfDecimalsForIntValue: 0
        },

        searchPopupHeights: {
            childViewEnabledTop: '95px',
            childViewDisabledTop: '55px'
        },

        onLoadWidget: function onLoadWidget() {
            this.setCellViewsScopeToGlobal();
            this.set('defaultColumnMapping', _priceWidgetConfig.default.alertHistory.defaultColumnMapping);
            this.set('parameters', this.getDataForDropdown(_priceWidgetConfig.default.alert.parameters));
            this.set('criteria', this.getDataForDropdown(_priceWidgetConfig.default.alert.criteria));
            this.set('title', this.get('app').lang.labels.alerts);
            this.set('valueDecimalPlaces', this.get('settings').noOfDefaultDecimalsForValues);

            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();

            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onPrepareData: function onPrepareData() {
            this.setErrorMessage();
            this.priceService.sendAlertHistoryRequest();
            this.setRequestTimeout(4, 'content.length');

            this.set('stock', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym')));
            this.toggleAlertEditProperties();
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            return this.get('content').length !== 0;
        },

        onResizeWidget: function onResizeWidget() {
            this.toggleProperty('isRefreshed');
        },

        defaultCriteria: function () {
            var defCriteria = '';
            var defCriteriaIndex = 0;

            if (this.get('criteria')) {
                defCriteria = this.get('criteria')[defCriteriaIndex];
                this.set('selectedCriteria', defCriteria.value);
            }

            return defCriteria;
        }.property(),

        getDataForDropdown: function getDataForDropdown(data) {
            var lanStore = this.get('app').lang.labels;

            return _ember.default.$.map(data, function (val) {
                val.caption = lanStore[val.lanKey] || val.lanKey;

                return val;
            });
        },

        isAddAlertDisabled: function () {
            return !this.get('stock') || !_ember.default.$.isNumeric(this.get('value'));
        }.property('stock', 'value'),

        alertValuePlaceHolder: function () {
            return this.get('app').lang.labels.value + ' ';
        }.property('app.lang.labels.value'),

        defaultParameter: function () {
            var defParameter = '';
            var defParameterIdx = 0;

            if (this.get('parameters')) {
                defParameter = this.get('parameters')[defParameterIdx];

                this.set('currentParameter', defParameter);
                this.set('selectedParameter', defParameter.value);
            }

            return defParameter;
        }.property(),

        // Rearrange all alerts as selected symbol alerts on top and others sorted by symbol code
        refineAlertArray: function () {
            var stock = this.get('stock');
            var alertArray = this.priceService.alertDS.getAllAlerts();
            var sortedArray = alertArray.sortBy('sym');
            var selectedSymbolsArray = [];
            var otherSymbolsArray = [];

            _ember.default.$.each(sortedArray, function (id, alertItem) {
                if (stock.sym === alertItem.sym) {
                    selectedSymbolsArray[selectedSymbolsArray.length] = alertItem;
                } else {
                    otherSymbolsArray[otherSymbolsArray.length] = alertItem;
                }
            });

            var refinedArray = selectedSymbolsArray.concat(otherSymbolsArray);

            this.set('alertArray', _ember.default.A(refinedArray));
            this.loadContent();
        }.observes('stock', 'priceService.alertDS.alertToggle'),

        loadContent: function loadContent() {
            var alertList = this.get('alertArray');
            this.set('content', alertList);
        },

        onClearData: function onClearData() {
            this.set('content', _ember.default.A());
            this.set('alertArray', _ember.default.A());
        },

        onLanguageChanged: function onLanguageChanged() {
            this.set('columnDeclarations', []);
            this.onLoadWidget();
            this.refreshTableComponent();
            this.toggleAlertEditProperties();
        },

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            _ember.default.HeaderCell = _headerCell.default;
            _ember.default.ExpandedHeaderCell = _expandedHeaderCell.default;
            _ember.default.AlertSymbolCell = _alertSymbolCell.default;
            _ember.default.AlertCriteriaCell = _alertCriteriaCell.default;
            _ember.default.AlertStatusCell = _alertStatusCell.default;
            _ember.default.AlertMenuCell = _alertMenuCell.default;
            _ember.default.TableRow = _tableRow.default;
        },

        cellViewsForColumns: {
            alertSymbol: 'Ember.AlertSymbolCell',
            alertCriteria: 'Ember.AlertCriteriaCell',
            alertStatus: 'Ember.AlertStatusCell',
            alertContextMenu: 'Ember.AlertMenuCell'
        },

        _getAlertFilter: function _getAlertFilter() {
            var currentParameter = this.get('currentParameter');
            var selectedCriteria = this.get('selectedCriteria');
            var singleConditionValue = 0;

            var value = this.get('value');
            var valueSeparator = '#';
            var paramSeparator = '$';

            return singleConditionValue + paramSeparator + currentParameter.field + valueSeparator + selectedCriteria + valueSeparator + value;
        },

        setSymbolKey: function () {
            var stock = this.get('stock');
            this.set('searchKey', stock.get('dispProp1') ? stock.get('dispProp1') : stock.sym);

            if (this.get('alertSymbolSearch')) {
                this.get('alertSymbolSearch').send('closeModalPopup');
            }
        }.observes('stock'),

        setUpdateAlertParameters: function setUpdateAlertParameters(rowValueContent) {
            var paramIndex = 0;
            var parameterConfig = _priceWidgetConfig.default.alert.parameters;

            this.set('selectedCriteria', rowValueContent.crit);
            this.set('value', rowValueContent.val);
            this.set('currentToken', rowValueContent.token);

            _ember.default.$.each(parameterConfig, function (index, parameter) {
                if (parameter.lanKey === rowValueContent.param) {
                    paramIndex = index;

                    return false;
                }
            });

            this.set('selectedParameter', parameterConfig[paramIndex].value);
            this.set('currentParameter', parameterConfig[paramIndex]);
            this.set('stock', this.priceService.stockDS.getStock(rowValueContent.exg, rowValueContent.sym, rowValueContent.inst));
        },

        toggleAlertEditProperties: function () {
            var alertButtonText = this.get('app').lang.labels.addAlert;

            if (this.get('isEditAlert')) {
                alertButtonText = this.get('app').lang.labels.save;
            } else {
                this.set('currentToken', '');
            }

            this.set('alertButtonText', alertButtonText);
        }.observes('isEditAlert'),

        onSearchKeyChange: function () {
            if (!this.get('searchKey')) {
                this.set('isEditAlert', false);

                if (this.get('alertSymbolSearch')) {
                    this.get('alertSymbolSearch').send('closeModalPopup');
                }
            } else if (this.get('alertSymbolSearch')) {
                this.get('alertSymbolSearch').send('showModalPopup');
            }
        }.observes('searchKey'),

        actions: {
            setParameter: function setParameter(option) {
                this.set('selectedParameter', option.value);
                this.set('currentParameter', option);

                this.set('valueDecimalPlaces', option.isDecimalAllowed ? this.get('settings').noOfDefaultDecimalsForValues : this.get('settings').noOfDecimalsForIntValue);
                this.set('value', null);
            },

            setCriteria: function setCriteria(option) {
                this.set('selectedCriteria', option.value);
            },

            showSearchPopup: function showSearchPopup() {
                var modal = this.get('alertSymbolSearch');
                modal.send('showModalPopup');
            },

            closeSearchPopup: function closeSearchPopup() {
                var modal = this.get('alertSymbolSearch');
                modal.send('closeModalPopup');
            },

            onSymbolSelected: function onSymbolSelected(stock) {
                this.set('stock', stock);
                this.set('searchKey', stock.get('dispProp1') ? stock.get('dispProp1') : stock.sym);
                this.set('isEditAlert', false);
            },

            setLink: function setLink(option) {
                this.setWidgetLink(option);
            },

            addAlert: function addAlert() {
                var stock = this.get('stock');

                if (stock && stock.sym) {
                    this.priceService.sendAlertPlaceRequest(stock.exg, stock.sym, stock.inst, this._getAlertFilter(), this.get('currentToken'), this.get('isEditAlert'));
                }

                this.set('value', null);
                this.set('isEditAlert', false);
            },

            updateAlert: function updateAlert(isEdit, rowValues) {
                var rowValueContent = rowValues && rowValues.get('content') ? rowValues.get('content') : '';
                var isDelete = !isEdit;

                if (rowValueContent) {
                    if (isEdit && rowValueContent.get('isEditEnabled')) {
                        this.set('isEditAlert', true);
                        this.setUpdateAlertParameters(rowValueContent);
                    } else if (isDelete) {
                        this.priceService.sendAlertUnsubscribeRequest(rowValueContent.exg, rowValueContent.sym, rowValueContent.inst, rowValueContent.token);
                    }

                    if (this.get('previousRow') && (rowValueContent.get('isEditEnabled') || isDelete)) {
                        this.get('previousRow').style.removeProperty('width');
                        this.set('isContextPanel', false);
                    }
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/announcement/announcement-base', ['exports', 'ember', '../../../../models/shared/shared-service', '../../../../models/price/price-constants', '../../../base-array-controller', '../../../../config/app-config', '../../../../utils/utils'], function (exports, _ember, _sharedService, _priceConstants, _baseArrayController, _appConfig, _utils) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        content: null,
        sortProperties: ['dt'],
        sortAscending: false,
        showAnnTabs: false,
        theFilter: -1,
        annObj: null,
        annBodyMsg: '',
        title: '',
        exchange: '',
        provider: '',
        currSubAnnType: 1,
        isSubAnnTabsEnabled: _appConfig.default.customisation.isSubAnnTabsEnabled,
        isEnabledExgFilter: false,
        updateCssTimer: undefined, // Timer for updating css for news and announcements
        unReadBoldHours: 2.5, // If the difference between UTC and announcement or news' created time in hours is less than
        // 2 hours show the time as 1 hour ago, etc. The momentJS is rounding off the difference
        // to the nearest whole number. To avoid conflicts in displaying the 0.5 is added with 2.
        timeFormatLimit: 6.5,

        selectedTab: undefined,
        announcementTabs: [],
        isAnntabsChanged: false,
        selectedNewAnn: undefined,
        datePickerFormat: _sharedService.default.userSettings.displayFormat.dateFormat.toLowerCase(),

        priceService: _sharedService.default.getService('price'),

        isTablet: _appConfig.default.customisation.isTablet,

        Tabs: {
            All: 1,
            Announcement: 2,
            News: 3,
            Search: 4
        },

        timeIndex: {
            start: 0,
            endTime: 5,
            endDateTime: 16
        },

        onLoadWidget: function onLoadWidget() {
            this.set('isNewsEnabled', this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.News], 'SYS'));
            this.set('lan', _sharedService.default.userSettings.currentLanguage.toLowerCase());
            this._setTimeLocale();
            this.updateHoursTimer();
            this.setAnnTabs();
        },

        onAfterRender: function onAfterRender() {
            var that = this;

            _ember.default.run.later(function () {
                _ember.default.$('.nano').nanoScroller();
            }, 400);

            _ember.default.run.next(function () {
                that.bindAnnLinks();
            });
        },

        onLanguageChanged: function onLanguageChanged(lang) {
            this.set('lan', _sharedService.default.userSettings.currentLanguage.toLowerCase());

            // Local time update
            this._setTimeLocale();
            this.updateDateTimeCSS();

            this.setErrorMessage();
            this.setAnnTabs();

            this.toggleProperty('isAnntabsChanged');
            this.refreshWidget({ exg: this.get('exg'), lang: lang });
        },

        _setTimeLocale: function _setTimeLocale() {
            if (this.get('lan') === 'ar') {
                this.utils.moment.locale('ar-sa'); // set this instance to use Saudi Arabic
            } else {
                this.utils.moment.locale('en');
            }
        },

        onUnloadWidget: function onUnloadWidget() {
            this.priceService.announcementDS.cacheAnnouncementNews();
            _ember.default.run.cancel(this.get('updateCssTimer'));
        },

        onFilterChanged: function () {
            this.setTitle();
        }.observes('theFilter'),

        setTitle: function setTitle() {
            var title;
            var filterType = this.get('theFilter');
            var lanStore = this.get('app').lang.labels;

            if (filterType === _priceConstants.default.ResponseType.Data.ResponseAnnouncement) {
                title = lanStore.announcement;
            } else if (filterType === _priceConstants.default.ResponseType.Data.ResponseNews) {
                title = lanStore.newsTab;
            } else {
                title = lanStore.newsAnn;
            }

            this.set('title', title);
        },

        sortedContent: function () {
            return this.get('arrangedContent');
        }.property('arrangedContent'),

        checkFilterMatch: function checkFilterMatch(theObject, typeFilter) {
            var checkTypeFilter = typeFilter !== -1;
            var isMatchedTypeFilter = true;
            var isMatchedExgFilter = true;
            var isSubAnnFilter = true;

            if (checkTypeFilter && theObject.get('type')) {
                isMatchedTypeFilter = theObject.get('type') === typeFilter;
            }

            if (this.get('isEnabledExgFilter') && theObject.get('exg')) {
                isMatchedExgFilter = theObject.get('type') === _priceConstants.default.ResponseType.Data.ResponseAnnouncement ? theObject.get('exg') === this.get('exchange') : theObject.get('exg') === this.get('provider');
            }

            if (this.get('isSubAnnTabsEnabled') && this.get('showAnnTabs') && theObject.get('type') === _priceConstants.default.ResponseType.Data.ResponseAnnouncement) {
                isSubAnnFilter = this.filterSubAnnoucements(theObject);
            }

            return isMatchedTypeFilter && isMatchedExgFilter && isSubAnnFilter;
        },

        filterSubAnnoucements: function filterSubAnnoucements(item) {
            var subAnnFilter = true;
            var itemTag = -1;
            var itemTagArray = [];

            if (item.get('ref')) {
                itemTagArray = item.get('ref').split(_utils.default.Constants.StringConst.Pipe);
                itemTag = parseInt(itemTagArray[itemTagArray.length - 1], 10);
            }

            if (itemTag !== this.get('currSubAnnType')) {
                subAnnFilter = false;
            }

            return subAnnFilter;
        },

        filteredContent: function () {
            var recentAnnouncementLimit = _sharedService.default.getService('price').settings.configs.announcementNews.recentAnnouncementNewsLimit;
            var sortedContent = this.get('sortedContent');

            if (sortedContent) {
                var filteredContent = sortedContent.filter(function (that) {
                    //eslint-disable-line
                    return function (theObject) {
                        if (that.get('theFilter') || that.get('exchange') || that.get('provider')) {
                            return that.checkFilterMatch(theObject, that.get('theFilter'), that.get('exchange'), that.get('provider'));
                        } else {
                            return true;
                        }
                    };
                }(this));

                if (filteredContent && filteredContent.length > recentAnnouncementLimit) {
                    filteredContent = filteredContent.slice(0, recentAnnouncementLimit);
                }

                return filteredContent;
            } else {
                return _ember.default.A();
            }
        }.property('theFilter', 'sortedContent.@each', 'exchange', 'provider', 'currSubAnnType'),

        updateDateTimeCSS: function updateDateTimeCSS() {
            var that = this;

            _ember.default.run.once(function () {
                _ember.default.$.each(that.get('filteredContent'), function (key, value) {
                    that.updateReadHoursCSS(value);
                    _ember.default.set(value, 'css', '');
                });

                that.set('annObj', that.get('filteredContent').objectAt(0));
            });
        },

        updateReadHoursCSS: function updateReadHoursCSS(value) {
            var defaultDateTimeMinuteFormat = 'YYYY-MM-DD HH:mm';
            var currentDateTime = this.utils.moment.utc().format(defaultDateTimeMinuteFormat);
            var currentDate = currentDateTime.split(' ')[0];
            var dateTime = value.get('dt');
            var annNewsDateTime = this.utils.formatters.formatToDateTimeMinute(dateTime, undefined, defaultDateTimeMinuteFormat);
            var isAnnNewsRead = value.get('isRead');

            var annNewsCurDiffTime = this.utils.moment(annNewsDateTime).from(currentDateTime); // To show an hour ago, etc.
            var annNewsCurDiffTimeHours = this.utils.moment(currentDateTime).diff(annNewsDateTime, 'hours', true);
            var annNewsTime = annNewsDateTime.split(' ')[1];
            var annNewsDate = annNewsDateTime.split(' ')[0];

            var currentLanguage = _sharedService.default.userSettings.currentLanguage.toLowerCase();
            this.set('lan', currentLanguage);

            if (currentLanguage === 'ar') {
                annNewsDateTime = this.utils.moment(annNewsDateTime).format('DD-MM-YYYY h:mm A');
            } else {
                annNewsDateTime = this.utils.moment(annNewsDateTime).format('DD-MMM-YYYY h:mm A');
            }

            var timeIndex = this.get('timeIndex');
            var annNewsHeadCss = '';

            // If the announcement or news is created today and time is lesser than 2 hours
            // display time only with bold font for unread items and normal font for read items
            // If the announcement or news is created today and time is greater than 2 hours
            // display time only with normal font
            // Otherwise display date and time with normal font
            if (annNewsCurDiffTimeHours < this.unReadBoldHours && currentDate === annNewsDate) {
                _ember.default.set(value, 'annNewsTimeCss', 'highlight-fore-color');
                _ember.default.set(value, 'dDTt', annNewsCurDiffTime);
            } else if (currentDate === annNewsDate) {
                _ember.default.set(value, 'annNewsTimeCss', 'highlight-fore-color');

                if (annNewsCurDiffTimeHours < this.timeFormatLimit) {
                    _ember.default.set(value, 'dDTt', annNewsCurDiffTime);
                } else {
                    _ember.default.set(value, 'dDTt', annNewsTime.substring(timeIndex.start, timeIndex.endTime));
                }
            } else {
                _ember.default.set(value, 'annNewsTimeCss', '');
                _ember.default.set(value, 'dDTt', annNewsDateTime);
            }

            if (!isAnnNewsRead && currentDate === annNewsDate) {
                annNewsHeadCss = 'bold';
            }

            _ember.default.set(value, 'annNewsHeadCss', annNewsHeadCss);
        },

        updateHoursTimer: function updateHoursTimer() {
            var that = this;
            this.updateDateTimeCSS();

            this.set('updateCssTimer', _ember.default.run.later(function () {
                that.updateHoursTimer();
            }, 300000));
        },

        updateContentCSS: function () {
            this.updateDateTimeCSS();
        }.observes('filteredContent.@each.dDt'),

        getContentBody: function getContentBody(annObj) {
            var that = this;

            if (!annObj.get('isBodyUpdated')) {
                that.annObj.set('bod', that.get('app').lang.messages.loading);

                this.priceService.sendNewsAnnBodyRequest({
                    id: annObj.get('id'),
                    type: annObj.get('type'),
                    undefined: undefined,

                    reqFailureFn: function reqFailureFn() {
                        that.annObj.set('bod', that.get('app').lang.labels.dataNotAvailable);
                        that.annObj.set('isBodyUpdated', false);
                    },

                    lan: annObj.get('ln')
                });
            }
        },

        getAnnouncementNews: function getAnnouncementNews(annId, type) {
            var annObj = this.priceService.announcementDS.getAnnouncement(annId, type);

            if (!annObj.get('isRead')) {
                annObj.set('isRead', true);
                this.priceService.announcementDS.set('isNewItemsAvailable', true);
            }

            _ember.default.set(this.get('annObj'), 'css', '');
            this.set('annObj', annObj);
            _ember.default.set(this.get('annObj'), 'css', 'watchlist-cell-back-green');
            this.updateReadHoursCSS(annObj);
        },

        _getNextPreviousItem: function _getNextPreviousItem(index) {
            var annNewsItem = this.get('filteredContent').objectAt(index);
            this.getAnnouncementNews(annNewsItem.id, annNewsItem.type);
            this.getContentBody(annNewsItem);
        },

        _showHideNextPrevious: function _showHideNextPrevious(nextPreIndex) {
            if (nextPreIndex === 0) {
                _ember.default.$('#annPrevious').addClass('visibility-hidden');
            } else if (nextPreIndex === this.get('filteredContent').length - 1) {
                _ember.default.$('#annNext').addClass('visibility-hidden');
            } else {
                _ember.default.$('#annPrevious').removeClass('visibility-hidden');
                _ember.default.$('#annNext').removeClass('visibility-hidden');
            }
        },

        _dragAnnNews: function _dragAnnNews() {
            _ember.default.run.schedule('afterRender', this, function () {
                // To hide Next or Previous button
                this._showHideNextPrevious(this.get('filteredContent').indexOf(this.get('annObj')));

                var elem = document.querySelector('.news-popup');

                new Draggabilly(elem, { // eslint-disable-line
                    handle: '#annNewsDrag',
                    x: 100,
                    y: 200
                });
                _ember.default.$('.an-resizable').resizable();
            });
        },

        setAnnTabs: function setAnnTabs() {
            this.prepareTabs();
            var newActive = this.get('announcementTabs').findProperty('id', this.get('selectedTab'));

            if (newActive) {
                this.set('announcementTabsActive', newActive);
            } else {
                this.set('announcementTabsActive', { id: 1, displayDesc: this.get('app').lang.labels.all });
            }
        },

        prepareTabs: function prepareTabs() {
            var tabs = [{ id: 1, displayDesc: this.get('app').lang.labels.all }, { id: 2, displayDesc: this.get('app').lang.labels.announcement }];

            if (this.get('isNewsEnabled') || this.get('showAnnTabs')) {
                tabs[tabs.length] = { id: 3, displayDesc: this.get('app').lang.labels.newsTab };
            }

            this.set('announcementTabs', tabs);
        },

        bindAnnLinks: function bindAnnLinks() {
            var childViewLoadDelay = 800;

            _ember.default.run.later(function () {
                var bodyContainer = _ember.default.$('.news-link');

                if (bodyContainer) {
                    bodyContainer.on('click', 'a', function (event) {
                        var linkTarget = this.href;
                        var urlArray = linkTarget ? linkTarget.split(this.baseURI) : [];

                        if (urlArray.length > 1 && urlArray[1].indexOf('http') > -1) {
                            linkTarget = decodeURIComponent(urlArray[1]);
                        }

                        event.preventDefault();

                        if (_appConfig.default.customisation.isMobile && _ember.default.isIos) {
                            window.open(linkTarget, '_blank', 'location=yes,enableViewPortScale=yes');
                        } else {
                            window.open(linkTarget, '_system');
                        }
                    });
                }
            }, childViewLoadDelay);
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var dataStock = this.get('filteredContent');

            return dataStock.length !== 0;
        },

        actions: {
            onTabSelected: function onTabSelected(tab) {
                // this is used in announcement Right-Panel actions when ann-tab is selected
                this.set('selectedTab', tab.id);

                var theFilter;
                var content;
                var tabName;

                if (tab.id === this.Tabs.All) {
                    theFilter = -1;
                    content = this.priceService.announcementDS.annNewsStoreArray;
                    tabName = 'all';
                } else if (tab.id === this.Tabs.Announcement) {
                    theFilter = _priceConstants.default.ResponseType.Data.ResponseAnnouncement;
                    content = this.priceService.announcementDS.annStoreArray;
                    tabName = 'announcements';
                } else if (tab.id === this.Tabs.News) {
                    theFilter = _priceConstants.default.ResponseType.Data.ResponseNews;
                    content = this.priceService.announcementDS.newsStoreArray;
                    tabName = 'news';
                }

                this.set('theFilter', theFilter);
                this.set('content', content);
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['tab:', tabName].join(''));

                if (this.get('isSubAnnTabsEnabled') && this.get('filteredContent').length === 0) {
                    this.cancelRequestTimeout(this.get('loadingTimeoutTimer'));
                    this.setRequestTimeout(1, 'filteredContent.length');
                }
            },

            itemClicked: function itemClicked(annId, type) {
                var that = this;
                var viewName = 'price/widgets/announcement/components/announcement-news-popup';

                if (_appConfig.default.customisation.isMobile) {
                    this.set('selectedNewAnn', annId);
                    this.set('isMobile', true);

                    _sharedService.default.getService('priceUI').showChildView(viewName, this, this.get('app.lang.labels.newsAnn'), 'newsPopup-' + this.get('wkey'));
                    that._showHideNextPrevious(this.get('filteredContent').indexOf(this.get('annObj')));
                } else {
                    var event = _ember.default.appGlobal.events.mousedown ? _ember.default.appGlobal.events.mousedown : window.event;

                    // Render announcement-news-popup.hbs component to application.hbs
                    var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');
                    var announcementNewsPopup = that.container.lookupFactory('controller:price/widgets/announcement/components/announcement-news-popup').create();
                    var elementDiv = event.target.parentElement;
                    var isParentDiv = true;

                    this.set('selectedNewAnn', annId);

                    while (isParentDiv) {
                        if (elementDiv.id === this.get('wkey')) {
                            // Get widget
                            elementDiv = elementDiv.id;
                            break;
                        } else {
                            elementDiv = elementDiv.parentElement;
                        }
                    }

                    var container = _ember.default.$('div#' + elementDiv);
                    announcementNewsPopup.showPopup(that, viewName, modal, container);
                    that._dragAnnNews();
                }

                that.bindAnnLinks();
                that.getAnnouncementNews(annId, type);
                that.getContentBody(this.get('annObj'));
                that.utils.analyticsService.trackEvent(this.get('gaKey'), that.utils.Constants.GAActions.rowClick, ['id:', annId, ',type:', that.get('annObj').type === _priceConstants.default.ResponseType.Data.ResponseNews ? 'News' : 'Announcement'].join(''));
            },

            closePopup: function closePopup() {
                var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');
                modal.send('closeModalPopup');
            },

            loadNextPreItem: function loadNextPreItem(annObj, isPrevious) {
                var currentItemIndex = this.get('filteredContent').indexOf(annObj);
                var nextPreIndex = currentItemIndex + 1;

                if (isPrevious) {
                    nextPreIndex = currentItemIndex - 1;
                }

                this._getNextPreviousItem(nextPreIndex);
                this._showHideNextPrevious(nextPreIndex);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/announcement/announcement-list', ['exports', 'ember', '../../../../models/shared/shared-service', './announcement-base', '../../../../models/price/price-constants', '../../../../config/app-config', '../../../../utils/utils', '../../../../helpers/responsive-handler'], function (exports, _ember, _sharedService, _announcementBase, _priceConstants, _appConfig, _utils, _responsiveHandler) {
    'use strict';

    exports.default = _announcementBase.default.extend({
        content: null,
        sortProperties: ['dt'],
        sortAscending: false,
        annObj: null,
        annBodyMsg: '',
        searchTitle: '',
        searchSymbol: '',
        startDate: '',
        endDate: '',
        toEndDate: '',

        isAdvancedSearch: false,
        disableSeparater: false,
        isEnabledAnnSearch: true,
        isEnabledNewsSearch: true,
        showExgFilter: true,
        showProviderFilter: false,
        lan: '',

        exchangeOption: _ember.default.A(),
        exchangeOptionForSearch: _ember.default.A(),
        selectedExgForAnnouncement: _ember.default.A(), // Selected exchanges for announcements

        providerSelection: undefined,
        providerOption: _ember.default.A(),
        providerOptionForSearch: _ember.default.A(),
        selectedExgForNews: _ember.default.A(), // Selected exchanges for news
        exgSelectionForNews: _ember.default.A(),
        exgSelectionForAnnouncement: {},

        // Filters
        symbolFilter: '',
        titleFilter: '',
        typeFilter: -1,

        // Tab settings
        tabAll: undefined,
        tabAnnouncement: undefined,
        tabNews: undefined,
        tabSearch: undefined,

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            this._super();
            this.setErrorMessage();

            this.set('symbolSearchId', ['symbolSearch', this.get('wkey')].join('-'));

            var today = new Date();
            this.set('toEndDate', today);
        },

        onPrepareData: function onPrepareData() {
            this._loadSavedLayout();
            this._setExchangeArrays();

            if (this.get('isAdvancedSearch')) {
                this._bindSearchContent();
            } else {
                this._bindRealtimeContent();
                this._setFilterType();
            }
        },

        onAddSubscription: function onAddSubscription() {
            this._sendSubscription();

            if (this.get('isAdvancedSearch')) {
                this._loadSearchContent();
            }
        },

        onClearData: function onClearData() {
            this.set('annObj', null);
            this.priceService.announcementDS.removeAnnouncementSearchCollection(this.get('wkey'));

            if (this.get('responsive')) {
                this.get('responsive').onClear();
            }
        },

        initializeResponsive: function initializeResponsive() {
            if (this.get('isAdvancedSearch')) {
                this.set('responsive', _responsiveHandler.default.create({
                    controller: this,
                    widgetId: 'newsAnnouncement-' + this.get('wkey'),
                    callback: this.onResponsive
                }));

                this.responsive.addList('newsAnnouncement-free', [{ id: 'newsCheckBox', width: 5 }, { id: 'announcementCheckBox', width: 5 }]);

                this.responsive.initialize();
            }
        },

        onResponsive: function onResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;
            var container = _ember.default.$('#newsAnnouncement-' + controller.get('wkey'));

            // News Check
            var newsCheck = container.find('#newsCheck-' + controller.get('wkey'));
            var newsCheckRes = container.find('#newsCheckRes-' + controller.get('wkey'));
            var newsCheckContainer = container.find('#newsCheckContainer-' + controller.get('wkey'));

            // Announcement Check
            var announcementCheck = container.find('#announcementCheck-' + controller.get('wkey'));
            var announcementCheckRes = container.find('#announcementCheckRes-' + controller.get('wkey'));
            var announcementCheckContainer = container.find('#announcementCheckContainer-' + controller.get('wkey'));

            // Date Selection
            var dateSection = container.find('#dateSection-' + controller.get('wkey'));
            var dateSectionRes = container.find('#dateSectionRes-' + controller.get('wkey'));
            var dateSectionContainer = container.find('#dateSectionContainer-' + controller.get('wkey'));

            if (responsiveArgs.responsiveLevel >= 1) {
                controller.set('isNewsResponsive', true);
                newsCheck.appendTo(newsCheckRes);
            } else {
                controller.set('isNewsResponsive', false);
                newsCheck.appendTo(newsCheckContainer);
            }

            if (responsiveArgs.responsiveLevel >= 2) {
                announcementCheck.appendTo(announcementCheckRes);
                this.set('disableSeparater', true);
            } else {
                announcementCheck.appendTo(announcementCheckContainer);
                this.set('disableSeparater', false);
            }

            if (responsiveArgs.responsiveLevel >= 3) {
                dateSection.appendTo(dateSectionRes);
            } else {
                dateSection.appendTo(dateSectionContainer);
            }
        },

        onFilterChange: function () {
            this.set('annObj', this.get('filteredContent').objectAt(0));
        }.observes('typeFilter'),

        setContentBody: function () {
            if (this.get('annObj')) {
                this.getContentBody(this.get('annObj'));
            }
        }.observes('annObj.id'),

        filteredContent: function () {
            if (this.get('sortedContent')) {
                return this.get('sortedContent').filter(function (that) {
                    //eslint-disable-line
                    return function (theObject) {
                        return that.checkFilterMatch(theObject, that.get('typeFilter'), that.get('symbolFilter'), that.get('titleFilter'));
                    };
                }(this));
            } else {
                return _ember.default.A();
            }
        }.property('typeFilter', 'sortedContent.@each', 'symbolFilter', 'titleFilter', 'selectedExgForAnnouncement.@each', 'selectedExgForNews.@each'),

        isProviderSelectionDisabled: function () {
            return !this.get('isEnabledNewsSearch');
        }.property('isEnabledNewsSearch'),

        isExchangeSelectionDisabled: function () {
            return !this.get('isEnabledAnnSearch');
        }.property('isEnabledAnnSearch'),

        checkFilterMatch: function checkFilterMatch(theObject, typeFilter, symbolFilter, textFilter) {
            var checkSymbolFilter = this.utils.validators.isAvailable(symbolFilter) && !this.get('isAdvancedSearch') ? true : false;
            var checkTextFilter = this.utils.validators.isAvailable(textFilter) ? true : false;
            var checkTypeFilter = typeFilter !== -1;
            var isMatchedSymbolFilter = true;
            var isMatchedTextFilter = true;
            var isMatchedTypeFilter = true;
            var isMatchedExgFilter = true;

            if (checkSymbolFilter) {
                isMatchedSymbolFilter = this.utils.validators.isAvailable(theObject.get('sym')) && theObject.get('sym').isExist(symbolFilter);
            }

            if (checkTextFilter) {
                isMatchedTextFilter = this.utils.validators.isAvailable(theObject.get('dHed')) && theObject.get('dHed').isExist(textFilter);
            }

            if (checkTypeFilter) {
                isMatchedTypeFilter = theObject.get('type') === typeFilter;
            }

            if (!this.get('isAdvancedSearch')) {
                isMatchedExgFilter = theObject.get('type') === _priceConstants.default.ResponseType.Data.ResponseAnnouncement ? this.selectedExgForAnnouncement.indexOf(theObject.get('exg')) >= 0 : this.selectedExgForNews.indexOf(theObject.get('exg')) >= 0;
            }

            return isMatchedSymbolFilter && isMatchedTextFilter && isMatchedTypeFilter && isMatchedExgFilter;
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var announcementArray = this.priceService.announcementDS.getAnnouncementSearchCollection(this.get('wkey'));

            return announcementArray.length !== 0;
        },

        _saveLayout: function _saveLayout() {
            var layout = {
                searchTitle: this.get('searchTitle'),
                searchSymbol: this.get('searchSymbol'),
                startDate: this.get('startDate'),
                endDate: this.get('endDate'),
                isEnabledAnnSearch: this.get('isEnabledAnnSearch'),
                isEnabledNewsSearch: this.get('isEnabledNewsSearch'),
                isAdvancedSearch: this.get('isAdvancedSearch'),
                exgSelectionForAnnouncement: this.get('exgSelectionForAnnouncement'),
                exgSelectionForNews: this.get('exgSelectionForNews'),
                selectedTab: this.get('selectedTab'),
                symbolFilter: this.get('symbolFilter'),
                titleFilter: this.get('titleFilter')
            };

            this.saveWidget({ announcementLayout: layout });
        },

        _loadSavedLayout: function _loadSavedLayout() {
            var layout = this.get('announcementLayout');

            if (layout) {
                this.set('searchTitle', layout.searchTitle);
                this.set('searchSymbol', layout.searchSymbol);
                this.set('startDate', this.utils.validators.isAvailable(layout.startDate) ? new Date(layout.startDate) : '');
                this.set('endDate', this.utils.validators.isAvailable(layout.endDate) ? new Date(layout.endDate) : '');
                this.set('isAdvancedSearch', layout.isAdvancedSearch || false);
                this.set('isEnabledAnnSearch', layout.isEnabledAnnSearch || true);
                this.set('isEnabledNewsSearch', layout.isEnabledNewsSearch || true);
                this.set('exgSelectionForAnnouncement', layout.exgSelectionForAnnouncement || {});
                this.set('exgSelectionForNews', layout.exgSelectionForNews || {});
                this.set('selectedTab', layout.selectedTab || this.Tabs.All);
                this.set('symbolFilter', layout.symbolFilter);
                this.set('titleFilter', layout.titleFilter);
            }
        },

        _setExchangeArrays: function _setExchangeArrays() {
            var userExgList = this.priceService.userDS.get('userExchg');
            var delayedExg = this.priceService.userDS.get('delayedExchg');

            var that = this;
            var exchange, exgItem, isSelected;
            var exgArrNews = _ember.default.A();
            var exgArrOfNewsForSearch = _ember.default.A();
            var exgArrAnnouncement = _ember.default.A();
            var exgArrOfAnnForSearch = _ember.default.A();

            _ember.default.$.each(userExgList, function (key, value) {
                var isNewsProvAdded = false;
                var exgDisplayName = value;

                exchange = that.priceService.exchangeDS.getExchange(value);

                // Set announcement array
                exgItem = that.get('exgSelectionForAnnouncement')[exchange.exg];
                isSelected = that.utils.validators.isAvailable(exgItem) ? exgItem.isSelected : true; // TODO:[Eranga G] If exchange is default exchange set this as true or else false

                if (delayedExg.length > 0) {
                    if (delayedExg.indexOf(value) > -1) {
                        exgDisplayName = [value, _utils.default.Constants.Delayed].join(' ');
                    }
                }

                exgArrAnnouncement.push({
                    'displayName': exgDisplayName, 'val': exchange.exg, 'isSelected': isSelected, exg: value
                });

                exgArrOfAnnForSearch.push({
                    'displayName': exgDisplayName, 'val': exchange.exg, 'isSelected': isSelected, exg: value
                });

                // Set news array
                exgItem = that.get('exgSelectionForNews')[exchange.exg];
                isSelected = that.utils.validators.isAvailable(exgItem) ? exgItem.isSelected : true; // TODO:[Eranga G] If exchange is default exchange set this as true or else false

                exgArrNews.forEach(function (item) {
                    if (item.val === exchange.newsProv) {
                        isNewsProvAdded = true;
                    }
                });

                if (exchange.newsProv && !isNewsProvAdded) {
                    exgArrNews.push({
                        'displayName': exchange.newsProv, 'val': exchange.newsProv, 'isSelected': true, exg: value
                    });

                    exgArrOfNewsForSearch.push({
                        'displayName': exchange.newsProv, 'val': exchange.newsProv, 'isSelected': true, exg: value
                    });
                }
            });

            this.set('exchangeOption', exgArrAnnouncement);
            this.set('exchangeOptionForSearch', exgArrOfAnnForSearch);
            this.set('providerOption', exgArrNews);
            this.set('providerOptionForSearch', exgArrOfNewsForSearch);
            this._setSelectedExchanges();
            this._setSelectedProviders();
        },

        _setSelectedExchanges: function _setSelectedExchanges() {
            var exgArrAnnouncement = this.get('exchangeOption');
            var selectedExchanges = _ember.default.A();
            var exgSelectionForAnnouncement = {};

            if (exgArrAnnouncement) {
                _ember.default.$.each(exgArrAnnouncement, function (key, obj) {
                    if (obj.isSelected) {
                        selectedExchanges.pushObject(obj.exg);
                    }

                    exgSelectionForAnnouncement[obj.exg] = { exg: obj.exg, isSelected: obj.isSelected };
                });
            }

            this.set('exgSelectionForAnnouncement', exgSelectionForAnnouncement);
            this.set('selectedExgForAnnouncement', selectedExchanges);
        },

        _setSelectedProviders: function _setSelectedProviders() {
            var exgArrNews = this.get('providerOption');
            var selectedExgForNews = _ember.default.A();
            var exgSelectionForNews = {};

            if (exgArrNews) {
                _ember.default.$.each(exgArrNews, function (key, obj) {
                    if (obj.isSelected) {
                        selectedExgForNews.pushObject(obj.val);
                    }

                    exgSelectionForNews[obj.exg] = { exg: obj.val, isSelected: obj.isSelected };
                });
            }

            this.set('exgSelectionForNews', exgSelectionForNews);
            this.set('selectedExgForNews', selectedExgForNews);
        },

        _sendSubscription: function _sendSubscription() {
            var exgArrAnnouncement = this.get('exchangeOption');
            var exchange;
            var that = this;

            if (exgArrAnnouncement) {
                _ember.default.$.each(exgArrAnnouncement, function (key, obj) {
                    exchange = that.priceService.exchangeDS.getExchange(obj.exg);

                    if (obj.isSelected) {
                        that.priceService.addFullMarketAnnouncementRequest(exchange.exg, _sharedService.default.userSettings.currentLanguage);
                    } else {
                        that.priceService.removeFullMarketAnnouncementRequest(exchange.exg, _sharedService.default.userSettings.currentLanguage);
                    }
                });
            }

            var exgArrNews = this.get('providerOption');

            if (exgArrNews) {
                _ember.default.$.each(exgArrNews, function (key, obj) {
                    exchange = that.priceService.exchangeDS.getExchange(obj.exg);

                    if (obj.isSelected) {
                        that.priceService.addFullMarketNewsRequest(exchange.newsProv, _sharedService.default.userSettings.currentLanguage);
                    } else {
                        that.priceService.removeFullMarketNewsRequest(exchange.exg, _sharedService.default.userSettings.currentLanguage);
                    }
                });
            }
        },

        _onChangeSearchContentType: function () {
            var isEnabledAnnSearch = this.get('isEnabledAnnSearch');
            var isEnabledNewsSearch = this.get('isEnabledNewsSearch');

            if (isEnabledAnnSearch && isEnabledNewsSearch) {
                this.set('typeFilter', -1);
            } else if (isEnabledAnnSearch) {
                this.set('typeFilter', _priceConstants.default.ResponseType.Data.ResponseAnnouncement);
            } else if (isEnabledNewsSearch) {
                this.set('typeFilter', _priceConstants.default.ResponseType.Data.ResponseNews);
            } else {
                this.set('typeFilter', -100);
            }
        }.observes('isEnabledAnnSearch', 'isEnabledNewsSearch'),

        _bindRealtimeContent: function _bindRealtimeContent() {
            if (this.get('selectedTab') === this.Tabs.News) {
                this.set('content', this.priceService.announcementDS.newsStoreArray);
            } else if (this.get('selectedTab') === this.Tabs.Announcement) {
                this.set('content', this.priceService.announcementDS.annStoreArray);
            } else {
                this.set('content', this.priceService.announcementDS.annNewsStoreArray);
            }
        },

        _bindSearchContent: function _bindSearchContent() {
            this.set('content', this.priceService.announcementDS.getAnnouncementSearchCollection(this.get('wkey')));
        },

        _getSelectedExchangeList: function _getSelectedExchangeList(exgArr) {
            var selectedExgArr = [];

            if (exgArr) {
                _ember.default.$.each(exgArr, function (key, obj) {
                    if (obj.isSelected) {
                        selectedExgArr.push(obj.exg);
                    }
                });
            }

            return selectedExgArr.join(',');
        },

        _loadSearchContent: function _loadSearchContent() {
            var announcementArray = this.priceService.announcementDS.getAnnouncementSearchCollection(this.get('wkey'));
            var isNewsDataReceived = false;
            var isAnnouncementDataReceived = false;
            var that = this;

            announcementArray.clear();
            this._bindSearchContent();
            this.setRequestTimeout(4, 'content.length');

            var startDate = this.utils.validators.isAvailable(this.get('startDate')) ? this.utils.formatters.convertToDisplayTimeFormat(this.get('startDate'), _priceConstants.default.DateTimeFormat.ShortDate) : '';
            var endDate = this.utils.validators.isAvailable(this.get('endDate')) ? this.utils.formatters.convertToDisplayTimeFormat(this.get('endDate'), _priceConstants.default.DateTimeFormat.ShortDate) : '';

            this.priceService.sendAnnouncementSearchRequest({
                AllExchange: 1,
                symbol: this.get('searchSymbol'),
                searchKey: this.get('searchTitle'),
                pageSize: _priceConstants.default.AnnouncementSearchPageSize,
                exgList: this._getSelectedExchangeList(this.get('exchangeOptionForSearch')),
                startDate: startDate,
                endDate: endDate,

                reqSuccessFn: function reqSuccessFn() {
                    isAnnouncementDataReceived = true;
                    _setContentBody();
                }
            }, announcementArray);

            this.priceService.sendNewsSearchRequest({
                AllExchange: 1,
                symbol: this.get('searchSymbol'),
                searchKey: this.get('searchTitle'),
                pageSize: _priceConstants.default.NewsSearchPageSize,
                exgList: this._getSelectedExchangeList(this.get('providerOptionForSearch')),
                startDate: startDate,
                endDate: endDate,

                reqSuccessFn: function reqSuccessFn() {
                    isNewsDataReceived = true;
                    _setContentBody();
                }
            }, announcementArray);

            var _setContentBody = function _setContentBody() {
                if (isNewsDataReceived && isAnnouncementDataReceived) {
                    that.set('annObj', that.get('filteredContent').objectAt(0));
                }
            };
        },

        _onTabChange: function _onTabChange(tabId) {
            var that = this;
            var annObj = this.get('annObj');

            this.set('selectedTab', tabId);

            if (annObj) {
                _ember.default.set(annObj, 'css', '');
            }

            if (tabId === this.Tabs.Search) {
                this.set('isAdvancedSearch', true);
                this._bindSearchContent();
                this._loadSearchContent();

                _ember.default.run.next(function () {
                    that.initializeResponsive();
                });
            } else {
                this.set('isAdvancedSearch', false);
                this._bindRealtimeContent();
                this.hideDataErrorMessage();
                this.stopLoadingProgress();

                if (this.get('responsive')) {
                    this.get('responsive').onClear();
                }
            }

            this._setFilterType();
            this._saveLayout();
        },

        _setFilterType: function _setFilterType() {
            var tabId = this.get('selectedTab');
            var filterType = -1;

            this.set('showExgFilter', true);

            if (this.get('isNewsEnabled')) {
                this.set('showProviderFilter', true);
            }

            if (tabId === this.Tabs.Announcement) {
                filterType = _priceConstants.default.ResponseType.Data.ResponseAnnouncement;
                this.set('showProviderFilter', false);
            } else if (tabId === this.Tabs.News) {
                filterType = _priceConstants.default.ResponseType.Data.ResponseNews;
                this.set('showExgFilter', false);
            }

            this.set('typeFilter', filterType);
        },

        _getAnnNews: function _getAnnNews(annId, type) {
            this.getAnnouncementNews(annId, type);
        },

        prepareTabs: function prepareTabs() {
            var tabs = [{ id: 1, displayDesc: this.get('app').lang.labels.all }, { id: 2, displayDesc: this.get('app').lang.labels.announcement }, { id: 4, displayDesc: this.get('app').lang.labels.search }];

            if (this.get('isNewsEnabled')) {
                tabs.splice(2, 0, { id: 3, displayDesc: this.get('app').lang.labels.newsTab });
            }

            this.set('announcementTabs', tabs);
        },

        searchKeyDidChange: function () {
            if (_appConfig.default.customisation.isTablet) {
                var searchFieldId = this.get('searchFieldId');
                var searchField = _ember.default.$('#' + searchFieldId);

                if (searchField && searchField.is(':focus')) {
                    var searchKey = this.get('searchSymbol');

                    if (searchKey && searchKey.length >= _appConfig.default.searchConfig.minCharLenForSymbol) {
                        _ember.default.run.debounce(this, this.showSearchPopup, 300);
                    }
                }
            }
        }.observes('searchSymbol'),

        showSearchPopup: function showSearchPopup() {
            var modal = this.get('annSymbolSearch');
            modal.send('showModalPopup');
        },

        actions: {
            onTabSelected: function onTabSelected(tab) {
                this._onTabChange(tab.id);
            },

            itemClicked: function itemClicked(annId, type) {
                this._getAnnNews(annId, type);
                this.set('selectedNewAnn', annId);

                var element = _ember.default.$('#announcementListUpdateContainer');
                element.addClass('announcement-menu-update-animation');

                setTimeout(function () {
                    element.removeClass('announcement-menu-update-animation');
                }, 300);

                this.generateScrollBar('announcementListUpdateContainer', 3000);
            },

            showSearchPopup: function showSearchPopup() {
                this.showSearchPopup();
            },

            closeSearchPopup: function closeSearchPopup() {
                var modal = this.get('annSymbolSearch');
                modal.send('closeModalPopup');
            },

            onClickAdvancedSearch: function onClickAdvancedSearch() {
                this._loadSearchContent();
                this._saveLayout();
            },

            onSymbolSelected: function onSymbolSelected(item) {
                this.set('searchSymbol', item.get('dispProp1'));
            },

            onExchangeSettingsChanged: function onExchangeSettingsChanged() {
                if (this.get('isAdvancedSearch')) {
                    this._loadSearchContent();
                } else {
                    this._setSelectedExchanges();
                    this._sendSubscription();
                }

                this._saveLayout();
            },

            onProviderSettingsChanged: function onProviderSettingsChanged() {
                this._setSelectedProviders();
                this._sendSubscription();
                this._saveLayout();
            }
        }
    });
});
define('universal-app/controllers/price/widgets/announcement/announcement', ['exports', 'ember', '../../../../models/shared/shared-service', './exchange-announcement', '../../../../config/app-config', '../../../../models/price/price-constants', '../../../../config/price-widget-config'], function (exports, _ember, _sharedService, _exchangeAnnouncement, _appConfig, _priceConstants, _priceWidgetConfig) {
    'use strict';

    exports.default = _exchangeAnnouncement.default.extend({
        wkey: 'right-Ann-Popup', // TODO [Eranga G] remove this when 'wkey' is implemented to right panel
        exg: _sharedService.default.userSettings.price.currentExchange, // TODO [Eranga G] remove this when 'exg' para is implemented to right panel
        showAnnTabs: true,
        isMobile: _appConfig.default.customisation.isMobile,
        isTablet: _appConfig.default.customisation.isTablet,
        subAnnList: _ember.default.A(),
        isAnnFilterEnabled: false,
        isLoading: false,
        defaultFilterIndex: 0,
        isShowWidgetHeader: false,

        tabCss: {
            tabContainer: 'pad-s-t',
            tabPanelContainer: 'layout-col pad-m-l',
            tabPanelClass: 'widget-tab-panel',
            tabItemClass: 'layout-inline widget-tab-item mgn-s-r',
            tabLinkClass: 'layout-inline font-size-initial',
            tabScroll: 'has-scrollbar'
        },

        onLoadWidget: function onLoadWidget() {
            this._super();
            this.set('tabCss.tabContainer', this.isTablet ? '' : 'pad-s-t');
            this.set('isShowWidgetHeader', this.isTablet || this.isMobile);
        },

        onLanguageChanged: function onLanguageChanged(lang) {
            this._super(lang);

            if (this.get('isSubAnnTabsEnabled')) {
                this.loadfilterAnnDropDown();
            }
        },

        onPrepareData: function onPrepareData() {
            this._super();

            if (this.get('isSubAnnTabsEnabled')) {
                var app = this.get('app');

                this.loadfilterAnnDropDown();
                this.setTabCss();
                this.set('errorMessage', app.lang.messages.dataNotAvailable);
                this.loadTimer();
            }
        },

        loadTimer: function loadTimer() {
            if (this.get('filteredContent').length === 0) {
                this.setRequestTimeout(1, 'filteredContent.length');
            }
        },

        setFilteredAnnDropDown: function () {
            if (this.get('selectedTab') === this.get('Tabs').Announcement && this.get('isSubAnnTabsEnabled') && this.get('showAnnTabs') || this.get('isShowAnnFilter')) {
                this.set('isAnnFilterEnabled', true);
            } else {
                this.set('isAnnFilterEnabled', false);
            }
        }.observes('selectedTab'),

        setTabCss: function setTabCss() {
            if (this.isMobile) {
                var tabCss = {
                    tabContainer: '',
                    tabPanelContainer: 'layout-container pad-m-l full-width',
                    tabPanelClass: 'full-width overflow-visible',
                    tabItemClass: 'layout-col wdgttl-tab-item ellipsis h-middle overflow-visible fore-color',
                    tabLinkClass: 'font-x-l',
                    tabScroll: 'y-scroll'
                };

                this.set('tabCss', tabCss);
            }
        },

        loadfilterAnnDropDown: function loadfilterAnnDropDown() {
            var app = this.get('app');
            var dropDownItems = [];
            var defaultFilterIndex = this.get('defaultFilterIndex');

            if (_priceWidgetConfig.default.newsAndDisclosures && _priceWidgetConfig.default.newsAndDisclosures.announcementTabs) {
                dropDownItems = _priceWidgetConfig.default.newsAndDisclosures.announcementTabs;

                _ember.default.$.each(dropDownItems, function (key, tab) {
                    _ember.default.set(tab, 'displayName', app.lang.labels[tab.displayKey]);
                });

                this.set('currSubAnnItem', this.get('currSubAnnItem') ? this.get('currSubAnnItem') : dropDownItems[0].value);
                this.set('subAnnList', dropDownItems);
                this.set('defaultFilter', dropDownItems[defaultFilterIndex]);
            }
        },

        actions: {
            selectSubAnnItem: function selectSubAnnItem(option) {
                var subAnnId = option.annValue;
                var theFilter = _priceConstants.default.ResponseType.Data.ResponseAnnouncement;
                var content = this.priceService.announcementDS.annStoreArray;

                this.set('theFilter', theFilter);
                this.set('content', content);
                this.set('currSubAnnType', subAnnId);
                this.cancelRequestTimeout(this.get('loadingTimeoutTimer'));
                this.setRequestTimeout(1, 'filteredContent.length');
            }
        }
    });
});
define('universal-app/controllers/price/widgets/announcement/components/announcement-context-menu', ['exports', 'ember', '../../../../../utils/utils'], function (exports, _ember, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'price/widgets/announcement/components/announcement-context-menu',

        didInsertElement: function didInsertElement() {
            if (this.get('noneOption')) {
                try {
                    var that = this;
                    var mainDiv = this.$('div#container');
                    var tops = mainDiv[0].children;
                    var noneOptionId = this.getIndexOfNoneOption();

                    if (noneOptionId !== undefined) {
                        tops[noneOptionId].children[0].children[0].children[0].onclick = function () {
                            that.checkSelectedValue(this.checked, this.name);
                        };
                    }
                } catch (e) {
                    _utils.default.logger.logError('Error in Announcement Context Menu when trying to access checkbox (None option code - ' + this.get('noneOption') + ') - ' + e);
                }
            }
        },

        getIndexOfNoneOption: function getIndexOfNoneOption() {
            var indexOfNoneOption = undefined;
            var noneOptionId = this.get('noneOption');
            var options = this.get('columns');

            if (options) {
                _ember.default.$.each(options, function (index, field) {
                    if (field.code === noneOptionId) {
                        indexOfNoneOption = index;
                        return false;
                    }
                });
            }

            return indexOfNoneOption;
        },

        checkSelectedValue: function checkSelectedValue(isChecked, id) {
            var noneOption = this.get('noneOption');
            var options = this.get('columns');

            if (noneOption && options) {
                if (id === noneOption) {
                    _ember.default.$.each(options, function (index, field) {
                        if (id !== field.code) {
                            _ember.default.set(field, 'isSelected', false);
                            _ember.default.set(field, 'disableClass', isChecked ? 'pointer-disable' : '');
                        }
                    });
                }
            }
        },

        click: function click(event) {
            var target = _ember.default.$(event.target);

            if (!target.hasClass('btn')) {
                event.stopPropagation();
            }
        },

        actions: {
            save: function save(item) {
                this.sendAction('saveAction', item);
            },

            cancel: function cancel(item) {
                this.sendAction('cancelAction', item);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/announcement/components/announcement-news-popup', ['exports', '../../../../../components/base-popup'], function (exports, _basePopup) {
    'use strict';

    exports.default = _basePopup.default.extend({
        layoutName: 'price/widgets/announcement/components/announcement-news-popup'

    });
});
define('universal-app/controllers/price/widgets/announcement/components/titlebar-news-announcement', ['exports', 'ember', '../../../../../models/shared/shared-service', '../../../../../utils/utils'], function (exports, _ember, _sharedService, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'price/widgets/announcement/components/titlebar-news-announcement',
        annObj: {},
        annNewsArr: {},
        newAnnNewsDuration: 10000,
        latestNewsHeader: '',

        initialize: function initialize() {
            this.set('annNewsArr', this.priceService.announcementDS.annNewsStoreArray);
            this.set('type', _utils.default.Constants.MessageTypes.Info);
        },

        displayNews: function () {
            var that = this;

            _ember.default.run.once(function () {
                var sortedAnnNewsArr = that.get('annNewsArr').sortBy('dDt');
                var latestNews = sortedAnnNewsArr[sortedAnnNewsArr.length - 1];

                if (latestNews && that.get('latestNewsHeader') !== latestNews.get('dHed')) {
                    that.set('annObj', latestNews);
                    var titleBar = _sharedService.default.getService('sharedUI').getService('titleBar');

                    if (titleBar && titleBar.renderNotificationTemplate) {
                        titleBar.renderNotificationTemplate(that.layoutName, that);
                    }

                    _ember.default.run.later(that, function () {
                        if (titleBar && titleBar.hideNotificationTemplate) {
                            titleBar.hideNotificationTemplate(that.layoutName, that);
                        }
                    }, that.get('newAnnNewsDuration'));

                    that.set('latestNewsHeader', latestNews.get('dHed'));
                }
            });
        }.observes('annNewsArr.@each.dHed')
    });
});
define('universal-app/controllers/price/widgets/announcement/exchange-announcement', ['exports', '../../../../models/price/price-constants', '../../../../models/shared/shared-service', './announcement-base'], function (exports, _priceConstants, _sharedService, _announcementBase) {
    'use strict';

    exports.default = _announcementBase.default.extend({
        // Widget Header Params
        hideSymbol: true,
        hideWidgetLink: true,
        isExgNewsReqSent: false,

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            var filterType = this.get('type') || -1;
            var lang = this.get('lang') ? this.get('lang') : _sharedService.default.userSettings.currentLanguage;

            this.priceService.subscribePriceMetaReady(this, this.get('wkey'));
            this.priceService.subscribeAuthSuccess(this, this.get('wkey'));

            this.set('lang', lang);
            this.set('theFilter', filterType);

            this.setTitle();

            this.set('popupId', this.get('wkey'));
            this._super();
        },

        onPriceMetaReady: function onPriceMetaReady(isSuccess) {
            if (isSuccess && !this.get('isExgNewsReqSent') && this.priceService.isAuthenticated()) {
                this._sendExgNewsSubscription();
            }
        },

        onPrepareData: function onPrepareData() {
            if (this.get('type') === _priceConstants.default.ResponseType.Data.ResponseNews) {
                this.set('content', this.priceService.announcementDS.newsStoreArray);
            } else if (this.get('type') === _priceConstants.default.ResponseType.Data.ResponseAnnouncement) {
                this.set('content', this.priceService.announcementDS.annStoreArray);
            } else {
                this.set('content', this.priceService.announcementDS.annNewsStoreArray);
            }

            var exg = this.get('exg') ? this.get('exg') : _sharedService.default.userSettings.price.currentExchange;
            var sym = this.get('sym');
            var symObj = this.utils.validators.isAvailable(sym) ? this.priceService.stockDS.getStock(exg, sym) : {};

            this.set('symbolObj', symObj);
            this.set('exchange', exg);
            this.set('isEnabledExgFilter', true);
        },

        onAfterRender: function onAfterRender() {
            this.generateScrollBar(undefined, 2000);
        },

        onAddSubscription: function onAddSubscription() {
            if (this.priceService.isAuthenticated()) {
                this._sendExgAnnouncementSubscription();
                this._sendExgNewsSubscription();
            }
        },

        onAuthSuccess: function onAuthSuccess() {
            this._sendExgAnnouncementSubscription();
            this._sendExgNewsSubscription();
        },

        _sendExgAnnouncementSubscription: function _sendExgAnnouncementSubscription() {
            this.priceService.addFullMarketAnnouncementRequest(this.get('exg') ? this.get('exg') : _sharedService.default.userSettings.price.currentExchange, this.get('lang'));
        },

        _sendExgNewsSubscription: function _sendExgNewsSubscription() {
            if (this.priceService.isPriceMetadataReady()) {
                var newsProvider = this.priceService.exchangeDS.getExchange(this.get('exg') ? this.get('exg') : _sharedService.default.userSettings.price.currentExchange).newsProv;
                this.priceService.addFullMarketNewsRequest(newsProvider, this.get('lang'));

                this.set('provider', newsProvider);
                this.set('isExgNewsReqSent', true);
            }
        },

        onRemoveSubscription: function onRemoveSubscription() {
            var exchange = this.get('exg') ? this.get('exg') : _sharedService.default.userSettings.price.currentExchange;
            var exgObj = this.priceService.exchangeDS.getExchange(exchange);

            if (exgObj) {
                this.priceService.removeFullMarketAnnouncementRequest(exchange, this.get('lang'));
                this.priceService.removeFullMarketNewsRequest(exgObj.newsProv, this.get('lang'));
            }
        },

        onLanguageChanged: function onLanguageChanged(lang) {
            this.setTitle();
            this._super(lang);
        },

        onUnloadWidget: function onUnloadWidget() {
            this._super();
            this.priceService.unSubscribePriceMetaReady(this.get('wkey'));
        }
    });
});
define('universal-app/controllers/price/widgets/announcement/quote-announcement', ['exports', '../../../base-controller'], function (exports, _baseController) {
  'use strict';

  exports.default = _baseController.default.extend({});
});
define('universal-app/controllers/price/widgets/announcement/symbol-announcement', ['exports', 'ember', '../../../../models/shared/shared-service', '../../../../models/price/price-constants', './announcement-base', '../../../../app-events', '../../../../config/app-config'], function (exports, _ember, _sharedService, _priceConstants, _announcementBase, _appEvents, _appConfig) {
    'use strict';

    exports.default = _announcementBase.default.extend({
        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            var filterType = this.get('type') || -1;

            this.set('theFilter', filterType);
            this.setTitle();
            this.set('popupId', this.get('wkey'));
            this.set('isMobile', _appConfig.default.customisation.isMobile);

            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
            this._super();
        },

        onLanguageChanged: function onLanguageChanged() {
            this.setTitle();
            this._super();
        },

        onPrepareData: function onPrepareData() {
            var exchange = this.get('exg');
            var symbol = this.get('sym');

            this.set('content', this.priceService.announcementDS.getAnnCollectionBySymbol(exchange, symbol));
            this.set('symbolObj', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym')));
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['sym:', symbol, '~', exchange].join(''));
        },

        onAfterRender: function onAfterRender() {
            this.generateScrollBar(this.get('wkey'), 4000);
        },

        onAddSubscription: function onAddSubscription() {
            var that = this;
            var exchange = this.get('exg');
            var symbol = this.get('sym');

            _ember.default.run.next(this, function () {
                that.priceService.sendAnnouncementSearchRequest({
                    exchange: exchange,
                    symbol: symbol,
                    pageSize: _priceConstants.default.AnnouncementSearchPageSize
                }, that.priceService.announcementDS.getAnnCollectionBySymbol(exchange, symbol));

                that.priceService.sendNewsSearchRequest({
                    exchange: exchange,
                    symbol: symbol,
                    pageSize: _priceConstants.default.NewsSearchPageSize
                }, that.priceService.announcementDS.getAnnCollectionBySymbol(exchange, symbol));
            });
        },

        onClearData: function onClearData() {
            this.priceService.announcementDS.removeAnnCollectionBySymbol(this.get('exg'), this.get('sym'));
        },

        onUnloadWidget: function onUnloadWidget() {
            this._super();
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/commodities-overview', ['exports', 'ember', '../../base-array-controller', '../../../config/price-widget-config', '../../../models/shared/shared-service', '../../../config/app-config'], function (exports, _ember, _baseArrayController, _priceWidgetConfig, _sharedService, _appConfig) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        isFullScreenWL: false,
        comp: undefined,
        isTablet: _appConfig.default.customisation.isTablet,

        dimensions: {
            w: 3,
            h: 17
        },

        indexArrowCssUp: 'glyphicon glyphicon-triangle-top up-fore-color',
        indexArrowCssDown: 'glyphicon glyphicon-triangle-bottom down-fore-color',
        priceService: _sharedService.default.getService('price'),
        gmsContent: _sharedService.default.getService('price').stockDS.get('commoditiesCollection'),

        onAddSubscription: function onAddSubscription() {
            var gms = this.get('gms');
            this.updateCommodities(gms ? gms : _priceWidgetConfig.default.gms);
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['exg:', this.get('exg')].join(''));
        },

        updateCommodities: function updateCommodities(gms) {
            var symArray = [];
            var that = this;

            _ember.default.$.each(gms, function (key, gmsObj) {
                symArray[symArray.length] = gmsObj;

                that.priceService.stockDS.getCommodity(gmsObj.exg, gmsObj.sym);
                that.priceService.addSymbolRequest(gmsObj.exg, gmsObj.sym, gmsObj.inst);
            });

            this.priceService.sendSymbolValidationBulkRequest(symArray);
        },

        onRemoveSubscription: function onRemoveSubscription() {
            var gms = this.get('gms') ? this.get('gms') : _priceWidgetConfig.default.gms;
            var that = this;

            _ember.default.$.each(gms, function (prop, gmsObj) {
                that.priceService.removeSymbolRequest(gmsObj.exg, gmsObj.sym);
            });
        },

        setArrow: function () {
            var sortedArray = this.get('gmsContent');

            _ember.default.$.each(sortedArray, function (index, item) {
                item.set('isNegative', item.pctChg < 0);
            });
        }.observes('gmsContent.@each.pctChg'),

        toggleFullScreen: function () {
            if (this.get('isFullScreenWL')) {
                var viewName = 'price/widgets/gms-container';
                var comp = this.container.lookupFactory('controller:price/widgets/gms-container').create({ widgetContainer: this.widgetContainer });
                var route = this.container.lookup('route:application');
                comp.initializeWidget({ wn: viewName.split('/').pop() });

                route.render(viewName, {
                    into: 'price/widgets/commodities-overview',
                    outlet: 'gmsOutlet',
                    controller: comp
                });

                this.set('comp', comp);
            } else {
                var cntr = this.get('comp');

                if (cntr) {
                    cntr.closeWidget();
                }
            }

            this._super('gms-' + this.get('wkey'));
        }.observes('isFullScreenWL'),

        onAfterRender: function onAfterRender() {
            var widgetId = '#' + 'table-' + this.get('wkey');
            this.initializeEventListner(widgetId, 'onWidgetClick');
        },

        onWidgetClick: function onWidgetClick(event) {
            var tableRow = this.getParentElement(event, 'div.layout-row');
            var rowId = tableRow.attr('id');
            var selectedRow;

            if (rowId) {
                selectedRow = this.gmsContent[rowId];
                var stock = selectedRow.getProperties('exg', 'sym', 'inst');

                _sharedService.default.getService('sharedUI').invokeRightClick(stock, this.get('wkey'), event, this.menuComponent);
            }
        },

        onLanguageChanged: function onLanguageChanged() {
            var gms = this.get('gms');
            this.updateCommodities(gms ? gms : _priceWidgetConfig.default.gms);
        },

        actions: {
            fullScreenToggle: function fullScreenToggle() {
                this.toggleProperty('isFullScreenWL');
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['isFullScreenWL:', this.get('isFullScreenWL')].join(''));
            },

            doubleClickRow: function doubleClickRow(symbol) {
                if (symbol) {
                    _sharedService.default.getService('priceUI').showPopupWidget({ container: this.container, controllerString: 'view:symbol-popup-view' }, { tabId: 0, sym: symbol.sym, exg: symbol.exg, inst: symbol.inst });
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/company-profile/company-basic-info', ['exports', 'ember', '../../../../models/shared/shared-service', '../../../base-array-controller', '../../../../app-events'], function (exports, _ember, _sharedService, _baseArrayController, _appEvents) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        dimensions: {
            w: 6,
            h: 30
        },

        basicInfo: {},
        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            this.setErrorMessage();
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onAfterRender: function onAfterRender() {
            _ember.default.$('.nano').nanoScroller();
        },

        onPrepareData: function onPrepareData() {
            var that = this;

            this.startLoadingProgress();

            var basicInfo = this.priceService.companyProfileDS.getCompanyProfile(this.get('exg'), this.get('sym'), _sharedService.default.userSettings.currentLanguage, function () {
                that.onDataSuccess();
            }, function () {
                that.onDataError();
            });

            this.set('basicInfo', basicInfo);
            this.set('symbolObj', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym')));
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['sym:', this.get('sym'), '~', this.get('exg')].join(''));

            // Binding the scrollbar after the data is available and rendering the view
            _ember.default.$('.nano').nanoScroller();
        },

        onClearData: function onClearData() {
            this.set('basicInfo', null);
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var companyProfObj = this.priceService.companyProfileDS.checkCompProfDataAvailability(this.get('exg'), this.get('sym'), _sharedService.default.userSettings.currentLanguage);

            if (companyProfObj) {
                return this.utils.validators.isAvailable(companyProfObj.compID);
            }

            return false;
        },

        image: function () {
            if (this.utils.validators.isAvailable(this.get('basicInfo.logo'))) {
                return this.utils.imageHelper.getImage(this.get('basicInfo.logo'));
            }
        }.property('basicInfo.logo'),

        formattedAddress: function () {
            var str = this.get('basicInfo.addr');

            if (this.utils.validators.isAvailable(str)) {
                return str.split(', '); // TODO: [Thilina] need to use trim
            }
        }.property('basicInfo.addr'),

        onLanguageChanged: function onLanguageChanged() {
            this.onPrepareData();
            this.setErrorMessage();
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/company-profile/company-management-info', ['exports', '../../../../models/shared/shared-service', '../../../base-array-controller', '../../../../app-events'], function (exports, _sharedService, _baseArrayController, _appEvents) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        dimensions: {
            w: 3,
            h: 36
        },

        model: [],

        // Parameters for sorting
        sortProperties: ['sortOrder'],
        sortAscending: true,

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            this.setErrorMessage();
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onAfterRender: function onAfterRender() {
            this.generateScrollBar(undefined, 2000);
        },

        onPrepareData: function onPrepareData() {
            var that = this;

            this.startLoadingProgress();

            var managementInfo = this.priceService.companyProfileDS.getCompanyProfile(this.get('exg'), this.get('sym'), _sharedService.default.userSettings.currentLanguage, function () {
                that.onDataSuccess();
            }, function () {
                that.onDataError();
            }).compManagement;

            this.set('model', managementInfo);
            this.set('symbolObj', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym')));
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['sym:', this.get('sym'), '~', this.get('exg')].join(''));

            // Binding the scrollbar after the data is available and rendering the view
            // Ember.$('.nano').nanoScroller();
        },

        onClearData: function onClearData() {
            this.set('model', null);
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var companyProfObj = this.priceService.companyProfileDS.checkCompProfDataAvailability(this.get('exg'), this.get('sym'), _sharedService.default.userSettings.currentLanguage);

            return companyProfObj && companyProfObj.compManagement && companyProfObj.compManagement.length > 0;
        },

        sortedContent: function () {
            return this.get('arrangedContent');
        }.property('arrangedContent'),

        onLanguageChanged: function onLanguageChanged() {
            this.onPrepareData();
            this.setErrorMessage();
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/company-profile/company-owners-info', ['exports', '../../../../models/shared/shared-service', '../../../base-array-controller', '../../../../app-events'], function (exports, _sharedService, _baseArrayController, _appEvents) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        dimensions: {
            w: 3,
            h: 36
        },

        model: [],

        // Parameters for sorting
        sortProperties: ['sherPrs'],
        sortAscending: false,

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            this.setErrorMessage();
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onAfterRender: function onAfterRender() {
            this.generateScrollBar(undefined, 2000);
        },

        onPrepareData: function onPrepareData() {
            var that = this;

            this.startLoadingProgress();

            var ownerInfo = this.priceService.companyProfileDS.getCompanyProfile(this.get('exg'), this.get('sym'), _sharedService.default.userSettings.currentLanguage, function () {
                that.onDataSuccess();
            }, function () {
                that.onDataError();
            }).compOwners;

            this.set('model', ownerInfo);
            this.set('symbolObj', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym')));
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['sym:', this.get('sym'), '~', this.get('exg')].join(''));

            // Binding the scrollbar after the data is available and rendering the view
            // Ember.$('.nano').nanoScroller();
        },

        onClearData: function onClearData() {
            this.set('model', null);
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var companyProfObj = this.priceService.companyProfileDS.checkCompProfDataAvailability(this.get('exg'), this.get('sym'), _sharedService.default.userSettings.currentLanguage);

            return companyProfObj && companyProfObj.compOwners && companyProfObj.compOwners.length > 0;
        },

        sortedContent: function () {
            return this.get('arrangedContent');
        }.property('arrangedContent'),

        onLanguageChanged: function onLanguageChanged() {
            this.onPrepareData();
            this.setErrorMessage();
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/company-profile/company-subsidiaries-info', ['exports', '../../../../models/shared/shared-service', '../../../base-array-controller', '../../../../app-events'], function (exports, _sharedService, _baseArrayController, _appEvents) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        dimensions: {
            w: 3,
            h: 36
        },

        model: [],

        // Parameters for sorting
        sortProperties: ['subsiSherPrs'],
        sortAscending: false,

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            this.setErrorMessage();
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onAfterRender: function onAfterRender() {
            this.generateScrollBar(undefined, 2000);
        },

        onPrepareData: function onPrepareData() {
            var that = this;

            this.startLoadingProgress();

            var subsInfo = this.priceService.companyProfileDS.getCompanyProfile(this.get('exg'), this.get('sym'), _sharedService.default.userSettings.currentLanguage, function () {
                that.onDataSuccess();
            }, function () {
                that.onDataError();
            }).compSubsidiaries;

            this.set('model', subsInfo);
            this.set('symbolObj', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym')));
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['sym:', this.get('sym'), '~', this.get('exg')].join(''));

            // Binding the scrollbar after the data is available and rendering the view
            // Ember.$('.nano').nanoScroller();
        },

        onClearData: function onClearData() {
            this.set('model', null);
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var companyProfObj = this.priceService.companyProfileDS.checkCompProfDataAvailability(this.get('exg'), this.get('sym'), _sharedService.default.userSettings.currentLanguage);

            return companyProfObj && companyProfObj.compSubsidiaries && companyProfObj.compSubsidiaries.length > 0;
        },

        sortedContent: function () {
            return this.get('arrangedContent');
        }.property('arrangedContent'),

        onLanguageChanged: function onLanguageChanged() {
            this.onPrepareData();
            this.setErrorMessage();
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/detail-quote', ['exports', 'ember', '../../../components/stk-specific-components/fifty-two-wk-hl', '../../../components/stk-specific-components/days-range', '../../../components/stk-specific-components/cash-map', '../../../controllers/price/widgets/quote-base', '../../../config/price-widget-config'], function (exports, _ember, _fiftyTwoWkHl, _daysRange, _cashMap, _quoteBase, _priceWidgetConfig) {
    'use strict';

    exports.default = _quoteBase.default.extend({
        panelFields: _ember.default.A(),
        isShowTitle: true,
        daysRangeId: '',
        daysRangeValues: '',
        fiftyTowWkId: '',
        fiftyTowWkValues: '',
        cashMapId: '',
        cashMapValues: '',

        onLoadWidget: function onLoadWidget() {
            var isShowTitle = this.get('hideTitle') ? !this.get('hideTitle') : true;

            this._super();
            this.set('isShowTitle', isShowTitle);
            this.set('isShowTitle', this.get('showTitle') || true);

            this.set('daysRangeId', ['daysRangeComp', this.get('wkey')].join('-'));
            this.set('fiftyTowWkId', ['fiftyTowWkComp', this.get('wkey')].join('-'));
            this.set('cashMapId', ['cashMapComp', this.get('wkey')].join('-'));
        },

        onPrepareData: function onPrepareData() {
            this._super();
            this.set('panelFields', _ember.default.A());
            this.renderPanelFields();
        },

        onLanguageChanged: function onLanguageChanged() {
            this.set('panelFields', _ember.default.A());
            this.renderPanelFields();
        },

        renderPanelFields: function renderPanelFields() {
            this._super(_priceWidgetConfig.default.quote.panelIntraday, this.get('panelFields'));
        },

        onAfterRender: function onAfterRender() {
            this._super();
            this.set('daysRangeValues', _ember.default.View.views[this.get('daysRangeId')]);
            this.set('fiftyTowWkValues', _ember.default.View.views[this.get('fiftyTowWkId')]);
            this.set('cashMapValues', _ember.default.View.views[this.get('cashMapId')]);
        },

        onClearData: function onClearData() {
            this._super();

            var panelFields = this.get('panelFields');

            _ember.default.$.each(panelFields, function (key, panelField) {
                if (!panelField.isDestroyed) {
                    panelField.destroy();
                }
            });
        }
    });


    _ember.default.Handlebars.helper('fifty-two-wk-hl', _fiftyTwoWkHl.default);
    _ember.default.Handlebars.helper('days-range', _daysRange.default);
    _ember.default.Handlebars.helper('cash-map', _cashMap.default);
});
define('universal-app/controllers/price/widgets/gms-container', ['exports', 'ember', '../../base-array-controller', '../../../models/shared/shared-service', '../../../models/price/price-constants', '../../../app-events'], function (exports, _ember, _baseArrayController, _sharedService, _priceConstants, _appEvents) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        containerKey: 'gmsTabContainer',
        comps: [],
        gmsTabs: _ember.default.A(),

        widgets: [{
            id: 1,
            wn: 'price.widgets.gms-summary-table',
            args: { assetType: 0, selectedLink: 1 }
        }],

        gmsTabConfig: [{ id: 1, displayKey: 'summary', assetType: _priceConstants.default.GmsType.Summary, css: 'active' }, { id: 2, displayKey: 'indices', assetType: _priceConstants.default.GmsType.Indices }, { id: 3, displayKey: 'commodities', assetType: _priceConstants.default.GmsType.Commodities }, { id: 4, displayKey: 'currencies', assetType: _priceConstants.default.GmsType.Currencies }],

        onPrepareData: function onPrepareData() {
            var app = this.get('app');
            var gmsTabs = this.get('gmsTabs');
            var gmsTabConfig = this.get('gmsTabConfig');

            if (gmsTabs.length === 0) {
                _ember.default.$.each(gmsTabConfig, function (key, tab) {
                    tab.displayName = app.lang.labels[tab.displayKey];
                    gmsTabs.pushObject(_ember.default.Object.create(tab));
                });
            }

            // Subscribe container
            _appEvents.default.subscribeLanguageChanged(this, this.get('containerKey'));
            _appEvents.default.subscribeThemeChanged(this, this.get('containerKey'));
        },

        onLanguageChanged: function onLanguageChanged() {
            var gmsTabs = this.get('gmsTabs');
            var app = this.get('app');

            _ember.default.$.each(gmsTabs, function (key, tab) {
                tab.set('displayName', app.lang.labels[tab.get('displayKey')]);
            });
        },

        onAfterRender: function onAfterRender() {
            var widgets = this.get('widgets');
            var widgetContainer = this.widgetContainer;
            var widgetComp = [];

            _ember.default.$.each(widgets, function (key, value) {
                widgetComp[widgetComp.length] = _sharedService.default.getService('sharedUI').getService('mainPanel').renderWidget(widgetContainer.menuContent, {
                    id: widgetContainer.tabContent.id,
                    bid: widgetContainer.tabContent.bid,
                    wn: widgetContainer.tabContent.wn,
                    outlet: 'price.widgets.gms-container'
                }, value, value.args);
            });

            this.set('comps', widgetComp);
            this.setActive(widgets[0]);
        },

        onClearData: function onClearData() {
            var comps = this.get('comps');

            _ember.default.$.each(comps, function (key, value) {
                value.closeWidget();
            });

            // UnSubscribe container
            _appEvents.default.unSubscribeLanguageChanged(this);
            _appEvents.default.unSubscribeThemeChanged(this);
        },

        setActive: function setActive(tabItem) {
            var gmsTabs = this.get('gmsTabs');

            _ember.default.$.each(gmsTabs, function (key, value) {
                _ember.default.set(value, 'css', '');

                if (value.id === tabItem.id) {
                    _ember.default.set(value, 'css', 'active');
                }
            });
        },

        actions: {
            onGmsTabItemSelected: function onGmsTabItemSelected(tabItem) {
                var gmsTableSummaryView = this.comps[0];
                this.setActive(tabItem);

                if (gmsTableSummaryView !== null) {
                    var args = { assetType: tabItem.assetType };
                    gmsTableSummaryView.refreshWidget(args);
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/gms-summary-table', ['exports', 'ember', '../../base-array-controller', '../../../config/app-config', '../../../app-events', '../../../models/shared/language/language-data-store', '../../../models/price/price-constants', '../../../models/shared/shared-service', '../../../models/shared/business-entities/entity-ui-wrapper', '../../../components/gms-tab-panel'], function (exports, _ember, _baseArrayController, _appConfig, _appEvents, _languageDataStore, _priceConstants, _sharedService, _entityUiWrapper, _gmsTabPanel) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        indexArrowCssUp: 'glyphicon glyphicon-triangle-top up-fore-color',
        indexArrowCssDown: 'glyphicon glyphicon-triangle-bottom down-fore-color',
        assetType: null,
        gmsSymbolsByAssetType: _ember.default.A(),
        gmsSummary: _ember.default.A(),
        menuComponent: null,
        widgetTitle: '',

        app: _languageDataStore.default.getLanguageObj(),
        isMobile: _appConfig.default.customisation.isMobile,
        isTablet: _appConfig.default.customisation.isTablet,
        priceService: _sharedService.default.getService('price'),
        gmsDS: _sharedService.default.getService('price').gmsDS,
        menuContent: {},
        isWidgetHeaderDisable: false,

        countryDetails: [{
            countryCodes: ['tr', 'sa', 'kw', 'ae', 'qa', 'eg', 'om', 'bh', 'jo'],
            langKey: 'middleEast'
        }, {
            countryCodes: ['uk', 'de'],
            langKey: 'europe'
        }, {
            countryCodes: ['lk', 'bd'],
            langKey: 'asia'
        }, {
            countryCodes: ['us'],
            langKey: 'usa'
        }, {
            countryCodes: ['ma', 'tn'],
            langKey: 'northAfrica'
        }],

        onLoadWidget: function onLoadWidget() {
            this.set('isWidgetHeaderDisable', this.isMobile || this.isTablet);
            this.set('menuContent', this.widgetContainer.menuContent);
        },

        onPrepareData: function onPrepareData() {
            this.loadContent();
        },

        onAddSubscription: function onAddSubscription() {
            this.priceService.gmsDS.sendGmsRequest(_sharedService.default.userSettings.currentLanguage);
        },

        onLanguageChanged: function onLanguageChanged() {
            var currentAssetType = this.get('assetType');
            var args = { assetType: currentAssetType };

            this.refreshWidget(args);
        },

        onGMSDataUpdated: function () {
            if (this.get('gmsDS.status') === this.utils.Constants.ReqStatus.Success) {
                this.loadContent();
            }
        }.observes('gmsDS.status'),

        loadContent: function loadContent() {
            var app = this.get('app');
            var assetType = this.get('assetType');
            var gmsItems = _ember.default.Object.create();

            if (this.isTablet) {
                this.set('gmsSymbolsByAssetType', _ember.default.A());
            } else {
                this.gmsSymbolsByAssetType.clear();
            }

            this.set('widgetTitle', app.lang.labels.gms);

            if (!this.utils.flagGenerator.getFlagGenerateStatus()) {
                this.utils.flagGenerator.generateFlagIconStyles();
            }

            if (assetType && assetType !== _priceConstants.default.GmsType.Summary) {
                gmsItems = this.createBindingCollection(assetType);

                if (!this.isMobile) {
                    this.setFontStyle(gmsItems, assetType);
                }
            }

            switch (assetType) {
                case _priceConstants.default.GmsType.Commodities:
                    gmsItems.set('title', app.lang.labels.commodities);
                    this.setCommoditiesIcons(gmsItems);
                    break;

                case _priceConstants.default.GmsType.Currencies:
                    gmsItems.set('title', app.lang.labels.currencies);
                    this.setCurrencyIcon(gmsItems);
                    break;

                case _priceConstants.default.GmsType.Indices:
                    gmsItems.set('title', app.lang.labels.indices);
                    this.setCountryDetails(gmsItems);
                    break;

                default:
                    this.set('title', app.lang.labels.gms);

                    if (!this.isTablet) {
                        // Add Indices summary symbols
                        gmsItems = this.createBindingCollection(_priceConstants.default.GmsType.Indices, true);
                        gmsItems.set('title', app.lang.labels.indices);
                        this.setCountryDetails(gmsItems);

                        // Add commodities summary symbols
                        gmsItems = this.createBindingCollection(_priceConstants.default.GmsType.Commodities, true);
                        gmsItems.set('title', app.lang.labels.commodities);
                        this.setCommoditiesIcons(gmsItems);

                        // Add currency summary symbols
                        gmsItems = this.createBindingCollection(_priceConstants.default.GmsType.Currencies, true);
                        gmsItems.set('title', app.lang.labels.currencies);
                        this.setCurrencyIcon(gmsItems);
                    }
            }
        },

        createBindingCollection: function createBindingCollection(assetType, isSummary) {
            var gmsUICollection = _ember.default.A();
            var storedCollection = this.priceService.gmsDS.getGmsCollectionByAssetType(assetType);
            var symbolsByAssetType = this.get('gmsSymbolsByAssetType');

            if (isSummary) {
                storedCollection = this.priceService.gmsDS.getSummaryCollectionByAssetType(assetType);
            }

            if (storedCollection && storedCollection.length > 0) {
                _ember.default.$.each(storedCollection, function (prop, gmsObj) {
                    gmsUICollection.pushObject(_entityUiWrapper.default.create({ entity: gmsObj }));
                });
            }

            symbolsByAssetType.pushObject(gmsUICollection);

            return gmsUICollection;
        },

        bindData: function () {
            _ember.default.run.once(this, this.sendDataRequests);
        }.observes('gmsSymbolsByAssetType.@each'),

        setCommoditiesIcons: function setCommoditiesIcons(gmsSymbols) {
            // TODO: [satheeqh] Need to move this to config level

            _ember.default.$.each(gmsSymbols, function (prop, gmsObj) {
                var symbolCode = gmsObj.entity.sym;
                var cssValue = 'font-xx-l comm-icon ';

                switch (symbolCode) {
                    case 'EBROUSDBR.SP':
                        cssValue = cssValue + 'icon-brent-crude';
                        break;

                    case 'EWTIUSDBR.SP':
                        cssValue = cssValue + 'icon-wti-crude';
                        break;

                    case 'SXAUUSDOZ.SP':
                        cssValue = cssValue + 'icon-gold';
                        break;

                    case 'SXAGUSDOZ.SP':
                        cssValue = cssValue + 'icon-silver';
                        break;

                    case 'SXPTUSDOZ.SP':
                        cssValue = cssValue + 'icon-platinum';
                        break;

                    case 'SXPDUSDOZ.SP':
                        cssValue = cssValue + 'icon-palladium';
                        break;
                }

                _ember.default.set(gmsObj, 'icon', cssValue);
            });
        },

        setCountryDetails: function setCountryDetails(gmsSymbols) {
            var that = this;
            var countryHeader = '';

            _ember.default.$.each(gmsSymbols, function (prop, gmsObj) {
                if (!countryHeader || countryHeader !== that.getTerritoryEntry(gmsObj.entity.cCode)) {
                    gmsObj.isHeaderAvailable = that.isTablet;
                    countryHeader = that.getTerritoryEntry(gmsObj.entity.cCode);
                    gmsObj.countryHeader = countryHeader;
                }

                gmsObj.icon = 'class-' + gmsObj.entity.cCode;
                gmsObj.containerCss = 'pad-m-l';
            });
        },

        getTerritoryEntry: function getTerritoryEntry(countryCode) {
            var that = this;
            var territoryEntry = '';
            var countryDetails = this.countryDetails;

            _ember.default.$.each(countryDetails, function (key, detailObj) {
                if (detailObj.countryCodes.indexOf(countryCode) > -1) {
                    territoryEntry = that.get('app').lang.labels[detailObj.langKey];

                    return false;
                }
            });

            return territoryEntry;
        },

        setCurrencyIcon: function setCurrencyIcon(gmsSymbols) {
            _ember.default.$.each(gmsSymbols, function (prop, gmsObj) {
                gmsObj.icon = 'fa fa-money font-xxx-l';
            });
        },

        setFontStyle: function setFontStyle(gmsSymbls, assetType) {
            var summarySymbols = this.priceService.gmsDS.getSummaryCollectionByAssetType(assetType);

            _ember.default.$.each(gmsSymbls, function (prop, item) {
                item.set('css', 'symbol-fore-color');

                if (summarySymbols.indexOf(item.entity.sym) > -1) {
                    item.set('css', 'highlight-fore-color');
                }
            });
        },

        sendDataRequests: function sendDataRequests() {
            var gmsByAssetType = this.get('gmsSymbolsByAssetType');
            var that = this;

            _ember.default.$.each(gmsByAssetType, function (assetIndex, gms) {
                _ember.default.$.each(gms, function (prop, item) {
                    var gmsObj = item.entity;
                    that.priceService.addSymbolRequest(gmsObj.exg, gmsObj.sym, gmsObj.inst);
                });
            });
        },

        onUnloadWidget: function onUnloadWidget() {
            this.clearData();
        },

        clearData: function clearData() {
            // Since onClearData is called on single-click on table rows, clearData() is called instead of onClearData from onUnloadWidget
            var gmsByAssetType = this.get('gmsSymbolsByAssetType');
            var that = this;

            _ember.default.$.each(gmsByAssetType, function (assetIndex, gms) {
                _ember.default.$.each(gms, function (prop, item) {
                    var gmsObj = item.entity;
                    that.priceService.removeSymbolRequest(gmsObj.exg, gmsObj.sym, gmsObj.inst);
                });
            });

            this.set('assetType', null);
            this.set('menuComponent', null);
        },

        onAfterRender: function onAfterRender() {
            this.bindEvents();

            if (!this.isMobile) {
                _ember.default.$('.nano').nanoScroller();
            }
        },

        bindEvents: function bindEvents() {
            this.clickEventHandler = this.onWidgetClick.bind(this);
            var widget = this.getWidgetTable();

            if (widget.addEventListener) {
                // For all major browsers, except IE 8 and earlier
                widget.addEventListener('mousedown', this.clickEventHandler);
            } else if (widget.attachEvent) {
                // For IE 8 and earlier versions
                widget.attachEvent('onclick', this.clickEventHandler);
                widget.attachEvent('onmousedown', this.clickEventHandler);
            }
        },

        getWidgetTable: function getWidgetTable() {
            var widgetTable = _ember.default.$('#' + 'div-' + this.get('wkey'));

            if (widgetTable && widgetTable.length > 0) {
                widgetTable = widgetTable[0];
            }

            return widgetTable;
        },

        _generateFullContextMenu: function _generateFullContextMenu() {
            this.menuComponent = this.container.lookup('component:symbol-click-menu-popup');

            if (!this.menuComponent) {
                // Create a symbol-click-menu-popup component if object is already not
                this.menuComponent = this.container.lookupFactory('component:symbol-click-menu-popup').create();
            }

            if (this.menuComponent.fullContextMenu.length === 1) {
                if (_appConfig.default.customisation.isTradingEnabled) {
                    this.menuComponent.fullContextMenu.insertAt(0, this.menuComponent.tradeContextMenu);
                }
            }
        },

        onWidgetClick: function onWidgetClick(event) {
            var gmsRow = _ember.default.$(event.target).parentsUntil(_ember.default.$('#gms-'));
            var gmsRowId = gmsRow.attr('id');

            if (gmsRowId) {
                var gmsIdArray = gmsRowId.split('-');
                var sym = gmsIdArray[1];
                var exg = gmsIdArray[2];
                var stock = this.priceService.stockDS.getStock(exg, sym);

                if (stock) {
                    this.clickRow(stock, event);
                }
            }
        },

        clickRow: function clickRow(stock, event) {
            if (stock) {
                if (this.isMobile) {
                    var titleBar = _sharedService.default.getService('sharedUI').getService('titleBar');

                    if (titleBar && titleBar.onSymbolSelected) {
                        titleBar.onSymbolSelected(true);
                    }

                    _appEvents.default.onSymbolChanged(stock.sym, stock.exg, stock.inst, this.get('selectedLink'));
                } else {
                    var selectedLink = this.get('selectedLink');
                    this._generateFullContextMenu();
                    this.menuComponent.initialize(this.get('wkey'), stock);

                    if (stock && stock.sym) {
                        // Set symbol details on symbol-click-menu-popup
                        this.menuComponent.set('selectedSymbol', { sym: stock.sym, exg: stock.exg, inst: stock.inst });
                    }

                    if (selectedLink) {
                        if (event.button !== 2) {
                            _appEvents.default.onSymbolChanged(stock.sym, stock.exg, stock.inst, selectedLink);
                        }
                    }

                    if (event && event.button === 2) {
                        var viewName = 'components/symbol-click-menu-popup';
                        var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');

                        this.menuComponent.showPopup(this.menuComponent, viewName, modal); // Todo [Anushka] view popup to right click
                    }
                }
            }
        },

        actions: {
            doubleClickRow: function doubleClickRow(symbol) {
                if (!this.isMobile) {
                    if (symbol) {
                        var sym = symbol.sym;
                        var exg = symbol.exg;
                        var inst = this.priceService.stockDS.getStock(exg, sym).inst;

                        _sharedService.default.getService('priceUI').showPopupWidget({
                            container: this.container,
                            controllerString: 'view:symbol-popup-view'
                        }, { tabId: 0, sym: sym, exg: exg, inst: inst });
                    }
                }
            },

            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });


    _ember.default.Handlebars.helper('gms-tab-panel', _gmsTabPanel.default);
});
define('universal-app/controllers/price/widgets/heatmap', ['exports', 'ember', '../../base-controller', '../../../models/shared/shared-service', '../../../config/app-config', 'd3', '../../../app-events'], function (exports, _ember, _baseController, _sharedService, _appConfig, _d, _appEvents) {
    'use strict';

    exports.default = _baseController.default.extend({
        TransitionDuration: 400,
        HeaderHeight: 20,

        // HeatMap dropdown options
        SizeDropDownOptions: {
            MktCap: {
                ID: 0,
                LanguageTag: 'mktCap',
                val: 'mktCap',
                decPlace: 0,
                formatter: 'divideNumber'
            },

            Vol: {
                ID: 2,
                LanguageTag: 'volume',
                val: 'vol',
                decPlace: 0,
                formatter: 'formatNumber'
            },

            Trades: {
                ID: 4,
                LanguageTag: 'trades',
                val: 'trades',
                decPlace: 0,
                formatter: 'formatNumber'
            }
        },

        ColorDropDownOptions: {
            MktCap: {
                ID: 0,
                LanguageTag: 'mktCap',
                val: 'mktCap',
                decPlace: 0,
                formatter: 'divideNumber'
            },

            Vol: {
                ID: 2,
                LanguageTag: 'volume',
                val: 'vol',
                decPlace: 0,
                formatter: 'formatNumber'
            },

            PerChange: {
                ID: 3,
                LanguageTag: 'perChange',
                val: 'pctChg',
                decPlace: 2,
                formatter: 'formatNumber'
            },

            Trades: {
                ID: 4,
                LanguageTag: 'trades',
                val: 'trades',
                decPlace: 0,
                formatter: 'formatNumber'
            }
        },

        heatMapContent: undefined,
        stocks: _ember.default.A(),
        exchange: undefined,

        treemap: null,
        chartWidth: undefined,
        chartHeight: undefined,
        xScale: undefined,
        yScale: undefined,
        root: undefined,
        node: undefined,
        canvas: undefined,
        maxColorValue: Number.NEGATIVE_INFINITY,
        minColorValue: Number.POSITIVE_INFINITY,
        colorScale: undefined,
        zoomedSector: undefined,

        isContentUpdated: false,
        isHeatMapInitialized: false,
        isUpdating: false,
        isFOSupported: true,
        isSizeColorFieldsSame: false,
        isFocused: true,
        isMobile: _appConfig.default.customisation.isMobile,

        updateTimer: undefined,

        sizeFieldSelection: undefined,
        colorFieldSelection: undefined,
        valueField: undefined,
        colorField: undefined,
        sizeDropdownOptions: _ember.default.A(),
        colorDropdownOptions: _ember.default.A(),
        priceService: _sharedService.default.getService('price'),
        isMoreMarketsAvailable: _sharedService.default.getService('price').isMoreMarketsAvailable(),
        currentSubMarketId: undefined,

        isSubMarketsAvailable: function () {
            return this.get('exchange.subMarketArray') && this.get('exchange.subMarketArray').length > 0;
        }.property('exchange.subMarketArray'),

        /* *
         * This will be called by based controller
         */
        onLoadWidget: function onLoadWidget() {
            var marketId = _sharedService.default.getService('price').exchangeDS.getDefaultSubMarket(this.get('exg'));

            this._detectFOSupport();

            this.set('sizeFieldSelection', this.SizeDropDownOptions.MktCap);
            this.set('colorFieldSelection', this.ColorDropDownOptions.PerChange);
            this.set('valueField', this.SizeDropDownOptions.MktCap.val);
            this.set('colorField', this.ColorDropDownOptions.PerChange.val);

            this.set('exchange', _sharedService.default.getService('price').exchangeDS.getExchange(this.get('exg')));
            this.set('currentSubMarketId', marketId);
            this.set('chartId', 'heatMapChart-' + this.get('wkey'));

            this._loadSavedLayout();
            this._loadDropDownOptions();

            this.set('isSizeColorFieldsSame', this.get('valueField') === this.get('colorField'));
            this.setErrorMessage();
        },

        onAfterRender: function onAfterRender() {
            if (this.get('treemap') === null) {
                this.setRequestTimeout(3, 'isDataAvailable');
                this._setHeatMapContent();

                if (this.get('isDataAvailable')) {
                    try {
                        this._drawHeatMap();
                    } catch (e) {
                        this.utils.logger.logError('Error in drawing heatmap [onAfterRender]: ' + e);
                    }
                }
            }

            _appEvents.default.subscribeWindowResize(this, this.get('wkey'));
        },

        onResize: function onResize() {
            _ember.default.$('#' + this.get('chartId')).remove();
            this._drawHeatMap();
        },

        onPrepareData: function onPrepareData() {
            this.set('stocks', this.priceService.stockDS.getSymbolCollectionByExchange(this.get('exg')));
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['exg:', this.get('exg')].join(''));
        },

        onAddSubscription: function onAddSubscription() {
            this.priceService.addFullMarketSymbolRequest(this.get('exg'));
        },

        onClearData: function onClearData() {
            this.set('stocks', _ember.default.A());
            _appEvents.default.unSubscribeWindowResize(this.get('wkey'));
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this.priceService.removeFullMarketSymbolRequest(this.get('exg'));
        },

        onUnloadWidget: function onUnloadWidget() {
            clearTimeout(this.get('updateTimer'));

            this.set('heatMapContent', undefined);
            this.set('isHeatMapInitialized', false);
            this.set('isDataAvailable', false);
            this.set('canvas', undefined);
            this.set('chartWidth', undefined);
            this.set('chartHeight', undefined);
            this.set('root', undefined);
            this.set('node', undefined);
            this.set('treemap', undefined);
        },

        onLanguageChanged: function onLanguageChanged() {
            var that = this;
            this._loadDropDownOptions();
            this._saveLayout();
            this.setErrorMessage();

            _ember.default.run.later(function () {
                that._updateHeatMap();
            }, 100);
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            return this.get('isDataAvailable');
        },

        onVisibilityChanged: function onVisibilityChanged(isHidden) {
            if (isHidden) {
                this.set('isFocused', false);
                clearTimeout(this.get('updateTimer'));
            } else {
                this.set('isFocused', true);
                this.set('isUpdating', false);
                this._updateHeatMap();
            }
        },

        loadSubMarketContent: function loadSubMarketContent(subMkt) {
            var exchange = this.get('exg');

            this.set('stocks', this.priceService.stockDS.getStockCollectionBySubMarket(exchange, subMkt));
            this._updateHeatMap();
        },

        _changeCriteria: function _changeCriteria() {
            this.set('isSizeColorFieldsSame', this.get('valueField') === this.get('colorField'));
            this._saveLayout();
            this._updateHeatMap();
        },

        checkUpdates: function () {
            if (!this.get('isUpdating') && this.get('isFocused')) {
                this.set('isUpdating', true);
                var that = this;

                var timer = setTimeout(function () {
                    that._updateHeatMap();
                    that.set('isUpdating', false);
                }, 3000);

                this.set('updateTimer', timer);
            }
            // TODO: [satheeqh] change observes to Ember observer dynamically when size representation changes
        }.observes('stocks.@each.trades', 'stocks.@each.mktcap'),

        _loadDropDownOptions: function _loadDropDownOptions() {
            var sizeArrOptions = _ember.default.A();
            var colorArrOptions = _ember.default.A();
            var that = this;
            var option = null;

            _ember.default.$.each(this.SizeDropDownOptions, function (key) {
                option = that.SizeDropDownOptions[key];
                _ember.default.set(option, 'DisplayName', that.get('app').lang.labels[option.LanguageTag]);
                sizeArrOptions.push(option);
            });

            _ember.default.$.each(this.ColorDropDownOptions, function (key) {
                option = that.ColorDropDownOptions[key];
                _ember.default.set(option, 'DisplayName', that.get('app').lang.labels[option.LanguageTag]);
                colorArrOptions.push(option);
            });

            _ember.default.set(this.get('sizeFieldSelection'), 'DisplayName', this.get('app').lang.labels[this.get('sizeFieldSelection').LanguageTag]);
            _ember.default.set(this.get('colorFieldSelection'), 'DisplayName', this.get('app').lang.labels[this.get('colorFieldSelection').LanguageTag]);
            this.set('sizeDropdownOptions', sizeArrOptions);
            this.set('colorDropdownOptions', colorArrOptions);
        },

        _setHeatMapContent: function _setHeatMapContent() {
            var that = this;
            var stockds = this.get('stocks');
            this.set('isDataAvailable', false);
            this.set('maxColorValue', Number.NEGATIVE_INFINITY);
            this.set('minColorValue', Number.POSITIVE_INFINITY);

            var _addSymData = function _addSymData(list, obj) {
                if (obj.get(that.get('colorField')) > that.get('maxColorValue')) {
                    that.set('maxColorValue', obj.get(that.get('colorField')));
                } else if (obj.get(that.get('colorField')) < that.get('minColorValue')) {
                    that.set('minColorValue', obj.get(that.get('colorField')));
                }

                list.get('children').push(obj);
            };

            var sectorList = [];
            var parentItem = this.get('heatMapContent');
            var exg = this.get('exg');
            var des = this.priceService.exchangeDS.getExchange(exg).get('des');

            if (parentItem === undefined) {
                parentItem = _ember.default.Object.create({
                    sym: exg,
                    sDes: des,
                    children: []
                });
            } else {
                parentItem.sym = exg;
                parentItem.sDes = des;
                parentItem.children = [];
            }

            this.set('zoomedSector', exg);

            _ember.default.$.each(stockds, function (id, stock) {
                // Check whether symbol mapped to a sector
                var secId = stock.get('sec');

                if (secId && stock.get(that.valueField) > 0) {
                    if (!that.get('isDataAvailable')) {
                        that.set('isDataAvailable', true);
                        that.hideDataErrorMessage();
                        _ember.default.$('#treemap_container').show();
                    }

                    if (secId in sectorList) {
                        _addSymData(sectorList[secId], stock);
                    } else {
                        var newSec = _ember.default.Object.create({
                            sym: secId,
                            sDes: _sharedService.default.getService('price').sectorDS.getSector(exg, secId).get('des'),
                            children: []
                        });

                        _addSymData(newSec, stock);
                        sectorList[secId] = newSec;
                        parentItem.get('children').push(newSec);
                    }
                }
            });

            this.set('heatMapContent', parentItem);
            sectorList = [];
            var color = _d.default.scale.linear().range(['#f9a825', '#2ba25c']).domain([this.get('minColorValue'), this.get('maxColorValue')]);

            if (this.get('minColorValue') < 0) {
                color = _d.default.scale.linear().domain([this.get('minColorValue'), 0, this.get('maxColorValue')]).range(['#c43b2d', '#f9a825', '#2ba25c']);
            }
            this.set('colorScale', color);
        },

        /* *
         * Update heatmap based on trigger.
         * If it triggered once, waits until timer finises its job.
         */
        _updateHeatMap: function _updateHeatMap() {
            this._setHeatMapContent();

            if (!this.get('isDataAvailable')) {
                this.showDataErrorMessage();
                _ember.default.$('#treemap_container').hide();
            } else if (this.get('isHeatMapInitialized')) {
                this._updateTree();
            } else if (this.get('isDataAvailable')) {
                try {
                    this._drawHeatMap();
                } catch (e) {
                    this.utils.logger.logError('Error in drawing heatmap [_updateHeatMap]: ' + e);
                }
            }
        },

        _updateTree: function _updateTree() {
            var that = this;
            var content = this.get('heatMapContent');
            that.set('root', content);

            var treemapV = this.get('treemap').round(true).mode('squarify').ratio(this.get('chartHeight') / this.get('chartWidth') * 0.5 * (1 + Math.sqrt(5))).sort(function (a, b) {
                return a.value - b.value;
            }).size([this.get('chartWidth'), this.get('chartHeight')]).sticky(true).value(function (d) {
                return d.get(that.get('valueField'));
            });

            var newNodes = treemapV.nodes(content);
            this.set('treemap', treemapV);

            var children = newNodes.filter(function (d) {
                return !d.children;
            });
            var parents = newNodes.filter(function (d) {
                return d.children;
            });

            // Fix to stop aggregating other sector rectangles into zoomed area.
            // This filter used to update the zoomed node with newly generated node.
            var zoomedNode = newNodes.filter(function (d) {
                return d.get('sym') === that.get('zoomedSector');
            });

            var can = this.get('canvas');
            // Re-crate parent & children cells
            var pCells = can.selectAll('g.cell.parent').data(parents, function (d) {
                return 'p-' + d.get('sym');
            });
            var childCells = can.selectAll('g.cell.child').data(children, function (d) {
                return 'c-' + d.get('sym');
            });

            this.set('node', zoomedNode[0]);

            this._updateTransitions(pCells, childCells);
            this._zoom(this.get('node'));
        },

        _drawHeatMap: function _drawHeatMap() {
            var that = this;
            var width = _ember.default.$('#treemap_container').width() - 5;
            var height = _ember.default.$('#treemap_container').height() - 20;
            this.set('chartWidth', width);
            this.set('chartHeight', height);

            var scaleX = _d.default.scale.linear().range([0, this.get('chartWidth')]);
            var scaleY = _d.default.scale.linear().range([0, this.get('chartHeight')]);
            this.set('xScale', scaleX);
            this.set('yScale', scaleY);

            var content = this.get('heatMapContent');

            var treemapLayout = _d.default.layout.treemap().round(true).mode('squarify').ratio(this.get('chartHeight') / this.get('chartWidth') * 0.5 * (1 + Math.sqrt(5))).sort(function (a, b) {
                return a.value - b.value;
            }).size([this.get('chartWidth'), this.get('chartHeight')]).sticky(true).value(function (d) {
                return d.get(that.valueField);
            });

            var canvas = _d.default.select('#treemap_container').append('svg:svg').attr('id', this.get('chartId')).attr('width', this.get('chartWidth')).attr('height', this.get('chartHeight')).append('svg:g');

            this.set('canvas', canvas);

            var localNode;
            var root;
            localNode = root = content;
            var newNodes = treemapLayout.nodes(root);

            this.set('treemap', treemapLayout);
            this.set('node', localNode);
            this.set('root', root);

            var children = newNodes.filter(function (d) {
                return !d.children;
            });
            var parents = newNodes.filter(function (d) {
                return d.children;
            });

            // Create parent cells
            var pCells = canvas.selectAll('g.cell.parent').data(parents, function (d) {
                return 'p-' + d.get('sym');
            });

            // Create children cells
            var childCells = canvas.selectAll('g.cell.child').data(children, function (d) {
                return 'c-' + d.get('sym');
            });

            this._updateTransitions(pCells, childCells);
            this._zoom(this.get('node'));

            this.set('isHeatMapInitialized', true);
        },

        _updateTransitions: function _updateTransitions(parentCells, childCells) {
            var that = this;
            var mapParents = parentCells;
            var mapChildren = childCells;

            var parentEnterTransition = mapParents.enter().append('g').attr('class', 'cell parent').on('click', function (d) {
                that._zoom(d);
            });
            parentEnterTransition.append('rect').attr('class', 'parent-rect');

            if (this.get('isFOSupported')) {
                parentEnterTransition.append('foreignObject').attr('class', 'parent').append('xhtml:div').attr('class', 'div-parent').append('span').attr('class', 'label-parent colour-normal');
            } else {
                parentEnterTransition.append('text').attr('class', 'label-ie-parent colour-normal');
            }

            // Update transition
            var parentUpdateTransition = mapParents.transition().duration(this.TransitionDuration);
            parentUpdateTransition.select('.cell').attr('transform', function (d) {
                return 'translate(' + d.dx + ',' + d.y + ')';
            });
            parentUpdateTransition.select('rect').attr('width', function (d) {
                return Math.max(0.01, d.dx);
            }).attr('height', this.HeaderHeight);

            if (this.get('isFOSupported')) {
                parentUpdateTransition.select('foreignObject').attr('width', function (d) {
                    return d.dx;
                }).attr('height', this.HeaderHeight).select('.div-parent .label-parent').text(function (d) {
                    return d.get('sDes');
                });
            } else {
                parentUpdateTransition.select('.label-ie-parent').attr('x', function (d) {
                    return d.dx / 2;
                }).attr('y', this.HeaderHeight / 2).attr('dy', '.35em').text(function (d) {
                    return d.get('sDes');
                });
            }

            // Exit transition
            mapParents.exit().remove();

            var childEnterTransition = mapChildren.enter().append('g').attr('class', 'cell child').on('click', function (d) {
                _ember.default.$('#id-heatmap-popover').popover('hide');
                _d.default.select(this).attr('id', null).attr('data-original-title', null).attr('data-content', null).attr('title', null).style('stroke-width', null);

                that._zoom(that.get('node').get('sym') === d.parent.get('sym') ? that.get('root') : d.parent);
            }).on('mouseover', function () {
                if (!that.isMobile) {
                    _d.default.select(this).style('stroke-width', '3px');
                    _d.default.select(this).attr('id', 'id-heatmap-popover').attr('data-original-title', function (d) {
                        return '<strong class="symbol-fore-color ltr">' + d.get('dispProp1') + '</strong> <br/> <span class="font-m bold fore-color">' + d.get('sDes') + '</span>';
                    }).attr('data-content', function (d) {
                        var formattedChg = that._formatNumber('formatNumber', d.get('chg'), d.get('deci'));
                        var formattedPerChg = that._formatNumber('formatNumber', d.get('pctChg'), 2);
                        var chgFontCss = formattedChg > 0 ? 'up-fore-color' : formattedChg < 0 ? 'down-fore-color' : '';
                        var perChgFontCss = formattedPerChg > 0 ? 'up-fore-color' : formattedPerChg < 0 ? 'down-fore-color' : '';

                        return ['<table class="table font-m fore-color"><tbody>', '<tr><td>', that.get('app').lang.labels.lastTrade, '</td><td class="h-right">', that._formatNumber('formatNumber', d.get('ltp'), d.get('deci')), '</td></tr>', '<tr><td>', that.get('app').lang.labels.trades, '</td><td class="h-right">', that._formatNumber('formatNumber', d.get('trades'), 0), '</td></tr>', '<tr><td>', that.get('app').lang.labels.volume, '</td><td class="h-right">', that._formatNumber('formatNumber', d.get('vol'), 0), '</td></tr>', '<tr><td>', that.get('app').lang.labels.turnover, '</td><td class="h-right">', that._formatNumber('formatNumber', d.get('tovr'), 0), '</td></tr>', '<tr><td>', that.get('app').lang.labels.change, '</td><td><div class="h-right ', chgFontCss, '">', formattedChg, '</div></td></tr>', '<tr><td>', that.get('app').lang.labels.perChange, '</td><td><div class="h-right ', perChgFontCss, '">', formattedPerChg, '</div></div></td></tr>', '</tbody></table>'].join('');
                    }).style('stroke-width', '3px');

                    _ember.default.$('#id-heatmap-popover').popover({
                        'trigger': 'hover',
                        'container': 'div#treemap_container',
                        'placement': 'auto',
                        'html': true,
                        /*  'delay': {
                         show: 2000,
                         hide: 0
                         },*/
                        'animation': false
                    });

                    _ember.default.$('#id-heatmap-popover').popover('show');
                    var ev = _d.default.event;
                    var offset = _ember.default.$('#treemap_container').offset();
                    var x = ev.pageX - offset.left + 25;
                    var y = ev.pageY - offset.top + 25;
                    var popoverWidth = _ember.default.$('.popover').width();
                    var popoverHeight = _ember.default.$('.popover').height();
                    if (x + popoverWidth > that.get('chartWidth')) {
                        x -= popoverWidth + 50;
                    }
                    if (y + popoverHeight > that.get('chartHeight')) {
                        y -= popoverHeight + 25;
                    }
                    _ember.default.$('.popover').css('top', y + 'px').css('left', x + 'px').css('direction', 'ltr');
                }
            }).on('mousemove', function () {
                var ev = _d.default.event;
                var offset = _ember.default.$('#treemap_container').offset();
                var x = ev.pageX - offset.left + 25;
                var y = ev.pageY - offset.top + 25;
                var popoverWidth = _ember.default.$('.popover').width();
                var popoverHeight = _ember.default.$('.popover').height();
                if (x + popoverWidth > that.get('chartWidth')) {
                    x -= popoverWidth + 50;
                }
                if (y + popoverHeight > that.get('chartHeight')) {
                    y -= popoverHeight + 25;
                }
                _ember.default.$('.popover').css('top', y + 'px').css('left', x + 'px').css('direction', 'ltr');
            }).on('mouseout', function () {
                _ember.default.$('id-heatmap-popover').popover('destroy');
                _d.default.select(this).attr('id', null).attr('data-original-title', null).attr('data-content', null).attr('title', null).style('stroke-width', null);
            });

            childEnterTransition.append('rect').classed('background', true).attr('class', 'child-rect').style('fill', function (d) {
                return that._getColor(d.get('colorField'));
            });

            if (this.get('isFOSupported')) {
                childEnterTransition.append('foreignObject').attr('class', 'child').append('xhtml:div').attr('class', 'div-child ltr').append('span').attr('class', 'label-child');
            } else {
                childEnterTransition.append('text').attr('class', 'label-ie-l1');
                childEnterTransition.append('text').attr('class', 'label-ie-l2');
                childEnterTransition.append('text').attr('class', 'label-ie-l3');
                childEnterTransition.append('text').attr('class', 'label-ie-l4');
            }

            // Update transition
            var childUpdateTransition = mapChildren.transition().duration(this.TransitionDuration);
            childUpdateTransition.select('.cell').attr('transform', function (d) {
                return 'translate(' + d.x + ',' + d.y + ')';
            });
            childUpdateTransition.select('rect').attr('width', function (d) {
                return Math.max(0.01, d.dx);
            }).attr('height', function (d) {
                return Math.max(0.01, d.dy);
            }).style('fill', function (d) {
                return that._getColor(d.get(that.colorField));
            });

            mapChildren.exit().remove();
        },

        // Zoom function
        _zoom: function _zoom(d) {
            var that = this;
            this.get('treemap').padding([this.HeaderHeight / (this.get('chartHeight') / d.dy), 0, 0, 0]).nodes(d);

            // Moving the next two lines above treemap layout messes up padding of zoom result
            var kx = this.get('chartWidth') / d.dx;
            var ky = this.get('chartHeight') / d.dy;
            var isRoot = d.get('sym') === this.get('root').get('sym');
            this.get('xScale').domain([d.x, d.x + d.dx]);
            this.get('yScale').domain([d.y, d.y + d.dy]);

            var zoomTransition = this.get('canvas').selectAll('g.cell').transition().duration(this.TransitionDuration).attr('transform', function (cell) {
                return 'translate(' + that.xScale(cell.x) + ',' + that.yScale(cell.y) + ')';
            });

            // Update the width/height of the rects
            zoomTransition.select('.parent-rect').attr('width', function (parent) {
                return Math.max(0.01, kx * parent.dx);
            }).attr('height', this.HeaderHeight);

            zoomTransition.select('.child-rect').attr('width', function (childWidth) {
                return Math.max(0.01, kx * childWidth.dx);
            }).attr('height', function (childHeight) {
                return ky * childHeight.dy;
            }).style('fill', function (childFill) {
                return that._getColor(childFill.get(that.colorField));
            });
            zoomTransition.select('foreignObject').attr('width', function (fo) {
                return kx * fo.dx;
            }).attr('height', this.HeaderHeight);

            zoomTransition.select('.child').attr('height', function (child) {
                return ky * child.dy;
            });

            if (this.get('isFOSupported')) {
                this.get('canvas').selectAll('.label-child').style('font-size', function (canvasFont) {
                    return that._calFontSize(canvasFont.dy * ky, canvasFont.dx * kx);
                }).html(function (canvasHtml) {
                    if (isRoot) {
                        return that._generateLabel(canvasHtml, false, canvasHtml.dx, canvasHtml.dy);
                    } else {
                        return that._generateLabel(canvasHtml, true, canvasHtml.dx * kx, canvasHtml.dy * ky);
                    }
                });
            } else {
                zoomTransition.select('.label-ie-l1').attr('x', function (ie11x) {
                    return kx * ie11x.dx / 2;
                }).attr('y', function (ie11y) {
                    return ky * ie11y.dy / 2;
                }).attr('dy', function (ie11dy) {
                    if (ie11dy.dy * ky > 35 && ie11dy.dx * kx > 110) {
                        return '-1em';
                    }
                    return '0.35em';
                }).style('font-size', function (ie11Font) {
                    return that._calFontSize(ie11Font.dy * ky, ie11Font.dx * kx);
                }).text(function (ie11Text) {
                    return that._generateLabelIE(ie11Text, 1, ie11Text.dx * kx, ie11Text.dy * ky);
                });

                zoomTransition.select('.label-ie-l2').attr('x', function (ie12x) {
                    return kx * ie12x.dx / 2;
                }).attr('y', function (ie12y) {
                    return ky * ie12y.dy / 2;
                }).style('font-size', function (ie12Font) {
                    return that._calFontSize(ie12Font.dy * ky, ie12Font.dx * kx);
                }).text(function (ie12Text) {
                    return that._generateLabelIE(ie12Text, 2, ie12Text.dx * kx, ie12Text.dy * ky);
                });

                zoomTransition.select('.label-ie-l3').attr('x', function (ie13x) {
                    return kx * ie13x.dx / 2;
                }).attr('y', function (ie13y) {
                    return ky * ie13y.dy / 2;
                }).attr('dy', function () {
                    return '1.2em';
                }).text(function (ie13Text) {
                    return that._generateLabelIE(ie13Text, 3, ie13Text.dx * kx, ie13Text.dy * ky);
                });

                zoomTransition.select('.label-ie-l4').attr('x', function (ie14x) {
                    return kx * ie14x.dx / 2;
                }).attr('y', function (ie14y) {
                    return ky * ie14y.dy / 2;
                }).attr('dy', function () {
                    return '2.35em';
                }).text(function (ie14Text) {
                    return that._generateLabelIE(ie14Text, 4, ie14Text.dx * kx, ie14Text.dy * ky);
                });

                zoomTransition.select('.label-ie-parent').attr('x', function (ieParentx) {
                    return kx * ieParentx.dx / 2 - 2;
                }).attr('y', this.HeaderHeight / 2).attr('dy', '.35em').text(function (ieParentText) {
                    return that._generateLabelIE(ieParentText, 0, ieParentText.dx * kx, ieParentText.dy);
                });
            }

            this.set('node', d);
            this.set('zoomedSector', d.get('sym'));

            // Updating popover content
            if (!this.isMobile) {
                this.get('canvas').selectAll('#id-heatmap-popover').attr('data-original-title', function (dataTitle) {
                    return '<strong class="symbol-fore-color ltr">' + dataTitle.get('dispProp1') + '</strong> <br/> <i class="font-m bold fore-color">' + dataTitle.get('sDes') + '</i>';
                }).attr('data-content', function (dataContent) {
                    var formattedChg = that._formatNumber('formatNumber', dataContent.get('chg'), 2);
                    var formattedPerChg = that._formatNumber('formatNumber', dataContent.get('pctChg'), 2);
                    var chgFontCss = formattedChg > 0 ? 'up-fore-color' : formattedChg < 0 ? 'down-fore-color' : '';
                    var perChgFontCss = formattedPerChg > 0 ? 'up-fore-color' : formattedPerChg < 0 ? 'down-fore-color' : '';

                    return ['<table class="table font-m fore-color"><tbody>', '<tr><td>', that.get('app').lang.labels.lastTrade, '</td><td class="h-right">', that._formatNumber('formatNumber', dataContent.get('ltp'), 2), '</td></tr>', '<tr><td>', that.get('app').lang.labels.trades, '</td><td class="h-right">', that._formatNumber('formatNumber', dataContent.get('trades'), 0), '</td></tr>', '<tr><td>', that.get('app').lang.labels.volume, '</td><td class="h-right">', that._formatNumber('formatNumber', dataContent.get('vol'), 0), '</td></tr>', '<tr><td>', that.get('app').lang.labels.turnover, '</td><td class="h-right">', that._formatNumber('formatNumber', dataContent.get('tovr'), 0), '</td></tr>', '<tr><td>', that.get('app').lang.labels.change, '</td><td><div class="h-right ', chgFontCss, '">', formattedChg, '</div></td></tr>', '<tr><td>', that.get('app').lang.labels.perChange, '</td><td><div class="h-right ', perChgFontCss, '">', formattedPerChg, '</div></div></td></tr>', '</tbody></table>'].join('');
                });
            }

            var popover = _ember.default.$('#id-heatmap-popover').data('bs.popover');

            if (popover) {
                popover.setContent();
                popover.$tip.addClass(popover.options.placement);
            }

            if (_d.default.event) {
                _d.default.event.stopPropagation();
            }
        },

        _generateLabel: function _generateLabel(d, isZoomed, width, height) {
            var txt = d.get('dispProp1');
            var tLen = txt.length + 28;

            if (height > 80 && width > 90) {
                txt += '<br>' + d.get('sDes') + '<br><div class="label-child-info">' + this.get('sizeFieldSelection').DisplayName + ': ' + this._formatNumber(this.get('sizeFieldSelection').formatter, d.get(this.get('valueField')), this.get('sizeFieldSelection').decPlace);

                if (!this.get('isSizeColorFieldsSame')) {
                    txt += '<br>' + this.get('colorFieldSelection').DisplayName + ': ' + this._formatNumber(this.get('colorFieldSelection').formatter, d.get(this.get('colorField')), this.get('colorFieldSelection').decPlace);
                }
                txt += '</div>';
                return txt;
            } else if (height > 50 && width > 75) {
                txt += '<br>' + d.get('sDes');
                return txt;
            } else if (isZoomed && height > 30 && width > 40) {
                return txt;
            } else if (height < 20 || width < tLen) {
                return '';
            }
            return txt;
        },

        _generateLabelIE: function _generateLabelIE(d, level, width, height) {
            switch (level) {
                case 0:
                    if (width > 30) {
                        return d.get('sDes').substring(0, width - 30);
                    }
                    break;
                case 1:
                    if (height > 20 && width > 30) {
                        return d.get('dispProp1');
                    }
                    break;
                case 2:
                    if (height > 35 && width > 110) {
                        return d.get('sDes').substring(0, width - 20);
                    }
                    break;
                case 3:
                    if (height > 42 && width > 110) {
                        return this.get('sizeFieldSelection').DisplayName + ': ' + this._formatNumber(this.get('sizeFieldSelection').formatter, d.get(this.get('valueField')), this.get('sizeFieldSelection').decPlace);
                    }
                    break;
                case 4:
                    if (!this.get('isSizeColorFieldsSame') && height > 55 && width > 110) {
                        return this.get('colorFieldSelection').DisplayName + ': ' + this._formatNumber(this.get('colorFieldSelection').formatter, d.get(this.get('colorField')), this.get('colorFieldSelection').decPlace);
                    }
                    break;
            }

            return '';
        },

        _formatNumber: function _formatNumber(formatter, value, decimalPlace) {
            if (formatter === 'formatNumber') {
                return this.utils.formatters.formatNumber(value, decimalPlace);
            } else if (formatter === 'divideNumber') {
                return this.utils.formatters.divideNumber(value, decimalPlace);
            }

            return value;
        },
        _calFontSize: function _calFontSize(height, width) {
            if (height > 450 && width > 450) {
                return '30px';
            } else if (height > 300 && width > 300) {
                return '25px';
            } else if (height > 150 && width > 150) {
                return '19px';
            } else if (height > 50 && width > 50) {
                return '13px';
            }
            return '11px';
        },

        _getColor: function _getColor(value) {
            return this.colorScale(value);
        },

        _detectFOSupport: function _detectFOSupport() {
            try {
                var browser = this.utils.browser.getBrowserInfo();

                if (browser.name === 'MSIE' || browser.name === 'Edge' || browser.name === 'Safari' && browser.version === '8') {
                    this.set('isFOSupported', false);
                }
            } catch (e) {
                this.utils.logger.logError('Error in detecting browser info]: ' + e);
            }
        },

        _loadSavedLayout: function _loadSavedLayout() {
            var prevLayout = this.get('heatMapLayout');

            if (prevLayout) {
                this.set('sizeFieldSelection', prevLayout.sizeFieldSelect);
                this.set('colorFieldSelection', prevLayout.colorFieldSelect);
                this.set('valueField', prevLayout.valueField);
                this.set('colorField', prevLayout.colorField);
            }
        },

        // Save the current selections.
        _saveLayout: function _saveLayout() {
            var layout = {
                sizeFieldSelect: this.get('sizeFieldSelection'),
                colorFieldSelect: this.get('colorFieldSelection'),
                valueField: this.get('valueField'),
                colorField: this.get('colorField')
            };

            this.saveWidget({ heatMapLayout: layout });
        },

        actions: {
            setSizeField: function setSizeField(option) {
                this.set('sizeFieldSelection', option);
                this.set('valueField', option.val);
                this._changeCriteria();
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['size:', option.val].join(''));
            },

            setColorField: function setColorField(option) {
                this.set('colorFieldSelection', option);
                this.set('colorField', option.val);
                this._changeCriteria();
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['color:', option.val].join(''));
            },

            setExchange: function setExchange(exchg) {
                var exchangeArgs = { exg: exchg.code };
                this.priceService.exchangeDS.getExchangeMetadata(exchg.code);

                this.set('exchange', this.priceService.exchangeDS.getExchange(exchg.code));
                this.saveWidget(exchangeArgs);
                this.refreshWidget(exchangeArgs);
            },

            setSubMarket: function setSubMarket(mktId) {
                this.loadSubMarketContent(mktId);
            },

            onClickColor: function onClickColor() {
                _ember.default.appGlobal.activeWidget = 'colorDropdown' + this.get('wkey');
            },

            onClickSize: function onClickSize() {
                _ember.default.appGlobal.activeWidget = 'sizeDropdown' + this.get('wkey');
            }
        }
    });
});
define('universal-app/controllers/price/widgets/indices-world-map', ['exports', 'ember', '../../base-array-controller', '../../../models/shared/shared-service', '../../../utils/utils'], function (exports, _ember, _baseArrayController, _sharedService, _utils) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        stockArray: _ember.default.A(),
        indexArrowCssUp: 'glyphicon glyphicon-triangle-top up-fore-color',
        indexArrowCssDown: 'glyphicon glyphicon-triangle-bottom down-fore-color',
        stockObject: {},
        timer: undefined,
        priceService: _sharedService.default.getService('price'),

        countryCodeConstants: {
            du: {
                symbol: 'DFMGI',
                exg: 'DFM',
                divStyle: 'margin-left: 92px; margin-top:-52px; width:90px;',
                lineStyle: 'transform="rotate(-50)"',
                svgStyle: 'height="111" style="width: 100%;"',
                animationDelay: '1.8s'
            },

            sa: {
                symbol: 'TASI',
                exg: 'TDWL',
                divStyle: 'margin-left: -60px; margin-top:-3px; width:72px;',
                lineStyle: 'transform="rotate(0)"',
                svgStyle: 'height="90" width="3" style="margin-right: 9px;"',
                animationDelay: '1s'
            },

            kw: {
                symbol: '11',
                exg: 'KSE',
                divStyle: 'margin-left: 17px; margin-top:-4px; width:65px;',
                lineStyle: 'transform="rotate(-15)"',
                svgStyle: 'height="100" width="80"',
                diStyleInd: '',
                animationDelay: '1.6s'
            },

            lk: {
                symbol: 'ASI',
                exg: 'LKCSE',
                divStyle: 'margin-left: -30px; margin-top:-3px;',
                lineStyle: 'transform="rotate(0)"',
                svgStyle: 'height="20" width="34"',
                animationDelay: '1.1s'
            },

            us: {
                symbol: 'I:NDX',
                exg: 'NSDQ',
                divStyle: 'margin-left: -23px; margin-top:-4px;',
                lineStyle: 'transform="rotate(0)"',
                svgStyle: 'height="20" width="45"',
                animationDelay: '1.2s'
            },

            bd: {
                symbol: 'DSEX',
                exg: 'DSE',
                divStyle: 'margin-left: 50px; margin-top:-60px; width:75px;',
                lineStyle: 'transform="rotate(-73)"',
                svgStyle: 'height="45" style="width: 100%;"',
                animationDelay: '1.3s'
            },

            eg: {
                symbol: 'EGX30',
                exg: 'CASE',
                divStyle: 'margin-left:-65px; margin-top:-4px;',
                lineStyle: 'transform="rotate(0)"',
                svgStyle: 'height="12" width="20"',
                animationDelay: '1.4s'
            },

            gb: {
                symbol: 'I:UKX',
                exg: 'FTSE',
                divStyle: 'margin-left: -30px; margin-top:-3px;',
                lineStyle: 'transform="rotate(0)"',
                svgStyle: 'height="10" width="35"',
                animationDelay: '1.5s'
            },

            ae: {
                symbol: 'ADI',
                exg: 'ADSM',
                divStyle: 'margin-left: 110px; margin-top: -90px;',
                lineStyle: 'transform="rotate(-70)"',
                svgStyle: 'height="110" width="180"',
                animationDelay: '1.7s'
            }
        },

        onPrepareData: function onPrepareData() {
            var that = this;
            this.set('stockObject', {}); // Resetting the stockObject to an empty one on every maximize.

            _ember.default.$(window).resize(function () {
                _ember.default.run.schedule('afterRender', that, function () {
                    _ember.default.run.cancel(that.get('timer'));

                    that.set('stockObject', {});
                    that.updatePins();
                });
            });
        },

        updateCommodities: function updateCommodities(gms) {
            this.priceService.addSymbolRequest(gms.exg, gms.sym, gms.inst);
        },

        onAfterRender: function onAfterRender() {
            this.renderMap();
        },

        setPinUpdateTimer: function setPinUpdateTimer() {
            var timer = _ember.default.run.later(this, this.updatePins, 3000); // Updating pins every 3 seconds
            this.set('timer', timer);
        },

        showLines: function showLines() {
            var div = _ember.default.$('#div-label-du'); // Last div being rendered as a pin

            if (div.css('opacity') === '1') {
                var countryMapping = this.get('countryCodeConstants');
                var that = this;

                _ember.default.$.each(countryMapping, function (key) {
                    _ember.default.$(that._escapeColon('div-pin-' + key)).removeClass('opacity-zero');
                    _ember.default.$(that._escapeColon('line-' + key)).attr('class', 'svg-line');
                    _ember.default.$(that._escapeColon('div-label-' + key)).removeClass('div-zoom-' + key);
                });
            } else {
                _ember.default.run.later(this, this.showLines, 20);
            }
        },

        updatePins: function updatePins() {
            var countryMapping = this.get('countryCodeConstants');
            var indexArrowCssDown = this.get('indexArrowCssDown');
            var indexArrowCssUp = this.get('indexArrowCssUp');
            var stockObject = this.get('stockObject');
            var userExg = this.priceService.userDS.get('userExchg');
            var that = this;

            _ember.default.$.each(countryMapping, function (key, value) {
                var storedPrice = stockObject[value.symbol];
                var exchange = 'GLOBAL';
                var cssClass = 'pin-back-color-down';
                var noOfDecimals = _sharedService.default.userSettings.displayFormat.decimalPlaces;

                if (userExg.indexOf(value.exg) > -1) {
                    exchange = value.exg;
                }

                var stock = this.priceService.stockDS.getStock(exchange, value.symbol);
                _ember.default.$(that._escapeColon('map-' + key)).html(_utils.default.formatters.formatNumber(stock.ltp, noOfDecimals));
                _ember.default.$(that._escapeColon('displaySym-' + key)).html(stock.dSym);

                var priceChange = _ember.default.$(that._escapeColon('map-' + key)).html();
                _ember.default.set(stockObject, value.symbol, priceChange);

                if (_ember.default.$(that._escapeColon('b-color-' + key)).hasClass('pin-back-color-up')) {
                    cssClass = 'pin-back-color-up';
                }

                if (storedPrice !== priceChange) {
                    if (stock.pctChg < 0) {
                        _ember.default.$(that._escapeColon('arrow-' + key)).attr('class', indexArrowCssDown);
                        _ember.default.$(that._escapeColon('b-color-' + key)).switchClass(cssClass, 'pin-back-color-down-animate', 30).switchClass('pin-back-color-down-animate', 'pin-back-color-down', 30);
                    } else {
                        _ember.default.$(that._escapeColon('arrow-' + key)).attr('class', indexArrowCssUp);
                        _ember.default.$(that._escapeColon('b-color-' + key)).switchClass(cssClass, 'pin-back-color-up-animate', 30).switchClass('pin-back-color-up-animate', 'pin-back-color-up', 30);
                    }
                }
            });

            that.setPinUpdateTimer();
        },

        renderMap: function renderMap() {
            var that = this;
            var pins = {};

            // Declaration of data
            var exchange;
            var countryMapping = this.get('countryCodeConstants');
            var stockArray = this.get('stockArray');
            var indexArrowCssUp = this.get('indexArrowCssUp');
            var userExg = this.priceService.userDS.get('userExchg');

            _ember.default.$.each(countryMapping, function (key, value) {
                var displayElement = '<div class="map-pin">';
                var divStyle = _ember.default.$('<style type="text/css">').appendTo('head');
                var divCssClasses = '';

                divStyle.append('</style>');
                displayElement = displayElement + '<div id="div-pin-' + key + '" class="pin-image opacity-zero"></div>';

                _ember.default.$.each(userExg, function (num, exg) {
                    if (exg === value.exg) {
                        exchange = exg;
                    } else {
                        exchange = 'GLOBAL';
                    }
                });

                var stock = this.priceService.stockDS.getStock(exchange, value.symbol);
                stockArray.pushObject(stock);
                that.updateCommodities(stock);

                divCssClasses = divCssClasses + '.div-zoom-' + key + ' {opacity: 0; -webkit-animation: zoom .1s 1 ' + value.animationDelay + ' ease-in-out; animation: zoom .1s 1 ' + value.animationDelay + ' ease-in-out; -o-animation: zoom .1s 1 ' + value.animationDelay + ' ease-in-out; -moz-animation: zoom .1s 1 ' + value.animationDelay + ' ease-in-out; animation-fill-mode: forwards;} ';
                displayElement = displayElement + '<svg ' + value.svgStyle + '><line id="line-' + key + '" ' + value.lineStyle + ' class="svg-line"></line></svg>';
                displayElement = displayElement + '<div id="div-label-' + key + '" style="' + value.divStyle + '" class="div-zoom-' + key + '">';
                displayElement = displayElement + '<div id="b-color-' + key + '" class="pin-fore-color pin-back-color-up pad-s-lr font-x-l">';
                displayElement = displayElement + '<div class="text-nowrap ltr"><span><i id="arrow-' + key + '" class="' + indexArrowCssUp + '"></i></span>';
                displayElement = displayElement + '<span id="displaySym-' + key + '" class="text-nowrap pad-s-l">' + stock.sym + '</span></div>';
                displayElement = displayElement + '<div id="map-' + key + '" class="world-map-pin-height"></div>';
                displayElement = displayElement + '</div>';
                displayElement = displayElement + '</div>';
                displayElement = displayElement + '</div>';

                divStyle.append(divCssClasses);
                _ember.default.set(pins, key, displayElement);
            });

            _ember.default.$('#vmap').vectorMap({
                map: 'world_en',
                enableZoom: true,
                selectedColor: null,
                pins: pins,

                colors: {
                    mo: '#C9DFAF',
                    fl: '#C9DFAF',
                    or: '#C9DFAF'
                }
            });

            this.showLines();
            this.drawLines();
            this.updatePins();
        },

        drawLines: function drawLines() {
            var countryMapping = this.get('countryCodeConstants');
            var that = this;

            _ember.default.$.each(countryMapping, function (key) {
                var divOnePosition = _ember.default.$(that._escapeColon('div-pin-' + key)).position();
                var divTwoPosition = _ember.default.$(that._escapeColon('div-label-' + key)).position();
                var svgLine = _ember.default.$(that._escapeColon('line-' + key));

                svgLine.attr('x1', divOnePosition.left + 2).attr('y1', divOnePosition.top).attr('x2', divTwoPosition.left + 2).attr('y2', divTwoPosition.top).attr('class', 'svg-line, opacity-zero');
            });
        },

        onClearData: function onClearData() {
            var stock = this.get('stockArray');
            var that = this;

            _ember.default.$.each(stock, function (prop, stockObj) {
                that.priceService.removeSymbolRequest(stockObj.exg, stockObj.sym);
            });

            this.set('stockArray', _ember.default.A());
            this.set('stockObject', {});
        },

        onUnloadWidget: function onUnloadWidget() {
            _ember.default.$(window).off('resize');
            _ember.default.run.cancel(this.get('timer'));
        },

        _escapeColon: function _escapeColon(id) {
            return '#' + id.replace(/(:|,)/g, '\\$1');
        }
    });
});
define('universal-app/controllers/price/widgets/market-depth-summary', ['exports', './quote-market-depth'], function (exports, _quoteMarketDepth) {
    'use strict';

    exports.default = _quoteMarketDepth.default.extend({
        clickFn: '',

        actions: {
            onClick: function onClick(bidAsk) {
                var clickFn = this.clickFn;

                if (typeof clickFn === 'function') {
                    clickFn(bidAsk);
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/market-overview', ['exports', 'ember', '../../../models/shared/shared-service', '../../../utils/utils', '../../controller-factory', '../../../utils/formatters', '../../shared/table-controller'], function (exports, _ember, _sharedService, _utils, _controllerFactory, _formatters, _tableController) {
    'use strict';

    exports.default = _tableController.default.extend({
        priceService: _sharedService.default.getService('price'),
        colorCss: 'down-fore-color',
        exchangeArray: _ember.default.A(),
        marketTime: '',
        isEnabledTimer: false,

        onLoadWidget: function onLoadWidget() {
            if (!this.utils.flagGenerator.getFlagGenerateStatus()) {
                this.utils.flagGenerator.generateFlagIconStyles();
            }
        },

        onPrepareData: function onPrepareData() {
            this._setExchangeInfo();
        },

        onAddSubscription: function onAddSubscription() {
            var that = this;
            var exchangeCodes = this.priceService.userDS.get('userExchg');

            _ember.default.$.each(exchangeCodes, function (key, exg) {
                if (exg) {
                    var exchange = that.priceService.exchangeDS.getExchange(exg);

                    that.priceService.exchangeDS.requestExchangeMetadata(exg);
                    that.priceService.addExchangeRequest(exg);
                    that.priceService.addIndexRequest(exg, exchange.mainIdx);
                }
            });
        },

        onClearData: function onClearData() {
            this.set('exchangeArray', _ember.default.A());
            this.set('mainIndexArray', _ember.default.A());
        },

        onRemoveSubscription: function onRemoveSubscription() {
            var that = this;
            var exchangeCodes = this.priceService.userDS.get('userExchg');

            _ember.default.$.each(exchangeCodes, function (key, exg) {
                if (exg) {
                    var exchange = that.priceService.exchangeDS.getExchange(exg);

                    that.priceService.removeExchangeRequest(exg);
                    that.priceService.removeIndexRequest(exg, exchange.mainIdx);
                }
            });
        },

        _setExchangeInfo: function _setExchangeInfo() {
            var that = this;
            var exchangeArray = _ember.default.A([]);
            var mainIndexArray = _ember.default.A([]);
            var exchangeCodes = that.priceService.userDS.get('userExchg');

            _ember.default.$.each(exchangeCodes, function (key, exg) {
                if (exg) {
                    var exchange = that.priceService.exchangeDS.getExchange(exg);

                    if (exchange && exchange.mainIdx) {
                        var mainIndex = that.priceService.stockDS.getStock(exg, exchange.mainIdx, _utils.default.AssetTypes.Indices);

                        exchange.set('index', mainIndex);
                        mainIndexArray.pushObject(mainIndex);
                    }

                    exchangeArray.pushObject(exchange);
                }
            });

            this.set('exchangeArray', exchangeArray);
            this.set('mainIndexArray', mainIndexArray);
        },

        setFlagStyles: function () {
            var exchangeArray = this.get('exchangeArray');

            _ember.default.$.each(exchangeArray, function (key, exchange) {
                if (exchange) {
                    var countryCode = exchange.get('country');
                    exchange.set('flagCss', 'class-' + (countryCode ? countryCode.toLowerCase() : ''));
                }
            });
        }.observes('exchangeArray.@each.country'),

        setIndexStyles: function () {
            _ember.default.run.once(this, this._setIndexStyles);
        }.observes('mainIndexArray.@each.pctChg'),

        _setIndexStyles: function _setIndexStyles() {
            var exchangeArray = this.get('exchangeArray');

            _ember.default.$.each(exchangeArray, function (key, exchange) {
                var mainIndex = exchange && exchange.get('index') ? exchange.get('index') : '';

                if (mainIndex) {
                    var pctChg = mainIndex.get('pctChg');

                    exchange.set('indexCss', pctChg > 0 ? 'up-fore-color' : pctChg === 0 ? 'fore-color' : 'down-fore-color');
                    exchange.set('ltpIconCSS', pctChg > 0 ? 'glyphicon-triangle-top' : pctChg < 0 ? 'glyphicon-triangle-bottom' : '');
                    exchange.set('backColorCSS', pctChg > 0 ? 'up-back-color' : pctChg === 0 ? 'toolbar-color' : 'down-back-color');
                    exchange.set('fontColorCSS', pctChg > 0 ? 'btn-txt-color' : pctChg === 0 ? 'fore-color' : 'btn-txt-color');
                }
            });
        },

        updateMarketStatusColorCss: function () {
            var exchangeArray = this.get('exchangeArray');

            _ember.default.$.each(exchangeArray, function (key, exchange) {
                if (exchange) {
                    var stat = exchange.get('stat');

                    if (stat === 2 || stat === 1) {
                        exchange.set('colorCss', 'up-fore-color');
                    } else if (stat === 3 || stat === 4) {
                        exchange.set('colorCss', 'down-fore-color');
                    }
                }
            });
        }.observes('exchangeArray.@each.stat'),

        updateMarketDate: function () {
            var exchangeArray = this.get('exchangeArray');

            _ember.default.$.each(exchangeArray, function (key, exchange) {
                if (exchange) {
                    if (exchange.get('stat') === 3) {
                        var dateTimeStr = _formatters.default.formatToDate(exchange.date, exchange.get('tzo'));

                        exchange.set('isEnabledTimer', false);
                        exchange.set('marketTime', dateTimeStr);
                    } else {
                        exchange.set('isEnabledTimer', true);
                    }
                }
            });
        }.observes('exchangeArray.@each.date', 'exchangeArray.@each.stat'),

        setMarketTime: function () {
            _ember.default.run.once(this, this._setMarketTime);
        }.observes('exchangeArray.@each.time'),

        _setMarketTime: function _setMarketTime() {
            var exchangeArray = this.get('exchangeArray');

            _ember.default.$.each(exchangeArray, function (key, exchange) {
                if (exchange && exchange.get('isEnabledTimer')) {
                    var adjustedTime = _formatters.default.getAdjustedDateTime(exchange.get('time'), exchange.get('tzo'));
                    exchange.set('marketTime', _formatters.default.convertToDisplayTimeFormat(adjustedTime));
                }
            });
        },

        actions: {
            loadSubMarketOverview: function loadSubMarketOverview(exchange) {
                var priceUI = _sharedService.default.getService('priceUI');

                if (priceUI && _ember.default.$.isFunction(priceUI.showChildView)) {
                    var widgetController = _controllerFactory.default.createController(this.container, 'controller:price/widgets/sub-market-overview');
                    var viewName = 'price/widgets/sub-market-overview';
                    var languageLabel = this.get('app').lang.labels.subMarket;

                    widgetController.initializeWidget({ wn: 'subMarketOverview' }, { widgetArgs: { exg: exchange } });
                    priceUI.showChildView(viewName, widgetController, languageLabel, 'sub-market-overview-' + this.get('wkey'));
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/about-us', ['exports', 'ember', '../../../base-controller', '../../../../config/app-config', '../../../../models/shared/shared-service'], function (exports, _ember, _baseController, _appConfig, _sharedService) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        address: '',
        longVersion: _appConfig.default.longVersion,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.aboutUs);
        },

        onPrepareData: function onPrepareData() {
            var that = this;
            var itemArray = [];
            var configArray = _appConfig.default.customisation.supportedContacts;

            if (configArray && configArray.length > 0) {
                _ember.default.$.each(configArray, function (key, item) {
                    var contact = {};
                    var lanKey = item.key;

                    if (item.desc) {
                        contact.desc = that.get('app').lang.labels[item.desc];
                    }

                    if (lanKey) {
                        contact.value = item.value;
                        contact.lanKey = that.get('app').lang.labels[lanKey] + ' : ';

                        if (item.type === 'T') {
                            contact.isTel = true;
                        } else if (item.type === 'E') {
                            contact.isEmail = true;
                        } else if (item.type === 'U') {
                            contact.isUrl = true;
                        }

                        itemArray[itemArray.length] = contact;
                    }
                });
            }

            this.set('address', this.get('app').lang.labels.brokerageAddress);
            this.set('supportedContacts', itemArray);
            this.set('imgSrc', _appConfig.default.customisation.imgSrc);
        },

        onAfterRender: function onAfterRender() {
            this.bindAnnLinks();
        },

        bindAnnLinks: function bindAnnLinks() {
            var childViewLoadDelay = 800;

            _ember.default.run.later(function () {
                var bodyContainer = _ember.default.$('#aboutUsPopup');

                if (bodyContainer) {
                    bodyContainer.on('click', 'a', function (event) {
                        var linkTarget = this.href;
                        event.preventDefault();

                        if (_appConfig.default.customisation.isMobile && _ember.default.isIos) {
                            window.open(linkTarget, '_blank', 'location=yes,enableViewPortScale=yes');
                        } else {
                            window.open(linkTarget, '_system');
                        }
                    });
                }
            }, childViewLoadDelay);
        },

        isArabic: function () {
            return _sharedService.default.userSettings.currentLanguage === 'AR';
        }.property('sharedService.userSettings.currentLanguage'),

        actions: {
            onBackToLogin: function onBackToLogin() {
                _ember.default.$('div#contactUsContainer').removeClass('display-block');
                _ember.default.$('div#contactUsContainer').addClass('display-none');

                if (_ember.default.$.isFunction(this.get('loginViewCallbackFn'))) {
                    this.get('loginViewCallbackFn')();
                    _sharedService.default.getService('sharedUI').resetUserDetails();
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/alert-price', ['exports', 'ember', '../alert-price', '../../../../config/price-widget-config', '../../../../views/table/mobile/alert/alert-symbol-cell', '../../../../views/table/mobile/alert/alert-criteria-cell', '../../../../views/table/mobile/alert/alert-status-cell', '../../../../views/table/mobile/context-menu-cell'], function (exports, _ember, _alertPrice, _priceWidgetConfig, _alertSymbolCell, _alertCriteriaCell, _alertStatusCell, _contextMenuCell) {
    'use strict';

    exports.default = _alertPrice.default.extend({
        contextPath: 'price/widgets/mobile/alert-context-panel',
        defaultColumnIds: _priceWidgetConfig.default.alertHistory.defaultColumnIds,

        onLoadWidget: function onLoadWidget() {
            this.setCellViewsScopeToGlobal();
            this.set('defaultColumnMapping', _priceWidgetConfig.default.alertHistory.defaultColumnMapping);
            this.set('parameters', this.getDataForDropdown(_priceWidgetConfig.default.alert.parameters));
            this.set('criteria', this.getDataForDropdown(_priceWidgetConfig.default.alert.criteria));
            this.set('title', this.get('app').lang.labels.alerts);
            this.set('valueDecimalPlaces', this.get('settings').noOfDefaultDecimalsForValues);

            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();

            if (this.get('isChildView')) {
                this.set('searchPopupTop', this.get('searchPopupHeights').childViewEnabledTop);
                this.set('tableHeight', 'alert-child-view-height');
            } else {
                this.set('searchPopupTop', this.get('searchPopupHeights').childViewDisabledTop);
                this.set('tableHeight', 'alert-container-height');
            }
        },

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            this._super();
            _ember.default.AlertSymbolCellMobile = _alertSymbolCell.default;
            _ember.default.AlertCriteriaCellMobile = _alertCriteriaCell.default;
            _ember.default.AlertStatusCellMobile = _alertStatusCell.default;
            _ember.default.ContextMenuMobile = _contextMenuCell.default;
        },

        cellViewsForColumns: {
            alertSymbolMobile: 'Ember.AlertSymbolCellMobile',
            alertCriteriaMobile: 'Ember.AlertCriteriaCellMobile',
            alertStatusMobile: 'Ember.AlertStatusCellMobile',
            contextMenuMobile: 'Ember.ContextMenuMobile'
        },

        actions: {
            clickRow: function clickRow(selectedRow) {
                var target = event.target ? event.target : event.srcElement;
                var rowData = selectedRow.getProperties('exg', 'sym', 'inst', 'isEditEnabled');

                if (target) {
                    var cellId = target.attributes && target.attributes.getNamedItem('cell-id') && target.attributes.getNamedItem('cell-id').value ? target.attributes.getNamedItem('cell-id').value : '';
                    var targetArray = _ember.default.$(target).parents('[cell-id=contextMenu]');
                    var targetButtonArray = _ember.default.$(target).parents('[cell-id=menuPanel]');
                    var width;

                    if (rowData) {
                        this.set('rowData', rowData);
                    }

                    if (cellId === 'menuPanel' || targetButtonArray && targetButtonArray.length > 0) {
                        return;
                    }

                    if (targetArray.length > 0) {
                        target = targetArray[0];
                    }

                    if (target.style.width === '100%') {
                        target.style.removeProperty('width');
                        this.set('isContextPanel', false);
                    } else {
                        width = '100%';
                        this.set('isContextPanel', true);

                        if (this.get('previousRow')) {
                            this.get('previousRow').style.removeProperty('width');
                        }
                    }

                    this.set('previousRow', target);
                    target.style.width = width;
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/components/days-range', ['exports', 'ember', '../../../../../utils/utils'], function (exports, _ember, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'price/widgets/mobile/components/days-range',

        position: function () {
            var stock = this.get('stock');
            var value = 0;

            if (stock) {
                var lowValue = stock.low;
                var highValue = stock.high;
                var currentValue = stock.ltp;
                var diff = highValue - lowValue;

                if (diff !== 0) {
                    value = parseInt((currentValue - lowValue) / diff * 100, 10);
                    value = value > 0 && value <= 100 ? value : 0;
                }

                return value;
            }
        }.property('stock.ltp', 'stock.low', 'stock.high'),

        dotColor: function () {
            var position = this.get('position');

            if (position < 50) {
                return this.get('fiftyTwoWkLowColor') ? this.get('fiftyTwoWkLowColor') : 'down-back-color';
            } else if (position === 50 || position > 50) {
                return this.get('fiftyTwoWkHighColor') ? this.get('fiftyTwoWkHighColor') : 'up-back-color';
            }
        }.property('position'),

        highValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.high, stock.deci);
        }.property('stock.high'),

        lowValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.low, stock.deci);
        }.property('stock.low'),

        styles: function () {
            return 'left:' + this.get('position') + '%;';
        }.property('position')
    });
});
define('universal-app/controllers/price/widgets/mobile/components/fifty-two-wk-hl', ['exports', 'ember', '../../../../../utils/utils'], function (exports, _ember, _utils) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'price/widgets/mobile/components/fifty-two-wk-hl',

        position: function () {
            var stock = this.get('stock');
            var value = 0;

            if (stock) {
                var lowValue = stock.l52;
                var highValue = stock.h52;
                var currentValue = stock.ltp;
                var diff = highValue - lowValue;

                if (diff !== 0) {
                    value = parseInt((currentValue - lowValue) / diff * 100, 10);
                    value = value > 0 && value <= 100 ? value : 0;
                }

                return value;
            }

            return value;
        }.property('stock.ltp', 'stock.l52', 'stock.h52'),

        dotColor: function () {
            var position = this.get('position');

            if (position < 50) {
                return this.get('fiftyTwoWkLowColor') ? this.get('fiftyTwoWkLowColor') : 'down-back-color';
            } else if (position === 50 || position > 50) {
                return this.get('fiftyTwoWkHighColor') ? this.get('fiftyTwoWkHighColor') : 'up-back-color';
            }
        }.property('position'),

        highValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.h52, stock.deci);
        }.property('stock.h52'),

        lowValue: function () {
            var stock = this.get('stock');
            return _utils.default.formatters.formatNumber(stock.l52, stock.deci);
        }.property('stock.l52'),

        styles: function () {
            return 'left:' + this.get('position') + '%;';
        }.property('position')
    });
});
define('universal-app/controllers/price/widgets/mobile/components/summary-chart', ['exports', 'ember', '../../../../../models/shared/shared-service', '../../../../../models/price/price-constants', '../../../../chart/data/chart-data-provider', '../../../../../models/chart/chart-constants'], function (exports, _ember, _sharedService, _priceConstants, _chartDataProvider, _chartConstants) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'price/widgets/mobile/components/summary-chart',

        exchange: _sharedService.default.getService('price').exchangeDS.getExchange(_sharedService.default.userSettings.price.currentExchange),
        index: '',
        chartId: '',
        cashMapChartData: { columns: [['cashIn', 0], ['cashOut', 0]], lastUpdatedChartValue: 0, lastUpdatedCashInValue: 0 }, // cash map chart data
        lastDrawnIndex: 0, // For main index chart
        indexCss: '', // Index colour
        indexChangeSign: '', // Index sign + or -
        previousMainIndexSide: '=',
        intradayMainIndexChart: null, // Intra-day main index chart object
        cashMapChart: null,
        chartDataProvider: null,
        marketStatusChangeCount: 0,

        /* *
         * Adding main index request to price service
         * This will use user's current exchange and index
         */

        settingIndex: function () {
            var that = this;
            var stock = that.get('stock');
            var chartId = that.get('chartId');

            if (!(that.get('isDestroyed') || that.get('isDestroying'))) {
                that.set('index', stock);
                that.set('chartId', chartId);
            }
        }.observes('stock'),

        symbolChange: function () {
            _ember.default.run.debounce(this, this.onAfterRender, 1000);
        }.observes('stock'),

        onAfterRender: function () {
            var that = this;

            // Separate Market Summary Loading and Chart loading
            _ember.default.run.later(function () {
                if (!(that.get('isDestroyed') || that.get('isDestroying'))) {
                    that.settingIndex();

                    var cDP = _chartDataProvider.default.create({
                        chartCategory: _chartConstants.default.ChartCategory.Intraday,
                        chartDataLevel: _chartConstants.default.ChartDataLevel.IntradayCurrentDay,
                        chartViewPeriod: _chartConstants.default.ChartViewPeriod.OneDay,

                        onData: function onData(ohlcPoint, exg, sym) {
                            that.amendMainIndexChart(ohlcPoint, exg, sym);
                        },

                        onDataChunk: function onDataChunk(chartSymbolObj) {
                            that.updateMainIndexChart(chartSymbolObj);
                        },

                        onErrorFn: function onErrorFn() {}
                    });

                    that.set('chartDataProvider', cDP);
                    cDP.addChartSymbol(that.get('stock').exg, that.get('stock').sym, true);
                    that.get('chartDataProvider').addChartDataSubscription();
                }
            }, 500);
        }.on('didInsertElement'),

        indexInfoSettings: {
            intZero: 0,
            emptyString: '',

            styles: {
                green: 'green',
                darkGreen: 'green-dark',
                red: 'red',
                darkRed: 'red-dark',
                white: 'colour-5',
                upArrow: 'glyphicon-triangle-top glyphicon ',
                downArrow: 'glyphicon-triangle-bottom glyphicon ',
                chartDefaultColor: '#262932',
                cashInColor: '#2ecc71',
                cashOutColor: '#ff6b6b',
                backgroundUp: 'index-change-green',
                backgroundDown: 'index-change-red',
                backgroundZero: 'index-change-none',
                percentageUp: 'index-percentage-green',
                percentageDown: 'index-percentage-red',
                percentageZero: 'index-percentage-none'
            },

            signs: { plus: '+', minus: '-', equal: '=' },

            chartsSettings: {
                cashMapChart: {
                    width: 85,
                    height: 85
                },

                indexChart: {}
            },

            timeInterval: {
                OneSecondInMillis: 1000,
                OneMinuteInMillis: 60000
            },

            chartDrawingThreshold: 2,
            chartValueUpdatingThreshold: 0.5
        },

        /* *
         * This is to updated index relate CSS ( colours and sign +/- )
         * Observes : index.pctChg
         * Change: indexArrowCss , indexChangeSign, indexCss, indexValCss
         */

        updateIndexRelatedCss: function () {
            var indexArrowCss = '';
            var indexCss = '';
            var indexValCss = '';
            var indexChangeSign = '';
            var indexBackgroundCss = '';
            var indexPercentageCss = '';
            var pctChg = this.get('index.pctChg');

            if (pctChg > this.indexInfoSettings.intZero) {
                indexCss = this.indexInfoSettings.styles.darkGreen;
                indexValCss = this.indexInfoSettings.styles.green;
                indexArrowCss = this.indexInfoSettings.styles.upArrow;
                indexChangeSign = this.indexInfoSettings.signs.plus;
                indexBackgroundCss = this.indexInfoSettings.styles.backgroundUp;
                indexPercentageCss = this.indexInfoSettings.styles.percentageUp;
            } else if (pctChg < this.indexInfoSettings.intZero) {
                indexCss = this.indexInfoSettings.styles.darkRed;
                indexValCss = this.indexInfoSettings.styles.red;
                indexChangeSign = '';
                indexArrowCss = this.indexInfoSettings.styles.downArrow;
                indexBackgroundCss = this.indexInfoSettings.styles.backgroundDown;
                indexPercentageCss = this.indexInfoSettings.styles.percentageDown;
            } else {
                indexCss = this.indexInfoSettings.styles.white;
                indexValCss = this.indexInfoSettings.styles.white;
                indexChangeSign = '';
                indexArrowCss = this.indexInfoSettings.emptyString;
                indexBackgroundCss = this.indexInfoSettings.styles.backgroundZero;
                indexPercentageCss = this.indexInfoSettings.styles.percentageZero;
            }

            this.set('indexArrowCss', indexArrowCss);
            this.set('indexChangeSign', indexChangeSign);
            this.set('indexCss', indexCss);
            this.set('indexValCss', indexValCss);
            this.set('indexBackgroundCss', indexBackgroundCss);
            this.set('indexPercentageCss', indexPercentageCss);
        }.observes('index.pctChg'),

        /* *
         * Update main index chart
         * draw chart if chart is null
         */

        onMarketStatusChanged: function () {
            var that = this;
            var stat = this.exchange.get('stat');
            var count = that.get('marketStatusChangeCount');

            if (stat === _priceConstants.default.MarketStatus.Open && that.get('marketStatusChangeCount') > 0) {
                that.drawMainIndexChart([]);
            }

            that.set('marketStatusChangeCount', count + 1);
        }.observes('exchange.stat'),

        updateMainIndexChart: function updateMainIndexChart() {
            var that = this;
            var chartDataArray = that.get('chartDataProvider').getDataArray();
            this.set('lastDrawnIndex', chartDataArray.length - 1);
            if (chartDataArray.length > 1) {
                if (that.intradayMainIndexChart === null) {
                    that.drawMainIndexChart();
                } else {
                    that.intradayMainIndexChart.load({
                        json: chartDataArray,
                        keys: {
                            x: 'DT',
                            value: ['Close']
                        }
                    });
                }
            }
        },

        amendMainIndexChart: function amendMainIndexChart(ohlcPoint) {
            var that = this;

            if (that.intradayMainIndexChart === null) {
                that.drawMainIndexChart();
            } else {
                if (ohlcPoint) {
                    that.intradayMainIndexChart.flow({
                        json: [ohlcPoint],
                        keys: {
                            x: 'DT',
                            value: ['Close']
                        },
                        length: 0
                    });
                }
            }
        },

        /* *
         * Draw main index chart
         */
        drawMainIndexChart: function drawMainIndexChart(chartDataArray) {
            var that = this;
            var chartData = chartDataArray ? chartDataArray : that.get('chartDataProvider').getDataArray();
            var chartWidth = _ember.default.$(window).width() - 50;

            this.intradayMainIndexChart = c3.generate({
                data: {
                    json: chartData,
                    keys: {
                        x: 'DT',
                        value: ['Close']
                    },
                    types: {
                        Close: 'area'
                    },
                    colors: {
                        Close: that.getChartColor()
                    }
                },
                area: {
                    zerobased: false
                },
                point: {
                    show: false
                },
                size: {
                    width: chartWidth,
                    height: 100
                },
                padding: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 10
                },
                bindto: '#' + that.chartId,
                axis: {
                    x: {
                        type: 'timeseries',
                        tick: {
                            // format: '%m %d',
                            format: '%H:%M',
                            culling: {
                                max: 3
                                // count: 5
                            } }
                    },
                    y: { show: false }
                },
                legend: {
                    show: false
                },
                tooltip: {
                    show: false
                }
            });
        },

        /* *
         * this is to update main index colour real time
         * change chart colour if only
         * Observe index.pctChg
         */
        updateMainIndexChartColors: function () {
            var pctChg = this.get('index.pctChg');
            var previousMainIndexSide = this.get('previousMainIndexSide');
            var currentMainIndexSide = '';
            var that = this;

            if (pctChg > this.indexInfoSettings.intZero) {
                currentMainIndexSide = this.indexInfoSettings.signs.plus;
            } else if (pctChg < this.indexInfoSettings.intZero) {
                currentMainIndexSide = this.indexInfoSettings.signs.minus;
            } else {
                currentMainIndexSide = this.indexInfoSettings.signs.equal;
            }

            if (previousMainIndexSide !== currentMainIndexSide && this.intradayMainIndexChart && this.intradayMainIndexChart.data) {
                this.set('previousMainIndexSide', currentMainIndexSide);

                this.intradayMainIndexChart.data.colors({
                    Close: that.getChartColor()
                });
            }
        }.observes('stock.pctChg'),

        /* *
         * This is  to get top panel chart colour based on change val
         * @param pctChgVal  percentage change
         * @returns {string} colour
         */
        getChartColor: function getChartColor(pctChgVal) {
            var pctChg = pctChgVal || this.get('index.pctChg');
            var lineColor = '#559fd6';

            if (pctChg > this.indexInfoSettings.intZero) {
                lineColor = '#19703e';
            } else if (pctChg < this.indexInfoSettings.intZero) {
                lineColor = '#842424';
            } else {
                lineColor = '#559fd6';
            }

            return lineColor;
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/components/title-index-panel', ['exports', 'ember', '../../../../../utils/utils', '../../../../../app-events', '../../../../../models/shared/shared-service', '../../../../../components/base-component', '../../../../../models/shared/language/language-data-store'], function (exports, _ember, _utils, _appEvents, _sharedService, _baseComponent, _languageDataStore) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        layoutName: 'trade/widgets/mobile/components/title-index-panel',
        index: '',
        priceService: _sharedService.default.getService('price'),
        wkey: 'title-index-panel-mobile',
        selectedLink: 1,

        initialize: function () {
            this.set('appLayout', _languageDataStore.default.getLanguageObj());
            _appEvents.default.subscribeLanguageChanged(this, this.get('wkey'));
            _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);

            this.onPrepareData();
        }.on('init'),

        onPrepareData: function onPrepareData() {
            this.setExchangeData();
        },

        onAddSubscription: function onAddSubscription() {
            _sharedService.default.getService('price').addExchangeRequest(this.get('exchange').exg);
            _sharedService.default.getService('price').addIndexRequest(this.get('exchange').exg, this.get('exchange').mainIdx);
        },

        setExchangeData: function setExchangeData() {
            var exgCode = this.get('exg') ? this.get('exg') : _sharedService.default.userSettings.price.currentExchange;
            this.set('exchange', _sharedService.default.getService('price').exchangeDS.getExchange(exgCode));

            var mainIndex = this.get('exchange').mainIdx;
            this.set('index', _sharedService.default.getService('price').stockDS.getStock(exgCode, mainIndex ? mainIndex : _sharedService.default.userSettings.price.defaultIndex, _utils.default.AssetTypes.Indices));
            this.onAddSubscription();
        },

        languageChanged: function languageChanged() {
            this.onPrepareData();
        },

        onWidgetKeysChange: function onWidgetKeysChange(args) {
            if (args) {
                var that = this;

                _ember.default.$.each(args, function (prop, val) {
                    that.set(prop, val);
                });
            }

            this.onPrepareData();
        },

        indexContainerCSS: function () {
            return this.get('index.pctChg') >= 0 ? 'up-back-color' : 'down-back-color';
        }.property('index.pctChg')
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-account-summary', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.accountSummary);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-alert', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.alerts);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-customize', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.custom);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-depth', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.marketDepth);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-index', ['exports', '../../../../base-controller', '../../../../../models/shared/shared-service', '../../../../controller-factory'], function (exports, _baseController, _sharedService, _controllerFactory) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.help);
        },

        isArabic: function () {
            return _sharedService.default.userSettings.currentLanguage === 'AR';
        }.property('sharedService.userSettings.currentLanguage'),

        actions: {
            invokeWidget: function invokeWidget(widgetName) {
                var widgetController = _controllerFactory.default.createController(this.container, 'controller:price/widgets/mobile/help/' + widgetName);
                var viewName = 'price/widgets/mobile/help/' + widgetName;

                widgetController.initializeWidget({ wn: 'help' });
                _sharedService.default.getService('priceUI').showChildView(viewName, widgetController, widgetController.get('title'), 'help-' + widgetName);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-indices', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.indices);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-market', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.market);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-order-list', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.orderList);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-overview', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.summary);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-portfolio', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.portfolio);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-quote', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.quote);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-time-and-sales', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.timeAndSales);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-top-stock', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.topStocks);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-trade', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.trading);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/help/guide-watch-list', ['exports', '../../../../base-controller'], function (exports, _baseController) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: '',
        isBackToPrev: true,

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.watchList);
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/indices-list', ['exports', 'ember', '../../../../controllers/shared/table-controller', '../../../../models/shared/shared-service', '../../../../config/price-widget-config', '../../../../app-events', '../../../../views/table/dual-cells/header-cell', '../../../../views/table/cell', '../../../../views/table/dual-cells/dual-change-cell', '../../../../views/table/dual-cells/dual-text-cell', '../../../../views/table/up-down-cell', '../../../../views/table/table-row'], function (exports, _ember, _tableController, _sharedService, _priceWidgetConfig, _appEvents, _headerCell, _cell, _dualChangeCell, _dualTextCell, _upDownCell, _tableRow) {
    'use strict';

    exports.default = _tableController.default.extend({
        textFilter: null,
        priceService: _sharedService.default.getService('price'),
        exchange: _sharedService.default.getService('price').exchangeDS.getExchange(_sharedService.default.userSettings.price.currentExchange),
        columnDeclarations: [],
        wkey: 'right-wl', // TODO [arosha] remove this when 'wkey' is implemented to right panel

        onLoadWidget: function onLoadWidget() {
            this.setCellViewsScopeToGlobal();
            this.set('columnDeclarations', _priceWidgetConfig.default.watchList.quoteColumns);

            // TODO [AROSHA] Move this Scroll enable method to global.
            _ember.default.run.later(function () {
                _ember.default.$('.nano').nanoScroller();
            }, 200);
        },

        onPrepareData: function onPrepareData() {
            var exchange = this.get('exchange').exg;
            this.priceService.addFullMarketIndexRequest(exchange);
            this.loadContent();
        },

        onClearData: function onClearData() {
            var exchange = this.get('exchange').exg;
            this.priceService.removeFullMarketIndexRequest(exchange);
            this.set('content', _ember.default.A());
            this.set('masterContent', _ember.default.A());
        },

        onUnloadWidget: function onUnloadWidget() {
            this.set('columnDeclarations', []);
        },

        onLanguageChanged: function onLanguageChanged() {
            this.set('columnDeclarations', []);
            this.onLoadWidget();
        },

        loadContent: function loadContent() {
            var exchange = this.get('exchange').exg;
            var stocksOfExg = this.priceService.stockDS.get('indexMapByExg');

            this.set('content', stocksOfExg[exchange]);
            this.set('masterContent', stocksOfExg[exchange]);
        },

        checkFilterMatch: function checkFilterMatch(stock, textFilter) {
            var field;
            var isMatchedTextFilter = !textFilter; // If a argument is false, that means that filter is not applied

            if (!isMatchedTextFilter) {
                for (field in stock) {
                    if (stock.hasOwnProperty(field) && (field === 'dSym' || field === 'sym' || field === 'sDes' || field === 'lDes') && stock[field] && stock[field].toString().slice(0, textFilter.length).toLowerCase() === textFilter.toLowerCase()) {
                        isMatchedTextFilter = true;
                    }
                }
            }

            return isMatchedTextFilter;
        },

        filterStocks: function () {
            var filteredStocks = this.get('masterContent').filter(function (that) {
                //eslint-disable-line
                return function (stock) {
                    var textFilter = that.utils.validators.isAvailable(that.get('textFilter')) ? that.get('textFilter') : false; // If any filter is false, that means that filter is not applied

                    if (textFilter) {
                        return that.checkFilterMatch(stock, textFilter);
                    } else {
                        return true;
                    }
                };
            }(this));

            this.set('content', filteredStocks);
        }.observes('textFilter', 'masterContent.@each'),

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            _ember.default.HeaderCell = _headerCell.default;
            _ember.default.Cell = _cell.default;
            _ember.default.DualChangeCell = _dualChangeCell.default;
            _ember.default.DualTextCell = _dualTextCell.default;
            _ember.default.UpDownCell = _upDownCell.default;
            _ember.default.TableRow = _tableRow.default;
        },

        cellViewsForColumns: {
            dualText: 'Ember.DualTextCell',
            upDown: 'Ember.UpDownCell',
            dualChange: 'Ember.DualChangeCell'
        },

        actions: {
            setLink: function setLink(option) {
                this.set('selectedLink', option.code);
            },

            triggerSymbolChange: function triggerSymbolChange(selectedRow) {
                var rowData = selectedRow.getProperties('exg', 'sym', 'inst');

                if (rowData) {
                    _appEvents.default.onSymbolChanged(rowData.sym, rowData.exg, rowData.inst, this.get('selectedLink'));
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.rowClick, ['sym:', rowData.sym, '~', rowData.exg].join(''));

                    // Limit filter event trigger only while searching and clicking a row
                    if (this.get('textFilter') && this.get('textFilter') !== '') {
                        this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.search, ['filter:', this.get('textFilter')].join(''));
                    }
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/indices', ['exports', 'ember', './watch-list/watch-list', '../../../../app-events', '../../../../models/shared/shared-service'], function (exports, _ember, _watchList, _appEvents, _sharedService) {
    'use strict';

    exports.default = _watchList.default.extend({
        indicesArray: _ember.default.A(),
        isIndexView: true,
        disableExpand: true,
        sortAscending: true,
        isTableControlPanelDisabled: true,

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            this._super();

            var isDefaultExg = _sharedService.default.getService('price').userDS.isPriceUserExchange(this.get('exg'));
            this.set('exg', isDefaultExg ? this.get('exg') : _sharedService.default.userSettings.price.userDefaultExg);

            // this.set('exg', sharedService.userState.globalArgs.exg);
            _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
        },

        onPrepareData: function onPrepareData() {
            var exg = this.get('exg');
            this.priceService.addFullMarketIndexRequest(exg);

            this.set('sortProperties', ['dSym']);
            this.set('indicesArray', this.priceService.stockDS.getIndexCollectionByExchange(exg));
            this.loadContent();
        },

        loadContent: function loadContent() {
            var indicesList = this.priceService.stockDS.getIndexCollectionByExchange(this.get('exg'));

            this.set('content', indicesList);
            this.set('masterContent', indicesList);
        },

        onClearData: function onClearData() {
            var exg = this.get('exg');
            this.priceService.removeFullMarketIndexRequest(exg);

            this.set('content', _ember.default.A());
            this.set('masterContent', _ember.default.A());
            this.set('indicesArray', _ember.default.A());
        },

        actions: {
            expandColumnAction: function expandColumnAction() {
                this.set('isExpandedView', false);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/market-overview-tab', ['exports', 'ember', '../../../base-controller', './market-summary/components/market-status-panel'], function (exports, _ember, _baseController, _marketStatusPanel) {
  'use strict';

  exports.default = _baseController.default.extend({});


  _ember.default.Handlebars.helper('market-status-panel', _marketStatusPanel.default);
});
define('universal-app/controllers/price/widgets/mobile/market-summary/components/chart-panel', ['exports', 'ember', '../../../../../../models/shared/shared-service', '../../../../../../config/app-config', '../../components/fifty-two-wk-hl', '../../components/days-range', '../../../../../../components/base-component'], function (exports, _ember, _sharedService, _appConfig, _fiftyTwoWkHl, _daysRange, _baseComponent) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        layoutName: 'price/widgets/mobile/market-summary/components/chart-panel',
        priceService: _sharedService.default.getService('price'),
        exchange: _sharedService.default.getService('price').exchangeDS.getExchange(_sharedService.default.userSettings.price.currentExchange),
        index: '',
        colorCSS: 'fore-color',
        backColorCSS: 'toolbar-color',
        fontColorCSS: 'fore-color',
        ltpIconCSS: '',

        onPrepareData: function () {
            this.settingIndex();
            this.priceService.addExchangeRequest(_sharedService.default.userSettings.price.currentExchange); // TODO [Dasun] Add remove request
            this.addMainIndexRequest();
            this.changeCss();
        }.on('didInsertElement'),

        onClear: function () {
            this.priceService.removeExchangeRequest(this.get('exchange.exg'));
        }.on('willDestroyElement'),

        settingIndex: function () {
            var stock = this.get('stock');
            this.set('index', stock);
        }.observes('stock'),

        changeCss: function () {
            var that = this;
            var stock = that.get('stock');

            if (stock) {
                that.set('colorCSS', stock.pctChg > 0 ? 'up-fore-color' : stock.pctChg === 0 ? 'fore-color' : 'down-fore-color');
                that.set('ltpIconCSS', stock.pctChg > 0 ? 'glyphicon-triangle-top' : stock.pctChg < 0 ? 'glyphicon-triangle-bottom' : '');
                that.set('backColorCSS', stock.pctChg > 0 ? 'up-back-color' : stock.pctChg === 0 ? 'toolbar-color' : 'down-back-color');
                that.set('fontColorCSS', stock.pctChg > 0 ? 'btn-txt-color' : stock.pctChg === 0 ? 'fore-color' : 'btn-txt-color');
            }
        }.observes('stock', 'stock.pctChg'),

        addMainIndexRequest: function addMainIndexRequest() {
            this.priceService.addIndexRequest(_sharedService.default.userSettings.price.currentExchange, _sharedService.default.userSettings.price.currentIndex);
        },

        actions: {
            onNavigateIndicesTab: function onNavigateIndicesTab() {
                var marketMenuId = _appConfig.default.widgetId.marketMenuId;
                var indicesTabId = _appConfig.default.widgetId.indicesTabId;

                if (marketMenuId && indicesTabId) {
                    _sharedService.default.getService('sharedUI').navigateMenu(marketMenuId, indicesTabId);
                }
            }
        }
    });


    _ember.default.Handlebars.helper('fifty-two-wk-hl', _fiftyTwoWkHl.default);
    _ember.default.Handlebars.helper('days-range', _daysRange.default);
});
define('universal-app/controllers/price/widgets/mobile/market-summary/components/market-status-panel', ['exports', 'ember', '../../../../../../models/shared/shared-service', '../../../../../../utils/formatters', '../../../../../../helpers/responsive-handler', '../../../../../../app-events', '../../../../../../components/base-component'], function (exports, _ember, _sharedService, _formatters, _responsiveHandler, _appEvents, _baseComponent) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        layoutName: 'price/widgets/mobile/market-summary/components/market-status-panel',
        priceService: _sharedService.default.getService('price'),

        exchange: '',
        marketTime: '',
        isEnabledTimer: false,
        colorCss: 'down-fore-color',
        wkey: 'market-status-panel-mobile',

        onLoad: function () {
            this.set('selectedLink', this.get('selectedLink') ? this.get('selectedLink') : 1);
            _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
            this._setExchange();
        }.on('init'),

        _setExchange: function _setExchange() {
            var userExg = _sharedService.default.userState.globalArgs.exg;
            var isDefaultExg = _sharedService.default.getService('price').userDS.isPriceUserExchange(userExg);

            userExg = isDefaultExg ? userExg : _sharedService.default.userSettings.price.userDefaultExg;

            this.priceService.addExchangeRequest(userExg);
            this.set('exchange', this.priceService.exchangeDS.getExchange(userExg));
        },

        onClear: function () {
            this.priceService.removeExchangeRequest(this.get('exchange.exg'));
        }.on('willDestroyElement'),

        isMoreMarketAvailable: function () {
            return this.priceService.userDS.get('isMultipleUserExchangesAvailable');
        }.property('priceService.userDS.isMultipleUserExchangesAvailable'),

        isSubMarketAvailable: function () {
            var exgCode = this.get('exchange.exg');

            return this.get('isShowSubMarketDropdown') && exgCode && this.priceService.exchangeDS.isSubMarketAvailable(exgCode);
        }.property('exchange'),

        updateMarketTime: function () {
            if (this.exchange.get('stat') === 3) {
                var dateTimeStr = _formatters.default.formatToDate(this.exchange.date, this.exchange.get('tzo'));
                this.set('isEnabledTimer', false);
                this.set('marketTime', dateTimeStr);
                // this.set('colorCss', 'down-fore-color'); // this css will update from 'updateMarketStatusColorCss' method below
            } else {
                this.set('isEnabledTimer', true);
            }
        }.observes('exchange.date', 'exchange.stat'),

        updateMarketStatusColorCss: function () {
            var stat = this.exchange.get('stat');

            if (stat === 2 || stat === 1) {
                this.set('colorCss', 'up-fore-color');
            } else if (stat === 3 || stat === 4) {
                this.set('colorCss', 'down-fore-color');
            }
        }.observes('exchange.stat'),

        setMarketTime: function () {
            if (this.get('isEnabledTimer') && this.get('exchange')) {
                var adjustedTime = _formatters.default.getAdjustedDateTime(this.get('exchange').time, this.exchange.get('tzo'));
                this.set('marketTime', _formatters.default.convertToDisplayTimeFormat(adjustedTime));
                // this.set('colorCss', 'up-fore-color'); // this css will update from 'updateMarketStatusColorCss' method below
            }
        }.observes('exchange.time'),

        onResponsive: function onResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            if (responsiveArgs.responsiveLevel >= 1) {
                controller.set('lblClass', 'wdgttl-drp-dwn-btn-width font-x-l');
            } else {
                controller.set('lblClass', 'font-x-l');
            }
        },

        onResize: function onResize() {
            var that = this;

            if (that.responsive) {
                var resHandler = that.responsive;

                // Call onResize when values are changed
                _ember.default.run.debounce(resHandler, 'onResize', 1);
            }
        },

        initializeResponsive: function () {
            var that = this;

            _ember.default.run.next(function () {
                that.set('responsive', _responsiveHandler.default.create({
                    controller: that,
                    widgetId: 'market-status-panel',
                    callback: that.onResponsive
                }));

                that.responsive.addList('subMarket-free', [{ id: 'subMarketDropdown', width: 5, responsiveMarginRatio: 2 }]);

                that.responsive.initialize();
            });
        }.on('didInsertElement'),

        actions: {
            setWlExchange: function setWlExchange(exchg) {
                this.priceService.exchangeDS.getExchangeMetadata(exchg.code, true);
                _appEvents.default.onExchangeChanged(this.get('selectedLink'), exchg.code);

                this.onClear();
                this._setExchange();
            },

            subMarketChange: function subMarketChange(mktId) {
                _appEvents.default.onSubMarketChanged(this.get('selectedLink'), mktId);
                this.onResize();
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/market-summary/market-summary', ['exports', 'ember', '../../../../base-array-controller', '../../../../../models/shared/shared-service', '../market-summary/components/chart-panel', '../../mobile/components/summary-chart', '../../../../../utils/utils', '../../../../../app-events', '../../../../controller-factory', '../../../../../components/stk-specific-components/cash-map', '../../../../../config/app-config'], function (exports, _ember, _baseArrayController, _sharedService, _chartPanel, _summaryChart, _utils, _appEvents, _controllerFactory, _cashMap, _appConfig) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        chartId: 'indexChartMs',
        chartController: undefined,
        subWidgetArray: [],

        onLoadWidget: function onLoadWidget() {
            var isDefaultExg = _sharedService.default.getService('price').userDS.isPriceUserExchange(this.get('exg'));
            this.set('exg', isDefaultExg ? this.get('exg') : _sharedService.default.userSettings.price.userDefaultExg);

            _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
        },

        onPrepareData: function onPrepareData() {
            this.set('exchange', _sharedService.default.getService('price').exchangeDS.getExchange(this.get('exg')));

            var mainIndex = this.get('exchange').mainIdx;
            this.set('index', _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), mainIndex ? mainIndex : _sharedService.default.userSettings.price.defaultIndex, _utils.default.AssetTypes.Indices));

            this._refreshSubWidgets();
        },

        onAddSubscription: function onAddSubscription() {
            _sharedService.default.getService('price').addExchangeRequest(this.get('exg'));
            _sharedService.default.getService('price').addIndexRequest(this.get('exg'), this.get('exchange').mainIdx);
        },

        onRemoveSubscription: function onRemoveSubscription() {
            _sharedService.default.getService('price').removeExchangeRequest(this.get('exg'));
            _sharedService.default.getService('price').removeIndexRequest(this.get('exg'), this.get('exchange').mainIdx);
        },

        onAfterRender: function onAfterRender() {
            var that = this;

            this.set('subWidgetArray', []);
            this._renderChart();

            _ember.default.run.later(function () {
                var route = that.container.lookup('route:application');
                var viewName = 'price/widgets/announcement/announcement';
                var marketNewsController = _controllerFactory.default.createController(that.container, 'controller:' + viewName);

                that.set('marketNewsController', marketNewsController);

                route.render(viewName, {
                    into: 'price/containers/mobile/market-summary-tab',
                    outlet: 'w2',
                    controller: marketNewsController
                });

                var widgetDef = { id: 1, wn: 'price.widgets.announcement.announcement' };
                var widgetArgs = { widgetArgs: { showAnnTabs: false } };

                marketNewsController.initializeWidget(widgetDef, widgetArgs, that.widgetContainer, that.menuContent, that.tabContent);
                that.get('subWidgetArray')[that.subWidgetArray.length] = marketNewsController;
            }, 1);
        },

        onLanguageChanged: function onLanguageChanged(lang) {
            var marketNewsController = this.get('marketNewsController');

            if (marketNewsController) {
                marketNewsController.onLanguageChanged(lang);
            }

            this._renderChart();
        },

        onClearData: function onClearData() {
            this.set('stock', {});
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'));

            this.closeSubWidgets();
            this.set('subWidgetArray', []);
        },

        upsDownsNoChgValueArray: function () {
            var exg = this.get('exchange');
            var ups = exg ? exg.ups : undefined;
            var down = exg ? exg.dwns : undefined;
            var unchanged = exg ? exg.nChg : undefined;

            var maxValue = Math.max(ups, down, unchanged);

            var upsDownsNoChgValueArray = [{ value: ups, barClass: 'progress-bar up-back-color', barWidth: '' }, { value: down, barClass: 'progress-bar down-back-color', barWidth: '' }, { value: unchanged, barClass: 'progress-bar highlight-back-color-2', barWidth: '' }];

            _ember.default.$.each(upsDownsNoChgValueArray, function (index, item) {
                var percentage = 0;

                if (isNaN(item.value) || item.value === 0 || maxValue === 0) {
                    percentage = 0;
                } else {
                    percentage = Math.round(item.value / maxValue * 90) + 10;
                }

                item.barWidth = 'width:' + percentage + '%;';
            });

            return upsDownsNoChgValueArray;
        }.property('exchange.ups', 'exchange.dwns', 'exchange.nChg'),

        ytdCss: function () {
            return this.get('index.pctYtd') > 0 ? 'up-fore-color' : this.get('index.pctYtd') < 0 ? 'down-fore-color' : 'fore-color';
        }.property('index.pctYtd'),

        netCashCss: function () {
            return this.get('exchange.netCashPer') > 0 ? 'up-fore-color' : this.get('exchange.netCashPer') < 0 ? 'down-fore-color' : 'fore-color';
        }.property('exchange.netCashPer'),

        _renderChart: function _renderChart() {
            var controllerString = 'controller:price/widgets/mobile/chart/quote-chart';
            var routeString = 'price/widgets/mobile/chart/quote-chart';
            var widgetKey = this.get('wkey') + '-chart';
            var widgetController = _controllerFactory.default.createController(this.container, controllerString);

            widgetController.set('sym', this.get('index.sym'));
            widgetController.set('exg', this.get('exchange.exg'));
            widgetController.set('inst', this.get('index.inst'));
            widgetController.set('wkey', widgetKey);
            widgetController.set('isShowTitle', false);
            widgetController.set('hideWidgetLink', true);
            widgetController.set('isDisableChartControls', true);
            widgetController.set('isShareIconDisabled', this.get('isShareIconDisabled'));

            widgetController.initializeWidget({ wn: controllerString.split('/').pop() });
            var route = this.container.lookup('route:application');

            route.render(routeString, {
                into: 'price/widgets/mobile/market-summary/market-summary',
                outlet: 'marketChartOutlet',
                controller: widgetController
            });

            this.get('subWidgetArray')[this.subWidgetArray.length] = widgetController;
            _appEvents.default.subscribeThemeChanged(widgetController, 'market-summary-chart');
        },

        _refreshSubWidgets: function _refreshSubWidgets() {
            var that = this;
            var subWidgetArray = this.get('subWidgetArray');

            _ember.default.$.each(subWidgetArray, function (index, widgetController) {
                if (widgetController) {
                    widgetController.onWidgetKeysChange({
                        sym: that.get('index.sym'),
                        exg: that.get('exchange.exg'),
                        inst: that.get('index.inst')
                    });
                }
            });
        },

        closeSubWidgets: function closeSubWidgets() {
            var subWidgetArray = this.get('subWidgetArray');

            _ember.default.$.each(subWidgetArray, function (index, widgetController) {
                if (widgetController && widgetController.closeWidget) {
                    widgetController.closeWidget();
                }
            });
        },

        actions: {
            onNavigateTopStocks: function onNavigateTopStocks() {
                var marketMenuId = _appConfig.default.widgetId.marketMenuId;
                var topStocksTabId = _appConfig.default.widgetId.topStocksTabId;

                if (marketMenuId && topStocksTabId) {
                    _sharedService.default.getService('sharedUI').navigateMenu(marketMenuId, topStocksTabId);
                }
            }
        }
    });


    _ember.default.Handlebars.helper('chart-panel', _chartPanel.default);
    _ember.default.Handlebars.helper('summary-chart', _summaryChart.default);
    _ember.default.Handlebars.helper('cash-map', _cashMap.default);
});
define('universal-app/controllers/price/widgets/mobile/option-chain', ['exports', 'ember', '../../../../app-events', '../option-chain', '../../../../config/price-widget-config'], function (exports, _ember, _appEvents, _optionChain, _priceWidgetConfig) {
    'use strict';

    exports.default = _optionChain.default.extend({
        oneWayContent: _ember.default.computed.oneWay('arrangedContent'),
        nearMoney: false,
        currentIndex: 0,
        enableQuoteSummary: false,
        rowHeight: '',

        onLoadWidget: function onLoadWidget() {
            this._super();
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
            this.set('rowHeight', _priceWidgetConfig.default.singleRowHeight);
        },

        onPrepareData: function onPrepareData() {
            this._super();
            this.set('stock', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym')));
        },

        setNearMoney: function () {
            var nearMoney = 1;
            var allOption = 0;
            var nearMonOption = this.get('nearMoney') ? nearMoney : allOption;
            var optionPeriod = this.get('defaultPeriod') ? this.get('defaultPeriod') : '';

            this._sendDataRequest({ optPeriod: optionPeriod, optListType: 0, nearMon: nearMonOption });
        }.observes('nearMoney'),

        updatePercentageChangeCss: function () {
            var stock = this.get('stock');

            this.set('colorCSS', stock.pctChg > 0 ? 'up-fore-color' : stock.pctChg === 0 ? 'fore-color' : 'down-fore-color');
            this.set('ltpIconCSS', stock.pctChg > 0 ? 'glyphicon-triangle-top' : stock.pctChg < 0 ? 'glyphicon-triangle-bottom' : '');
            this.set('backColorCSS', stock.pctChg > 0 ? 'up-back-color' : stock.pctChg === 0 ? 'toolbar-color' : 'down-back-color');
            this.set('fontColorCSS', stock.pctChg > 0 ? 'btn-txt-color' : stock.pctChg === 0 ? 'fore-color' : 'btn-txt-color');
        }.observes('stock', 'stock.pctChg'),

        onUnloadWidget: function onUnloadWidget() {
            this._super();
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        onLanguageChanged: function onLanguageChanged() {
            this._super();
            this.onLoadWidget();
            this.refreshTableComponent();
        },

        actions: {
            setOptionPeriod: function setOptionPeriod(periodOption) {
                var that = this;
                var optPeriodArray = this.get('optPeriodArray');

                _ember.default.$.each(optPeriodArray, function (key, value) {
                    if (periodOption.code === value.code) {
                        that.set('currentIndex', key);
                    }
                });

                this._setOptionPeriod(periodOption);
            },

            nextMonth: function nextMonth(isForward) {
                var currentOptPeriodIndex = this.get('currentIndex');
                var optPeriodArray = this.get('optPeriodArray');

                var newOptPeriodCode = isForward ? ++currentOptPeriodIndex : --currentOptPeriodIndex;

                if (optPeriodArray && newOptPeriodCode > -1 && newOptPeriodCode < optPeriodArray.length) {
                    this.set('currentIndex', newOptPeriodCode);
                    this.set('currentOpt', optPeriodArray[newOptPeriodCode].code);

                    this._setOptionPeriod(optPeriodArray[newOptPeriodCode]);
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/quote-overview-tab', ['exports', 'ember', '../../../base-controller', '../../../../models/shared/shared-service', './quote-summary/components/quote-status-panel'], function (exports, _ember, _baseController, _sharedService, _quoteStatusPanel) {
    'use strict';

    exports.default = _baseController.default.extend({
        stock: {},

        onPrepareData: function onPrepareData() {
            _sharedService.default.getService('price').addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
        },

        onClearData: function onClearData() {
            _sharedService.default.getService('price').removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
            this.set('stock', []);
        }
    });


    _ember.default.Handlebars.helper('quote-status-panel', _quoteStatusPanel.default);
});
define('universal-app/controllers/price/widgets/mobile/quote-summary/components/chart-status-panel', ['exports', 'ember', '../../../../../../models/shared/shared-service', '../../../../../../config/app-config', '../../../../../../controllers/controller-factory', '../../../../../../models/shared/language/language-data-store', '../../../../../../components/base-component', '../../../../../../utils/utils'], function (exports, _ember, _sharedService, _appConfig, _controllerFactory, _languageDataStore, _baseComponent, _utils) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        layoutName: 'price/widgets/mobile/quote-summary/components/chart-status-panel',
        tradeService: _sharedService.default.getService('trade'),
        app: _languageDataStore.default.getLanguageObj(),

        dimensions: {
            w: 8,
            h: 6
        },

        options: {
            dragLockToAxis: true,
            dragBlockHorizontal: true
        },

        symbolList: [],
        symbolNum: 0,
        menuArray: [{ id: 1, name: 'Alerts' }],

        isLandscapeMode: false,
        colorCSS: 'fore-color',
        fontColorCSS: 'fore-color',

        panelContainer: '',
        // Parameters related to custom watchlist
        customWatchListArray: _sharedService.default.getService('price').watchListDS.customWatchListArray,

        isAddedToCustomWatchList: false,

        isTradingEnabled: function () {
            return _appConfig.default.customisation.isTradingEnabled && this.get('stock.inst') !== _utils.default.AssetTypes.Indices;
        }.property(),

        didInsertElement: function didInsertElement() {
            this.updatePercentageChangeCss();
            _sharedService.default.getService('price').watchListDS.initializeCustomWL();
            this.set('isAddedToCustomWatchList', _sharedService.default.getService('price').watchListDS.isSymbolAvailableInCustomWL(this.get('stock')));
        },

        isLiquidateEnabled: function () {
            var isEnabled = false;
            var stock = this.get('stock');

            if (this.get('isTradingEnabled') && stock && stock.sym) {
                var holdings = this.tradeService.holdingDS.getHoldingCollection();

                _ember.default.$.each(holdings, function (key, holding) {
                    if (stock.sym === holding.symbol && stock.exg === holding.exg) {
                        isEnabled = true;

                        return false;
                    }
                });
            }

            return isEnabled;
        }.property('stock.sym', 'stock.exg'),

        quoteSettings: {
            intZero: 0,
            emptyString: '',

            styles: {
                green: 'green',
                darkGreen: 'green-dark',
                red: 'red',
                darkRed: 'red-dark',
                white: 'white',
                upArrow: 'glyphicon-triangle-top glyphicon ',
                downArrow: 'glyphicon-triangle-bottom glyphicon '
            }
        },

        updatePercentageChangeCss: function () {
            var stock = this.get('stock');

            if (stock) {
                this.set('colorCSS', stock && stock.pctChg > 0 ? 'up-fore-color' : stock.pctChg === 0 ? 'fore-color' : 'down-fore-color');
                this.set('ltpIconCSS', stock && stock.pctChg > 0 ? 'glyphicon-triangle-top' : stock.pctChg < 0 ? 'glyphicon-triangle-bottom' : '');
            }
        }.observes('stock.pctChg'),

        showOrderTicket: function showOrderTicket(side) {
            this.sendAction('onOrientationChanged', false);
            _sharedService.default.getService('tradeUI').showOrderTicket(this.container, side, this.get('stock'));
        },

        actions: {
            addStocksToCustomWL: function addStocksToCustomWL() {
                var stock = this.get('stock');
                var myFavoriteCustomWL = 0;

                _sharedService.default.getService('price').watchListDS.addStocksToCustomWL(stock, myFavoriteCustomWL);
                this.set('isAddedToCustomWatchList', true);
            },

            buy: function buy() {
                this.showOrderTicket(false);
            },

            onBuyMore: function onBuyMore() {
                this.showOrderTicket(false);
            },

            onLiquidate: function onLiquidate() {
                this.showOrderTicket(true);
            },

            itemClicked: function itemClicked() {
                this.sendAction('onOrientationChanged', false);

                var widgetController = _controllerFactory.default.createController(this.container, 'controller:price/widgets/mobile/alert-price');
                var viewName = 'price/widgets/mobile/alert-price';

                widgetController.set('selectedLink', 1);
                widgetController.set('hideTitle', true);
                widgetController.set('isHideLink', true);
                widgetController.set('rowHeight', 60);
                widgetController.set('stock', this.get('stock'));

                widgetController.initializeWidget({ wn: 'alert-price' });

                _sharedService.default.getService('priceUI').showChildView(viewName, widgetController, this, this.get('app.lang.labels.alerts'), 'alert-price-' + this.get('wkey'));
            },

            onShareScreen: function onShareScreen() {
                _sharedService.default.getService('priceUI').shareScreenshot([this.get('stock.sDes'), ' ', '#', this.get('stock.sym')].join(''));
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/quote-summary/components/market-quote', ['exports', 'ember', '../../components/fifty-two-wk-hl', '../../../../../../models/shared/shared-service', '../../components/days-range', '../../../../../../components/stk-specific-components/cash-map', '../../../../../../components/base-component'], function (exports, _ember, _fiftyTwoWkHl, _sharedService, _daysRange, _cashMap, _baseComponent) {
    'use strict';

    exports.default = _baseComponent.default.extend({
        layoutName: 'price/widgets/mobile/quote-summary/components/market-quote',

        dimensions: {
            w: 8,
            h: 6
        },
        stock: {},
        symbolList: [],
        symbolNum: 0,
        colorCSS: 'fore-color',
        backColorCSS: 'toolbar-color',
        fontColorCSS: 'fore-color',
        ltpIconCSS: '',
        isDisabledCashMap: false,

        onPrepareData: function () {
            this.set('symbolList', _sharedService.default.getService('price').stockDS.getSymbolCollectionByExchange(this.get('stock.exg')));
            this.updatePercentageChangeCss();
            var lowResolutionWidth = 340;

            if (window.screen.width <= lowResolutionWidth) {
                this.set('isDisabledCashMap', true);
                this.set('dayRangeContainerCss', 'pad-l-lr');
            }
        }.on('didInsertElement'),

        quoteSettings: {
            intZero: 0,
            emptyString: '',
            styles: {
                green: 'green',
                darkGreen: 'green-dark',
                red: 'red',
                darkRed: 'red-dark',
                white: 'white',
                upArrow: 'glyphicon-triangle-top glyphicon ',
                downArrow: 'glyphicon-triangle-bottom glyphicon '
            }
        },

        updatePercentageChangeCss: function () {
            var stock = this.get('stock');
            this.set('colorCSS', stock.pctChg > 0 ? 'up-fore-color' : stock.pctChg === 0 ? 'fore-color' : 'down-fore-color');
            this.set('ltpIconCSS', stock.pctChg > 0 ? 'glyphicon-triangle-top' : stock.pctChg < 0 ? 'glyphicon-triangle-bottom' : '');
            this.set('backColorCSS', stock.pctChg > 0 ? 'up-back-color' : stock.pctChg === 0 ? 'toolbar-color' : 'down-back-color');
            this.set('fontColorCSS', stock.pctChg > 0 ? 'btn-txt-color' : stock.pctChg === 0 ? 'fore-color' : 'btn-txt-color');
        }.observes('stock', 'stock.pctChg')
    });


    _ember.default.Handlebars.helper('fifty-two-wk-hl', _fiftyTwoWkHl.default);
    _ember.default.Handlebars.helper('days-range', _daysRange.default);
    _ember.default.Handlebars.helper('cash-map', _cashMap.default);
});
define('universal-app/controllers/price/widgets/mobile/quote-summary/components/quote-status-panel', ['exports', 'ember', '../../../../../base-controller', '../../../../../../app-events', '../../../../../../models/shared/shared-service', '../../../../../../config/app-config', '../../../../../../controllers/controller-factory', '../../../../../../utils/utils', '../../../../../../models/shared/language/language-data-store'], function (exports, _ember, _baseController, _appEvents, _sharedService, _appConfig, _controllerFactory, _utils, _languageDataStore) {
    'use strict';

    exports.default = _baseController.default.extend({
        tradeService: _sharedService.default.getService('trade'),
        customWLArray: _sharedService.default.getService('price').watchListDS.getCustomWLArray(),
        app: _languageDataStore.default.getLanguageObj(),

        dimensions: {
            w: 8,
            h: 6
        },

        options: {
            dragLockToAxis: true,
            dragBlockHorizontal: true
        },

        symbolList: [],
        symbolNum: 0,
        menuArray: [{ id: 1, name: 'Alerts' }],

        // Parameters related to custom watchlist
        customWatchListArray: _sharedService.default.getService('price').watchListDS.customWatchListArray,
        myFavouritesIndex: 0,
        myFavouritesKey: 'myFavourites',

        priceService: _sharedService.default.getService('price'),

        isTradingEnabled: function () {
            return _appConfig.default.customisation.isTradingEnabled;
        }.property(),

        isMultipleCustomWLAvailable: function () {
            return this.get('customWLArray').length > 1;
        }.property('customWLArray.length'),

        onLoadWidget: function onLoadWidget() {
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onPrepareData: function onPrepareData() {
            this.set('stock', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
            this.set('symbolList', this.priceService.stockDS.getSymbolCollectionByExchange(this.get('exg')));
            this.set('isAddedToCustomWatchList', false);

            // In order to activate/ deactivate Liquidate Button.
            if (_appConfig.default.customisation.isTradingEnabled) {
                this.set('holdings', this.get('tradeService').holdingDS.getHoldingCollection());
            }

            this.priceService.watchListDS.initializeCustomWL();
            _ember.default.set(this.get('customWatchListArray')[this.myFavouritesIndex], 'name', this.get('app').lang.labels[this.myFavouritesKey]);

            var inst = this.get('stock.inst');

            this.set('isIndices', _utils.default.AssetTypes.isIndices(inst));
            this.set('isTradableAssetType', _utils.default.AssetTypes.isTradableAssetType(inst));
        },

        onLanguageChanged: function onLanguageChanged() {
            _ember.default.set(this.get('customWatchListArray')[this.myFavouritesIndex], 'name', this.get('app').lang.labels[this.myFavouritesKey]);
        },

        checkHoldingAvailability: function () {
            var holdings = this.get('holdings');
            var isLiquidateEnable = false;
            var currentStock = this.get('stock');

            if (holdings && holdings.length > 0) {
                _ember.default.$.each(holdings, function (key, holding) {
                    if (currentStock.sym === holding.symbol && currentStock.exg === holding.exg) {
                        isLiquidateEnable = true;

                        return false;
                    }
                });
            }

            this.set('isLiquidateEnable', isLiquidateEnable);
        }.observes('stock'),

        dSymbolCss: function () {
            return this.get('isLiquidateEnable') ? 'layout-col-24' : 'layout-col';
        }.property('isLiquidateEnable'),

        buyText: function () {
            return this.get('app.lang.labels.buy').toUpperCase();
        }.property(),

        sellText: function () {
            return this.get('app.lang.labels.sell').toUpperCase();
        }.property(),

        onAfterRender: function onAfterRender() {
            var that = this;
            var hammerObj = new Hammer(document.getElementById('quoteStatusPanelContainer'), this.options);
            hammerObj.get('swipe').set({ velocity: 0.1 });

            hammerObj.on('swipeleft swiperight', function (ev) {
                if (ev.type === 'swipeleft') {
                    that.nextSymLeftAction();
                } else {
                    that.nextSymRightAction();
                }

                _ember.default.isQuoteStatusSwipeTriggered = true;
            });

            this.checkHoldingAvailability();
            this.set('isAddedToCustomWatchList', this.priceService.watchListDS.isSymbolAvailableInCustomWL(this.get('stock')));
        },

        quoteSettings: {
            intZero: 0,
            emptyString: '',

            styles: {
                green: 'green',
                darkGreen: 'green-dark',
                red: 'red',
                darkRed: 'red-dark',
                white: 'white',
                upArrow: 'glyphicon-triangle-top glyphicon ',
                downArrow: 'glyphicon-triangle-bottom glyphicon '
            }
        },

        updatePercentageChangeCss: function () {
            var pctChg = this.stock.get('pctChg');
            var changeSign = '';
            var perChgCss = '';
            var changeCss = '';

            if (pctChg > this.quoteSettings.intZero) {
                changeSign = this.quoteSettings.styles.upArrow;
                perChgCss = this.quoteSettings.styles.green;
                changeCss = this.quoteSettings.styles.darkGreen;
            } else if (pctChg < this.quoteSettings.intZero) {
                changeSign = this.quoteSettings.styles.downArrow;
                perChgCss = this.quoteSettings.styles.red;
                changeCss = this.quoteSettings.styles.darkRed;
            } else {
                changeSign = this.quoteSettings.emptyString;
                perChgCss = this.quoteSettings.styles.white;
            }

            this.set('changeSign', changeSign);
            this.set('perChgCss', perChgCss);
            this.set('changeCss', changeCss);
        }.observes('stock.pctChg'),

        nextSymRightAction: function nextSymRightAction() {
            var that = this;

            _ember.default.$.each(this.get('symbolList'), function (key, value) {
                if (that.get('stock').sym === value.sym) {
                    that.set('symbolNum', key);
                    return false;
                }
            });

            if (this.get('symbolNum') < this.get('symbolList').length - 1) {
                this.set('symbolNum', that.get('symbolNum') + 1);
            } else {
                this.set('symbolNum', 0);
            }

            this.set('stock', this.get('symbolList').objectAt(this.get('symbolNum')));
            _appEvents.default.onSymbolChanged(this.get('stock').sym, this.get('stock').exg, this.get('stock').inst, '1');
        },

        nextSymLeftAction: function nextSymLeftAction() {
            var that = this;

            _ember.default.$.each(this.get('symbolList'), function (key, value) {
                if (that.get('stock').sym === value.sym) {
                    that.set('symbolNum', key);
                    return false;
                }
            });

            if (this.get('symbolNum') === 0) {
                this.set('symbolNum', this.get('symbolList').length - 1);
            } else {
                this.set('symbolNum', that.get('symbolNum') - 1);
            }

            this.set('stock', this.get('symbolList').objectAt(this.get('symbolNum')));
            _appEvents.default.onSymbolChanged(this.get('stock').sym, this.get('stock').exg, this.get('stock').inst, '1');
        },

        showOrderTicket: function showOrderTicket(side) {
            _sharedService.default.getService('tradeUI').showOrderTicket(this.container, side, this.get('stock'));
        },

        isTradingDisabledExg: function () {
            return !this.tradeService.userDS.isTradeEnabledExchange(this.get('exg')) || _utils.default.AssetTypes.isIndices(this.get('stock.inst'));
        }.property('stock'),

        actions: {
            addStocksToCustomWL: function addStocksToCustomWL(customWL) {
                var myFavoriteCustomWL = 0;
                var customWLId = customWL ? customWL.id : myFavoriteCustomWL;
                var that = this;
                var stock = this.get('stock');

                if (this.get('isAddedToCustomWatchList') && !this.get('isMultipleCustomWLAvailable')) {
                    var languageTexts = that.get('app').lang;

                    _utils.default.messageService.showMessage(languageTexts.messages.deleteConfirmation, _utils.default.Constants.MessageTypes.Question, false, languageTexts.labels.confirm, [{ type: _utils.default.Constants.MessageBoxButtons.Ok, btnAction: function btnAction() {
                            that.priceService.watchListDS.deleteSymbol(stock, customWLId);
                            that.set('isAddedToCustomWatchList', false);
                        }
                    }, { type: _utils.default.Constants.MessageBoxButtons.Cancel }]);
                } else {
                    this.set('isAddedToCustomWatchList', true);
                    this.priceService.watchListDS.addStocksToCustomWL(stock, customWLId);
                }
            },

            nextSymRight: function nextSymRight() {
                this.nextSymRightAction();
            },

            nextSymLeft: function nextSymLeft() {
                this.nextSymLeftAction();
            },

            buy: function buy() {
                this.showOrderTicket(false);
            },

            onBuyMore: function onBuyMore() {
                this.showOrderTicket(false);
            },

            onLiquidate: function onLiquidate() {
                this.showOrderTicket(true);
            },

            itemClicked: function itemClicked() {
                var widgetController = _controllerFactory.default.createController(this.container, 'controller:price/widgets/mobile/alert-price');
                var viewName = 'price/widgets/mobile/alert-price';

                widgetController.set('selectedLink', 1);
                widgetController.set('hideTitle', true);
                widgetController.set('isHideLink', true);
                widgetController.set('rowHeight', 60);
                widgetController.set('stock', this.get('stock'));
                widgetController.set('isChildView', true);

                widgetController.initializeWidget({ wn: 'alert-price' });

                _sharedService.default.getService('priceUI').showChildView(viewName, widgetController, widgetController.get('title'), 'alert-price-' + this.get('wkey'));
            },

            onShareScreen: function onShareScreen() {
                _sharedService.default.getService('priceUI').shareScreenshot([this.get('stock.sDes'), ' ', '#', this.get('stock.sym'), ' ', '#', this.app.lang.labels.quote, ' '].join(''));
            },

            showSymbolSearch: function showSymbolSearch() {
                _sharedService.default.getService('sharedUI').getService('titleBar').toggleDisplay();
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/quote-summary/quote-summary', ['exports', 'ember', '../../../../controller-factory', '../../../../../utils/utils', '../../../../../config/app-config', '../quote-summary/components/market-quote', '../../mobile/components/summary-chart', '../../../../../config/layout-config', '../../../../../models/shared/shared-service', '../../../../../config/price-widget-config', '../../../../../models/price/business-entities/search-result-item', '../../../../../controllers/price/widgets/quote-base', '../../../../../app-events', '../../../../../helpers/responsive-handler'], function (exports, _ember, _controllerFactory, _utils, _appConfig, _marketQuote, _summaryChart, _layoutConfig, _sharedService, _priceWidgetConfig, _searchResultItem, _quoteBase, _appEvents, _responsiveHandler) {
    'use strict';

    exports.default = _quoteBase.default.extend({
        stock: {},
        panelFields: _ember.default.A(),
        chartController: undefined,
        isIndices: false,
        fields: {},

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            this.set('appLayout', _layoutConfig.default);
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onPrepareData: function onPrepareData() {
            var inst = this.get('inst');

            this.set('panelFields', _ember.default.A());
            this.set('isIndices', _utils.default.AssetTypes.isIndices(inst));
            this.set('stock', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym'), inst));

            this.renderPanelFields();
        },

        initializeResponsive: function initializeResponsive() {
            var that = this;

            _ember.default.run.next(this, function () {
                that.set('responsive', _responsiveHandler.default.create({
                    controller: this,
                    widgetId: 'hnav-panel-mobile',
                    callback: this.onResponsive
                }));

                that.responsive.addList('hnav-panel-mobile', [{ id: 'hnav-panel-mobile', width: 340 }]);
                that.responsive.initialize();
            });
        },

        onAddSubscription: function onAddSubscription() {
            var exg = this.get('exg');
            var sym = this.get('sym');
            var inst = this.get('inst');

            if (!this.get('isIndices')) {
                this.priceService.addSymbolRequest(exg, sym, inst);
            } else {
                this.priceService.addIndexRequest(exg, sym, inst);
            }
        },

        onRemoveSubscription: function onRemoveSubscription() {
            var exg = this.get('exg');
            var sym = this.get('sym');
            var inst = this.get('inst');

            if (!this.get('isIndices')) {
                this.priceService.removeSymbolRequest(exg, sym, inst);
            } else {
                this.priceService.removeIndexRequest(exg, sym, inst);
            }
        },

        onAfterRender: function onAfterRender() {
            this.initializeButtonAnimation();
            this._renderChart();
            this.getSubMarket();
        },

        getSubMarket: function getSubMarket() {
            var that = this;
            var exchange = this.priceService.exchangeDS.getExchange(this.get('exg'));
            var subMarketArray = exchange.subMarketArray;
            var subMarket;

            if (subMarketArray && subMarketArray.length > 0) {
                _ember.default.$.each(subMarketArray, function (key, value) {
                    if (value.marketId === that.get('stock').subMkt) {
                        subMarket = value.lDes;
                    }
                });
            }

            this.set('subMarket', subMarket);
        },

        onClearData: function onClearData() {
            this.set('stock', {});

            var chartController = this.get('chartController');

            if (chartController && _ember.default.$.isFunction(chartController.onClearData)) {
                chartController.onClearData();
            }
        },

        onUnloadWidget: function onUnloadWidget() {
            var chartController = this.get('chartController');

            if (chartController && _ember.default.$.isFunction(chartController.onUnloadWidget)) {
                chartController.onUnloadWidget();
            }

            this.set('chartController', undefined);
        },

        renderPanelFields: function renderPanelFields() {
            this._super(_priceWidgetConfig.default.quote.panelIntraday, this.get('panelFields'));

            var that = this;
            var bidIndex;
            var offerIndex;
            var panelFields = this.get('panelFields');

            _ember.default.$.each(panelFields, function (key, value) {
                if (value.field === 'bbp') {
                    bidIndex = key;
                }

                if (value.field === 'bap') {
                    offerIndex = key;
                }
            });

            if (bidIndex && offerIndex) {
                that.set('bidOfferAvailable', true);

                if (bidIndex > offerIndex) {
                    panelFields.splice(bidIndex, 1);
                    panelFields.splice(offerIndex, 1);
                } else {
                    panelFields.splice(offerIndex, 1);
                    panelFields.splice(bidIndex, 1);
                }
            } else {
                that.set('bidOfferAvailable', false);
            }

            var slicingIndex = panelFields.length / 2;

            this.set('columnOne', panelFields.slice(0, Math.ceil(slicingIndex)));
            this.set('columnTwo', panelFields.slice(Math.ceil(slicingIndex), panelFields.length));
        },

        onLanguageChanged: function onLanguageChanged() {
            this.set('panelFields', _ember.default.A());
            this.renderPanelFields();
        },

        showValue: function () {
            return _utils.default.formatters.formatNumber(this.get('calculateNetCash'));
        }.property('calculateNetCash'),

        isTradingEnabled: function () {
            return _appConfig.default.customisation.isTradingEnabled;
        }.property(),

        quoteSettings: {
            intZero: 0,
            emptyString: '',
            styles: {
                green: 'green',
                darkGreen: 'green-dark',
                red: 'red',
                darkRed: 'red-dark',
                white: 'white',
                upArrow: 'glyphicon-triangle-top glyphicon ',
                downArrow: 'glyphicon-triangle-bottom glyphicon '
            }
        },

        updatePercentageChangeCss: function () {
            var pctChg = this.get('stock.pctChg');
            var changeSign = '';
            var perChgCss = '';
            var changeCss = '';

            if (pctChg > this.quoteSettings.intZero) {
                changeSign = this.quoteSettings.styles.upArrow;
                perChgCss = this.quoteSettings.styles.green;
                changeCss = this.quoteSettings.styles.darkGreen;
            } else if (pctChg < this.quoteSettings.intZero) {
                changeSign = this.quoteSettings.styles.downArrow;
                perChgCss = this.quoteSettings.styles.red;
                changeCss = this.quoteSettings.styles.darkRed;
            } else {
                changeSign = this.quoteSettings.emptyString;
                perChgCss = this.quoteSettings.styles.white;
            }

            this.set('changeSign', changeSign);
            this.set('perChgCss', perChgCss);
            this.set('changeCss', changeCss);
        }.observes('stock.pctChg'),

        showOrderTicket: function showOrderTicket(side) {
            _sharedService.default.getService('tradeUI').showOrderTicket(this.container, side, this.get('stock'));
        },

        _renderChart: function _renderChart() {
            var controllerString = 'controller:price/widgets/mobile/chart/quote-chart';
            var routeString = 'price/widgets/mobile/chart/quote-chart';
            var widgetKey = this.get('wkey') + '-chart';
            var widgetController = _controllerFactory.default.createController(this.container, controllerString);

            widgetController.set('sym', this.get('sym'));
            widgetController.set('exg', this.get('exg'));
            widgetController.set('inst', this.get('inst'));
            widgetController.set('wkey', widgetKey);
            widgetController.set('isShowTitle', false);
            widgetController.set('hideWidgetLink', true);
            widgetController.set('isDisableChartControls', true);
            widgetController.set('isShareIconDisabled', this.get('isShareIconDisabled'));

            widgetController.initializeWidget({ wn: controllerString.split('/').pop() }, { widgetArgs: { selectedLink: this.get('selectedLink') } });
            var route = this.container.lookup('route:application');

            route.render(routeString, {
                into: 'price/widgets/mobile/quote-summary/quote-summary',
                outlet: 'quoteChartOutlet',
                controller: widgetController
            });

            this.set('chartController', widgetController);
            _appEvents.default.subscribeThemeChanged(widgetController, 'quote-summary-chart');
        },

        saveToRecentSymbols: function () {
            var symbol;
            var groupingObj;
            var stock = this.get('stock');

            if (!_ember.default.$.isEmptyObject(stock)) {
                var config = _priceWidgetConfig.default.globalSearch.groups;
                var exchange = this.priceService.exchangeDS.getExchange(stock.exg);

                symbol = _searchResultItem.default.create();
                groupingObj = config[stock.ast] ? config[stock.ast] : config.other;

                symbol.setData({
                    sym: stock.sym,
                    exg: stock.exg,
                    dSym: stock.dSym,
                    inst: stock.inst,
                    lDes: stock.lDes,
                    sDes: stock.sDes,
                    ast: stock.ast,
                    subMkt: stock.subMkt,
                    dispProp1: stock.get('dispProp1'),
                    groupingObj: groupingObj
                });

                symbol.set('de', exchange.de);
                symbol.set('isAddedToCustomWatchList', this.priceService.watchListDS.isSymbolAvailableInCustomWL(symbol));

                this.priceService.searchDS.addRecentSearchedItem(symbol);
            }
        }.observes('stock.sym'),

        actions: {
            buy: function buy() {
                this.showOrderTicket(false);
            },

            sell: function sell() {
                this.showOrderTicket(true);
            }
        }
    });


    _ember.default.Handlebars.helper('market-quote', _marketQuote.default);
    _ember.default.Handlebars.helper('summary-chart', _summaryChart.default);
});
define('universal-app/controllers/price/widgets/mobile/settings', ['exports', 'ember', '../../../base-controller', '../../../../models/shared/data-stores/theme-data-store', '../../../../models/shared/language/language-data-store', '../../../../models/shared/shared-service', '../../../controller-factory', '../../../../config/app-config'], function (exports, _ember, _baseController, _themeDataStore, _languageDataStore, _sharedService, _controllerFactory, _appConfig) {
    'use strict';

    exports.default = _baseController.default.extend({
        title: 'Settings',
        supportedThemes: _ember.default.A([]),
        supportedLanguages: _ember.default.A([]),
        priceService: _sharedService.default.getService('price'),
        customSettingsPopup: false,
        tickerSpeed: '',

        isTickerSettingsEnabled: _appConfig.default.customisation.isTickerSettingsEnabled,
        isSocialMediaSettingsEnabled: _appConfig.default.customisation.isSocialMediaEnabled,
        isWatchListSettingsEnabled: _appConfig.default.customisation.isWatchListSettingsEnabled,
        isShowBiometricAuthSignup: _appConfig.default.customisation.showBiometricAuthSignup && _sharedService.default.getService('sharedUI').deviceType,
        isAppLogEnabled: _appConfig.default.loggerConfig.isAppLogEnabled,

        bioAuthActiveCss: 'theme-settings',

        onLoadWidget: function onLoadWidget() {
            this.set('title', this.get('app').lang.labels.settings);
        },

        onPrepareData: function onPrepareData() {
            this.set('supportedThemes', this._getSupportedSettings(_themeDataStore.default.getUserThemes()));
            this.set('supportedLanguages', this._getSupportedSettings(_languageDataStore.default.getUserLanguages()));
            this.set('tickerSpeed', _sharedService.default.userSettings.tickerSpeed);
        },

        _getSupportedSettings: function _getSupportedSettings(supportedThemes) {
            var that = this;
            var settingsArray = _ember.default.A([]);

            _ember.default.$.each(supportedThemes, function (index, item) {
                item.langDesc = item.langKey ? that.get('app').lang.labels[item.langKey] : item.desc;
                settingsArray.pushObject(_ember.default.Object.create(item));
            });

            return settingsArray;
        },

        onAfterRender: function onAfterRender() {
            this.initializeThemeSettings();
            this.initializeLanguageSettings();

            if (this.isShowBiometricAuthSignup) {
                this.initializeBioAuthSettings();
            }
        },

        initializeThemeSettings: function initializeThemeSettings() {
            this._initializeSettings(this.get('supportedThemes'), _sharedService.default.userSettings.currentTheme);
        },

        initializeLanguageSettings: function initializeLanguageSettings() {
            this._initializeSettings(this.get('supportedLanguages'), _sharedService.default.userSettings.currentLanguage);
        },

        initializeBioAuthSettings: function initializeBioAuthSettings(isToggleSetting) {
            var bioArgs = _sharedService.default.userSettings.biometricAuthArgs;
            var isBioAuthEnabled = !isToggleSetting;
            var bioAuthActiveCss = isToggleSetting ? 'theme-settings' : 'glyphicon glyphicon-ok';

            if (!bioArgs || bioArgs.isUserDenied) {
                isBioAuthEnabled = isToggleSetting;
                bioAuthActiveCss = isToggleSetting ? 'glyphicon glyphicon-ok' : 'theme-settings';
            }

            bioArgs.isUserDenied = !isBioAuthEnabled;
            _sharedService.default.userSettings.save();

            this.set('bioAuthActiveCss', bioAuthActiveCss);
        },

        initializeTickerSettings: function initializeTickerSettings(speed) {
            _sharedService.default.userSettings.set('tickerSpeed', speed);
            _sharedService.default.userSettings.save();
        },

        _initializeSettings: function _initializeSettings(settingArray, currentValue) {
            _ember.default.$.each(settingArray, function (index, item) {
                _ember.default.set(item, 'active', currentValue && item && currentValue.indexOf(item.code) !== -1 ? 'glyphicon glyphicon-ok' : 'theme-settings');
            });
        },

        onLanguageChanged: function onLanguageChanged() {
            this.onLoadWidget();
            this.onPrepareData();
        },

        getTickerSpeed: function () {
            var speed = this.get('tickerSpeed');
            this.initializeTickerSettings(speed);
        }.observes('tickerSpeed'),

        actions: {
            changeTheme: function changeTheme(code) {
                _themeDataStore.default.changeTheme(code);
                this.initializeThemeSettings();
            },

            changeLanguage: function changeLanguage(code) {
                _languageDataStore.default.changeLanguage(code);
                this.initializeLanguageSettings();
                this.initializeThemeSettings();
            },

            changeBioAuth: function changeBioAuth() {
                this.initializeBioAuthSettings(true);
            },

            loadCustomSettingsPopup: function loadCustomSettingsPopup(customSetting) {
                var settingsPopup = _appConfig.default.customisation[customSetting];

                if (settingsPopup && settingsPopup.routePath) {
                    var widgetName = settingsPopup.widgetName;
                    var routeString = settingsPopup.routePath;
                    var controllerString = 'controller:' + routeString;
                    var route = this.container.lookup('route:application');

                    var widgetController = _controllerFactory.default.createController(this.container, controllerString);
                    widgetController.initializeWidget({ wn: widgetName });
                    widgetController.set('parentController', this);
                    this.set('customSettingsPopup', true);

                    route.render(routeString, {
                        into: 'price/widgets/mobile/settings',
                        outlet: 'customSettingsOutlet',
                        controller: widgetController
                    });
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/mobile/watch-list/watch-list', ['exports', 'ember', '../../watch-list/base-watch-list', '../../../../../components/mobile/watchlist-menu-popup', '../../../../../views/table/dual-cells/expanded-symbol-cell', '../../../../../views/table/dual-cells/expanded-ltp-cell', '../../../../../views/table/dual-cells/expanded-chg-cell', '../../../../../views/table/mobile/context-menu-cell', '../../../../../views/table/dual-cells/expanded-header-cell', '../../../../../views/table/more-header-cell', '../../../../../views/table/dual-cells/header-cell', '../../../../../views/table/table-row', '../../../../../config/layout-config', '../../../../../config/price-widget-config', '../../../../../controllers/controller-factory', '../../../../../config/app-config', '../../../../../components/sub-markets-dropdown', '../../../../../models/shared/shared-service', '../../../../../utils/utils'], function (exports, _ember, _baseWatchList, _watchlistMenuPopup, _expandedSymbolCell, _expandedLtpCell, _expandedChgCell, _contextMenuCell, _expandedHeaderCell, _moreHeaderCell, _headerCell, _tableRow, _layoutConfig, _priceWidgetConfig, _controllerFactory, _appConfig, _subMarketsDropdown, _sharedService, _utils) {
    'use strict';

    exports.default = _baseWatchList.default.extend({
        isOddEvenRowStyleDisabled: true,
        isExpandedView: false,
        isContextPanel: false,
        isDisplayFilter: false,
        isIndexView: false,
        isMobile: _appConfig.default.customisation.isMobile,
        filterCss: 'hide-container',
        tabPanelCss: '',
        contextPath: 'price/widgets/mobile/watch-list/watch-list-context-panel',
        indicatorConfig: { isTodaysHighEnabled: true, isTodaysLowEnabled: true, isFiftyTwoHEnabled: true, isFiftyTwoLEnabled: true, isSymSuspendedEnabled: true, isSelectedEnabled: true },
        menuConfig: [],

        defaultMenu: [{ id: 1, name: 'New Watchlist', langKey: 'newWatchList' }, { id: 2, name: 'Rename Watchlist', langKey: 'renameWL' }, { id: 3, name: 'Delete Watchlist', langKey: 'deleteWL' }],

        myFavoriteMenu: [{ id: 1, name: 'New Watchlist', langKey: 'newWatchList' }],

        actionId: { newWL: 1, renameWL: 2, deleteWL: 3 },

        // Custom WatchList parameters
        isCustomWLMode: false,
        myFavouritesIndex: 0,
        myFavouritesKey: 'favourites',
        customWatchListArray: _ember.default.A(),
        currentCustomWLId: null,
        currentCustomWLName: null,
        isAddedToCustomWatchList: false,
        partialControlPanel: 'table/views/partial/default-panel',

        // Column Parametrs
        columnDeclarations: _ember.default.A(),
        isRenderingEnabled: false,
        oneWayContent: _ember.default.computed.oneWay('arrangedContent'),

        // For the custom WL dropdown-tab
        isCurrentWLDropdown: false,
        customWLNewActive: '',
        favouritesActive: '',

        textFilter: '',
        isFavouriteTextDisabled: false,

        sharedUIService: _sharedService.default.getService('sharedUI'),
        priceService: _sharedService.default.getService('price'),
        priceUIService: _sharedService.default.getService('priceUI'),

        isMoreMarketAvailable: true,
        isShowDetailedView: false,

        onLoadWidget: function onLoadWidget() {
            this._super();

            var that = this;
            var lowResolutionWidth = 340;
            var subMktMap = this.get('subMktMap');
            var exg = this.get('exg');

            if (exg) {
                var isDefaultExg = _sharedService.default.getService('price').userDS.isPriceUserExchange(exg);
                this.set('exg', isDefaultExg ? exg : _sharedService.default.userSettings.price.userDefaultExg);

                var exgObj = this.priceService.exchangeDS.getExchange(exg);

                this.set('exchange', exgObj);
                this.set('marketTab', exgObj);
            } else {
                this._setDefaultExchange();
            }

            if (subMktMap && subMktMap[exg]) {
                this.set('currentSubMarketId', subMktMap[exg]);
            }

            if (this.get('sortProperties').length === 0) {
                this.set('sortProperties', ['trades']);
            } else {
                this.saveWidget({ sortAsc: this.get('sortAscending'), sortCols: this.get('sortProperties') });
            }

            if (window.screen.width <= lowResolutionWidth) {
                this.set('isFavouriteTextDisabled', true);
            }

            this.addDocumentClickListener();
            this.setMenuConfig();
            _sharedService.default.getService('price').watchListDS.initializeCustomWL();

            this.set('customWatchListArray', _sharedService.default.getService('price').watchListDS.getCustomWLArray());
            this.set('columnDeclarations', this.get('isIndexView') ? _priceWidgetConfig.default.indices.columns : _priceWidgetConfig.default.watchList.quoteColumns);
            this.set('appLayout', _layoutConfig.default);
            this.set('isMoreMarketAvailable', _sharedService.default.getService('price').userDS.get('userExchg').length > 1);
            this.set('isDropdown', this.get('customWatchListArray.length') > 1);

            _ember.default.set(this.get('customWatchListArray')[this.myFavouritesIndex], 'name', this.get('app').lang.labels[this.myFavouritesKey]);

            _ember.default.run.next(this, function () {
                that.set('isRenderingEnabled', true);
            });
        },

        onPrepareData: function onPrepareData() {
            switch (this.get('watchListType')) {
                case _sharedService.default.getService('price').watchListDS.watchListTypes.portfolio:
                    this.loadPortfolio();
                    break;

                case _sharedService.default.getService('price').watchListDS.watchListTypes.customWL:
                    this.onCustomWlSelect(this.get('myFavouritesIndex'));
                    break;

                default:
                    this._super();
                    this.loadFullMarket();
                    this.saveWidget({ watchListType: _sharedService.default.getService('price').watchListDS.watchListTypes.fullMarket });
                    break;
            }
        },

        loadFullMarket: function loadFullMarket() {
            var exgCode = this.get('exg');

            this.set('partialControlPanel', 'table/views/partial/default-panel'); // Switch to Default Panel
            this.set('isCustomWLMode', false); // Clicking Market is the only way to exit Custom mode
            this.set('currentCustomWLName', null);

            if (this.get('currentCustomWLId') !== null) {
                this.set('customWLNewActive', null);
                this.set('favouritesActive', '');
            }

            this.set('currentCustomWLId', null);
            this.saveWidget({ exg: exgCode });

            // No need to update global exchange value with local exchange, because watch list is not allowed to load for non default markets
            this.priceService.exchangeDS.getExchangeMetadata(exgCode);

            this._collapseWatchlistRow(this.get('previousRow'));
            this.setDefaultSort();
        },

        loadPortfolio: function loadPortfolio() {
            var symArray = [];
            var holdingsArray = [];
            var tradeService = _sharedService.default.getService('trade');
            var currentPortfolio = this.get('currentPortfolio');

            if (currentPortfolio.isShowAll) {
                holdingsArray = tradeService.holdingDS.getHoldingCollection();
            } else {
                holdingsArray = tradeService.holdingDS.getHoldingByAccount(currentPortfolio.tradingAccId);
            }

            _ember.default.$.each(holdingsArray, function (key, holding) {
                var priceService = _sharedService.default.getService('price');
                var symbol = holding.symbol;
                var exchange = holding.exg;
                var stockFromStore = priceService.stockDS.getStock(exchange, symbol);

                priceService.addSymbolRequest(exchange, symbol);
                symArray.pushObject(stockFromStore);
            });

            this.set('content', symArray);
            this.set('masterContent', symArray);
            this.setDefaultSort();
        },

        onBindData: function onBindData() {
            var that = this;

            _ember.default.run.later(function () {
                var sortProperties = that.get('sortProperties');

                that.set('sortProperties', []);
                that.set('sortProperties', sortProperties);
            }, 100);
        },

        onLanguageChanged: function onLanguageChanged(language) {
            this._super(language);
            this.setMenuConfig();
            this.refreshTableComponent();

            _ember.default.set(this.get('customWatchListArray')[this.myFavouritesIndex], 'name', this.get('app').lang.labels[this.myFavouritesKey]);
        },

        setMenuConfig: function setMenuConfig() {
            var that = this;
            var defaultMenu = this.get('defaultMenu');
            var myFavoriteMenu = this.get('myFavoriteMenu');

            _ember.default.$.each(defaultMenu, function (key, menu) {
                _ember.default.set(menu, 'name', that.get('app').lang.labels[menu.langKey]);
            });

            _ember.default.$.each(myFavoriteMenu, function (key, menu) {
                _ember.default.set(menu, 'name', that.get('app').lang.labels[menu.langKey]);
            });
        },

        loadCustomWL: function loadCustomWL(id) {
            var customStockArray = this.get('customWatchListArray')[id].stkArray;

            if (customStockArray.length > 0 && customStockArray[0].sym) {
                // Checks symbols are retrieved from local storage or DataStore
                var that = this;
                var subscribedArray = _ember.default.A();

                _ember.default.$.each(customStockArray, function (key, stockAdded) {
                    var stockFromStore = that.priceService.stockDS.getStock(stockAdded.exg, stockAdded.sym);
                    subscribedArray.pushObject(stockFromStore);
                });

                this.get('customWatchListArray')[id].stkArray = subscribedArray;
                customStockArray = this.get('customWatchListArray')[id].stkArray; // TODO [arosha] set stkArray reference (for add delete stk) better way
            }

            this.set('menuConfig', []);

            if (id === this.get('myFavouritesIndex')) {
                this.set('menuConfig', this.get('myFavoriteMenu'));
            } else {
                this.set('menuConfig', this.get('defaultMenu'));
            }

            // Highlight watch-list header selected tab
            this.set('customWLNewActive', this.get('customWatchListArray')[id]);
            this.set('favouritesActive', 'active');
            this.set('partialControlPanel', 'table/views/partial/favourite-panel');
            this.set('isCustomWLMode', true);
            this.set('currentCustomWLId', id);
            this.set('currentCustomWLName', this.get('customWatchListArray')[id].name);
            this.set('exchange', undefined);

            // Set Content
            this.set('content', customStockArray);
            this.set('masterContent', customStockArray);
            this.set('sortProperties', []); // No Sorting applied to custom WL

            this.saveWidget({ watchListType: _sharedService.default.getService('price').watchListDS.watchListTypes.customWL });
        },

        styleSettings: {
            expandedModeHeight: 105,
            collapsedModeHeight: 60,
            symbolColumnWidth: 145
        },

        switchRowMode: function () {
            var height = this.get('isExpandedView') ? this.get('styleSettings.expandedModeHeight') : this.get('styleSettings.collapsedModeHeight');
            this.set('rowHeight', height);
        }.observes('isExpandedView'),

        setCustomWLDropDownIndicator: function () {
            this.set('isDropdown', this.get('customWatchListArray.length') > 1);
        }.observes('customWatchListArray.length'),

        isActiveCustomDropdown: function () {
            return this.get('isDropdown') && this.get('isCustomWLMode');
        }.property('isDropdown', 'isCustomWLMode'),

        cellViewsForColumns: {
            expandedSymbolMobile: 'Ember.ExpandedSymbolCell',
            expandedLtpMobile: 'Ember.ExpandedLtpCell',
            expandedChgMobile: 'Ember.ExpandedChgCell',
            contextMenuMobile: 'Ember.ContextMenuMobile'
        },

        toggleDisplay: function () {
            if (this.get('isDisplayFilter')) {
                this.set('filterCss', 'full-width');
                this.set('tabPanelCss', 'visibility-hidden');
                _ember.default.$('#filterWatchlist')[0].focus();
            } else {
                this.set('filterCss', 'hide-container');
                this.set('tabPanelCss', '');
            }
        }.observes('isDisplayFilter'),

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            _ember.default.ExpandedSymbolCell = _expandedSymbolCell.default;
            _ember.default.ExpandedLtpCell = _expandedLtpCell.default;
            _ember.default.ExpandedChgCell = _expandedChgCell.default;
            _ember.default.ContextMenuMobile = _contextMenuCell.default;
            _ember.default.ExpandedHeaderCell = _expandedHeaderCell.default;
            _ember.default.HeaderCell = _headerCell.default;
            _ember.default.MoreHeaderCell = _moreHeaderCell.default;
            _ember.default.TableRow = _tableRow.default;
        },

        addDocumentClickListener: function addDocumentClickListener() {
            this.clickEventHandler = this.onDocumentClick.bind(this);
            document.addEventListener('mousedown', this.clickEventHandler, true);
        },

        onDocumentClick: function onDocumentClick(e) {
            var parentElement = this.getParentElement(e, '#tabPanelWatchlist');

            if (this.get('isDisplayFilter') && this.get('textFilter') === '' && parentElement && parentElement.length === 0) {
                this.set('isDisplayFilter', false);
            }
        },

        onCustomWlSelect: function onCustomWlSelect(id) {
            this.loadCustomWL(id);
            this._collapseWatchlistRow(this.get('previousRow'));

            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['onCustomWlSelect:', id].join(''));
        },

        checkSymbolAddedToCustomWatchList: function checkSymbolAddedToCustomWatchList(symbol) {
            var customWatchListArray = this.get('customWatchListArray');
            var isAddedToCustomWatchList = false;

            for (var x = 0; x < customWatchListArray.length; x++) {
                var symArray = customWatchListArray[x].stkArray;

                for (var y = 0; y < symArray.length; y++) {
                    if (symArray[y].sym === symbol) {
                        isAddedToCustomWatchList = true;
                        break;
                    }
                }
            }

            this.set('isAddedToCustomWatchList', isAddedToCustomWatchList);
        },

        triggerSymbolChange: function triggerSymbolChange(rowData) {
            var titleBar = _sharedService.default.getService('sharedUI').getService('titleBar');

            if (rowData && titleBar && titleBar.onSymbolSelected) {
                titleBar.onSymbolSelected(true);
            }

            this._super(rowData);
        },

        openGlobalSearch: function openGlobalSearch() {
            var that = this;

            _ember.default.run.next(function () {
                var enableAddToWatchList = true;
                that.sharedUIService.getService('titleBar').toggleDisplay(undefined, enableAddToWatchList, that.get('currentCustomWLId'));
            });
        },

        swipeInnerTabs: function () {
            var that = this;
            that.priceUIService.changeSwipeView(that.priceUIService.isRightSwipe);

            if (this.get('isCustomWLMode')) {
                this.refreshWidget({ exg: this.get('exg'), watchListType: this.priceService.watchListDS.watchListTypes.fullMarket });
                this.resetScroll();
            } else {
                this.onCustomWlSelect(this.get('myFavouritesIndex'));
            }

            _ember.default.run.later(function () {
                that.priceUIService.changeSwipeView(that.priceUIService.isRightSwipe, true);
            }, 1);
        }.observes('priceUIService.isInnerTabSwipe'),

        _setDefaultExchange: function _setDefaultExchange() {
            var defExg = _sharedService.default.getService('price').exchangeDS.getExchange(_sharedService.default.userSettings.price.userDefaultExg);

            this.set('exchange', defExg);
            this.set('marketTab', defExg);
            this.set('exg', defExg.exg);
        },

        _collapseWatchlistRow: function _collapseWatchlistRow(target, isContextPanelEnable) {
            var targetClicked = target;

            if (targetClicked) {
                if (!isContextPanelEnable) {
                    this.set('isContextPanel', false);
                }

                if (targetClicked.style) {
                    targetClicked.style.removeProperty('width');
                }

                var arrowIconArray = targetClicked.getElementsByClassName('icon-angle-left');

                if (arrowIconArray && arrowIconArray[0]) {
                    arrowIconArray[0].className = 'glyphicon icon-angle-right font-5x-l';
                }
            }
        },

        detailedView: function () {
            this.toggleProperty('isExpandedView');
            this.toggleProperty('isRefreshed');
        }.observes('isShowDetailedView'),

        actions: {
            deleteSymbol: function deleteSymbol(stock, watchlistId) {
                var that = this;
                var watchListId = watchlistId || watchlistId === 0 ? watchlistId : this.get('currentCustomWLId');
                var languageTexts = that.get('app').lang;

                _utils.default.messageService.showMessage(languageTexts.messages.deleteConfirmation, _utils.default.Constants.MessageTypes.Question, false, languageTexts.labels.confirm, [{ type: _utils.default.Constants.MessageBoxButtons.Ok,
                    btnAction: function btnAction() {
                        that.priceService.watchListDS.deleteSymbol(stock.content, watchListId);
                        that._collapseWatchlistRow(that.get('previousRow'));
                    }
                }, { type: _utils.default.Constants.MessageBoxButtons.Cancel,
                    btnAction: function btnAction() {
                        that._collapseWatchlistRow(that.get('previousRow'));
                    }
                }]);
            },

            onSelectOption: function onSelectOption(menu) {
                var actionId = this.get('actionId');

                switch (menu.id) {
                    case actionId.newWL:
                        this.set('showPopup', true);
                        this.set('isAddNewWL', true);

                        break;

                    case actionId.renameWL:
                        this.set('showPopup', true);
                        this.set('isRenameWL', true);

                        break;

                    case actionId.deleteWL:
                        this.deleteWatchList();
                        break;
                }
            },

            displayFilter: function displayFilter() {
                this.toggleProperty('isDisplayFilter');
            },

            openGlobalSearch: function openGlobalSearch() {
                this.openGlobalSearch();
            },

            expandColumnAction: function expandColumnAction() {
                this.set('showPopup', true);
                this.set('isWatchlistMenu', true);
            },

            showOrderTicket: function showOrderTicket(side) {
                var tradeService = _sharedService.default.getService('trade');
                var isTradeEnabledExchange = tradeService && tradeService.userDS.isTradeEnabledExchange(this.get('exg'));

                if (_appConfig.default.customisation.isTradingEnabled && isTradeEnabledExchange) {
                    _sharedService.default.getService('tradeUI').showOrderTicket(this.container, side, this.get('symInfo'));
                }
            },

            onCustomWlSelect: function onCustomWlSelect(id) {
                var customWlId = isNaN(id) ? id.id : id;
                this.onCustomWlSelect(customWlId);
            },

            onSelectExchange: function onSelectExchange(exchg) {
                _sharedService.default.userState.globalArgs.exg = this.changeExchange(exchg);
            },

            clickRow: function clickRow(selectedRow) {
                var target = event.target ? event.target : event.srcElement;
                var rowData = selectedRow.getProperties('exg', 'sym', 'inst');

                if (target) {
                    var cellId = target.attributes && target.attributes.getNamedItem('cell-id') && target.attributes.getNamedItem('cell-id').value ? target.attributes.getNamedItem('cell-id').value : '';
                    var targetArray = _ember.default.$(target).parents('[cell-id=contextMenu]');
                    var targetButtonArray = _ember.default.$(target).parents('[cell-id=menuPanel]');
                    var targetChgCell = _ember.default.$(target).parents('[cell-id=pctChg]');
                    var targetAnnIcon = _ember.default.$(target).parents('#annIcon');

                    if (cellId === 'menuPanel' || targetButtonArray && targetButtonArray.length > 0) {
                        if (rowData) {
                            this.set('symInfo', rowData);
                        }

                        return;
                    }

                    if (targetChgCell && targetChgCell.length > 0) {
                        if (!this.isIndexView && _appConfig.default.customisation.isTradingEnabled) {
                            _sharedService.default.getService('tradeUI').showOrderTicket(this.container, false, rowData);

                            return;
                        }
                    }

                    if (targetAnnIcon && targetAnnIcon.length > 0) {
                        var widgetController = _controllerFactory.default.createController(this.container, 'controller:price/widgets/announcement/symbol-announcement');
                        var viewName = 'price/widgets/announcement/components/announcement-news-popup';

                        widgetController.initializeWidget({ wn: 'symbol-announcement' });
                        widgetController.set('selectedNewAnn', selectedRow.content.lAnn.id);
                        widgetController.set('isMobile', true);

                        _sharedService.default.getService('priceUI').showChildView(viewName, widgetController, this.get('app.lang.labels.newsAnn'), 'newsPopup-' + this.get('wkey'));
                        return;
                    }

                    if (cellId !== 'contextMenu' && targetArray.length <= 0) {
                        // In case target is the top most element (closest() is not working for IE)
                        _sharedService.default.userState.globalArgs.exg = rowData.exg; // In order to change exchange of WL when click symbols in multi markets
                        this.triggerSymbolChange(rowData);
                    } else {
                        var width;

                        if (targetArray.length > 0) {
                            target = targetArray[0];
                        }

                        if (target.style.width === 100 + '%') {
                            this._collapseWatchlistRow(target);
                        } else {
                            width = 100 + '%';
                            target.getElementsByClassName('icon-angle-right')[0].className = 'glyphicon icon-angle-left font-5x-l';

                            this.checkSymbolAddedToCustomWatchList(rowData.sym);
                            this.set('isContextPanel', true);

                            if (this.get('previousRow') !== target) {
                                this._collapseWatchlistRow(this.get('previousRow'), true);
                            }
                        }

                        this.set('previousRow', target);
                        target.style.width = width;
                    }
                }
            },

            closePopup: function closePopup() {
                if (this.get('isWatchlistMenu')) {
                    this.saveWidget({ sortAsc: this.get('sortAscending'), sortCols: this.get('sortProperties') });
                }

                this.set('showPopup', false);
                this.set('isRenameWL', false);
                this.set('isAddNewWL', false);
                this.set('isWatchlistMenu', false);
            }
        }
    });


    _ember.default.Handlebars.helper('sub-markets-dropdown', _subMarketsDropdown.default);
    _ember.default.Handlebars.helper('watchlist-menu-popup', _watchlistMenuPopup.default);
});
define('universal-app/controllers/price/widgets/option-chain', ['exports', 'ember', '../../shared/table-controller', '../../controller-factory', '../../../models/shared/shared-service', '../../../config/price-widget-config', '../../../app-events', '../../../config/app-config', '../../../views/table/classic-header-cell', '../../../views/table/dual-cells/header-cell', '../../../views/table/cell', '../../../views/table/button-cell', '../../../views/table/button-menu-cell', '../../../views/table/classic-cell', '../../../views/table/classic-progress-cell', '../../../views/table/change-cell', '../../../views/table/up-down-cell', '../../../views/table/dual-cells/dot-cell', '../../../views/table/dual-cells/dual-arrow-cell', '../../../views/table/dual-cells/dual-change-cell', '../../../views/table/dual-cells/dual-text-cell', '../../../views/table/dual-cells/dual-cell', '../../../views/table/dual-cells/progress-cell', '../../../views/table/table-row'], function (exports, _ember, _tableController, _controllerFactory, _sharedService, _priceWidgetConfig, _appEvents, _appConfig, _classicHeaderCell, _headerCell, _cell, _buttonCell, _buttonMenuCell, _classicCell, _classicProgressCell, _changeCell, _upDownCell, _dotCell, _dualArrowCell, _dualChangeCell, _dualTextCell, _dualCell, _progressCell, _tableRow) {
    'use strict';

    exports.default = _tableController.default.extend({
        optPeriods: undefined,
        optPeriodArray: undefined,
        nearMonArray: undefined,
        currentOptPeriod: undefined,
        currentNearMon: undefined,
        defaultPeriod: undefined,
        enableQuoteSummary: true,
        priceService: _sharedService.default.getService('price'),
        rowHeight: '',

        isLoading: false,
        quoteSummaryWidget: undefined,
        content: _ember.default.A(),
        oneWayContent: _ember.default.computed.oneWay('arrangedContent'),
        callColumns: ['cDisSym', 'cLtp', 'cChg', 'cBbp', 'cBap', 'cVol'],
        putColumns: ['pDisSym', 'pLtp', 'pChg', 'pBbp', 'pBap', 'pVol'],
        defaultColumnIds: _priceWidgetConfig.default.optionChain.defaultColumnIds,

        onLoadWidget: function onLoadWidget() {
            this.setInitialWidgetParams();
            this._loadWidgetSymbol();

            this.set('searchID', { popup: 'searchPopup' + this.get('wkey'), search: 'search' + this.get('wkey') });
            this.set('defaultColumnMapping', _priceWidgetConfig.default.optionChain.defaultColumnMapping);
            this.set('rowHeight', _priceWidgetConfig.default.singleRowHeight);

            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();

            if (this.get('enableQuoteSummary')) {
                this._renderQuoteSummary();
            }

            this.setCellViewsScopeToGlobal();
        },

        setInitialWidgetParams: function setInitialWidgetParams() {
            var paramObj = _priceWidgetConfig.default.optionChain.paramsObject;

            if (paramObj) {
                this.set('sym', paramObj.sym ? paramObj.sym : this.get('sym'));
                this.set('exg', paramObj.exg ? paramObj.exg : this.get('exg'));
            }
        },

        onPrepareData: function onPrepareData() {
            this._loadWidgetSymbol();
            this._setNearMoneyContent();

            this.set('optPeriods', this.priceService.optionPeriodDS.getOptionPeriodList(this.get('exg'), this.get('sym')));
            this.onBaseSymbolChanged();
            this.setErrorMessage();
        },

        onAddSubscription: function onAddSubscription() {
            this._sendDataRequest({ optPeriod: '', optListType: 0, nearMon: 0, optType: 2 });
            this.priceService.addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this._removeSymbolSubscription(this.get('content'));
            this.priceService.removeSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
        },

        onClearData: function onClearData() {
            this.set('optPeriods', _ember.default.A());
            this.set('optPeriodArray', _ember.default.A());
            this.set('nearMonArray', _ember.default.A());
            this.set('content', _ember.default.A());
            this.set('currentOptPeriod', undefined);
            this.set('currentNearMon', undefined);
            this.set('defaultPeriod', undefined);

            var quoteSummaryWidget = this.get('quoteSummaryWidget');

            if (quoteSummaryWidget && _ember.default.$.isFunction(quoteSummaryWidget.onClearData)) {
                quoteSummaryWidget.onClearData();
            }
        },

        onUnloadWidget: function onUnloadWidget() {
            var quoteSummaryWidget = this.get('quoteSummaryWidget');

            if (quoteSummaryWidget && _ember.default.$.isFunction(quoteSummaryWidget.onUnloadWidget)) {
                quoteSummaryWidget.onUnloadWidget();
            }

            this.set('quoteSummaryWidget', undefined);
        },

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            _ember.default.HeaderCell = _headerCell.default;
            _ember.default.ClassicHeaderCell = _classicHeaderCell.default;
            _ember.default.Cell = _cell.default;
            _ember.default.ClassicCell = _classicCell.default;
            _ember.default.ClassicProgressCell = _classicProgressCell.default;
            _ember.default.ChangeCell = _changeCell.default;
            _ember.default.UpDownCell = _upDownCell.default;
            _ember.default.ButtonCell = _buttonCell.default;
            _ember.default.ButtonMenuCell = _buttonMenuCell.default;
            _ember.default.DotCell = _dotCell.default;
            _ember.default.DualArrowCell = _dualArrowCell.default;
            _ember.default.DualChangeCell = _dualChangeCell.default;
            _ember.default.DualTextCell = _dualTextCell.default;
            _ember.default.DualCell = _dualCell.default;
            _ember.default.ProgressCell = _progressCell.default;
            _ember.default.TableRow = _tableRow.default;
        },

        cellViewsForColumns: {
            button: 'Ember.ButtonCell',
            buttonMenu: 'Ember.ButtonMenuCell',
            classicProgressCell: 'Ember.ClassicProgressCell',
            classicCell: 'Ember.ClassicCell',
            changeCell: 'Ember.ChangeCell',
            upDown: 'Ember.UpDownCell',
            dual: 'Ember.DualCell',
            dualText: 'Ember.DualTextCell',
            dualChange: 'Ember.DualChangeCell',
            progress: 'Ember.ProgressCell',
            dot: 'Ember.DotCell',
            dualArrow: 'Ember.DualArrowCell'
        },

        onBaseSymbolChanged: function onBaseSymbolChanged() {
            var quoteSummaryWidget = this.get('quoteSummaryWidget');

            if (quoteSummaryWidget) {
                quoteSummaryWidget.onWidgetKeysChange({ sym: this.get('sym'), exg: this.get('exg'), inst: this.get('inst') });
            }
        },

        onLanguageChanged: function onLanguageChanged() {
            this.set('columnDeclarations', []);
            this.set('lan', _sharedService.default.userSettings.currentLanguage.toLowerCase());

            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();

            this._setTimeLocale();
            this._loadOptionPeriods();
            this._setNearMoneyContent();
            this.setErrorMessage();

            this.toggleProperty('isRefreshed');
        },

        _setTimeLocale: function _setTimeLocale() {
            if (this.get('lan') === 'ar') {
                this.utils.moment.locale('ar-sa'); // set this instance to use Saudi Arabic
            } else {
                this.utils.moment.locale('en');
            }
        },

        _renderQuoteSummary: function _renderQuoteSummary() {
            var controllerString = 'controller:price/widgets/quote-summery';
            var routeString = 'price/widgets/quote-summery';
            var route = this.container.lookup('route:application');
            var widgetController = _controllerFactory.default.createController(this.container, controllerString);

            widgetController.set('sym', this.get('sym'));
            widgetController.set('exg', this.get('exg'));
            widgetController.set('inst', this.get('inst'));
            widgetController.set('isShowTitle', false);
            widgetController.set('wkey', 'option-chain' + this.get('wkey'));
            widgetController.set('addBorder', '');

            widgetController.initializeWidget({ wn: controllerString });

            route.render(routeString, {
                into: 'price/widgets/option-chain',
                outlet: 'quoteSummary',
                controller: widgetController
            });

            this.set('quoteSummaryWidget', widgetController);
        },

        _sendDataRequest: function _sendDataRequest(params) {
            var that = this;
            var stockArr = this.priceService.optionStockDS.getOptionStockList(this.get('exg'), this.get('sym'), params.optPeriod);

            this.setRequestTimeout(4, 'content.length');

            if (stockArr.length > 0) {
                this.set('isLoading', true);
                that._onDataReceived(params.optPeriod);
            } else {
                this.priceService.sendOptionChainRequest({
                    sym: this.get('sym'),
                    exg: this.get('exg'),
                    inst: 0,
                    optPeriod: params.optPeriod,
                    optListType: params.optListType,
                    nearMon: params.nearMon,
                    optType: params.optType
                }, function (defaultPeriod) {
                    if (!that.get('defaultPeriod')) {
                        that.set('defaultPeriod', defaultPeriod);
                    }

                    that._onDataReceived(that.get('defaultPeriod'));
                });

                this.set('isLoading', true);
            }
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            return this.get('content').length !== 0;
        },

        getNearMoneyStocks: function getNearMoneyStocks(stockArr) {
            return stockArr.filterBy('nearMon', '1');
        },

        _onDataReceived: function _onDataReceived(defaultPeriod) {
            var stockArr = this.priceService.optionStockDS.getOptionStockList(this.get('exg'), this.get('sym'), defaultPeriod);
            var prevStocks = this.get('content');

            if (this.get('nearMoney')) {
                stockArr = this.getNearMoneyStocks(stockArr);
            }

            this.set('content', stockArr);
            this.set('isDataAvailable', true);
            this.set('isLoading', false);

            if (stockArr && stockArr.length > 0 && !_appConfig.default.customisation.isMobile) {
                var stock = stockArr[0];
                _appEvents.default.onSymbolChanged(stock.cStock.sym, stock.cStock.exg, stock.cStock.inst, this.get('selectedLink'));
            }

            this._updateSubscription(prevStocks, stockArr);
        },

        _updateSubscription: function _updateSubscription(prevStockList, newStockList) {
            this._removeSymbolSubscription(prevStockList);
            this._addSymbolSubscription(newStockList);
        },

        _addSymbolSubscription: function _addSymbolSubscription(newStockList) {
            var that = this;
            var reqData = this._generateSymbolList(newStockList);

            if (reqData.symArray.length > 0) {
                // this.priceService.addSymbolListRequest(reqData.exg, reqData.symArray, this.utils.AssetTypes.Option);

                _ember.default.$.each(reqData.symArray, function (key, val) {
                    that.priceService.addSymbolRequest(reqData.exg, val, that.utils.AssetTypes.Option);
                });
            }
        },

        _removeSymbolSubscription: function _removeSymbolSubscription(prevStockList) {
            var that = this;
            var reqData = this._generateSymbolList(prevStockList);

            if (reqData.symArray.length > 0) {
                // this.priceService.removeSymbolListRequest(reqData.exg, reqData.symArray, this.utils.AssetTypes.Option);

                _ember.default.$.each(reqData.symArray, function (key, val) {
                    that.priceService.removeSymbolRequest(reqData.exg, val, that.utils.AssetTypes.Option);
                });
            }
        },

        _generateSymbolList: function _generateSymbolList(stockList) {
            var exchange = '';
            var symbolArray = [];

            if (stockList) {
                _ember.default.$.each(stockList, function (key, val) {
                    exchange = val.optExg;
                    symbolArray[symbolArray.length] = val.get('cSym');
                    symbolArray[symbolArray.length] = val.get('pSym');
                });
            }

            return {
                exg: exchange,
                symArray: symbolArray
            };
        },

        _setOptionPeriods: function () {
            _ember.default.run.once(this, this._loadOptionPeriods);
        }.observes('optPeriods.@each'),

        _loadOptionPeriods: function _loadOptionPeriods() {
            var format;
            var periodString;
            var that = this;
            var optPeriodList = [];
            var optPeriodArr = this.get('optPeriods').sortBy('optPrd');

            _ember.default.$.each(optPeriodArr, function (key, val) {
                if (val && val.optPrd) {
                    if (val.optPrd.length === 8) {
                        periodString = val.optPrd;
                        format = 'DD MMM YYYY';
                    } else if (val.optPrd.length === 6) {
                        periodString = val.optPrd + '01';
                        format = 'MMM YYYY';
                    }

                    optPeriodList[optPeriodList.length] = {
                        code: val.optPrd,
                        desc: that.utils.moment(that.utils.formatters.convertStringToDate(periodString)).format(format)
                    };
                }
            });

            this.set('optPeriodArray', _ember.default.A(optPeriodList));

            if (optPeriodArr && optPeriodArr.length > 0) {
                this.set('currentOptPeriod', this.get('optPeriodArray')[0]);
            }
        },

        _setNearMoneyContent: function _setNearMoneyContent() {
            var allOpt = { code: 0, desc: this.get('app').lang.labels.all };
            var nearMoneyOpt = { code: 1, desc: this.get('app').lang.labels.nearMoney };

            this.set('nearMonArray', _ember.default.A([allOpt, nearMoneyOpt]));
            this.set('currentNearMon', this.get('nearMonArray')[1]);
            this.set('nearMoney', true);
        },

        _setOptionPeriod: function _setOptionPeriod(periodOption) {
            // Check periodOption.code is date string or not (Date string has 8 characters)
            var optType = periodOption.code.length === 8 ? 1 : 0;

            this.set('defaultPeriod', periodOption.code);
            this._sendDataRequest({ optPeriod: periodOption.code, optListType: 1, nearMon: 0, optType: optType });
        },

        _loadWidgetSymbol: function _loadWidgetSymbol() {
            var insType = this.get('inst');

            if (insType === this.utils.AssetTypes.Option) {
                var optionStock = this.priceService.optionStockDS.getOptionStock(this.get('exg'), this.get('sym'));

                if (optionStock) {
                    this.set('exg', optionStock.get('trdExg'));
                    this.set('sym', optionStock.get('baseSym'));
                    this.set('inst', optionStock.get('inst'));
                }
            }

            this.saveWidget({ sym: this.get('sym'), exg: this.get('exg'), inst: this.get('inst') });
        },

        _clickRow: function _clickRow(selectedRow, event) {
            var selectedLink = this.get('selectedLink');
            var selectedStock = this._getSelectedStock(selectedRow, event);

            if (selectedStock) {
                if (event && event.button === this.utils.Constants.MouseButtons.RightClick) {
                    var rightClickComponent = 'component:symbol-click-menu-popup';
                    this.menuComponent = this.container.lookup(rightClickComponent);

                    if (!this.menuComponent) {
                        // Create a symbol-click-menu-popup component object and call base-context-menu
                        this.menuComponent = this.container.lookupFactory(rightClickComponent).create({ associatedController: this });
                    } else {
                        this.menuComponent.associatedController = this;
                    }

                    var viewName = 'components/symbol-click-menu-popup';
                    var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');

                    this.menuComponent.initialize(this.get('wkey'), selectedStock);

                    if (_appConfig.default.customisation.isTradingEnabled) {
                        this.menuComponent.fullContextMenu.insertAt(0, this.menuComponent.tradeContextMenu);
                    }

                    this.menuComponent.showPopup(this.menuComponent, viewName, modal);
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.rowRightClick, ['sym:', selectedStock.sym].join(''));
                } else {
                    _appEvents.default.onSymbolChanged(selectedStock.sym, selectedStock.exg, selectedStock.inst, selectedLink);
                }
            }
        },

        _openPopupWidget: function _openPopupWidget(selectedRow, event) {
            var selectedStock = this._getSelectedStock(selectedRow, event);

            // Close menu
            var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');
            modal.send('closeModalPopup');

            if (selectedStock) {
                _sharedService.default.getService('priceUI').showPopupWidget({
                    container: this.container,
                    controllerString: 'view:symbol-popup-view'
                }, { tabId: 0, sym: selectedStock.sym, exg: selectedStock.exg, inst: selectedStock.inst });

                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.rowDoubleClick, ['sym:', selectedStock.sym, '~', 'inst:', selectedStock.inst].join(''));
            }
        },

        _getSelectedStock: function _getSelectedStock(selectedRow, event) {
            var stock;
            var target = event.target ? event.target : event.srcElement;

            if (target && target.attributes) {
                var rowData;
                var targetCell = target.attributes.getNamedItem('cell-id');
                var cellId = targetCell && targetCell.value ? targetCell.value : '';

                if (this.callColumns.indexOf(cellId) > -1) {
                    // In case target is the top most element (closest() is not working for IE)
                    rowData = selectedRow.getProperties('cSym', 'cExg', 'cInst');
                    stock = { sym: rowData.cSym, exg: rowData.cExg, inst: rowData.cInst };
                } else if (this.putColumns.indexOf(cellId) > -1) {
                    rowData = selectedRow.getProperties('pSym', 'pExg', 'pInst');
                    stock = { sym: rowData.pSym, exg: rowData.pExg, inst: rowData.pInst };
                } else {
                    if (_ember.default.$(target).parents('[cell-id=cDisSym], [cell-id=cLtp], [cell-id=cChg], [cell-id=cBbp], [cell-id=cBap], [cell-id=cVol]').length > 0) {
                        rowData = selectedRow.getProperties('cSym', 'cExg', 'cInst');
                        stock = { sym: rowData.cSym, exg: rowData.cExg, inst: rowData.cInst };
                    } else if (_ember.default.$(target).parents('[cell-id=pDisSym], [cell-id=pLtp], [cell-id=pChg], [cell-id=pBbp], [cell-id=pBap], [cell-id=pVol]').length > 0) {
                        rowData = selectedRow.getProperties('pSym', 'pExg', 'pInst');
                        stock = { sym: rowData.pSym, exg: rowData.pExg, inst: rowData.pInst };
                    }
                }
            }

            return stock;
        },

        actions: {
            setOptionPeriod: function setOptionPeriod(periodOption) {
                this._setOptionPeriod(periodOption);
            },

            setNearMoney: function setNearMoney(nearMonOption) {
                var optionPeriod = this.get('defaultPeriod') ? this.get('defaultPeriod') : '';

                this.set('nearMoney', nearMonOption.code === 1);
                this._sendDataRequest({ optPeriod: optionPeriod, optListType: 0, nearMon: nearMonOption.code });
            },

            clickRow: function clickRow(selectedRow, event) {
                this._clickRow(selectedRow, event);
            },

            doubleClickRow: function doubleClickRow(selectedRow, event) {
                this._openPopupWidget(selectedRow, event);
            },

            setLink: function setLink(option) {
                this.setWidgetLink(option);
            },

            changeSymbol: function changeSymbol(item) {
                this.set('exg', item.exg);
                this.set('sym', item.sym);
                this.set('inst', !isNaN(item.inst) ? parseInt(item.inst, 10) : undefined);

                this._loadWidgetSymbol();
                this.onWidgetKeysChange({ sym: this.get('sym'), exg: this.get('exg'), inst: this.get('inst') });
            },

            fullScreenToggle: function fullScreenToggle() {
                this.toggleFullScreen('option-chain-' + this.get('wkey'), this.get('wkey'));
                this.toggleProperty('isRefreshed');

                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['isFullScreenWL:', this.get('isFullScreenWL')].join(''));
            }
        }
    });
});
define('universal-app/controllers/price/widgets/quote-base', ['exports', 'ember', '../../base-array-controller', '../../../models/shared/shared-service', '../../../models/price/business-entities/panel-field', '../../../models/price/price-constants', '../../../app-events'], function (exports, _ember, _baseArrayController, _sharedService, _panelField, _priceConstants, _appEvents) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        stock: null,
        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onPrepareData: function onPrepareData() {
            this.set('stock', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['sym:', this.get('sym'), '~', this.get('exg')].join(''));
        },

        onAddSubscription: function onAddSubscription() {
            this.priceService.addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
        },

        onClearData: function onClearData() {
            this.set('stock', []);
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this.priceService.removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
        },

        renderPanelFields: function renderPanelFields(quoteConfig, panelFieldsRef) {
            try {
                var stockObj = this.get('stock');
                var assetType = stockObj.get('ast');
                // If quote configuration is unavailable for given asset type, configuration for default asset type will be loaded.
                var fields = quoteConfig[assetType] ? quoteConfig[assetType] : quoteConfig[this.utils.Constants.DefaultAssetType];
                var noOfDecimals;

                if (stockObj.get('deci')) {
                    noOfDecimals = stockObj.get('deci');
                } else {
                    noOfDecimals = _sharedService.default.userSettings.displayFormat.decimalPlaces;
                }

                if (fields && panelFieldsRef) {
                    _ember.default.$.each(fields, function (fieldId, field) {
                        var fieldObj = _panelField.default.create({ valueObj: stockObj, fieldObj: field, noOfDecimals: typeof field.noOfDecimals === 'undefined' ? noOfDecimals : field.noOfDecimals });

                        if (field.isComponent) {
                            fieldObj.isComponent = true;

                            switch (field.comType) {
                                case _priceConstants.default.PriceComponent.DaysRange:
                                    fieldObj.isDaysRangeCom = true;
                                    break;

                                case _priceConstants.default.PriceComponent.FiftyTwoWeekHighLow:
                                    fieldObj.isFiftyTwoWeek = true;
                                    break;

                                case _priceConstants.default.PriceComponent.CashMap:
                                    fieldObj.isCashMap = true;
                                    break;
                            }
                        }
                        panelFieldsRef.pushObject(fieldObj);
                    });
                }
            } catch (x) {
                this.utils.logger.logError('Error in rendering detail quote panel fields : ' + x);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/quote-fundamental', ['exports', 'ember', '../../../controllers/price/widgets/quote-base', '../../../config/price-widget-config'], function (exports, _ember, _quoteBase, _priceWidgetConfig) {
    'use strict';

    exports.default = _quoteBase.default.extend({
        panelFields: _ember.default.A(),

        onPrepareData: function onPrepareData() {
            this._super();
            this.renderPanelFields();
        },

        onLanguageChanged: function onLanguageChanged() {
            this.renderPanelFields();
        },

        renderPanelFields: function renderPanelFields() {
            var panelFields = this.get('panelFields');
            panelFields.clear();
            this._super(_priceWidgetConfig.default.quote.panelFundamental, panelFields);
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/quote-intraday-performance', ['exports', 'ember', '../../../components/stk-specific-components/fifty-two-wk-hl', '../../../components/stk-specific-components/days-range', '../../../components/stk-specific-components/cash-map', '../../../controllers/price/widgets/quote-base', '../../../config/price-widget-config'], function (exports, _ember, _fiftyTwoWkHl, _daysRange, _cashMap, _quoteBase, _priceWidgetConfig) {
    'use strict';

    exports.default = _quoteBase.default.extend({
        dimensions: {
            w: 4,
            h: 30
        },

        panelFields: _ember.default.A(),

        onPrepareData: function onPrepareData() {
            this._super();
            this.renderPanelFields();
        },

        onAfterRender: function onAfterRender() {
            this.generateScrollBar();
        },

        onLanguageChanged: function onLanguageChanged() {
            this.renderPanelFields();
        },

        renderPanelFields: function renderPanelFields() {
            var panelFields = this.get('panelFields');
            panelFields.clear();
            this._super(_priceWidgetConfig.default.quote.panelIntraday, panelFields);
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });


    _ember.default.Handlebars.helper('fifty-two-wk-hl', _fiftyTwoWkHl.default);
    _ember.default.Handlebars.helper('days-range', _daysRange.default);
    _ember.default.Handlebars.helper('cash-map', _cashMap.default);
});
define('universal-app/controllers/price/widgets/quote-market-depth', ['exports', 'ember', '../../../models/shared/shared-service', '../../base-array-controller', '../../../models/price/price-constants', '../../../config/app-config', '../../../app-events'], function (exports, _ember, _sharedService, _baseArrayController, _priceConstants, _appConfig, _appEvents) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        dimensions: {
            w: 3,
            h: 33
        },
        symbolObj: {},
        bidRecordList: _ember.default.A(),
        offerRecordList: _ember.default.A(),
        isMarketDepthByPrice: true,
        title: null,
        isShowTitle: true,

        priceService: _sharedService.default.getService('price'),

        isMobile: function () {
            return _appConfig.default.customisation.isMobile;
        }.property(),

        isDelayedUser: function () {
            return this.priceService.userDS.isExchangeDelayed(this.get('exg'));
        }.property('exg'),

        isShowUpgrade: function () {
            return this.utils.validators.isAvailable(_appConfig.default.subscriptionConfig.upgradeSubscriptionPath) && this.get('isDelayedUser');
        }.property('exg'),

        titleSymbol: function () {
            return this.get('isMobile') ? '' : this.get('symbolObj.dispProp1');
        }.property('symbolObj.dispProp1'),

        // Base overrides
        onLoadWidget: function onLoadWidget() {
            var mode = this.get('mode');
            var isShowTitle = this.get('hideTitle') ? !this.get('hideTitle') : true;

            this.set('isShowTitle', isShowTitle);
            mode = mode ? mode : _priceConstants.default.MarketDepthType.DepthByPrice;
            this.set('isMarketDepthByPrice', mode === _priceConstants.default.MarketDepthType.DepthByPrice);

            this.setTitle();
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onLanguageChanged: function onLanguageChanged() {
            this.setTitle();
        },

        onAfterRender: function onAfterRender() {
            this.generateScrollBar(this.get('wkey'), 2000);
        },

        onPrepareData: function onPrepareData() {
            var exchange = this.get('exg');
            var symbol = this.get('sym');
            var mode = this.get('mode') ? this.get('mode') : _priceConstants.default.MarketDepthType.DepthByPrice;
            var depthObj = {};

            if (symbol && exchange) {
                this.set('symbolObj', this.priceService.stockDS.getStock(exchange, symbol));
                depthObj = this.priceService.marketDepthDS.getDepthItem(exchange, symbol, mode);
            }

            this.set('bidRecordList', depthObj.bidRecords);
            this.set('offerRecordList', depthObj.offerRecords);
        },

        onAddSubscription: function onAddSubscription() {
            var exchange = this.get('exg');
            var symbol = this.get('sym');

            if (symbol && exchange) {
                if (this.get('isMarketDepthByPrice')) {
                    this.priceService.addMarketDepthByPriceRequest(exchange, symbol);
                    this.utils.analyticsService.trackEvent([this.get('gaKey'), '-by-price'].join(''), this.utils.Constants.GAActions.show, ['sym:', this.get('sym'), '~', this.get('exg')].join(''));
                } else {
                    this.priceService.addMarketDepthByOrderRequest(exchange, symbol);
                    this.utils.analyticsService.trackEvent([this.get('gaKey'), '-by-order'].join(''), this.utils.Constants.GAActions.show, ['sym:', this.get('sym'), '~', this.get('exg')].join(''));
                }

                this.priceService.addSymbolRequest(exchange, symbol, this.get('inst'));
            }
        },

        onRemoveSubscription: function onRemoveSubscription() {
            var exchange = this.get('exg') ? this.get('exg') : this.get('symbolObj').exg; // Initial implementation is to get it from this.get('symbolObj').exg only - temp comment
            var symbol = this.get('sym') ? this.get('sym') : this.get('symbolObj').sym;
            var insType = this.get('inst') ? this.get('inst') : this.get('symbolObj').inst;

            if (this.get('isMarketDepthByPrice')) {
                this.priceService.removeMarketDepthByPriceRequest(exchange, symbol);
            } else {
                this.priceService.removeMarketDepthByOrderRequest(exchange, symbol);
            }

            this.priceService.removeSymbolRequest(exchange, symbol, insType);
        },

        onUnloadWidget: function onUnloadWidget() {
            this.set('symbolObj', null);
            this.set('bidRecordList', _ember.default.A());
            this.set('offerRecordList', _ember.default.A());

            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        setTitle: function setTitle() {
            var mode = this.get('mode');
            var title = mode === _priceConstants.default.MarketDepthType.DepthByPrice ? this.get('app').lang.labels.depthByPrice : this.get('app').lang.labels.depthByOrder;

            this.set('title', title);
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/quote-summery', ['exports', 'ember', '../../base-controller', '../../../models/shared/shared-service', '../../../components/stk-specific-components/cash-map', '../../../components/stk-specific-components/days-range', '../../../components/stk-specific-components/fifty-two-wk-hl', '../../../views/table/symbol-indicator-helper', '../../../helpers/responsive-handler', '../../../config/app-config', '../../../app-events'], function (exports, _ember, _baseController, _sharedService, _cashMap, _daysRange, _fiftyTwoWkHl, _symbolIndicatorHelper, _responsiveHandler, _appConfig, _appEvents) {
    'use strict';

    exports.default = _baseController.default.extend({
        dimensions: {
            w: 8,
            h: 6
        },

        stock: {},
        dcfsToolTip: null,
        addBorder: 'widget_new widget-new-border',

        priceService: _sharedService.default.getService('price'),
        isTablet: _appConfig.default.customisation.isTablet,

        onLoadWidget: function onLoadWidget() {
            _appEvents.default.subscribeSymbolChanged(this.get('wkey'), this, this.get('selectedLink'));
        },

        onPrepareData: function onPrepareData() {
            this.set('stock', this.priceService.stockDS.getStock(this.get('exg'), this.get('sym'), this.get('inst')));
        },

        onAddSubscription: function onAddSubscription() {
            this.priceService.addSymbolRequest(this.get('exg'), this.get('sym'), this.get('inst'));
        },

        onClearData: function onClearData() {
            this.set('stock', []);
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this.priceService.removeIndexRequest(this.get('exg'), this.get('sym'), this.get('inst'));
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeSymbolChanged(this.get('wkey'), this.get('selectedLink'));
        },

        initializeResponsive: function initializeResponsive() {
            this.set('responsive', _responsiveHandler.default.create({ controller: this, widgetId: 'quoteSummery-' + this.get('wkey'), callback: this.onResponsive }));

            this.responsive.addList('quoteSummery-right', [{ id: 'quoteSummery-cashMap', width: 800 }]);

            this.responsive.initialize();
        },

        onResponsive: function onResponsive() {
            // Since this is a component empty callback has to be here
        },

        quoteSettings: {
            intZero: 0,
            emptyString: '',
            styles: {
                upForeColor: 'up-fore-color',
                downForeColor: 'down-fore-color',
                white: 'white',
                upArrow: 'glyphicon-triangle-top glyphicon ',
                downArrow: 'glyphicon-triangle-bottom glyphicon '
            }
        },

        updatePercentageChangeCss: function () {
            var changeSign, perChgCss;
            var changeCss = '';
            var pctChg = this.stock.get('pctChg');

            if (pctChg > this.quoteSettings.intZero) {
                changeSign = this.quoteSettings.styles.upArrow;
                perChgCss = this.quoteSettings.styles.upForeColor;
                changeCss = this.quoteSettings.styles.upForeColor;
            } else if (pctChg < this.quoteSettings.intZero) {
                changeSign = this.quoteSettings.styles.downArrow;
                perChgCss = this.quoteSettings.styles.downForeColor;
                changeCss = this.quoteSettings.styles.downForeColor;
            } else {
                changeSign = this.quoteSettings.emptyString;
                perChgCss = this.quoteSettings.styles.white;
            }

            this.set('changeSign', changeSign);
            this.set('perChgCss', perChgCss);
            this.set('changeCss', changeCss);
        }.observes('stock.pctChg'),

        dcfsStyle: function () {
            var dcfsObj = _symbolIndicatorHelper.default.formatDcfsValueStyle(this.get('stock.dcfs'));
            this.set('dcfsToolTip', this.get('app').lang.labels[dcfsObj.dcfsToolTip]);

            return dcfsObj.dcfsClass;
        }.property('stock.dcfs'),

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        }
    });


    _ember.default.Handlebars.helper('cash-map', _cashMap.default);
    _ember.default.Handlebars.helper('days-range', _daysRange.default);
    _ember.default.Handlebars.helper('fifty-two-wk-hl', _fiftyTwoWkHl.default);
});
define('universal-app/controllers/price/widgets/quote-top-panel', ['exports', 'ember', '../../../controllers/price/widgets/quote-intraday-performance', '../../../controllers/controller-factory'], function (exports, _ember, _quoteIntradayPerformance, _controllerFactory) {
    'use strict';

    exports.default = _quoteIntradayPerformance.default.extend({
        adjustedPanelFields: _ember.default.A(),

        onAfterRender: function onAfterRender() {
            this._renderQuoteSummary();
        },

        _renderQuoteSummary: function _renderQuoteSummary() {
            var controllerString = 'controller:price/widgets/quote-summery';
            var routeString = 'price/widgets/quote-summery';
            var route = this.container.lookup('route:application');
            var widgetController = _controllerFactory.default.createController(this.container, controllerString);

            widgetController.set('sym', this.get('sym'));
            widgetController.set('exg', this.get('exg'));
            widgetController.set('inst', this.get('inst'));
            widgetController.set('isShowTitle', false);
            widgetController.set('wkey', 'quote-top-panel' + this.get('wkey'));
            widgetController.set('addBorder', '');
            widgetController.set('selectedLink', this.get('selectedLink'));

            widgetController.initializeWidget({ wn: controllerString });

            route.render(routeString, {
                into: 'price/widgets/quote-top-panel',
                outlet: 'quoteSummary',
                controller: widgetController
            });

            this.set('quoteSummaryWidget', widgetController);
        },

        renderPanelFields: function renderPanelFields() {
            this._super();

            var panelFields = this.get('panelFields');
            var noOfColumns = 5;
            var adjustedPanelFieldList = [];

            var numOfRows = Math.ceil(panelFields.length / noOfColumns);
            var emptyCols = numOfRows - panelFields.length % numOfRows;
            var maxColumnIndex = 0;
            var rowIndex = 0;

            _ember.default.$.each(panelFields, function (key, field) {
                if (key >= maxColumnIndex) {
                    maxColumnIndex = maxColumnIndex + noOfColumns;
                    rowIndex = maxColumnIndex / noOfColumns - 1;
                }

                var colIndex = key - maxColumnIndex + noOfColumns;

                if (!adjustedPanelFieldList[colIndex]) {
                    adjustedPanelFieldList[colIndex] = [];
                }

                adjustedPanelFieldList[colIndex][rowIndex] = field;
            });

            var firstRow = adjustedPanelFieldList[0]; // This contains max no of elements

            for (var rowNo = 0; rowNo < emptyCols; rowNo++) {
                adjustedPanelFieldList[noOfColumns - rowNo - 1][firstRow.length - 1] = { caption: 'empty row', formattedValue: '', captionStyle: 'visibility-hidden' };
            }

            this.set('adjustedPanelFields', adjustedPanelFieldList);
        }
    });
});
define('universal-app/controllers/price/widgets/sector-overview', ['exports', 'ember', '../../../models/shared/shared-service', '../../base-array-controller', '../../../components/bootstrap-dropdown-select', '../../controller-factory', '../../../app-events', '../../../config/app-config', '../../../config/price-widget-config'], function (exports, _ember, _sharedService, _baseArrayController, _bootstrapDropdownSelect, _controllerFactory, _appEvents, _appConfig, _priceWidgetConfig) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        dimensions: {
            w: 3,
            h: 17
        },

        fieldList: _ember.default.A([]),

        // Sort fields of sector overview drop down
        SortByFieldsMappingTradedVolume: '1',
        SortByFieldsMappingTurnover: '2',
        SortByFieldsMappingChangePer: '3',
        SortByFieldsMappingChange: '4',
        SortByFieldsMappingNumberOfTrades: '5',

        // Options for sector overview drop down
        isDropdownAvailable: true,
        sortBySelectBox: [],
        defaultCriteria: {},

        selectedSortOrder: null,
        mainIndex: undefined,

        // Data collection related variables
        // Array controller content
        content: undefined,

        // Sort property of array controller
        sortProperties: ['vol'],

        // Collection sorting order
        sortAscending: false,
        maxNumberOfElementsToShow: 5,

        // CSS related variables
        indexArrowCssTop: 'glyphicon glyphicon-triangle-top up-fore-color',
        indexArrowCssBottom: 'glyphicon glyphicon-triangle-bottom down-fore-color',
        upColorCss: 'up-fore-color',
        downColorCss: 'down-fore-color',

        // Full Screen parameters
        previousParent: null,
        previousWatchListStyleAttribute: null,
        previousFullScreenContainerStyleAttribute: null,
        isFullScreenMode: false,
        watchListController: null,

        // Column widths
        descColumnWidth: '35%',
        sortedPropertyWidth: '30%',

        priceService: _sharedService.default.getService('price'),
        isTablet: _appConfig.default.customisation.isTablet,

        /* *
         * This will called by based controller
         */
        onLoadWidget: function onLoadWidget() {
            this.setLanguageParameters();
            _appEvents.default.subscribeExchangeChanged(-1, this.get('wkey'), this);

            var maxNumberOfElementsInTablet = 9;
            this.set('maxNumberOfElementsToShow', this.isTablet ? maxNumberOfElementsInTablet : this.maxNumberOfElementsToShow);
            this.set('isDropdownAvailable', !this.isTablet);
        },

        onPrepareData: function onPrepareData() {
            this.set('content', this.priceService.stockDS.getIndexCollectionByExchange(this.get('exg')));
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['exg:', this.get('exg')].join(''));
            this.bindData();
        },

        onAddSubscription: function onAddSubscription() {
            // Sector Overview required full marker Sector indices and Main index Details
            this.priceService.addFullMarketIndexRequest(_sharedService.default.userSettings.price.currentExchange);
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this.priceService.removeFullMarketIndexRequest(_sharedService.default.userSettings.price.currentExchange);
        },

        bindData: function bindData() {
            var that = this;
            var sectorOverviewConfig = _priceWidgetConfig.default.sectorOverview;
            var fields = sectorOverviewConfig ? sectorOverviewConfig.fields : '';

            if (fields) {
                var fieldList = [];

                _ember.default.$.each(sectorOverviewConfig.fields, function (key, item) {
                    fieldList[fieldList.length] = { name: that.get('app').lang.labels[item] };
                });

                this.set('fieldList', fieldList);
            }
        },

        sortOrderChanged: function () {
            var selectedSortOrder = this.get('selectedSortOrder.val');
            var sortProperties = ['vol'];
            var sortedPropertyWidth = '20%';
            var descColumnWidth = '40%';
            this.set('sortAscending', false);

            switch (selectedSortOrder) {
                case this.SortByFieldsMappingTurnover:
                    sortProperties = ['tovr'];
                    sortedPropertyWidth = '28%';
                    descColumnWidth = '32%';
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['sortby:', 'turnover'].join(''));
                    break;

                case this.SortByFieldsMappingChangePer:
                    sortProperties = ['pctChg'];
                    sortedPropertyWidth = '15%';
                    descColumnWidth = '45%';
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['sortby:', '%chg'].join(''));
                    break;

                case this.SortByFieldsMappingChange:
                    sortProperties = ['chg'];
                    sortedPropertyWidth = '15%';
                    descColumnWidth = '45%';
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['sortby:', 'chg'].join(''));
                    break;

                case this.SortByFieldsMappingNumberOfTrades:
                    sortProperties = ['trades'];
                    sortedPropertyWidth = '15%';
                    descColumnWidth = '45%';
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['sortby:', 'trades'].join(''));
                    break;

                default:
                    // For SortByFieldsMappingTradedVolume
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['sortby:', 'volume'].join(''));
                    break;
            }

            this.set('sortProperties', sortProperties);
            this.set('sortedPropertyWidth', sortedPropertyWidth);
            this.set('descColumnWidth', descColumnWidth);
        }.observes('selectedSortOrder'),

        sortedContent: function () {
            // Get sorted array
            // Please check local variable (sortProperties) to understand sort by property
            var sortedArray = this.get('arrangedContent');
            var selectedSortOrder = this.get('selectedSortOrder.val', 'selectedSortOrder.des');
            var filteredArray = [];
            var mainIndicesCount = 0;
            var that = this;

            // Filter only five elements of the collection
            _ember.default.$.each(sortedArray, function (index, indexObject) {
                var sortedProperty = that.utils.formatters.formatNumber(indexObject.vol, 0);

                switch (selectedSortOrder) {
                    case that.SortByFieldsMappingTradedVolume:
                        sortedProperty = indexObject.vol > 0 ? that.utils.formatters.formatNumber(indexObject.vol, 0) : 0;
                        break;

                    case that.SortByFieldsMappingTurnover:
                        sortedProperty = indexObject.tovr > 0 ? that.utils.formatters.formatNumber(indexObject.tovr, 2) : 0;
                        break;

                    case that.SortByFieldsMappingChangePer:
                        sortedProperty = that.utils.formatters.formatNumberPercentage(indexObject.pctChg, 2);
                        break;

                    case that.SortByFieldsMappingChange:
                        sortedProperty = that.utils.formatters.formatNumber(indexObject.chg, 2);
                        break;

                    case that.SortByFieldsMappingNumberOfTrades:
                        sortedProperty = indexObject.trades > 0 ? that.utils.formatters.formatNumber(indexObject.trades, 0) : 0;
                        break;
                }

                // Ignore main indices
                if (indexObject.isMainIdx) {
                    mainIndicesCount++;
                    return true;
                }

                // Break the loop if max number of elements reached
                if (index >= that.get('maxNumberOfElementsToShow') + mainIndicesCount) {
                    return false;
                }

                filteredArray.push(indexObject);

                indexObject.set('sortedProperty', sortedProperty);
                indexObject.set('isNegative', indexObject.pctChg < 0);
            }); // End loop

            return filteredArray;
        }.property('arrangedContent.@each.chg'),

        setWidgetForScreenMode: function setWidgetForScreenMode() {
            var viewName = 'price/widgets/watch-list/index-watch-list';
            var watchListController = this.get('watchListController') || _controllerFactory.default.createController(this.container, 'controller:' + viewName);

            if (this.get('isFullScreenMode')) {
                watchListController.initializeWidget();
                var route = this.container.lookup('route:application');

                route.render(viewName, {
                    into: 'price/widgets/sector-overview',
                    outlet: 'wlWidgetOutlet',
                    controller: watchListController
                });

                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.maximize);
            } else {
                watchListController.closeWidget();
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.restore);
            }
        },

        toggleFullScreenMode: function toggleFullScreenMode() {
            this.set('isFullScreenMode', !this.get('isFullScreenMode'));
            var fullScreenContainer = document.getElementById('fullScreenContainer');
            var sectorOverviewContainer = document.getElementById('sectorOverviewContainer');
            this.setWidgetForScreenMode();

            if (!this.get('previousParent')) {
                this.set('previousParent', sectorOverviewContainer.parentElement);
                this.set('previousWatchListStyleAttribute', sectorOverviewContainer.getAttribute('style'));
                this.set('previousFullScreenContainerStyleAttribute', fullScreenContainer.getAttribute('style'));
                fullScreenContainer.appendChild(sectorOverviewContainer);
                sectorOverviewContainer.setAttribute('style', 'position: absolute; left: 0; top: 0; bottom: 0; right: 0;');
                fullScreenContainer.setAttribute('style', 'z-index:300; position: absolute; top: 0; width: 100%; height: 100%');

                var body = document.body;
                var html = document.documentElement;
                var height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
                sectorOverviewContainer.setAttribute('style', 'height:' + height + 'px');
            } else {
                this.get('previousParent').appendChild(sectorOverviewContainer);
                sectorOverviewContainer.setAttribute('style', this.get('previousWatchListStyleAttribute'));
                fullScreenContainer.setAttribute('style', this.get('previousFullScreenContainerStyleAttribute'));
                this.set('previousParent', null);
            }
        },

        onLanguageChanged: function onLanguageChanged() {
            this.setLanguageParameters();
            this.bindData();
        },

        setLanguageParameters: function setLanguageParameters() {
            var sortBySelectBox = [{ name: this.get('app').lang.labels.volume, val: '1' }, { name: this.get('app').lang.labels.turnover, val: '2' }, { name: this.get('app').lang.labels.perChange, val: '3' }, { name: this.get('app').lang.labels.change, val: '4' }, { name: this.get('app').lang.labels.trades, val: '5' }];

            this.set('sortBySelectBox', sortBySelectBox);

            var defaultSelected = sortBySelectBox[0];
            defaultSelected.selectedDesc = defaultSelected.name;
            this.set('defaultCriteria', defaultSelected);
        },

        actions: {
            toggleSectorOverview: function toggleSectorOverview() {
                this.toggleFullScreenMode();
            },

            onSortChanged: function onSortChanged(item) {
                this.set('selectedSortOrder', item);
                this.sortOrderChanged();
            }
        }
    });


    _ember.default.Handlebars.helper('bootstrap-dropdown-select', _bootstrapDropdownSelect.default);
});
define('universal-app/controllers/price/widgets/sub-market-overview', ['exports', 'ember', '../../shared/table-controller', '../../../models/shared/shared-service', '../../../app-events'], function (exports, _ember, _tableController, _sharedService, _appEvents) {
    'use strict';

    exports.default = _tableController.default.extend({
        priceService: _sharedService.default.getService('price'),
        subMarketArray: _ember.default.A(),
        wkey: 'sub-market-overview', // Will be used when open as Child View only
        selectedLink: 1,

        onLoadWidget: function onLoadWidget() {
            _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
            this.setErrorMessage();
            this.setRequestTimeout(4, 'subMarketArray.length');
        },

        onPrepareData: function onPrepareData() {
            this.set('exchange', this.priceService.exchangeDS.getExchange(this.get('exg')));
        },

        onAddSubscription: function onAddSubscription() {
            this.priceService.addExchangeRequest(this.get('exg'));
        },

        onClearData: function onClearData() {
            this.set('subMarketArray', _ember.default.A());
            this.set('exchange', undefined);
        },

        onUnloadWidget: function onUnloadWidget() {
            _appEvents.default.unSubscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this.priceService.removeExchangeRequest(this.exg);
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            return this.get('subMarketArray').length !== 0;
        },

        _loadSubMarkets: function () {
            this.set('subMarketArray', _ember.default.A());

            if (this.get('exchange.subMarketArray')) {
                this.get('subMarketArray').pushObjects(this.get('exchange.subMarketArray'));
            }
        }.observes('exchange.subMarketArray')
    });
});
define('universal-app/controllers/price/widgets/sub-market-summary', ['exports', 'ember', './sub-market-overview', '../../../config/price-widget-config', '../../../app-events', '../../../views/table/dual-cells/header-cell', '../../../views/table/cell', '../../../views/table/classic-cell', '../../../views/table/table-row', '../../../views/table/dual-cells/dual-cell'], function (exports, _ember, _subMarketOverview, _priceWidgetConfig, _appEvents, _headerCell, _cell, _classicCell, _tableRow, _dualCell) {
    'use strict';

    exports.default = _subMarketOverview.default.extend({
        defaultColumnIds: _priceWidgetConfig.default.subMarketSummary.defaultColumnIds,
        rowHeight: _priceWidgetConfig.default.subMarketSummary.tableParams.RowHeight,
        minHeaderHeight: _priceWidgetConfig.default.subMarketSummary.tableParams.MinHeaderHeight,
        hideWidgetLink: true,
        isShowTitle: true,

        onLoadWidget: function onLoadWidget() {
            this.setCellViewsScopeToGlobal();
            this.set('title', this.get('app').lang.labels.subMarket);
            this.set('isShowTitle', !this.get('hideTitle'));
            this.setTitle();
            this.set('defaultColumnMapping', _priceWidgetConfig.default.subMarketSummary.defaultColumnMapping);
            _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);

            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();
        },

        onPrepareData: function onPrepareData() {
            this._super();
            this.loadContent();
        },

        loadContent: function loadContent() {
            var subMarketArray = this.get('subMarketArray');

            this.set('content', subMarketArray);
            this.set('masterContent', subMarketArray);
        },

        onClearData: function onClearData() {
            this._super();

            this.set('content', _ember.default.A());
            this.set('masterContent', _ember.default.A());
        },

        cellViewsForColumns: {
            cell: 'Ember.Cell',
            classicCell: 'Ember.ClassicCell',
            dual: 'Ember.DualCell'
        },

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            _ember.default.HeaderCell = _headerCell.default;
            _ember.default.Cell = _cell.default;
            _ember.default.ClassicCell = _classicCell.default;
            _ember.default.TableRow = _tableRow.default;
            _ember.default.DualCell = _dualCell.default;
        },

        onLanguageChanged: function onLanguageChanged() {
            this.setTitle();
            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();
            this.toggleProperty('isRefreshed');
        },

        setTitle: function setTitle() {
            this.set('title', this.get('app').lang.labels.subMarket);
        },

        actions: {
            sort: function sort(column) {
                if (!column.get('isSortSupported')) {
                    return;
                }

                if (this.get('sortColumn') !== column) {
                    this.get('columns').setEach('isSorted', false);

                    column.set('isSorted', true);

                    this.set('sortColumn', column);
                    this.set('sortProperties', [column.get('sortKey')]);
                    this.set('isSortApplied', true);
                } else if (this.get('sortColumn') === column) {
                    // Handle disabling sorts
                    if (this.get('sortAscending') === true) {
                        this.set('sortColumn', undefined);
                        this.set('sortAscending', false);

                        column.set('isSorted', false);

                        this.set('isSortApplied', false);
                        this.set('sortProperties', []);
                    } else {
                        this.set('sortProperties', [column.get('sortKey')]);
                        this.toggleProperty('sortAscending');
                    }
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/time-and-sales/market-time-and-sales', ['exports', './quote-time-and-sales', '../../../../config/price-widget-config', '../../../../models/shared/shared-service', '../../../../app-events', '../../../../config/app-config'], function (exports, _quoteTimeAndSales, _priceWidgetConfig, _sharedService, _appEvents, _appConfig) {
    'use strict';

    exports.default = _quoteTimeAndSales.default.extend({
        BacklogBatchSize: _priceWidgetConfig.default.marketTimeAndSales.BacklogBatchSize,

        isFullMarket: true,
        defaultColumnIds: _priceWidgetConfig.default.marketTimeAndSales.defaultColumnIds,
        defaultColumnMapping: _priceWidgetConfig.default.marketTimeAndSales.defaultColumnMapping,
        isMobile: _appConfig.default.customisation.isMobile,

        onLoadWidget: function onLoadWidget() {
            this._super();
            this.setTitle();
            _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);

            // TODO: [satheeqh] Need to generalize this for mobile
            if (_appConfig.default.customisation.isMobile && window && window.screen && window.screen.width <= this.LowResolutionWidth) {
                this.columnDeclarations = this.columnDeclarations.splice(0, this.columnDeclarations.length - 1);
            }
        },

        onPrepareData: function onPrepareData() {
            this.set('sym', undefined); // Symbol not required for market T&S
            this._super();
        },

        onRemoveSubscription: function onRemoveSubscription() {
            _sharedService.default.getService('price').removeMarketTimeAndSalesRequest(this.get('exg'));
        },

        setTitle: function setTitle() {
            var title = this.get('app').lang.labels.marketTimeAndSales;
            this.set('title', title);
        },

        actions: {
            clickRow: function clickRow(selectedRow) {
                if (_appConfig.default.customisation.isMobile) {
                    var rowData = selectedRow.getProperties('exg', 'sym', 'inst');
                    var quoteMenuId = _appConfig.default.widgetId ? _appConfig.default.widgetId.quoteMenuId : '';
                    var watchListMenuId = _appConfig.default.widgetId ? _appConfig.default.widgetId.watchListMenuId : '';
                    var sharedUIService = _sharedService.default.getService('sharedUI');

                    if (quoteMenuId) {
                        if (_appConfig.default.customisation.isCompactMenuEnabled) {
                            sharedUIService.navigateMenu(watchListMenuId, quoteMenuId);
                        } else {
                            sharedUIService.navigateMenu(quoteMenuId);
                        }
                    }

                    _appEvents.default.onSymbolChanged(rowData.sym, rowData.exg, rowData.inst, this.get('selectedLink'));
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/time-and-sales/quote-time-and-sales', ['exports', 'ember', '../../../shared/table-controller', '../../../../views/table/dual-cells/header-cell', '../../../../views/table/cell', '../../../../views/table/classic-cell', '../../../../views/table/buy-sell-cell', '../../../../views/table/up-down-cell', '../../../../config/price-widget-config', '../../../../views/table/table-row', './time-and-sales-array-proxy', '../../../../models/price/price-constants', '../../../../app-events', '../../../../models/shared/shared-service', '../../../../config/app-config'], function (exports, _ember, _tableController, _headerCell, _cell, _classicCell, _buySellCell, _upDownCell, _priceWidgetConfig, _tableRow, _timeAndSalesArrayProxy, _priceConstants, _appEvents, _sharedService, _appConfig) {
    'use strict';

    exports.default = _tableController.default.extend({
        InitialBacklogSize: 50,
        BacklogRequestFactor: 0.7,
        BacklogBatchSize: _priceWidgetConfig.default.timeAndSales.BacklogBatchSize,

        customArrayProxy: undefined,
        tradeStore: {},
        isBacklogInitialized: false,
        minHeaderHeight: 25,

        // Column Parameters
        defaultColumnIds: _priceWidgetConfig.default.timeAndSales.defaultColumnIds,
        defaultColumnMapping: _priceWidgetConfig.default.timeAndSales.defaultColumnMapping,
        isShowTitle: true,
        stockDetails: {},
        rowHeight: '',

        isRefreshed: false,
        isFullMarket: false,
        tsPopUpWindow: undefined,

        dataLoadingIndicatorId: '',
        indicatorConfig: { isEmptyRowEnabled: true },

        exchange: {},

        priceService: _sharedService.default.getService('price'),

        isDelayedUser: function () {
            return this.priceService.userDS.isExchangeDelayed(this.get('exg'));
        }.property('exg'),

        isShowUpgrade: function () {
            return this.utils.validators.isAvailable(_appConfig.default.subscriptionConfig.upgradeSubscriptionPath) && this.get('isDelayedUser');
        }.property('exg'),

        onLoadWidget: function onLoadWidget() {
            var wkey = this.get('wkey');
            var isShowTitle = this.get('hideTitle') ? !this.get('hideTitle') : true;

            this.set('dataLoadingIndicatorId', ['loadingIndicator', wkey].join('-'));
            this.set('isShowTitle', isShowTitle);
            this.setCellViewsScopeToGlobal();
            this.set('rowHeight', _priceWidgetConfig.default.singleRowHeight);

            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();

            if (!this.isFullMarket) {
                _appEvents.default.subscribeSymbolChanged(wkey, this, this.get('selectedLink'));
            } else {
                _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), wkey, this);
            }

            this.priceService.subscribeConnectionStatusChanged(wkey, this);
        },

        onAfterRender: function onAfterRender() {
            // To enable resizing the table in symbol-popup-view when resizing the popup window
            var widgetId = 'div#' + _ember.default.PopupContainerView.elementId;
            this.tsPopUpWindow = document.querySelector(widgetId);

            if (this.tsPopUpWindow) {
                this.tsPopUpWindow.onresize = this.bindFn(this.resizeTimeAndSalesTable);
            }
        },

        onPrepareData: function onPrepareData() {
            var exchange = this.get('exg');
            var symbol = this.get('sym');

            this.set('exchange', this.priceService.exchangeDS.getExchange(exchange));

            // Subscribe to data store in order to keep informed with backlog data ready and cache clear check.
            this.priceService.timeAndSalesDS.subscribeSymTS(exchange, symbol, this.get('wkey'), this);
            this.set('tradeStore', this.priceService.timeAndSalesDS.getTradeCollection(exchange, symbol));

            this.configArrayProxy();
            this.setErrorMessage();

            if (this.utils.validators.isAvailable(symbol)) {
                this.set('stockDetails', this.priceService.stockDS.getStock(exchange, symbol));
            }

            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, symbol ? ['sym:', symbol, '~', exchange].join('') : exchange);
        },

        onPriceConnectionStatusChanged: function onPriceConnectionStatusChanged(stat) {
            if (stat) {
                // Reconnection success
                this._resetData();
            }
        },

        onAddSubscription: function onAddSubscription() {
            if (!this.isFullMarket) {
                var isShowBuyerSeller = _appConfig.default.customisation.isShowBuyerSeller;
                this.priceService.addTimeAndSalesRequest(this.get('exg'), this.get('sym'), isShowBuyerSeller);
            } else {
                this.priceService.addMarketTimeAndSalesRequest(this.get('exg'));
            }

            this._initDataBind();
        },

        onClearData: function onClearData() {
            this.priceService.timeAndSalesDS.unSubscribeSymTS(this.get('exg'), this.get('sym'), this.get('wkey'));
            this.removeObserver('customArrayProxy.realTimeContent.length', this.updateRealTimeContent);

            var customArrayProxy = this.get('customArrayProxy');

            if (customArrayProxy) {
                customArrayProxy.set('exg', undefined);
                customArrayProxy.set('sym', undefined);
                customArrayProxy.set('realTimeContent', []);
                customArrayProxy.set('backlogContent', []);
            }

            this.set('tradeStore', {});
            this.set('stockDetails', {});
            this.set('isBacklogInitialized', false);
        },

        onRemoveSubscription: function onRemoveSubscription() {
            var isShowBuyerSeller = _appConfig.default.customisation.isShowBuyerSeller;
            this.priceService.removeTimeAndSalesRequest(this.get('exg'), this.get('sym'), isShowBuyerSeller);
        },

        onUnloadWidget: function onUnloadWidget() {
            var wkey = this.get('wkey');

            // Set empty ember array to remove the current trade collection.
            this.set('content', []);

            this.set('exchange', {}); // Cannot clear this in onClear data as this will make a deadlock with observer

            if (!this.isFullMarket) {
                _appEvents.default.unSubscribeSymbolChanged(wkey, this.get('selectedLink'));
            } else {
                _appEvents.default.unSubscribeExchangeChanged(this.get('selectedLink'), wkey);
            }

            if (this.tsPopUpWindow) {
                this.tsPopUpWindow.onresize = null;
                this.tsPopUpWindow = undefined;
            }

            this.priceService.unSubscribeConnectionStatusChanged(wkey);
        },

        onLanguageChanged: function onLanguageChanged() {
            this.set('columnDeclarations', []);

            this.setErrorMessage();
            this.onLoadWidget();
            this.refreshTableComponent();
            this.refreshWidget({ exg: this.get('exg') });
        },

        onResizeWidget: function onResizeWidget() {
            this.toggleProperty('isRefreshed');
        },

        // TODO [ATHEESAN] Override JS bind using this function
        bindFn: function bindFn(fn) {
            var that = this;

            return function () {
                return fn.apply(that, arguments);
            };
        },

        resizeTimeAndSalesTable: function resizeTimeAndSalesTable() {
            _ember.default.run.debounce(this, this.onResizeWidget, 200);
        },

        configArrayProxy: function configArrayProxy() {
            var tradeStore = this.get('tradeStore');

            // Custom array proxy for time and sales content
            var customArrayProxy = _timeAndSalesArrayProxy.default.create({
                backlogBatchSize: this.BacklogBatchSize,
                content: []
            });

            this.set('customArrayProxy', customArrayProxy);
            customArrayProxy.set('exg', this.get('exg'));
            customArrayProxy.set('sym', this.get('sym'));
            customArrayProxy.set('realTimeContent', tradeStore.realTime);
            customArrayProxy.set('backlogContent', tradeStore.backlog);
        },

        updateFirstRecord: function updateFirstRecord() {
            this.removeObserver('customArrayProxy.realTimeContent.length', this.updateFirstRecord);

            if (this.get('customArrayProxy.realTimeContent.length') > 0) {
                this._refreshTableContent();
            }

            this.addObserver('customArrayProxy.realTimeContent.length', this.updateRealTimeContent);
            this.initBacklogRequest();
        },

        updateRealTimeContent: function updateRealTimeContent() {
            // TODO: [satheeqh] Check timer performance against observers with debounce
            _ember.default.run.debounce(this, this._refreshTableContent, _priceConstants.default.TimeIntervals.TimeAndSalesRealTimeDebounce);
        },

        initBacklogRequest: function initBacklogRequest() {
            if (!this.get('isBacklogInitialized')) {
                this.set('isBacklogInitialized', true);

                var exg = this.get('exg');
                var sym = this.get('sym');
                var tradeStore = this.get('tradeStore');

                if (tradeStore && tradeStore.backlog && tradeStore.backlog.length === 0) {
                    var endSeq = tradeStore.realTime[0] ? tradeStore.realTime[0].seq : undefined;
                    this.priceService.sendTimeAndSalesBacklogRequest(exg, sym, endSeq, this.InitialBacklogSize);
                } else {
                    this.onBacklogDataReady(tradeStore.backlogLen);
                }
            }
        },

        onBacklogDataReady: function onBacklogDataReady() {
            var that = this;

            // Remove all real time observers to stop adding new row while re calculation happens.
            this.removeObserver('customArrayProxy.realTimeContent.length', this.updateFirstRecord);
            this.removeObserver('customArrayProxy.realTimeContent.length', this.updateRealTimeContent);

            var tradeStore = this.get('tradeStore');
            var backlogCount = tradeStore.backlogLen;

            // Set new length to table array proxy
            this._setContentLength();

            var latestAvailSeq = tradeStore.backlogIndex > 0 ? tradeStore.backlog[tradeStore.backlogIndex - 1].seq : 0;

            if (tradeStore.backlogIndex <= this.get('customArrayProxy.backlogReqIndex')) {
                this.priceService.sendTimeAndSalesBacklogRequest(this.get('exg'), this.get('sym'), latestAvailSeq, this.BacklogBatchSize);
            } else {
                var factor = tradeStore.backlogIndex === backlogCount ? 1 : this.BacklogRequestFactor;
                this.set('customArrayProxy.latestBacklogSeq', latestAvailSeq);
                this.set('customArrayProxy.nextBacklogReqIndex', Math.round(tradeStore.backlogIndex * factor));
                this.set('customArrayProxy.isReqProcessing', false);

                if (backlogCount > 0) {
                    this.get('customArrayProxy.content').pushObject({});
                }
            }

            _ember.default.run.later(this, function () {
                // This will improve fetching first backlog batch in Market T&S
                if (that.get('customArrayProxy.realTimeContent.length') !== tradeStore.realTime.length) {
                    that._refreshTableContent();
                }

                that.addObserver('customArrayProxy.realTimeContent.length', that.updateRealTimeContent);
            }, 1);
        },

        cellViewsForColumns: {
            classic: 'Ember.ClassicCell',
            upDown: 'Ember.UpDownCell',
            buySell: 'Ember.BuySellCell'
        },

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            _ember.default.HeaderCell = _headerCell.default;
            _ember.default.Cell = _cell.default;
            _ember.default.ClassicCell = _classicCell.default;
            _ember.default.UpDownCell = _upDownCell.default;
            _ember.default.BuySellCell = _buySellCell.default;
            _ember.default.TableRow = _tableRow.default;
        },

        onMarketStatusChanged: function () {
            // Reset time and sales records on market pre-open
            // TODO: [satheeqh] Implement to support multiple widget usages
            var exgStat = this.get('exchange.stat');

            if (exgStat === _priceConstants.default.MarketStatus.PreOpen) {
                this._resetData();
            }
        }.observes('exchange.stat'),

        _resetData: function _resetData() {
            var that = this;
            this.onClearData();

            _ember.default.run.next(this, function () {
                // Need to set prepare data on next cycle to support multiple widgets with same sym/exg
                that.onPrepareData();
                that._initDataBind();
            });
        },

        _initDataBind: function _initDataBind() {
            if (this.get('customArrayProxy.realTimeContent.length') === 0) {
                this.setRequestTimeout(4, 'customArrayProxy.content.length');
                this.addObserver('customArrayProxy.realTimeContent.length', this.updateFirstRecord);

                _ember.default.run.later(this, this.initBacklogRequest, 1);
            } else {
                this.set('isDataAvailable', true);
                this._refreshTableContent();
                this.initBacklogRequest();
            }
        },

        /* *
         * Ember table will refresh the viewport while adding an object to the content.
         * @private
         */
        _refreshTableContent: function _refreshTableContent() {
            var content = this.get('customArrayProxy.content');
            this._setContentLength();

            // Validate unnecessary unshift
            if (content && this.get('tradeStore.realTime.length') > 0 || this.get('tradeStore.backlogLen') > 0) {
                content.unshiftObject({});
            }
        },

        _setContentLength: function _setContentLength() {
            var backlogCount = this.get('tradeStore.backlogLen') || 0;
            var realTimeLength = this.get('tradeStore.realTime.length') || 0;

            var totalLen = realTimeLength + backlogCount;
            totalLen = totalLen > 0 ? totalLen - 1 : totalLen;

            this.set('customArrayProxy.content.length', totalLen);
        },

        actions: {
            setLink: function setLink(option) {
                this.setWidgetLink(option);
            }
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var tradeStore = this.get('tradeStore');

            return tradeStore && (tradeStore.realTime && tradeStore.realTime.length > 0 || tradeStore.backlog && tradeStore.backlog.length > 0);
        }
    });
});
define('universal-app/controllers/price/widgets/time-and-sales/time-and-sales-array-proxy', ['exports', 'ember', '../../../../models/shared/shared-service'], function (exports, _ember, _sharedService) {
    'use strict';

    exports.default = _ember.default.ArrayProxy.extend({
        // Backlog request initial values
        backlogBatchSize: 100,
        nextBacklogReqIndex: 20,
        backlogReqIndex: -1,
        latestBacklogSeq: -1,

        realTimeContent: _ember.default.A([]),
        backlogContent: _ember.default.A([]),

        exg: '',
        sym: '',

        isLoading: false,
        isReqProcessing: false,

        realTimeArrayLastIndex: function () {
            return this.get('realTimeContent.length') - 1;
        }.property('realTimeContent.length'),

        lastIndex: function () {
            return this.get('content.length') - 1;
        }.property('content.length'),

        /* *
         * Overwriting default array proxy method to handle backlog and real-time content
         * @param index - ember-table row index to fetch object from content
         * @returns {Object} Time and Sales object
         */
        objectAt: function objectAt(index) {
            var backlogContent = this.get('backlogContent');
            var realTimeArrayLastIndex = this.get('realTimeArrayLastIndex');
            var lastIndex = this.get('lastIndex');

            if (index > realTimeArrayLastIndex) {
                var backlogIndex = index - (realTimeArrayLastIndex + 1);
                var tradeObj = backlogContent[backlogIndex];

                if (index !== lastIndex && !this.get('isReqProcessing') && backlogIndex > this.get('nextBacklogReqIndex')) {
                    this.set('backlogReqIndex', backlogIndex);
                    this._sendBacklogRequest();
                }

                if (!tradeObj && index <= lastIndex) {
                    // If the row content not available add an empty trade object to collection.
                    tradeObj = _sharedService.default.getService('price').timeAndSalesDS.getBacklogEmptyRecord(this.get('exg'), this.get('sym'), backlogIndex);
                }

                if (this.get('isLoading') && tradeObj && !tradeObj.isEmpty) {
                    this.set('isLoading', false);
                } else if (!this.get('isLoading') && tradeObj && tradeObj.isEmpty && index !== lastIndex) {
                    this.set('isLoading', true);
                }

                return tradeObj;
            } else {
                return this.get('realTimeContent')[index];
            }
        },

        _sendBacklogRequest: function _sendBacklogRequest() {
            if (this.get('latestBacklogSeq') > 0) {
                this.set('isReqProcessing', true);
                _sharedService.default.getService('price').sendTimeAndSalesBacklogRequest(this.get('exg'), this.get('sym'), this.get('latestBacklogSeq'), this.backlogBatchSize);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/top-stock', ['exports', 'ember', '../../../models/price/price-constants', '../../base-array-controller', '../../../config/price-widget-config', '../../../app-events', '../../../models/shared/shared-service', '../../../helpers/responsive-handler', '../../../config/app-config'], function (exports, _ember, _priceConstants, _baseArrayController, _priceWidgetConfig, _appEvents, _sharedService, _responsiveHandler, _appConfig) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        model: _ember.default.A([]),
        title: null,
        appConfig: _appConfig.default,
        fieldList: _ember.default.A([]),
        icon: null,
        showTopStockTabs: null,
        exgCode: null,
        mode: null,
        subMarket: -2, // Set default value to an unused value, since -1 is used as a sub market code
        timer: undefined,
        exchange: undefined,

        mainContextMenu: [], // Pop up Widget Parameters
        tableRow: null,

        tabs: [],
        isTopStockReqSent: false,

        activeTab: null,
        curruntActiveTabClass: 'active',
        unactiveTabClass: '',

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            if (_appConfig.default.customisation.isMobile) {
                var isDefaultExg = _sharedService.default.getService('price').userDS.isPriceUserExchange(this.get('exg'));

                this.set('exg', isDefaultExg ? this.get('exg') : _sharedService.default.userSettings.price.userDefaultExg);
                this.set('subMarket', this.priceService.exchangeDS.getDefaultSubMarket(this.get('exg')));
            }

            var exg = this.get('exg');
            var mode = this.get('mode');

            this.priceService.addFullMarketSymbolRequest(this.get('exg')); // TODO: [Subodha] Top Stock is not loading first time when subscribed in "onAddSubscription"
            this.priceService.subscribePriceMetaReady(this, this.get('wkey'));

            this.set('defaultExchangeForDropdown', { code: exg });
            this._generateFullContextMenu();

            // TODO [AROSHA] Move this Scroll enable method to global.
            // Ember.run.later(function () {
            //    Ember.$('.nano').nanoScroller();
            // }, 3000);

            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['exg:', exg, '~', 'mode:', mode].join(''));
            this.setErrorMessage();
        },

        onAddSubscription: function onAddSubscription() {
            _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
            _appEvents.default.subscribeSubMarketChanged(this.get('selectedLink'), this.get('wkey'), this);
        },

        onPriceMetaReady: function onPriceMetaReady(isSuccess) {
            if (isSuccess && !this.get('isTopStockReqSent')) {
                var exchange = this.get('exg');

                this.set('subMarket', this.priceService.exchangeDS.getDefaultSubMarket(exchange));
                this.loadContent(exchange, this.get('mode'), this.get('subMarket'));
            }
        },

        onAfterRender: function onAfterRender() {
            var widgetId = '#' + 'table-' + this.get('wkey');
            this.initializeEventListner(widgetId, 'onWidgetClick');
            this.generateScrollBar(undefined, 4000);
        },

        onDataLoad: function onDataLoad() {
            // Initialize Responsive
            var that = this;

            if (!that.responsive) {
                _ember.default.run.later(function () {
                    that.set('responsive', _responsiveHandler.default.create({ controller: that, widgetId: 'table-' + that.get('wkey'), callback: that.onResponsive }));
                    that.responsive.addList('topstock-dDesc', [{ id: 'topstock-vol', width: 110 }, { id: 'topstock-tovr', width: 110 }]);

                    that.responsive.initialize();
                }, 300);
            }
        },

        onResponsive: function onResponsive(responsiveArgs) {
            var fieldList = responsiveArgs.controller.get('fieldList');

            _ember.default.$.each(fieldList, function (id, field) {
                if (field.name === 'Volume') {
                    if (responsiveArgs.responsiveLevel > 0) {
                        _ember.default.set(field, 'formatter', 'divideNumber');
                    } else {
                        _ember.default.set(field, 'formatter', 'formatNumber');
                    }
                }
            });

            _ember.default.$.each(fieldList, function (id, field) {
                if (field.name === 'Turnover') {
                    if (responsiveArgs.responsiveLevel > 1) {
                        _ember.default.set(field, 'formatter', 'divideNumber');
                    } else {
                        _ember.default.set(field, 'formatter', 'formatNumber');
                    }
                }
            });
        },

        onPrepareData: function onPrepareData() {
            var exg = this.get('exg');
            var mode = this.get('mode');
            var subMkt = this.get('subMarket');

            this.set('exgCode', exg);
            this.set('exchange', this.priceService.exchangeDS.getExchange(exg));

            var subMktId = subMkt === -2 || subMkt === undefined ? this.priceService.exchangeDS.getDefaultSubMarket(exg) : subMkt;
            this.set('subMarket', subMktId);

            this.saveWidget({ exg: exg, subMarket: subMktId });
            this.bindData(exg, mode);
            this.setModeParameters(mode);

            _ember.default.run.cancel(this.get('timer'));
            this.refreshTopStocks();
        },

        onUnloadWidget: function onUnloadWidget() {
            this.set('model', _ember.default.A());
            this.set('fieldList', _ember.default.A());

            _ember.default.run.cancel(this.get('timer'));
            this.unBindEvents();
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this.priceService.removeFullMarketSymbolRequest(this.get('exg'));

            _appEvents.default.unSubscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'));
            _appEvents.default.unSubscribeSubMarketChanged(this.get('selectedLink'), this.get('wkey'));
            this.priceService.unSubscribePriceMetaReady(this.get('wkey'));
        },

        onClearData: function onClearData() {
            this.set('fieldList', _ember.default.A());
            this.set('subMarket', undefined);
            this.set('content', _ember.default.A());
            this.set('model', _ember.default.A());
        },

        setModeParameters: function setModeParameters(mode) {
            this.set('mode', mode);

            if (this.get('showTopStockTabs')) {
                var firstTabName, secondTabName, firstTabMode, secondTabMode;

                if (mode === 0 || mode === 1) {
                    firstTabMode = 1;
                    secondTabMode = 0;
                    firstTabName = this.get('app').lang.labels.perChangeDes;
                    secondTabName = this.get('app').lang.labels.changeDes;
                } else {
                    firstTabMode = 3;
                    secondTabMode = 2;
                    firstTabName = this.get('app').lang.labels.perChangeDes;
                    secondTabName = this.get('app').lang.labels.changeDes;
                }

                this.set('tabs', [{
                    ID: 1,
                    mode: firstTabMode,
                    DisplayName: firstTabName, css: mode === 1 || mode === 3 ? 'active' : ''
                }, {
                    ID: 2,
                    mode: secondTabMode,
                    DisplayName: secondTabName, css: mode === 0 || mode === 2 ? 'active' : ''
                }]);
            }
        },

        onLanguageChanged: function onLanguageChanged() {
            var exg = this.get('exg');
            var mode = this.get('mode');

            this.set('exgCode', exg);
            this.bindData(exg, mode, this.get('subMarket'));
            this._loadTopStock();
            this.setModeParameters(mode);
            this.setErrorMessage();
        },

        loadContent: function loadContent(exchange, mode, subMarket) {
            this.priceService.sendTopStocksRequest(exchange, mode, subMarket);
            this.set('isTopStockReqSent', true);
            this.setRequestTimeout(4, 'content.length');
            this.reBindData(exchange, mode, subMarket);
        },

        reBindData: function reBindData(exchange, mode, subMarket) {
            var that = this;
            this.set('model', null);

            _ember.default.run.later(function () {
                that.set('model', that.priceService.topStockDS.getTopStocksCollectionByType(exchange, mode, subMarket));
            }, 100);
        },

        refreshTopStocks: function refreshTopStocks() {
            this._loadTopStock();

            var timer = _ember.default.run.later(this, this.refreshTopStocks, _priceConstants.default.TimeIntervals.TopStocksUpdateInterval);
            this.set('timer', timer);
        },

        bindData: function bindData(exchange, mode, subMarket) {
            var that = this;
            var topStockConfig = _priceWidgetConfig.default.topStocks[mode];

            this.set('model', this.priceService.topStockDS.getTopStocksCollectionByType(exchange, mode, subMarket));
            this.set('title', this.get('app').lang.labels[topStockConfig.title]);
            this.set('titleCss', topStockConfig.titleCss ? topStockConfig.titleCss : '');

            _ember.default.$.each(topStockConfig.fields, function (key, item) {
                _ember.default.set(item, 'name', that.get('app').lang.labels[item.filed]);

                if (!item.col) {
                    _ember.default.set(item, 'col', 'layout-col');
                }
            });

            this.set('fieldList', topStockConfig.fields);
            this.set('icon', topStockConfig.icon);
            this.set('showTopStockTabs', topStockConfig.showTopStockTabs);
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var stock = this.priceService.topStockDS.getTopStocksCollectionByType(this.get('exg'), this.get('mode'), this.get('subMarket'));

            return stock.length !== 0;
        },

        onWidgetClick: function onWidgetClick(event) {
            if (!_appConfig.default.customisation.isMobile) {
                var tableRow = this.getParentElement(event, 'div.layout-row');
                var rowId = tableRow.attr('id');
                var selectedRow;

                if (rowId) {
                    selectedRow = this.model[rowId];
                    var stock = selectedRow.getProperties('exg', 'sym', 'inst');

                    if (!stock.inst || !stock.exg) {
                        stock.inst = this.priceService.stockDS.getStock(this.get('exg'), stock.sym).inst;
                        stock.exg = this.get('exg');
                    }

                    _sharedService.default.getService('sharedUI').invokeRightClick(stock, this.get('wkey'), event, this.menuComponent);
                }
            }
        },

        setActive: function setActive(currentTab, css) {
            var tabArray = this.get('tabs');

            _ember.default.$.each(tabArray, function (key, tabObj) {

                if (tabObj.ID === currentTab.ID) {
                    _ember.default.set(tabObj, 'css', css);
                } else {
                    _ember.default.set(tabObj, 'css', '');
                }
            });
        },

        _loadTopStock: function _loadTopStock() {
            if (this.priceService.isPriceMetadataReady()) {
                this.loadContent(this.get('exg'), this.get('mode'), this.get('subMarket'));
            }
        },

        _changeLink: function _changeLink(option) {
            _appEvents.default.unSubscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'));

            if (option.code) {
                this.set('selectedLink', option.code);
                _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
            } else {
                this.set('selectedLink', undefined);
            }

            this.saveWidget({ selectedLink: option.code });
        },

        actions: {
            doubleClickRow: function doubleClickRow(symbol) {
                if (symbol) {
                    var inst = this.priceService.stockDS.getStock(this.exgCode, symbol.sym).inst;
                    _sharedService.default.getService('priceUI').showPopupWidget({ container: this.container, controllerString: 'view:symbol-popup-view' }, { tabId: 0, sym: symbol.sym, exg: this.exgCode, inst: inst });
                }
            },

            clickRow: function clickRow(symbol) {
                if (symbol) {
                    var quoteMenuId = _appConfig.default.widgetId ? _appConfig.default.widgetId.quoteMenuId : '';
                    var watchListMenuId = _appConfig.default.widgetId ? _appConfig.default.widgetId.watchListMenuId : '';
                    var sharedUIService = _sharedService.default.getService('sharedUI');
                    var inst = this.priceService.stockDS.getStock(this.exgCode, symbol.sym).inst;

                    if (quoteMenuId) {
                        if (_appConfig.default.customisation.isCompactMenuEnabled) {
                            sharedUIService.navigateMenu(watchListMenuId, quoteMenuId);
                        } else {
                            sharedUIService.navigateMenu(quoteMenuId);
                        }
                    }

                    _appEvents.default.onSymbolChanged(symbol.sym, this.exgCode, inst, this.get('selectedLink'));
                }
            },

            loadTab: function loadTab(tabItem) {
                var mode = tabItem.mode;

                this.set('mode', mode);
                this.bindData(this.exgCode, mode);
                this._loadTopStock();
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['exg:', this.exgCode, '~', 'mode:', this.mode].join(''));

                this.setActive(tabItem, this.curruntActiveTabClass);
            },

            setLink: function setLink(option) {
                this._changeLink(option);
            },

            setTopStockExchange: function setTopStockExchange(exchg) {
                _appEvents.default.onExchangeChanged(this.get('selectedLink'), exchg.code, undefined);
            },

            setTopStockSubMarket: function setTopStockSubMarket(mktId) {
                _appEvents.default.onSubMarketChanged(this.get('selectedLink'), mktId);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/top-stocks', ['exports', 'ember', '../../../models/price/price-constants', '../../base-array-controller', '../../../helpers/responsive-handler', '../../../models/shared/shared-service', '../../../app-events'], function (exports, _ember, _priceConstants, _baseArrayController, _responsiveHandler, _sharedService, _appEvents) {
    'use strict';

    exports.default = _baseArrayController.default.extend({
        dimensions: {
            w: 4,
            h: 18
        },
        tgpContent: [],
        tlpContent: [],
        mavContent: [],
        topStocksRowCount: 5,
        timer: undefined,
        exchange: undefined,
        subMarket: -1,
        isTopStocksReqSent: false,

        priceService: _sharedService.default.getService('price'),

        onLoadWidget: function onLoadWidget() {
            _ember.default.run.later(function () {
                _ember.default.$('.nano').nanoScroller();
            }, 3000);

            this.priceService.subscribePriceMetaReady(this, this.get('wkey'));
            _appEvents.default.subscribeExchangeChanged(-1, this.get('wkey'), this);

            this.setErrorMessage();
        },

        onPriceMetaReady: function onPriceMetaReady(isSuccess) {
            if (isSuccess && !this.get('isTopStocksReqSent')) {
                var exchange = this.get('exg');
                this.set('subMarket', this.priceService.exchangeDS.getDefaultSubMarket(exchange));

                this.onPrepareData();
                this.loadContent(exchange);
            }
        },

        onPrepareData: function onPrepareData() {
            var exg = this.get('exg');
            var subMarket = this.priceService.exchangeDS.getDefaultSubMarket(exg);

            this.set('exchange', this.priceService.exchangeDS.getExchange(exg));
            this.set('subMarket', subMarket);

            if (this.priceService.isPriceMetadataReady()) {
                this.set('tgpContent', this.priceService.topStockDS.getTopStocksCollectionByType(exg, _priceConstants.default.TopStocksTypes.TopGainersByPercentageChange, subMarket));
                this.set('tlpContent', this.priceService.topStockDS.getTopStocksCollectionByType(exg, _priceConstants.default.TopStocksTypes.TopLosersByPercentageChange, subMarket));
                this.set('mavContent', this.priceService.topStockDS.getTopStocksCollectionByType(exg, _priceConstants.default.TopStocksTypes.MostActiveByVolume, subMarket));
            }

            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.show, ['exg:', this.get('exg')].join(''));
        },

        onDataLoad: function onDataLoad() {
            // Initialize Responsive
            var that = this;

            if (!that.responsive) {
                _ember.default.run.later(function () {
                    that.set('responsive', _responsiveHandler.default.create({ controller: that, widgetId: 'topstocks-' + that.get('wkey'), callback: that.onResponsive }));
                    that.responsive.addList('topstoks-symbol', [{ id: 'topstocks-tl', width: 25 }]);

                    that.responsive.initialize();
                }, 20);
            }
        },

        onAddSubscription: function onAddSubscription() {
            if (this.get('mavContent.length') === 0) {
                this.setRequestTimeout(4, 'mavContent.length');
            }

            _ember.default.run.cancel(this.get('timer'));

            if (this.priceService.isPriceMetadataReady()) {
                this.loadContent(this.get('exg'));
            }
        },

        onClearData: function onClearData() {
            this.set('tgpContent', []);
            this.set('tlpContent', []);
            this.set('mavContent', []);
        },

        onUnloadWidget: function onUnloadWidget() {
            this.priceService.unSubscribePriceMetaReady(this.get('wkey'));
            _ember.default.run.cancel(this.get('timer'));
            this.unBindEvents();
        },

        onLanguageChanged: function onLanguageChanged() {
            this.setErrorMessage();
        },

        loadContent: function loadContent(exchange) {
            var that = this;
            var subMarket = this.get('subMarket');

            this.priceService.sendTopStocksRequest(exchange, _priceConstants.default.TopStocksTypes.TopGainersByPercentageChange, subMarket);
            this.priceService.sendTopStocksRequest(exchange, _priceConstants.default.TopStocksTypes.TopLosersByPercentageChange, subMarket);
            this.priceService.sendTopStocksRequest(exchange, _priceConstants.default.TopStocksTypes.MostActiveByVolume, subMarket);

            this.set('isTopStocksReqSent', true);

            // Update top stock data store periodically
            var timer = _ember.default.run.later(function () {
                that.loadContent(exchange);
            }, _priceConstants.default.TimeIntervals.TopStocksUpdateInterval);

            this.set('timer', timer);
        },

        onCheckDataAvailability: function onCheckDataAvailability() {
            var exg = this.get('exg');
            var subMarket = this.get('subMarket');
            var mavStock = this.priceService.topStockDS.getTopStocksCollectionByType(exg, _priceConstants.default.TopStocksTypes.MostActiveByVolume, subMarket);

            return mavStock.length > 0;
        },

        tgpFilteredContent: function () {
            return this.getFilteredContent(this.get('tgpContent'));
        }.property('tgpContent.@each'),

        tlpFilteredContent: function () {
            return this.getFilteredContent(this.get('tlpContent'));
        }.property('tlpContent.@each'),

        mavFilteredContent: function () {
            return this.getFilteredContent(this.get('mavContent'));
        }.property('mavContent.@each'),

        getFilteredContent: function getFilteredContent(content) {
            var filteredArray = [];
            var rowCount = this.topStocksRowCount;

            _ember.default.$.each(content, function (index, item) {
                if (index === rowCount) {
                    return false;
                }
                filteredArray.push(item);
            });

            return filteredArray;
        },

        onAfterRender: function onAfterRender() {
            var widgetId = '#' + 'topstocks-' + this.get('wkey');
            this.initializeEventListner(widgetId, 'onWidgetClick');
        },

        onWidgetClick: function onWidgetClick(event) {
            var tableRow = this.getParentElement(event, 'div.layout-row');
            var table = this.getParentElement(event, 'div.layout-container');
            var rowId = tableRow.attr('id');
            var tableId = table.attr('id');

            if (rowId) {
                var symbolArray;

                if (tableId === 'topstock-tgp') {
                    symbolArray = this.tgpContent;
                } else if (tableId === 'topstock-tlp') {
                    symbolArray = this.tlpContent;
                } else if (tableId === 'topstock-mav') {
                    symbolArray = this.mavContent;
                }

                if (symbolArray) {
                    var symbolObj = symbolArray[rowId];

                    if (symbolObj) {
                        var stock = symbolObj.getProperties('exg', 'sym', 'inst');

                        if (!stock.inst || !stock.exg) {
                            stock.inst = this.priceService.stockDS.getStock(this.get('exg'), stock.sym).inst;
                            stock.exg = this.get('exg');
                        }

                        _sharedService.default.getService('sharedUI').invokeRightClick(stock, this.get('wkey'), event, this.menuComponent);
                    }
                }
            }
        },

        actions: {
            doubleClickRow: function doubleClickRow(symbol) {
                var inst = this.priceService.stockDS.getStock(this.get('exg'), symbol.sym).inst;
                if (symbol) {
                    _sharedService.default.getService('priceUI').showPopupWidget({ container: this.container, controllerString: 'view:symbol-popup-view' }, { tabId: 0, sym: symbol.sym, exg: this.get('exg'), inst: inst });
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/watch-list/base-watch-list', ['exports', 'ember', '../../../shared/table-controller', '../../../../models/shared/shared-service', '../../../../app-events', '../../../../utils/utils', '../../../../config/app-config'], function (exports, _ember, _tableController, _sharedService, _appEvents, _utils, _appConfig) {
    'use strict';

    exports.default = _tableController.default.extend({
        priceService: _sharedService.default.getService('price'),
        tradeService: _sharedService.default.getService('trade'),
        columnDeclarations: [],
        textFilter: undefined,
        isRefreshed: false,
        isNoSubMarket: false,
        currentSubMarketId: undefined,
        subMktMap: {},
        selectedLink: 1,

        isTablet: _appConfig.default.customisation.isTablet,
        isMobile: _appConfig.default.customisation.isMobile,

        onLoadWidget: function onLoadWidget() {
            this.setCellViewsScopeToGlobal();

            // Subscribe for onExchangedChanged only from quote-watch-list - Need to pass 'isSubExgChanged' boolean from layout config args
            if (this.get('isSubExgChanged')) {
                _appEvents.default.subscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
            }
        },

        onPrepareData: function onPrepareData() {
            var exgCode = this.get('exg');
            this.priceService.exchangeDS.getExchangeMetadata(exgCode, undefined, this.onPriceMetaReceived.bind(this));

            this.set('exchange', this.priceService.exchangeDS.getExchange(exgCode));
            this.set('defaultExchangeForDropdown', { code: exgCode });

            this.loadContent();
            this.addObserver('masterContent.@each', this.filterStocks);
        },

        onAddSubscription: function onAddSubscription() {
            var exg = this.get('exg');
            this.priceService.addFullMarketSymbolRequest(exg);

            if (this._isBoardEnabledExchange(exg)) {
                this.priceService.addXStreamBulkRequest(exg);
            }
        },

        onRemoveSubscription: function onRemoveSubscription() {
            var exg = this.get('exg');
            this.priceService.removeFullMarketSymbolRequest(exg);

            if (this._isBoardEnabledExchange(exg)) {
                this.priceService.removeXStreamBulkRequest(exg);
            }
        },

        onClearData: function onClearData() {
            this.set('currentSubMarketId', undefined);
            this.set('content', _ember.default.A());
            this.set('masterContent', _ember.default.A());
        },

        onUnloadWidget: function onUnloadWidget() {
            this.set('defaultExchange', undefined);
            this.set('selectedExchange', undefined);

            if (this.get('isSubExgChanged')) {
                _appEvents.default.unSubscribeExchangeChanged(this.get('selectedLink'), this.get('wkey'), this);
            }
        },

        onLanguageChanged: function onLanguageChanged(language) {
            this.setLangLayoutSettings(language);
            this.toggleProperty('isRefreshed');
        },

        loadContent: function loadContent(data) {
            var exg = this.get('exchange.exg');
            var stockArray = data ? data[exg] : undefined;
            var currentMktId = this.get('currentSubMarketId');
            var isNoSubMarket = this.get('isNoSubMarket');

            if (!stockArray) {
                var marketId = currentMktId ? currentMktId : this.priceService.exchangeDS.getDefaultSubMarket(exg);
                this.set('currentSubMarketId', marketId);

                if (!isNoSubMarket && exg && marketId && marketId !== -1) {
                    stockArray = this.priceService.stockDS.getStockCollectionBySubMarket(exg, marketId);
                } else if (exg) {
                    stockArray = this.priceService.stockDS.getSymbolCollectionByExchange(exg);
                }
            }

            this.set('content', stockArray);
            this.set('masterContent', stockArray);
        },

        checkFilterMatch: function checkFilterMatch(stock, textFilter) {
            var field;
            var isMatchedTextFilter = !textFilter; // If a argument is false, that means that filter is not applied

            if (!isMatchedTextFilter) {
                for (field in stock) {
                    if (stock.hasOwnProperty(field) && (field === 'dSym' || field === 'sym' || field === 'sDes' || field === 'lDes' || field === 'cid') && stock[field] && stock[field].toString().slice(0, textFilter.length).toLowerCase() === textFilter.toLowerCase()) {
                        isMatchedTextFilter = true;
                    }
                }
            }

            return isMatchedTextFilter;
        },

        setDefaultSort: function setDefaultSort() {
            var that = this;
            var sortColumn = this.get('sortCols') ? this.get('sortCols')[0] : '';
            var sortId = this.utils.validators.isAvailable(sortColumn) ? sortColumn : 'trades';
            var sortAsc = this.get('sortAsc');

            if (sortAsc !== undefined) {
                this.set('sortAscending', sortAsc);
            }

            this.set('sortProperties', [sortId]);
            this.saveWidget({ sortAsc: this.get('sortAscending'), sortCols: this.get('sortProperties') });

            _ember.default.run.later(function () {
                var tableColumns = that.get('columns');

                // TODO: [satheeqh] Temporary fix to support watch-list array proxy
                var proxySortId = ['dataObj', sortId].join('.');

                _ember.default.$.each(tableColumns, function (key, column) {
                    if (column.get('contentPath') === sortId || column.get('contentPath') === proxySortId) {
                        _ember.default.set(column, 'isSorted', true);
                        return false;
                    }
                });
            }, 200);
        },

        filterStocks: function () {
            var textFilter = this.get('textFilter');

            if (this.utils.validators.isAvailable(textFilter)) {
                var filteredStocks = this.get('masterContent').filter(function (that) {
                    //eslint-disable-line
                    return function (stock) {
                        return that.checkFilterMatch(stock, textFilter);
                    };
                }(this));

                this.set('content', filteredStocks);
            } else {
                this.set('content', this.get('masterContent'));
            }
        }.observes('textFilter'),

        triggerSymbolChange: function triggerSymbolChange(rowData) {
            if (rowData) {
                _appEvents.default.onSymbolChanged(rowData.sym, rowData.exg, rowData.inst, this.get('selectedLink'));

                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.rowClick, ['sym:', rowData.sym, '~', rowData.exg].join(''));

                // Limit filter event trigger only while searching and clicking a row
                if (this.get('textFilter') && this.get('textFilter') !== '') {
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.search, ['filter:', this.get('textFilter')].join(''));
                }
            }
        },

        deleteWatchList: function deleteWatchList() {
            var that = this;
            _utils.default.messageService.showMessage(this.get('app').lang.messages.deleteConfirmation, _utils.default.Constants.MessageTypes.Question, false, this.get('app').lang.labels.deleteWL, [{
                type: 'yes', btnAction: function btnAction() {
                    that.priceService.watchListDS.deleteWL(that.get('currentCustomWLId'));

                    that.loadCustomWL(that.get('myFavouritesIndex'));
                    that.saveWidget({ customWatchListColumnArray: that.get('customWatchListColumnArray') });
                }
            }, {
                type: 'no', btnAction: function btnAction() {
                    _ember.default.$('#deleteWatchListBtn').removeClass('open');
                }
            }], null);
        },

        resetScroll: function resetScroll() {
            var innerScroll = this.getAntiScroller();

            if (innerScroll) {
                innerScroll.scrollTop = 0;
            }
        },

        getAntiScroller: function getAntiScroller() {
            var tableIdDiv = _ember.default.$('#' + this.get('tableComponentId'));
            return tableIdDiv && tableIdDiv.length > 0 ? tableIdDiv.children().closest('div').get('1').children[0].children[0] : undefined;
        },

        onPriceMetaReceived: function onPriceMetaReceived() {
            // Price meta ready callback
        },

        changeExchange: function changeExchange(exchg) {
            var selectedExg = exchg.code ? exchg.code : exchg.exg;

            this.refreshWidget({ exg: selectedExg, watchListType: _sharedService.default.getService('price').watchListDS.watchListTypes.fullMarket });
            this.resetScroll();

            return selectedExg;
        },

        _isBoardEnabledExchange: function _isBoardEnabledExchange(exg) {
            var isTradeEnabled = _appConfig.default.customisation.isTradingEnabled;

            if (isTradeEnabled) {
                var boardEnableExchanges = this.tradeService.settings.orderConfig.boardEnableExchanges;
                return boardEnableExchanges && boardEnableExchanges.indexOf(exg) > -1;
            }

            return false;
        },

        actions: {
            setLink: function setLink(option) {
                this.set('selectedLink', option.code);
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['selectedLink:', this.get('selectedLink')].join(''));
            },

            clickRow: function clickRow(clickEvent) {
                this._super(clickEvent);
            },

            onSelectExchange: function onSelectExchange(exchg) {
                return this.changeExchange(exchg);
            },

            renameCustomWLCallBack: function renameCustomWLCallBack() {
                this.toggleProperty('isCustomWLChanged');
            },

            onSelectSubMarket: function onSelectSubMarket(mktId) {
                if (mktId !== this.get('currentSubMarketId')) {
                    var subMktMap = this.get('subMktMap');
                    var exg = this.get('exchange.exg');

                    this.priceService.removeFullMarketSymbolRequest(exg, this.get('currentSubMarketId'));
                    this.set('currentSubMarketId', mktId);

                    subMktMap[exg] = mktId;
                    this.saveWidget({ subMktMap: subMktMap });

                    this.loadContent();
                    this.priceService.addFullMarketSymbolRequest(exg, this.get('currentSubMarketId'));

                    this.resetScroll();
                }
            }
        }
    });
});
define('universal-app/controllers/price/widgets/watch-list/components/watchlist-extended-header', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Component.extend({
        layoutName: 'price/widgets/watch-list/components/watchlist-extended-header',
        isDefaultExchangeSelected: false,
        isExchangeSelected: false,

        initializeWlHeader: function () {
            var that = this;

            var currentTime = new Date().getTime();
            this.set('key', 'wl-header-' + currentTime);

            _ember.default.run.scheduleOnce('afterRender', this, function () {
                var controller = that.get('targetController');

                if (controller) {
                    that.onExchangeUpdate();
                    controller.set('wlHeader', this);
                }
            });
        }.on('init'),

        defaultExchange: function () {
            return this.get('targetController.defaultExchange');
        }.property('targetController.defaultExchange'),

        customWatchListArray: function () {
            return this.get('targetController.customWatchListArray');
        }.property('targetController.customWatchListArray'),

        changeCustomWLActive: function () {
            var controller = this.get('targetController');
            this.set('customWLNewActive', controller.get('customWLNewActive'));
        }.observes('targetController.customWLNewActive'),

        setDefaultExgActive: function () {
            var controller = this.get('targetController');
            this.set('isDefaultExchangeSelected', controller.get('isDefaultExchangeSelected'));
        }.observes('targetController.isDefaultExchangeSelected'),

        changeCustomWLDropdown: function () {
            var controller = this.get('targetController');
            this.set('isCurrentWLDropdown', controller.get('isCurrentWLDropdown'));
        }.observes('targetController.isCurrentWLDropdown'),

        languageChange: function () {
            var controller = this.get('targetController');
            this.set('isCustomWLChanged', controller.get('isCustomWLChanged'));
        }.observes('targetController.isCustomWLChanged'),

        onUnloadWlHeader: function onUnloadWlHeader() {
            this.set('selectedExchange', undefined);
            this.set('isDefaultExchange', undefined);
        },

        onExchangeUpdate: function onExchangeUpdate() {
            var controller = this.get('targetController');

            if (controller) {
                this.set('selectedExchange', controller.get('selectedExchange'));
                this.set('isDefaultExchange', controller.get('isDefault'));
                this.set('isDefaultExchangeSelected', true);
            }
        },

        onResize: function onResize() {
            var controller = this.get('targetController');

            if (controller.responsive) {
                var responsiveHandler = controller.responsive;

                // Call onResize when exchanges are changed
                _ember.default.run.later(responsiveHandler, responsiveHandler.onResize, 2000);
            }
        },

        actions: {
            setWlExchange: function setWlExchange(exchg) {
                var controller = this.get('targetController');

                if (exchg) {
                    controller.refreshWidget({ exg: exchg.code ? exchg.code : exchg.exg });
                }

                if (!controller.get('isDefault')) {
                    this.set('selectedExchange', controller.get('selectedExchange'));
                    this.set('isDefaultExchangeSelected', false);
                    this.set('isExchangeSelected', true);
                } else {
                    this.set('isDefaultExchangeSelected', true);
                    this.set('isExchangeSelected', false);
                }

                controller.set('wlHeader', this);
                this.onResize();
            },

            onCustomWlSelect: function onCustomWlSelect(option) {
                this.get('targetController').onCustomWlSelect(option.id);
                this.set('isDefaultExchangeSelected', false);
                this.set('isExchangeSelected', false);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/watch-list/index-watch-list', ['exports', 'ember', '../../../../controllers/shared/table-controller', '../../../../models/shared/shared-service', '../../../../config/price-widget-config', '../../../../views/table/cell', '../../../../views/table/classic-header-cell', '../../../../views/table/classic-cell', '../../../../views/table/classic-progress-cell', '../../../../views/table/change-cell', '../../../../views/table/up-down-cell', '../../../../views/table/dual-cells/dual-text-cell'], function (exports, _ember, _tableController, _sharedService, _priceWidgetConfig, _cell, _classicHeaderCell, _classicCell, _classicProgressCell, _changeCell, _upDownCell, _dualTextCell) {
    'use strict';

    exports.default = _tableController.default.extend({
        exchange: _sharedService.default.getService('price').exchangeDS.getExchange(_sharedService.default.userSettings.price.currentExchange),
        rowHeight: _priceWidgetConfig.default.watchList.tableParams.MinHeaderHeight.classic,
        headerHeight: _priceWidgetConfig.default.watchList.tableParams.RowHeight.classic,

        onLoadWidget: function onLoadWidget() {
            this.setDefaultColumns();
            this.setCellViewsScopeToGlobal();
        },

        onPrepareData: function onPrepareData() {
            this.loadContent();
        },

        onClearData: function onClearData() {
            this.set('content', _ember.default.A());
        },

        onUnloadWidget: function onUnloadWidget() {
            this.set('columnDeclarations', []);
        },

        loadContent: function loadContent() {
            var exchange = this.get('exchange').exg;
            var store = _sharedService.default.getService('price').stockDS.get('indexMapByExg');
            this.set('content', store[exchange]);
        },

        setDefaultColumns: function setDefaultColumns() {
            this.set('columnDeclarations', this.columnDefinitionsByMap(_priceWidgetConfig.default.watchList.classicColumnMapping, _priceWidgetConfig.default.watchList.indexTableColumnIds));
        },

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            _ember.default.ClassicHeaderCell = _classicHeaderCell.default;
            _ember.default.Cell = _cell.default;
            _ember.default.ClassicCell = _classicCell.default;
            _ember.default.ClassicProgressCell = _classicProgressCell.default;
            _ember.default.ChangeCell = _changeCell.default;
            _ember.default.UpDownCell = _upDownCell.default;
            _ember.default.DualTextCell = _dualTextCell.default;
        },

        cellViewsForColumns: {
            classicCell: 'Ember.ClassicCell',
            classicProgressCell: 'Ember.ClassicProgressCell',
            changeCell: 'Ember.ChangeCell',
            upDown: 'Ember.UpDownCell',
            dualText: 'Ember.DualTextCell'
        }
    });
});
define('universal-app/controllers/price/widgets/watch-list/quote-watch-list', ['exports', 'ember', '../../../../models/shared/shared-service', '../../../../config/price-widget-config', './base-watch-list', '../../../../app-events', '../../../../utils/constants', '../../../../views/table/dual-cells/expanded-symbol-cell', '../../../../views/table/dual-cells/expanded-ltp-cell', '../../../../views/table/dual-cells/expanded-chg-cell', '../../../../views/table/dual-cells/header-cell', '../../../../views/table/cell', '../../../../views/table/dual-cells/dual-change-cell', '../../../../views/table/dual-cells/dual-text-cell', '../../../../views/table/dual-cells/text-icon-cell', '../../../../views/table/up-down-cell', '../../../../views/table/table-row'], function (exports, _ember, _sharedService, _priceWidgetConfig, _baseWatchList, _appEvents, _constants, _expandedSymbolCell, _expandedLtpCell, _expandedChgCell, _headerCell, _cell, _dualChangeCell, _dualTextCell, _textIconCell, _upDownCell, _tableRow) {
    'use strict';

    exports.default = _baseWatchList.default.extend({
        rowHeight: 44,
        isShowTitle: false,
        isRenderingEnabled: false,
        isChangeWidth: false,

        navigation: {
            up: 1,
            down: 0
        },

        tableComponentId: function () {
            return this.get('wkey');
        }.property('wkey'),

        onLoadWidget: function onLoadWidget() {
            this._super();
            this._bindFirstElement();
            this._bindKeyboardShortcuts();
            this.setDefaultSort();

            this.set('columnDeclarations', _priceWidgetConfig.default.watchList.quoteColumns);
            this.set('isShowTitle', this.get('widgetContainer.showTitle') || this.get('isTablet'));
        },

        onAfterRender: function onAfterRender() {
            var that = this;

            _ember.default.run.next(this, function () {
                that.set('isRenderingEnabled', true);
            });
        },

        onUnloadWidget: function onUnloadWidget() {
            this._super();

            // Reset anti-scroll position
            this.resetScroll();

            this.set('content', _ember.default.A());
            this.set('masterContent', _ember.default.A());
        },

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            _ember.default.HeaderCell = _headerCell.default;
            _ember.default.Cell = _cell.default;
            _ember.default.DualChangeCell = _dualChangeCell.default;
            _ember.default.DualTextCell = _dualTextCell.default;
            _ember.default.TextIconCell = _textIconCell.default;
            _ember.default.UpDownCell = _upDownCell.default;
            _ember.default.TableRow = _tableRow.default;
            _ember.default.ExpandedSymbolCell = _expandedSymbolCell.default;
            _ember.default.ExpandedLtpCell = _expandedLtpCell.default;
            _ember.default.ExpandedChgCell = _expandedChgCell.default;
        },

        cellViewsForColumns: {
            dualText: 'Ember.DualTextCell',
            textIconCell: 'Ember.TextIconCell',
            upDown: 'Ember.UpDownCell',
            dualChange: 'Ember.DualChangeCell',
            expandedSymbolCell: 'Ember.ExpandedSymbolCell',
            expandedLtpCell: 'Ember.ExpandedLtpCell',
            expandedChgCell: 'Ember.ExpandedChgCell'
        },

        _bindKeyboardShortcuts: function _bindKeyboardShortcuts() {
            var widgetKey = this.get('wkey');
            var that = this;

            _ember.default.appGlobal.activeWidget = widgetKey;

            Mousetrap.bind('enter', function () {
                that._onEnterPress();
                _ember.default.appGlobal.activeWidget = widgetKey;
            }, widgetKey);

            Mousetrap.bind('arrowdown', function () {
                that._navigateUpDown(that.navigation.down);
                _ember.default.appGlobal.activeWidget = widgetKey;
            }, widgetKey);

            Mousetrap.bind('arrowup', function () {
                that._navigateUpDown(that.navigation.up);
                _ember.default.appGlobal.activeWidget = widgetKey;
            }, widgetKey);
        },

        _bindFirstElement: function _bindFirstElement() {
            var that = this;

            _ember.default.run.next(function () {
                var tableIdDiv = _ember.default.$('#' + that.get('wkey'));

                if (tableIdDiv.length !== 0) {
                    var firstRowElement = tableIdDiv.children().closest('div').get('1').children[0].children[0].children[0].children[0].children[0];

                    that.set('viewId', firstRowElement.id);
                    firstRowElement.className += ' ember-table-hover';
                }
            });
        },

        _onEnterPress: function _onEnterPress() {
            var view = _ember.default.View.views[this.get('viewId')];

            if (view) {
                var rowData = view.get('row');
                this.triggerSymbolChange(rowData);
            }
        },

        _navigateUpDown: function _navigateUpDown(navDirection) {
            var currentIndex = 0;
            var isSelected = false;
            var minNextTopIndex = 0;
            var innerScroll = this._getAntiScroller();
            var rowHeight = this.get('rowHeight');
            var tableIdDiv = _ember.default.$('#' + this.get('wkey'));

            if (tableIdDiv.length !== 0) {
                var childTop, currentTop, beforeLastDiv, lastRowTop, previousLastRow, lastRow, noOfRows;
                var mainDiv = tableIdDiv.children().closest('div').get('1').children[0].children[0].children[0];
                var divSet = mainDiv.children[0];
                var tableHeight = mainDiv.clientHeight;
                var lastDivTop = navDirection * tableHeight;

                // Get current selected row if any
                for (var i = 0; i < divSet.childElementCount; i++) {
                    childTop = parseInt(divSet.children[i].style.top, 10);

                    if (navDirection === this.navigation.down) {
                        if (childTop > lastDivTop) {
                            lastDivTop = childTop;
                        }
                    } else {
                        if (childTop < lastDivTop) {
                            lastDivTop = childTop;
                        }
                    }

                    if (divSet.children[i].classList.contains('ember-table-hover')) {
                        currentTop = childTop;
                        currentIndex = i;
                        isSelected = true;
                    }
                }

                // Select first row if none of rows are selected
                if (!isSelected) {
                    this._setFirstElement(divSet);
                    this.set('viewId', divSet.children[0].id);
                    return false;
                }

                if (navDirection === this.navigation.down) {
                    lastRow = tableHeight - rowHeight; // Scroll down when it reaches last fully rendered row
                    lastRowTop = tableHeight - rowHeight; // Set top of scrolling point
                } else {
                    noOfRows = divSet.childElementCount - 2; // Scroll up when it reaches first fully rendered row
                    lastRowTop = tableHeight - noOfRows * rowHeight; // Set top of scrolling point
                }

                // If it reaches the bottom,it scrolls to the top of the watch-list
                if (navDirection === this.navigation.down && currentTop === lastRow) {
                    innerScroll.scrollTop = 0;
                    return false;
                }

                if (navDirection === this.navigation.up && currentTop === 0) {
                    innerScroll.scrollTop = lastRowTop;
                    return false;
                }

                // Remove selected css class if any
                if (isSelected) {
                    divSet.children[currentIndex].classList.remove('ember-table-hover');
                    minNextTopIndex = currentIndex - 1;
                }

                var minNextTop = navDirection === this.navigation.up ? lastDivTop : tableHeight;

                // Search for the row element which has minimum scroll Top after current scrollTop
                for (var j = 0; j < divSet.childElementCount; j++) {
                    childTop = parseInt(divSet.children[j].style.top, 10);

                    if (navDirection === this.navigation.down) {
                        if (childTop > currentTop && childTop < minNextTop) {
                            minNextTop = childTop;
                            minNextTopIndex = j;
                        }
                    } else {
                        if (childTop < currentTop && childTop > minNextTop) {
                            minNextTop = childTop;
                            minNextTopIndex = j;
                        }
                    }
                }

                // Apply selected css class to next element
                this._setNextElement(divSet.children[minNextTopIndex]);

                // Update viewId of currently selected row
                if (divSet.children[minNextTopIndex]) {
                    this.set('viewId', divSet.children[minNextTopIndex].id);
                }

                // Get previous row of last row in current list
                if (navDirection === this.navigation.down) {
                    beforeLastDiv = lastDivTop - 2 * rowHeight; // Get last fully rendered row
                    previousLastRow = lastRowTop - 2 * rowHeight; // Get top value of last fully rendered row
                } else {
                    beforeLastDiv = lastDivTop + rowHeight;
                }

                // Check whether selected item has reached to before last row and previous row of bottom of watchlist
                if (navDirection === this.navigation.down && currentTop === beforeLastDiv && currentTop !== previousLastRow) {
                    innerScroll.scrollTop = currentTop;
                    return false;
                }

                if (navDirection === this.navigation.up && currentTop === beforeLastDiv) {
                    innerScroll.scrollTop = currentTop - noOfRows * rowHeight;
                    return false;
                }
            }

            return false;
        },

        _setFirstElement: function _setFirstElement(divElement) {
            var element = divElement.children[0];
            element.className += ' ember-table-hover';
        },

        _setNextElement: function _setNextElement(divElement) {
            if (divElement) {
                divElement.className += ' ember-table-hover';
            }
        },

        _getAntiScroller: function _getAntiScroller() {
            var tableIdDiv = _ember.default.$('#' + this.get('tableComponentId'));
            return tableIdDiv && tableIdDiv.length > 0 ? tableIdDiv.children().closest('div').get('1').children[0].children[0] : undefined;
        },

        _initializeMenuComponents: function _initializeMenuComponents() {
            this.menuComponent = this.container.lookup('component:symbol-click-menu-popup');
            this.menuComponent.associatedController = this;

            if (!this.menuComponent) {
                // Create a symbol-click-menu-popup component object and call base-context-menu
                this.menuComponent = this.container.lookupFactory('component:symbol-click-menu-popup').create({ associatedController: this });
            }

            this._generateFullContextMenu();
        },

        _onClickRow: function _onClickRow(selectedRow, clickEvent) {
            var stock = selectedRow.sym ? selectedRow : selectedRow.getProperties('exg', 'sym', 'inst');

            if (this.get('viewId')) {
                var view = _ember.default.View.views[this.get('viewId')];

                if (view) {
                    view.element.classList.remove('ember-table-hover');
                }
            }

            var currentView = clickEvent.target.offsetParent;

            this.set('viewId', currentView.id);
            this._setNextElement(currentView);

            if (clickEvent && clickEvent.button === _constants.default.MouseButtons.RightClick) {
                this._initializeMenuComponents();
                _sharedService.default.getService('sharedUI').invokeRightClick(stock, this.get('wkey'), clickEvent, this.menuComponent);
            } else {
                this.triggerSymbolChange(stock);
            }
        },

        _onKeyDown: function _onKeyDown(event) {
            var keyCode = event.keyCode;
            var KeyCodeEnum = this.utils.Constants.KeyCodes;

            _ember.default.appGlobal.activeWidget = this.get('wkey');

            switch (keyCode) {
                case KeyCodeEnum.DownArrow:
                    this._navigateUpDown(this.navigation.down);
                    break;

                case KeyCodeEnum.UpArrow:
                    this._navigateUpDown(this.navigation.up);
                    break;

                case KeyCodeEnum.Enter:
                    this._onEnterPress();
                    break;

                case KeyCodeEnum.Escape:
                    this.set('textFilter', '');
                    break;

                default:
                    break;
            }

            return false;
        },

        onPriceMetaReceived: function onPriceMetaReceived() {
            if (this.get('isExgChanged')) {
                _ember.default.run.next(this, this._setFirstSymbol);
            }
        },

        _setFirstSymbol: function _setFirstSymbol() {
            var selectedLink = 1;
            var stockArr = this.get('content');

            if (stockArr && stockArr.length > 0) {
                var stock = stockArr[0];
                _appEvents.default.onSymbolChanged(stock.sym, stock.exg, stock.inst, selectedLink);
            }
        },

        actions: {
            clickRow: function clickRow(selectedRow, clickEvent) {
                this._super(clickEvent);
                this._onClickRow(selectedRow, clickEvent);
            },

            doubleClickRow: function doubleClickRow(selectedRow) {
                var rowData = selectedRow.getProperties('exg', 'sym', 'inst');
                _sharedService.default.getService('priceUI').showPopupWidget({ container: this.container, controllerString: 'view:symbol-popup-view' }, { tabId: 0, sym: rowData.sym, exg: rowData.exg, inst: rowData.inst });
            },

            onSelectExchange: function onSelectExchange(exchg) {
                if (this.get('exg') !== exchg.code) {
                    this.set('isExgChanged', true);
                    this._super(exchg);
                } else {
                    this.set('isExgChanged', false);
                }
            },

            onKeyDown: function onKeyDown(event) {
                this._onKeyDown(event);
            },

            showFilterBox: function showFilterBox() {
                var that = this;
                var currentState = this.get('isChangeWidth');

                this.set('textFilter', '');

                _ember.default.run.later(function () {
                    that.set('isChangeWidth', !currentState);
                }, 10);
            }
        }
    });
});
define('universal-app/controllers/price/widgets/watch-list/table-array-proxy', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.ArrayProxy.extend({
        content: _ember.default.A(),
        sortedContent: _ember.default.A(),
        isContentReady: false,

        removedIndex: -1,
        startIndex: 0,
        numItemsShowing: 0,

        init: function init() {
            this.createDummyCollection();
            this._super();
        },

        onClearData: function onClearData() {
            this.set('startIndex', 0);
            this.set('isContentReady', false);
        },

        // This will create empty rows until data binding happens
        createDummyCollection: function createDummyCollection() {
            // TODO: [satheeqh] Calculate initial row count
            for (var i = 0; i < 30; i++) {
                this.get('content').pushObject(_ember.default.Object.create({ dataObj: undefined }));
            }
        },

        // Array proxy overwrite to support content sort event handling
        arrayWillChange: _ember.default.K,

        /* *
         * Callback function while array content changes. Triggers when add/remove elements.
         * @param contentWrap - Wrapper of content base
         * @param start - Start index of change occurred
         * @param removeCount - No. of removed elements
         * @param addCount - No. of added elements
         */
        arrayDidChange: function arrayDidChange(contentWrap, start, removeCount, addCount) {
            // TODO: [satheeqh] Checks whether this required
            this.set('sortedContent', contentWrap.get('arrangedContent'));

            var startIndex = this.get('startIndex'),
                lastIndex = this.get('numItemsShowing') + startIndex,
                contentLength = this.get('sortedContent.length');

            if ((addCount === contentLength || removeCount === contentLength) && start === 0) {
                // Allow full array sort, update only viewport elements
                this._updateContent(startIndex, lastIndex);

                return;
            }

            if (removeCount > 0) {
                // Keep track of removed element index, consider this on calculating start index while add happens
                if (startIndex <= start <= lastIndex) {
                    this.set('removedIndex', start);
                }

                return;
            } else if (addCount <= 0) {
                return;
            }

            var rmIndex = this.get('removedIndex'),
                updateStart = -1,
                updateEnd = -1;

            if (startIndex <= start && start <= lastIndex) {
                // Added to viewport
                if (startIndex <= rmIndex && rmIndex <= lastIndex) {
                    // Swap
                    updateStart = start < rmIndex ? start : rmIndex;
                    updateEnd = start < rmIndex ? rmIndex : start;
                } else {
                    // Moving in
                    updateStart = rmIndex < start ? startIndex : start;
                    updateEnd = rmIndex < start ? start : lastIndex;
                }
            } else {
                // Removed from viewport
                if (startIndex <= rmIndex && rmIndex <= lastIndex) {
                    // Moving out
                    updateStart = rmIndex < start ? rmIndex : startIndex; // When row move from upper to down, need to refresh upper portion
                    updateEnd = rmIndex < start ? lastIndex : rmIndex;
                } else {
                    // Change out of viewport
                    return;
                }
            }

            if (updateStart >= 0 && updateStart <= updateEnd) {
                this._updateContent(updateStart, updateEnd);
            }

            this.set('removedIndex', -1);
        },

        /* *
         * Updates content object element. This way all the elements from start index will be updated.
         * @param updateStart - Top most index to start updating.
         * @param updateEnd - Last index to stop updating.
         * @private
         */
        _updateContent: function _updateContent(updateStart, updateEnd) {
            // This will block style mixin on updating styles
            // TODO: [satheeqh] Do this via table component
            _ember.default.appGlobal.isSortingProgress = true;

            for (var i = updateStart; i <= updateEnd; i++) {
                this.objectAt(i);
            }

            _ember.default.run.next(this, function () {
                _ember.default.appGlobal.isSortingProgress = false;
            });
        },

        // Since initial content length based on dummy rows, then required to switch to actual content length
        length: _ember.default.computed(function () {
            return this.get('isContentReady') ? this.get('sortedContent.length') : this.get('content.length');
        }).property('sortedContent.length', 'isContentReady'),

        /* *
         * Overwriting default array proxy method to provided table row content with updated data binding.
         * @param index - ember-table row index to fetch object from content
         * @returns {Row Object}
         */
        objectAt: function objectAt(index) {
            // TODO: [satheeqh] Need to add a logic not to create all objects in content. Based on index, set the data object instead. (Analyze)

            var content = this.get('content');
            var obj = content[index];

            if (!obj) {
                // Empty dummy object created to update the data object instead teardown the row content
                obj = _ember.default.Object.create({ dataObj: undefined });
                content[index] = obj;
            }

            obj.set('dataObj', this.sortedContent[index]);

            return obj;
        }
    });
});
define('universal-app/controllers/price/widgets/watch-list/watch-list-container', ['exports', 'ember', '../../../base-controller', '../../../../controllers/controller-factory', '../../../../models/shared/shared-service'], function (exports, _ember, _baseController, _controllerFactory, _sharedService) {
    'use strict';

    exports.default = _baseController.default.extend({
        WathclistController: 'price/widgets/watch-list.watch-list',
        widgetController: {},
        isWidgetClosed: false,
        selectedLink: 1,
        isAllowedToActive: false,

        onAfterRender: function onAfterRender() {
            this._renderWatchlist(true);
        },

        onPrepareData: function onPrepareData() {
            var widgetController = this.get('widgetController');

            if (widgetController && _ember.default.$.isFunction(widgetController.onPrepareData)) {
                widgetController.onPrepareData();
            }
        },

        onBindData: function onBindData() {
            var widgetController = this.get('widgetController');

            if (widgetController && _ember.default.$.isFunction(widgetController.onBindData)) {
                widgetController.onBindData();
            }
        },

        onAddSubscription: function onAddSubscription() {
            var widgetController = this.get('widgetController');

            if (widgetController && _ember.default.$.isFunction(widgetController.onAddSubscription)) {
                widgetController.onAddSubscription();
            }
        },

        onRemoveSubscription: function onRemoveSubscription() {
            var widgetController = this.get('widgetController');

            if (widgetController && _ember.default.$.isFunction(widgetController.onRemoveSubscription)) {
                widgetController.onRemoveSubscription();
            }
        },

        onClearData: function onClearData() {
            var widgetController = this.get('widgetController');

            if (widgetController && !this.isWidgetClosed && _ember.default.$.isFunction(widgetController.onClearData)) {
                widgetController.onClearData();
            }
        },

        onClearRender: function onClearRender() {
            this.cacheDom();
        },

        cacheDom: function cacheDom() {
            var widgetController = this.get('widgetController');

            _ember.default.appGlobal.tableCache[this.WathclistController] = widgetController;
            _ember.default.appGlobal.tableCache[this.WathclistController + '-DOM'] = _ember.default.$('#' + widgetController.get('widgetContainerKey'));

            if (widgetController && _ember.default.$.isFunction(widgetController.closeWidget)) {
                widgetController.closeWidget();
                this.set('isWidgetClosed', true);
            }
        },

        renderWidget: function renderWidget() {
            var that = this;
            var controllerString = 'controller:' + this.WathclistController;
            var routeString = this.WathclistController;
            var widgetKey = this.get('wkey') + '-cached';

            // TODO: [satheeqh] Handle arguments passing to initialize widget

            var mainContainer = _sharedService.default.getService('sharedUI').getService('mainPanel').container;
            var widgetController = _controllerFactory.default.createController(mainContainer, controllerString);
            widgetController.set('sym', this.get('sym'));
            widgetController.set('exg', this.get('exg'));
            widgetController.set('inst', this.get('inst'));
            widgetController.set('wkey', widgetKey);
            widgetController.set('bid', this.get('bid'));
            widgetController.set('wid', this.get('wid'));

            // Send args to watch-list
            if (this.get('sortProperties')) {
                widgetController.set('sortProperties', this.get('sortProperties'));
            }

            if (this.get('sortCols')) {
                widgetController.set('sortCols', this.get('sortCols'));
            }

            if (this.get('sortAsc')) {
                widgetController.set('sortAsc', this.get('sortAsc'));
            }

            if (this.get('hideSuspendedFilter')) {
                widgetController.set('hideSuspendedFilter', this.get('hideSuspendedFilter'));
            }

            widgetController.set('afterRenderCb', function () {
                that._renderWatchlist(false);
            });

            widgetController.initializeWidget({ wn: controllerString.split('/').pop() }, { widgetArgs: { selectedLink: this.get('selectedLink') } });

            widgetController.set('widgetContainer', this.get('widgetContainer'));
            widgetController.set('menuContent', this.get('menuContent'));
            widgetController.set('tabContent', this.get('tabContent'));

            this.set('widgetController', widgetController);

            _ember.default.appGlobal.tableCache[this.WathclistController] = widgetController;
            var route = mainContainer.lookup('route:application');

            route.render(routeString, {
                into: 'main-panel-container-controller',
                outlet: 'watchlistOutlet',
                controller: widgetController
            });
        },

        _renderWatchlist: function _renderWatchlist(isFromCache) {
            var cachedWidgetInstance = _ember.default.appGlobal.tableCache[this.WathclistController];

            if (cachedWidgetInstance) {
                var element = isFromCache ? _ember.default.appGlobal.tableCache[this.WathclistController + '-DOM'] : _ember.default.$('#' + cachedWidgetInstance.get('widgetContainerKey'));

                if (element && element.length > 0) {
                    var containerElem = _ember.default.$('#' + this.get('wkey'));
                    containerElem.html(element);

                    if (isFromCache) {
                        _ember.default.run.next(this, function () {
                            cachedWidgetInstance.set('menuContent', this.get('menuContent'));
                            cachedWidgetInstance.set('tabContent', this.get('tabContent'));

                            cachedWidgetInstance.onBindData();
                            cachedWidgetInstance.onAddSubscription();

                            _ember.default.run.later(this, function () {
                                if (cachedWidgetInstance.responsive) {
                                    cachedWidgetInstance.responsive.onPrepare();
                                } else {
                                    cachedWidgetInstance.initializeResponsive();
                                }
                            }, 1000);
                        });
                    }

                    _ember.default.run.later(this, function () {
                        if (_ember.default.$.isFunction(cachedWidgetInstance.onResizeWidget)) {
                            cachedWidgetInstance.onResizeWidget();
                        }

                        if (_ember.default.$.isFunction(cachedWidgetInstance.setLangLayoutSettings)) {
                            cachedWidgetInstance.setLangLayoutSettings(_sharedService.default.userSettings.currentLanguage);
                        }
                    }, 100);

                    cachedWidgetInstance.set('selectedLink', this.get('selectedLink'));
                    this.set('widgetController', cachedWidgetInstance);
                } else {
                    this.utils.logger.logError('Cached instance not found. Widget: ' + this.WathclistController);
                }
            } else {
                this.renderWidget();
            }
        }
    });
});
define('universal-app/controllers/price/widgets/watch-list/watch-list', ['exports', 'ember', '../../../../components/custom-watchlist-dialog', '../../../../components/column-context-menu', '../../../../models/shared/shared-service', '../../../../config/price-widget-config', '../../../../config/app-config', '../../../../components/more-markets-dropdown', '../../../../components/sub-markets-dropdown', './quote-watch-list', '../../../../models/price/price-constants', '../../../../app-events', '../../../../views/table/classic-header-cell', '../../../../views/table/button-cell', '../../../../views/table/button-menu-cell', '../../../../views/table/classic-cell', '../../../../views/table/classic-text-cell', '../../../../views/table/classic-progress-cell', '../../../../views/table/change-cell', '../../../../views/table/dual-cells/dot-cell', '../../../../views/table/dual-cells/dual-arrow-cell', '../../../../views/table/dual-cells/dual-cell', '../../../../views/table/dual-cells/text-icon-cell', '../../../../views/table/dual-cells/progress-cell', '../../../../helpers/responsive-handler', './table-array-proxy'], function (exports, _ember, _customWatchlistDialog, _columnContextMenu, _sharedService, _priceWidgetConfig, _appConfig, _moreMarketsDropdown, _subMarketsDropdown, _quoteWatchList, _priceConstants, _appEvents, _classicHeaderCell, _buttonCell, _buttonMenuCell, _classicCell, _classicTextCell, _classicProgressCell, _changeCell, _dotCell, _dualArrowCell, _dualCell, _textIconCell, _progressCell, _responsiveHandler, _tableArrayProxy) {
    'use strict';

    exports.default = _quoteWatchList.default.extend({
        // Filter parameters
        textFilter: undefined,
        assetFilter: undefined,
        todayFilter: undefined,
        hideSuspendedFilter: undefined,
        sectorFilter: undefined,
        isAnnColumnAdded: false,

        // Table Parameters
        minHeaderHeight: _priceWidgetConfig.default.watchList.tableParams.MinHeaderHeight.standard,
        rowHeight: _priceWidgetConfig.default.watchList.tableParams.RowHeight.standard,
        isClassicView: true,
        indicatorConfig: { isTodaysHighEnabled: true, isTodaysLowEnabled: true, isFiftyTwoHEnabled: true, isFiftyTwoLEnabled: true, isSymSuspendedEnabled: true, isSelectedEnabled: true },
        isFullScreenWL: false,
        numOfFixedColumns: _priceWidgetConfig.default.watchList.tableParams.numOfFixedColumns,

        // Exchange Parameters
        defaultExchange: undefined, // Exchange shown in default tab
        selectedExchange: undefined, // Selected by Markets Dropdown
        exchange: undefined,
        defaultAssetTypes: [],

        // Custom WatchList parameters
        isCustomWLMode: false,
        myFavouritesKey: 'myFavourites',
        widgetArgsKey: 'watch-list',
        myFavouritesIndex: 0,
        customWatchListArray: _ember.default.A([]),
        newCustomWLName: undefined,
        currentCustomWLId: undefined,
        currentCustomWLName: undefined,
        isRenameWLDisabled: true,
        isDeleteWLDisabled: true,
        addStockSearchKey: undefined,
        isDefault: true,
        partialControlPanel: 'table/views/partial/default-panel',

        // Pop up Widget Parameters
        clickedRowSymbol: undefined,
        clickedRowExchange: undefined,
        clickedRowExchangeCode: undefined,
        clickedRowInstrument: undefined,
        fullContextMenu: [],
        tradeContextMenu: [], // Added to support trade additional fields
        addToWatchlistMenu: [],
        priceContextMenu: [],

        // Column Parametrs
        customWatchListColumnArray: _ember.default.A([]),
        watchlistSavedColumnIds: {},

        marketWatchListColumnIds: {
            classicIds: _priceWidgetConfig.default.watchList.classicColumnIds,
            defaultIds: _priceWidgetConfig.default.watchList.defaultColumnIds,
            classicAssetIds: _priceWidgetConfig.default.watchList.classicAssetTypes,
            defaultAssetIds: _priceWidgetConfig.default.watchList.assetTypes
        },

        // Sector Parameters
        sectorsArray: _ember.default.A(),
        defaultSectorForDropdown: '',
        isSectorStaticLabelEnabled: true,

        // Sub Market Parameters
        currentAssetType: undefined,
        assetTypes: _ember.default.A(),

        // No filters applied to watch-list initially
        isAllActive: false,
        oneWayContent: _ember.default.computed.oneWay('arrangedContent'),
        settings: undefined,

        // Widget Ids
        detailQuoteWidgetId: 0,
        timeAndSalesWidgetId: 1,
        depthByPriceWidgetId: 2,
        depthByOrderWidgetId: 3,
        chartWidgetId: 4,

        // Full Screen parameters
        previousParent: undefined,
        previousWatchListStyleAttribute: undefined,
        previousFullScreenContainerStyleAttribute: undefined,

        wlHeader: undefined,
        isRenderingEnabled: false,

        // For the assetType dropdown-tab
        isAssetTypeDropdown: false,
        assetTypNewActive: '',

        // For the custom WL dropdown-tab
        isCurrentWLDropdown: false,
        customWLNewActive: '',
        extendedComponentName: 'price/widgets/watch-list/components/watchlist-extended-header',
        viewId: undefined,

        currentSubMarketId: undefined,
        customArrayProxy: undefined,
        afterRenderCb: undefined,
        scrollSelector: '',

        priceService: _sharedService.default.getService('price'),

        // Tablet configs
        showWidgetButtons: true,

        tableComponentId: function () {
            return 'table-' + this.get('wkey');
        }.property('wkey'),

        onLoadWidget: function onLoadWidget() {
            this._super();
            this.priceService.subscribeAuthSuccess(this, this.get('wkey'));

            var that = this;
            var wkey = this.get('wkey');
            var columnState = _sharedService.default.userState.getWidgetState(this.get('widgetArgsKey'));

            if (!this.get('customArrayProxy')) {
                // Custom array proxy to handle data binging
                this.set('customArrayProxy', _tableArrayProxy.default.create());
                this._setDefaultExchange();
            }

            _sharedService.default.getService('price').watchListDS.initializeCustomColumnArray(this.get('widgetArgsKey'));

            this.set('widgetContainerKey', 'watchListContainer-' + wkey);
            this.set('scrollSelector', '#table-' + wkey + ' .ember-table-scroll-container .antiscroll-inner');
            this.set('customWatchListArray', _sharedService.default.getService('price').watchListDS.getCustomWLArray());
            this.set('customWatchListColumnArray', _sharedService.default.getService('price').watchListDS.getCustomWatchListColumnArray());
            this.set('defaultSectorForDropdown', this.get('app').lang.labels.allSectors);
            this.set('nonRemovableColumnIds', _priceWidgetConfig.default.watchList.nonRemovableColumnIds);

            if (columnState && columnState.marketWatchListColumnIds) {
                this.set('watchlistSavedColumnIds', columnState.marketWatchListColumnIds);
            }

            this.priceService.watchListDS.initializeCustomWL();
            this.setSavedColumnConfig();
            this.setTabletConfigs();
            this.loadMainContextItem();
            this.setTableViewParameters();
            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();
            this.setDefaultSort();

            _ember.default.run.later(function () {
                that.set('isRenderingEnabled', true);
                that.setLangLayoutSettings(_sharedService.default.userSettings.currentLanguage);
            }, 1);

            _appEvents.default.subscribeLanguageChanged(this, this.get('wkey'));
            this.priceService.subscribePriceMetaReady(this, this.get('wkey'));

            _ember.default.set(this.get('customWatchListArray')[this.myFavouritesIndex], 'name', that.get('app').lang.labels[this.myFavouritesKey]);

            this.saveWidget({ exg: this.get('exg') });
        },

        onPriceMetaReady: function onPriceMetaReady(isSuccess) {
            var stockList = this.get('content');
            var stock = stockList && stockList.length > 0 ? stockList[0] : {};

            if (isSuccess && stock.sym) {
                _appEvents.default.onSymbolChanged(stock.sym, stock.exg, stock.inst, this.get('selectedLink'));
            }
        },

        onAuthSuccess: function onAuthSuccess() {
            var exchange = this.get('exg');
            var allDefaultExg = this.priceService.userDS.get('userExchg');

            // If user does not have price subscription for widget exchange, refresh widget
            // This will be done after price authentication
            // Also watch list is not intended to load for non-default exchanges, which also handles here
            if (this.priceService.userDS.isNotSubscribedAsDefaultExchange(exchange)) {
                this.refreshWidget({ exg: allDefaultExg[0] });
                this.utils.logger.logInfo('User does not have price exchange subscription for ' + exchange);
            }
        },

        onPrepareData: function onPrepareData() {
            var that = this;
            var exgCode = this.get('exg');

            if (this.get('isCustomWLMode')) {
                this._clearResponsive();
            }

            this.set('partialControlPanel', 'table/views/partial/default-panel'); // Switch to Default Panel
            this.set('isCustomWLMode', false); // Clicking Market is the only way to exit Custom mode

            // Highlight the default selected tab
            var tabActive = this.set('isAllActive', true);
            this.setActiveAssetType(tabActive);

            if (exgCode === this.get('defaultExchange.exg')) {
                // Sets exchange of default tab
                this.set('isDefault', true);
            } else {
                this.priceService.exchangeDS.getExchangeMetadata(exgCode);
                this.set('selectedExchange', this.priceService.exchangeDS.getExchange(exgCode));
                this.set('isDefault', false);

                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['exchangeTab:', exgCode].join(''));
            }

            this.set('exchange', this.get('isDefault') ? this.get('defaultExchange') : this.get('selectedExchange')); // Sets exchange of selected tab
            this.set('isSectorStaticLabelEnabled', true);

            this.setDefaultColumns();
            this.setDefaultSort();

            _ember.default.run.next(this, function () {
                that.initializeResponsive();
            });
        },

        onBindData: function onBindData() {
            if (!this.get('exg')) {
                this._setDefaultExchange();
            }

            this.addArrayObserver(this.customArrayProxy);
            this.setDefaultColumns();
            this.loadContent();
            this._setAssetTypes();
            this._setSectorArray(this.get('exg'));
            this.addObserver('masterContent.@each', this.filterStocks);
            this.addObserver('masterContent.@each.symStat', this.filterStocks);
            this.filterStocks();

            this.set('customArrayProxy.isContentReady', true);

            // To update exchange change during authentication.
            if (this.get('wlHeader') !== undefined) {
                this.get('wlHeader').onExchangeUpdate();
            }
        },

        onAddSubscription: function onAddSubscription() {
            this._super();

            var exchangeCode = this.get('exchange').exg;
            this.priceService.addFullMarketIndexRequest(exchangeCode);
        },

        initializeResponsive: function initializeResponsive() {
            var isCustomWLMode = this.get('isCustomWLMode');
            var widgetId = isCustomWLMode ? 'favoritePanel-' + this.get('wkey') : 'defaultPanel-' + this.get('wkey');

            this.set('responsive', _responsiveHandler.default.create({ controller: this, widgetId: widgetId, callback: this.onResponsive, enabledElementResize: true }));

            if (this.get('isCustomWLMode')) {
                this.responsive.addList('favorite-free', [{ id: 'favorite-more-columns', width: 5 }]);
            } else {
                this.responsive.addList('watchList-middle', [{ id: 'assetType-dropdown', width: 5 }, { id: 'announcement', width: 5 }, { id: 'moreColumns', width: 5 }]);
            }

            this.responsive.initialize();
        },

        onAfterRender: function onAfterRender() {
            if (_ember.default.$.isFunction(this.afterRenderCb)) {
                this.afterRenderCb();
            }

            if (this.get('extendedComponentName')) {
                var viewName = this.container.lookup('controller:' + this.get('extendedComponentName'));

                if (viewName) {
                    viewName.set('targetController', this);
                }
            }
        },

        onRemoveSubscription: function onRemoveSubscription() {
            this._super();

            var exchange = this.get('exchange').exg;
            this.priceService.removeFullMarketIndexRequest(exchange);
        },

        onClearData: function onClearData() {
            this._super();

            this.set('exg', undefined);
            this.set('isDefaultExchangeSelected', false);
            this.set('currentCustomWLName', undefined);
            this.set('currentAssetType', undefined);
            this.set('sectorFilter', undefined); // When asset filter is on, sector filter is off
            this.set('defaultAssetTypes', []);
            this.set('currentSubMarketId', undefined);

            if (this.get('currentCustomWLId') !== undefined) {
                this.set('customWLNewActive', undefined);
            }

            this.set('assetFilter', undefined);
            this.set('currentCustomWLId', undefined);
        },

        onUnloadWidget: function onUnloadWidget() {
            this._super();

            this.set('textFilter', undefined);
            this.set('assetFilter', undefined);
            this.set('todayFilter', undefined);
            this.set('sectorFilter', undefined);
            this.set('assetTypes', _ember.default.A());

            if (this.get('currentCustomWLId') !== undefined) {
                this.set('customWLNewActive', undefined);
            }

            if (this.get('wlHeader') !== undefined) {
                this.get('wlHeader').onUnloadWlHeader();
            }

            this.set('wlHeader', undefined);
            this.set('currentCustomWLId', undefined);
            this.set('currentCustomWLName', undefined);
            this.set('currentAssetType', undefined);
            this.set('tradeContextMenu', _ember.default.A());
            this.set('currentSubMarketId', undefined);

            this.removeArrayObserver(this.customArrayProxy);

            this.get('customArrayProxy').onClearData();
            this._clearResponsive();

            this.priceService.unSubscribePriceMetaReady(this.get('wkey'));
        },

        onLanguageChanged: function onLanguageChanged() {
            var settings = this.get('settings');

            this._super();
            this._loadAssetTypes();
            this._setSectorArray(this.get('exg'));
            this.setDefaultColumns();
            this.setDefaultColumnDeclarations();
            this._setSettingsDesc(settings[0]);
            this.loadMainContextItem();

            this.set('defaultSectorForDropdown', this.get('app').lang.labels.allSectors);
            _ember.default.set(this.get('customWatchListArray')[this.myFavouritesIndex], 'name', this.get('app').lang.labels[this.myFavouritesKey]);

            this.toggleProperty('isCustomWLChanged');
            this.toggleProperty('isAssetTypeChanged');
            this.toggleProperty('isRefreshed');
        },

        onResponsive: function onResponsive(responsiveArgs) {
            var controller = responsiveArgs.controller;

            if (responsiveArgs.responsiveLevel >= 1) {
                controller.set('isAssetTypeDropdown', true);
            } else {
                controller.set('isAssetTypeDropdown', false);
            }
        },

        onResizeWidget: function onResizeWidget() {
            this.toggleProperty('isRefreshed');
        },

        loadCustomWL: function loadCustomWL(id) {
            var that = this;
            var customStockArray = this.get('customWatchListArray')[id].stkArray;
            var subscribedArray = _ember.default.A();

            if (id === this.get('myFavouritesIndex')) {
                this.set('isRenameWLDisabled', true);
                this.set('isDeleteWLDisabled', true);
            } else {
                this.set('isRenameWLDisabled', false);
                this.set('isDeleteWLDisabled', false);
            }

            if (customStockArray && customStockArray.length > 0 && customStockArray[0].sym) {
                // Checks symbols are retrieved from local storage or DataStore
                _ember.default.$.each(customStockArray, function (key, stockAdded) {
                    var stockFromStore = _sharedService.default.getService('price').stockDS.getStock(stockAdded.exg, stockAdded.sym);
                    stockFromStore.set('isSelected', stockAdded.isSelected);
                    subscribedArray.pushObject(stockFromStore);

                    _sharedService.default.getService('price').addSymbolRequest(stockFromStore.get('exg'), stockFromStore.get('sym'), stockFromStore.get('inst'));
                });

                this.get('customWatchListArray')[id].stkArray = subscribedArray;
            }

            // Highlight watch-list header selected tab
            this.set('customWLNewActive', this.get('customWatchListArray')[id]);
            this.setCustomColumns(id);
            this.set('partialControlPanel', 'table/views/partial/favourite-panel');
            this.set('isCustomWLMode', true);
            this.set('currentCustomWLId', id);
            this.set('currentCustomWLName', this.get('customWatchListArray')[id].name);

            // Disable filters
            this.set('assetFilter', undefined);
            this.set('currentAssetType', undefined);
            this.set('sectorFilter', undefined);
            this.set('textFilter', undefined);
            this.set('todayFilter', undefined);
            this.set('hideSuspendedFilter', undefined);

            // Set Content
            this.set('content', subscribedArray);
            this.set('masterContent', subscribedArray);
            this.set('sortProperties', []); // No Sorting applied to custom WL

            _ember.default.run.next(this, function () {
                that.initializeResponsive();
            });
        },

        onCustomWlSelect: function onCustomWlSelect(id) {
            this._clearResponsive();
            this.loadCustomWL(id);
            this.setDefaultSort();
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.viewChanged, ['onCustomWlSelect:', id].join(''));
        },

        _clearResponsive: function _clearResponsive() {
            var responsive = this.get('responsive');

            if (responsive) {
                responsive.onClear();
                this.set('responsive', undefined);
            }
        },

        setLangLayoutSettings: function setLangLayoutSettings(language) {
            var that = this;
            var numOfFixedColumns, scrollPixels;

            if (this.get('isRenderingEnabled')) {
                if (language === 'AR') {
                    numOfFixedColumns = 0;
                    scrollPixels = _priceWidgetConfig.default.watchList.tableParams.MaxTableWidth;
                } else {
                    numOfFixedColumns = _priceWidgetConfig.default.watchList.tableParams.numOfFixedColumns;
                    scrollPixels = 0;
                }

                this.set('numOfFixedColumns', numOfFixedColumns);

                _ember.default.run.later(function () {
                    that.set('scrollLeft', scrollPixels);
                    _ember.default.$(that.get('scrollSelector')).scrollLeft(scrollPixels);
                }, 100);
            }
        },

        setTabletConfigs: function () {
            this.set('showWidgetButtons', !_appConfig.default.customisation.isTablet);
            this.set('enableColumnReorder', !this.isTablet);
            this.set('columnsFillTable', !this.isTablet);
        }.on('init'),

        addRemoveAnnColumn: function () {
            try {
                var tableColumns = this.get('columns');
                var tableContent = _ember.default.$('.antiscroll-inner'); // Note that this is not available when loading
                var insertionIndex, removalIndex, addingScrollingLength, removalScrollingLength;

                if (_sharedService.default.userSettings.currentLanguage === 'AR') {
                    // This is because AR array is handled manually
                    insertionIndex = 0;
                    removalIndex = 0;
                    addingScrollingLength = 0;
                    removalScrollingLength = _priceWidgetConfig.default.watchList.tableParams.MaxTableWidth;
                } else {
                    insertionIndex = tableColumns.length;
                    removalIndex = tableColumns.length - 1;
                    addingScrollingLength = _priceWidgetConfig.default.watchList.tableParams.MaxTableWidth;
                    removalScrollingLength = 0;
                }

                if (this.get('isAnnColumnAdded')) {
                    var annColumnType = this.get('isClassicView') ? 'classicCell' : 'dualText';
                    var annColumnHeaderType = this.get('isClassicView') ? 'Ember.ClassicHeaderCell' : 'Ember.HeaderCell';

                    // TODO: [satheeqh] Columnd id should be handled in common place 'dataObj.'
                    tableColumns.insertAt(insertionIndex, this.createColumn({
                        id: 'dataObj.ann',
                        width: 185,
                        headerName: 'announcement',
                        headerStyle: 'text-left-header',
                        headerCellView: annColumnHeaderType,
                        type: annColumnType,
                        sortKeyword: 'dataObj.ann',
                        dataType: 'string'
                    }, this.get('app')));

                    _ember.default.run.later(function () {
                        // Scroll right (full) after Anns column object is added
                        tableContent.scrollLeft(addingScrollingLength);
                        _ember.default.$('.antiscroll-wrap').antiscroll().data('antiscroll').rebuild();
                    }, 200);
                } else {
                    if (tableColumns[removalIndex].get('contentPath') === 'dataObj.ann') {
                        tableColumns.removeAt(removalIndex); // Anns column is added as the last column.
                        tableContent.scrollLeft(removalScrollingLength);
                    }
                }
            } catch (e) {
                // TODO [Arosha] Handle 'set on destroyed object' error
                this.utils.logger.logError('Error in announcement column not add/remove from watchlist: ' + e);
            }
        }.observes('isAnnColumnAdded'),

        setTableViewParameters: function () {
            var settings;

            if (this.get('isClassicView')) {
                this.set('minHeaderHeight', _priceWidgetConfig.default.watchList.tableParams.MinHeaderHeight.classic);
                this.set('rowHeight', _priceWidgetConfig.default.watchList.tableParams.RowHeight.classic);

                settings = { code: 'standardView' };
            } else {
                this.set('minHeaderHeight', _priceWidgetConfig.default.watchList.tableParams.MinHeaderHeight.standard);
                this.set('rowHeight', _priceWidgetConfig.default.watchList.tableParams.RowHeight.standard);

                settings = { code: 'classicView' };
            }

            this._setSettingsDesc(settings);
            this.setLangLayoutSettings(_sharedService.default.userSettings.currentLanguage, this.get('isFullScreenWL'));
            this.onResizeWidget();
        }.observes('isClassicView'),

        _setSettingsDesc: function _setSettingsDesc(settings) {
            settings.desc = this.get('app').lang.labels[settings.code];
            this.set('settings', [settings]);
        },

        setCellViewsScopeToGlobal: function setCellViewsScopeToGlobal() {
            this._super();

            _ember.default.ClassicHeaderCell = _classicHeaderCell.default;
            _ember.default.ClassicCell = _classicCell.default;
            _ember.default.ClassicTextCell = _classicTextCell.default;
            _ember.default.ClassicProgressCell = _classicProgressCell.default;
            _ember.default.ChangeCell = _changeCell.default;
            _ember.default.ButtonCell = _buttonCell.default;
            _ember.default.ButtonMenuCell = _buttonMenuCell.default;
            _ember.default.DotCell = _dotCell.default;
            _ember.default.DualArrowCell = _dualArrowCell.default;
            _ember.default.DualCell = _dualCell.default;
            _ember.default.TextIconCell = _textIconCell.default;
            _ember.default.ProgressCell = _progressCell.default;
        },

        cellViewsForColumns: {
            button: 'Ember.ButtonCell',
            buttonMenu: 'Ember.ButtonMenuCell',
            classicProgressCell: 'Ember.ClassicProgressCell',
            classicCell: 'Ember.ClassicCell',
            classicTextCell: 'Ember.ClassicTextCell',
            changeCell: 'Ember.ChangeCell',
            upDown: 'Ember.UpDownCell',
            dual: 'Ember.DualCell',
            dualText: 'Ember.DualTextCell',
            textIconCell: 'Ember.TextIconCell',
            dualChange: 'Ember.DualChangeCell',
            progress: 'Ember.ProgressCell',
            dot: 'Ember.DotCell',
            dualArrow: 'Ember.DualArrowCell'
        },

        checkFilterMatch: function checkFilterMatch(stock, textFilter, assetFilter, todayFilter, sectorFilter, hideSuspendedFilter) {
            var field;
            var isMatchedTextFilter = !textFilter; // If a argument is false, that means that filter is not applied
            var isMatchedAssetFilter = !(assetFilter || assetFilter === 0);
            var isMatchedTodayFilter = !todayFilter;
            var isMatchedSectorFilter = !sectorFilter;
            var isMatchedHideSuspendedFilter = !hideSuspendedFilter;

            if (!isMatchedTextFilter) {
                for (field in stock) {
                    if (stock.hasOwnProperty(field) && (field === 'sym' || field === 'sDes' || field === 'lDes' || field === 'cid') && stock[field] && stock[field].toString().slice(0, textFilter.length).toLowerCase() === textFilter.toLowerCase()) {
                        isMatchedTextFilter = true;
                    }
                }
            }

            if (!isMatchedAssetFilter) {
                if (_appConfig.default.customisation.isGroupByAssetType) {
                    var instArray = this.utils.AssetTypes.AssetToInstrumentMapping[assetFilter];
                    isMatchedAssetFilter = instArray && instArray.indexOf(stock.get('inst')) > -1;
                } else {
                    isMatchedAssetFilter = stock.get('inst') === assetFilter;
                }
            }

            if (!isMatchedTodayFilter) {
                isMatchedTodayFilter = stock.get('trades') > 0;
            }

            if (!isMatchedHideSuspendedFilter) {
                isMatchedHideSuspendedFilter = stock.get('symStat') !== _priceConstants.default.SymbolStatus.Suspended;
            }

            if (!isMatchedSectorFilter) {
                isMatchedSectorFilter = stock.get('sec') === sectorFilter;
            }

            return isMatchedTextFilter && isMatchedAssetFilter && isMatchedTodayFilter && isMatchedSectorFilter && isMatchedHideSuspendedFilter;
        },

        filterStocks: function () {
            _ember.default.run.once(this, this._filterStocks);
        }.observes('textFilter', 'assetFilter', 'todayFilter', 'sectorFilter', 'hideSuspendedFilter'),

        trackFiltersGA: function trackFiltersGA() {
            var textFilter = this.utils.validators.isAvailable(this.get('textFilter')) ? this.get('textFilter') : false; // If any filter is false, that means that filter is not applied
            var assetFilter = this.get('assetFilter') ? this.get('assetFilter').inst : false;
            var todayFilter = this.get('todayFilter');
            var hideSuspendedFilter = this.get('hideSuspendedFilter');
            var sectorFilter = this.utils.validators.isAvailable(this.get('sectorFilter')) ? this.get('sectorFilter').sec : false;

            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.filter, ['textFilter:', textFilter, '~', 'assetFilter:', assetFilter, '~', 'todayFilter:', todayFilter, '~', 'hideSuspendedFilter:', hideSuspendedFilter, '~', sectorFilter].join(''));
        },

        /* Fill More Columns window with columns selected accordingly */

        setDefaultColumnDeclarations: function () {
            var that = this;
            var labels = that.get('app').lang.labels;
            var columns = this.get('isClassicView') ? _priceWidgetConfig.default.watchList.classicColumnMapping : _priceWidgetConfig.default.watchList.defaultColumnMapping;
            var columnIds = this.get('isClassicView') ? _priceWidgetConfig.default.watchList.classicMoreColumnIds : _priceWidgetConfig.default.watchList.moreColumnIds;
            var columnArray = this.getColumnDefinitionsByMap(columns, columnIds);
            var currentColumnArray = this.get('columnDeclarations');
            var currentColumnMap = {};

            _ember.default.$.each(currentColumnArray, function (index, column) {
                currentColumnMap[column.id] = column;
            });

            _ember.default.$.each(columnArray, function (index, column) {
                var columnNameLabel = labels[column.name];
                var columnHeaderSecondName = column.headerSecondName;
                var name = columnNameLabel ? columnNameLabel : labels[column.headerName];

                if (columnHeaderSecondName) {
                    name = [name, labels[columnHeaderSecondName]].join(' / ');
                }

                _ember.default.set(column, 'isSelectedColumn', currentColumnMap[column.id]);
                _ember.default.set(column, 'displayName', name);
            });

            this.set('defaultColumnDeclarations', columnArray);
        }.observes('isClassicView', 'isCustomWLMode'),

        setDefaultColumns: function () {
            var that = this;
            var assetType = this.get('currentAssetType');
            var customWLId = this.get('currentCustomWLId');

            if (customWLId || customWLId === 0) {
                this.setCustomColumns(customWLId);
            } else if (assetType) {
                this.setAssetTypeColumns(assetType);
            } else {
                var columns, columnIds;
                var watchListColumnIds = this.get('marketWatchListColumnIds');

                if (this.get('isClassicView')) {
                    columnIds = watchListColumnIds.classicIds;

                    if (!columnIds || columnIds.length === 0) {
                        columnIds = watchListColumnIds.classicIds = _priceWidgetConfig.default.watchList.customClassicColumnIds;
                    }

                    columns = _priceWidgetConfig.default.watchList.classicColumnMapping;
                } else {
                    columnIds = watchListColumnIds.defaultIds;

                    if (!columnIds || columnIds.length === 0) {
                        columnIds = watchListColumnIds.defaultIds = _priceWidgetConfig.default.watchList.customDefaultColumnIds;
                    }

                    columns = _priceWidgetConfig.default.watchList.defaultColumnMapping;
                }

                this.set('columnDeclarations', this.getColumnDefinitionsByMap(columns, columnIds));
            }

            if (this.get('isRenderingEnabled')) {
                _ember.default.run.next(this, function () {
                    var antiScrollWrap = _ember.default.$('#' + that.get('widgetContainerKey') + ' .antiscroll-wrap');

                    if (antiScrollWrap && antiScrollWrap.antiscroll().data('antiscroll')) {
                        antiScrollWrap.antiscroll().data('antiscroll').rebuild();
                    }

                    that.setLangLayoutSettings(_sharedService.default.userSettings.currentLanguage);
                });
            }
        }.observes('isClassicView'),

        setAssetTypeColumns: function setAssetTypeColumns(assetType) {
            var marketColumns = this.get('marketWatchListColumnIds');
            var columnIds, columnList;

            if ((assetType || assetType === 0) && marketColumns.defaultAssetIds[assetType]) {
                columnIds = marketColumns.defaultAssetIds[assetType];
            } else {
                columnIds = marketColumns.defaultAssetIds[assetType] = marketColumns.defaultIds;
            }

            columnList = _priceWidgetConfig.default.watchList.defaultColumnMapping;

            if (this.get('isClassicView')) {
                if ((assetType || assetType === 0) && marketColumns.classicAssetIds[assetType]) {
                    columnIds = marketColumns.classicAssetIds[assetType];
                } else {
                    columnIds = marketColumns.classicAssetIds[assetType] = marketColumns.classicIds;
                }

                columnList = _priceWidgetConfig.default.watchList.classicColumnMapping;
            }

            this.set('columnDeclarations', this.getColumnDefinitionsByMap(columnList, columnIds));
            this.setLangLayoutSettings(_sharedService.default.userSettings.currentLanguage);
        },

        /* Fill column Ids for custom columns in order to set current WL columns to particular custom WL*/

        setCustomColumns: function setCustomColumns(id) {
            var customColumnIds, columns;
            var customWatchLists = this.get('customWatchListColumnArray');

            if (!customWatchLists[id]) {
                var customWatchListWithStocks = this.get('customWatchListArray')[id];
                customWatchLists[id] = { id: id, name: customWatchListWithStocks.name, classicColumnArray: _ember.default.A(), defaultColumnArray: _ember.default.A() };
            }

            if (this.get('isClassicView')) {
                customColumnIds = customWatchLists[id].classicColumnArray;

                if (!customColumnIds || customColumnIds.length === 0) {
                    customColumnIds = customWatchLists[id].classicColumnArray = _priceWidgetConfig.default.watchList.customClassicColumnIds;
                }

                columns = _priceWidgetConfig.default.watchList.classicColumnMapping;
            } else {
                customColumnIds = customWatchLists[id].defaultColumnArray;

                if (!customColumnIds || customColumnIds.length === 0) {
                    customColumnIds = customWatchLists[id].defaultColumnArray = _priceWidgetConfig.default.watchList.customDefaultColumnIds;
                }

                columns = _priceWidgetConfig.default.watchList.defaultColumnMapping;
            }

            this.set('columnDeclarations', this.getColumnDefinitionsByMap(columns, customColumnIds));

            this.setDefaultColumnDeclarations();
            this.setLangLayoutSettings(_sharedService.default.userSettings.currentLanguage);
        },

        popUpWidget: function popUpWidget(id) {
            var sym = this.get('clickedRowSymbol');
            var exg = this.get('clickedRowExchange');
            var inst = this.get('clickedRowInstrument');

            // Close menu
            var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');
            modal.send('closeModalPopup');

            if (id !== 5 && id !== 6) {
                _sharedService.default.getService('priceUI').showPopupWidget({ container: this.container, controllerString: 'view:symbol-popup-view' }, { tabId: id, sym: sym, exg: exg, inst: inst });
            } else if (_appConfig.default.customisation.isTradingEnabled) {
                // Order ticket
                // Assumed as only Buy and Sell supported
                var side = id === 5 ? '1' : '2';
                var controllerString, routeString, viewName;
                controllerString = 'controller:trade/widgets/order-ticket/order-ticket-portrait';
                routeString = 'trade/widgets/order-ticket/order-ticket-portrait';
                viewName = 'view:widget-popup-view';

                var sharedUIService = _sharedService.default.getService('sharedUI');
                sharedUIService.showPopupWidget({ container: this.container, controllerString: controllerString, routeString: routeString, viewName: viewName }, { tabId: side, sym: sym, exg: exg, inst: inst });
            }
        },

        deleteSymbol: function deleteSymbol() {
            var symbol = this.get('clickedRowSymbol');
            var exchange = this.get('clickedRowExchange');

            this.priceService.watchListDS.deleteSymbol({ sym: symbol, exg: exchange }, this.get('currentCustomWLId'));
        },

        toggleFullScreen: function () {
            var that = this;

            this._super('watchListContainer-' + this.get('wkey'), this.get('wkey'));
            this.onResizeWidget();

            _ember.default.run.later(function () {
                // Horizontal scroll position of H.scroll bar calculated in javascript (antiscroll.js), so no css.
                var innerScroll = _ember.default.$('.antiscroll-inner');

                if (that.get('isHorizontalScrollAvailable') && _sharedService.default.userSettings.currentLanguage === 'AR') {
                    innerScroll.scrollLeft(_priceWidgetConfig.default.watchList.tableParams.MaxTableWidth);
                } else {
                    innerScroll.scrollLeft(0);
                }

                innerScroll.scrollTop(10); // [TODO] Arosha fix black screen when scrolling  issue of maximize V in a alternative way
                innerScroll.scrollTop(0);
            }, 200);
        }.observes('isFullScreenWL'),

        setActiveAssetType: function setActiveAssetType(tab) {
            var assetTypes = this.get('defaultAssetTypes');

            if (tab) {
                if (assetTypes && assetTypes.length > 0) {
                    this.set('assetTypNewActive', assetTypes[0]);
                }
            } else {
                this.set('assetTypNewActive', undefined);
            }
        },

        loadMainContextItem: function loadMainContextItem() {
            this.set('addToWatchlistMenu', [{ id: 9, path: 'components/add-to-watchlist-item', name: 'Add to Watchlist', isExtended: 'true' }]);

            var callbackFunc = this.deleteSymbol;
            this.set('deleteSymbolMenu', [{ view: { key: 'delete', name: this.get('app').lang.labels.removeSym, iconClass: 'icon-remove', shortcut: 'Alt + D' }, config: { callbackFunc: callbackFunc }, args: { tabId: 7 } }]);
        },

        _setWatchListColumnsIds: function _setWatchListColumnsIds(changedColumnIds) {
            var marketColumnIds = this.get('marketWatchListColumnIds');
            var marketSavedColumnIds = this.get('watchlistSavedColumnIds');
            var customColumnIds = this.get('customWatchListColumnArray');
            var isClassicMode = this.get('isClassicView');
            var customWLId = this.get('currentCustomWLId');
            var assetTypeId = this.get('currentAssetType');

            if (customWLId || customWLId === 0) {
                var columnArray = isClassicMode ? 'classicColumnArray' : 'defaultColumnArray';

                customColumnIds[customWLId][columnArray] = changedColumnIds;

                this.saveWidget({ customWatchListColumnArray: customColumnIds }, true); // Send second parameter as true for save globally
                this.setCustomColumns(customWLId);
            } else if (assetTypeId || assetTypeId === 0) {
                var columnAssetIds = isClassicMode ? 'classicAssetIds' : 'defaultAssetIds';

                if (!marketSavedColumnIds[columnAssetIds]) {
                    marketSavedColumnIds[columnAssetIds] = {};
                }

                marketColumnIds[columnAssetIds][assetTypeId] = changedColumnIds;
                marketSavedColumnIds[columnAssetIds][assetTypeId] = changedColumnIds;

                this.saveWidget({ marketWatchListColumnIds: marketSavedColumnIds }, true); // Send second parameter as true for save globally
                this.setAssetTypeColumns(assetTypeId);
            } else {
                var columnIds = isClassicMode ? 'classicIds' : 'defaultIds';

                marketColumnIds[columnIds] = changedColumnIds;
                marketSavedColumnIds[columnIds] = changedColumnIds;

                this.saveWidget({ marketWatchListColumnIds: marketSavedColumnIds }, true); // Send second parameter as true for save globally
                this.setDefaultColumns();
            }
        },

        changeTableColumns: function changeTableColumns() {
            var marketColumnIds = this.get('marketWatchListColumnIds');

            // Check menu is a default column or not
            if (marketColumnIds.classicIds.indexOf('menu') === -1) {
                this.set('nonRemovableColumnIds', ['sym']);
            }

            var changedColumnIds = this.getChangedColumnIds();

            this._setWatchListColumnsIds(changedColumnIds);
            this.closePopup();
            this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['newColumnsAfterChange:', changedColumnIds.join('')].join(''));
        },

        reOrderTableColumns: function reOrderTableColumns(columns) {
            var classicColumnMap = _priceWidgetConfig.default.watchList.classicColumnMapping;
            var defaultColumnMap = _priceWidgetConfig.default.watchList.defaultColumnMapping;
            var isClassicMode = this.get('isClassicView');

            var reOrderedColumnIds = isClassicMode ? this.getReOrderedColoumnIds(columns, classicColumnMap) : this.getReOrderedColoumnIds(columns, defaultColumnMap);
            this._setWatchListColumnsIds(reOrderedColumnIds);
        },

        _bindKeyboardShortcuts: function _bindKeyboardShortcuts() {
            var that = this;
            var wkey = this.get('wkey');

            var detailsQuoteConfig = {
                service: 'priceUI',
                controllerString: 'view:symbol-popup-view'
            };

            var orderTicketConfig = {
                service: 'sharedUI',
                controllerString: 'controller:trade/widgets/order-ticket/order-ticket-portrait',
                routeString: 'trade/widgets/order-ticket/order-ticket-portrait',
                viewName: 'view:widget-popup-view'
            };

            Mousetrap.bind('delete', function () {
                // Delete symbol on custom watch list
                if (that.get('isCustomWLMode')) {
                    that.deleteSymbol();
                    return false;
                }
            }, wkey);

            Mousetrap.bind('enter', function () {
                var view = _ember.default.View.views[that.get('viewId')];
                var rowData;

                if (view) {
                    var dataObj = view.get('row.content.dataObj');

                    if (dataObj) {
                        rowData = dataObj.getProperties('exg', 'sym', 'inst');

                        if (rowData) {
                            that.set('clickedRowSymbol', rowData.sym);
                            that.set('clickedRowExchange', rowData.exg);
                            that.set('clickedRowInstrument', rowData.inst);
                        }
                    }
                }

                that.popUpWidget(0);
            }, wkey);

            Mousetrap.bind('arrowdown', function () {
                that._navigateUpDown(that.navigation.down);
            }, wkey);

            Mousetrap.bind('arrowup', function () {
                that._navigateUpDown(that.navigation.up);
            }, wkey);

            Mousetrap.bind('alt+d', function () {
                // Show Detail Quote
                that._showPopupWidget(0, 'alt+d', detailsQuoteConfig);

                return false;
            }, wkey);

            Mousetrap.bind('alt+t', function () {
                // Show Time and Sales
                that._showPopupWidget(1, 'alt+t', detailsQuoteConfig);

                return false;
            }, wkey);

            Mousetrap.bind('alt+p', function () {
                // Show Depth by Price
                detailsQuoteConfig.windowTypes = [_priceConstants.default.WindowType.MarketDepthByPrice, _priceConstants.default.WindowType.MarketDepthByPriceAdvanced];
                detailsQuoteConfig.isAvailableWindowType = true;

                that._showPopupWidget(2, 'alt+p', detailsQuoteConfig);
                return false;
            }, wkey);

            Mousetrap.bind('alt+o', function () {
                // Show Depth by Order
                detailsQuoteConfig.windowTypes = [_priceConstants.default.WindowType.MarketDepthByOrder, _priceConstants.default.WindowType.MarketDepthByOrderAdvanced];
                detailsQuoteConfig.isAvailableWindowType = true;

                that._showPopupWidget(3, 'alt+o', detailsQuoteConfig);
                return false;
            }, wkey);

            Mousetrap.bind('alt+c', function () {
                // Show Chart
                that._showPopupWidget(4, 'alt+c', detailsQuoteConfig);

                return false;
            }, wkey);

            Mousetrap.bind('alt+a', function () {
                // Show Alerts
                that._showPopupWidget(5, 'alt+a', detailsQuoteConfig);

                return false;
            }, wkey);

            if (_appConfig.default.customisation.isTradingEnabled) {
                Mousetrap.bind('alt+b', function () {
                    // Show Buy Order ticket
                    that._showPopupWidget('1', 'alt+b', orderTicketConfig);

                    return false;
                }, wkey);

                Mousetrap.bind('alt+s', function () {
                    // Show Buy Order ticket
                    that._showPopupWidget('2', 'alt+s', orderTicketConfig);

                    return false;
                }, wkey);
            }
        },

        _showPopupWidget: function _showPopupWidget(tabId, shortcut, args) {
            var that = this;
            var view = _ember.default.View.views[that.get('viewId')];

            if (view) {
                var dataObj = view.get('row.content.dataObj');

                if (dataObj) {
                    var rowData = dataObj.getProperties('exg', 'sym', 'inst');

                    if (rowData) {
                        if (!args.isAvailableWindowType || that.priceService.userDS.isWindowTypeAvailable(args.windowTypes, rowData.exg)) {
                            _sharedService.default.getService(args.service).showPopupWidget({ container: that.container, controllerString: args.controllerString, routeString: args.routeString, viewName: args.viewName }, { tabId: tabId, sym: rowData.sym, exg: rowData.exg, inst: rowData.inst });
                        }

                        that.utils.analyticsService.trackEvent(that.get('gaKey'), 'keyboard-shortcut', ['shortcut:', shortcut, ',', 'popup:', tabId, ',', 'sym:', that.get('selectedSymbol.sym'), '~', that.get('selectedSymbol.exg')].join(''));
                    }
                }
            }
        },

        _setAssetTypes: function _setAssetTypes() {
            var assetTypes = _sharedService.default.getService('price').stockDS.getAssetTypeCollectionByExchange(this.get('exg') ? this.get('exg') : this.get('defaultExchange.exg'));

            if (assetTypes && (assetTypes.length === 0 || assetTypes.length > 0 && assetTypes[0].inst !== undefined)) {
                assetTypes.insertAt(0, { inst: undefined, desc: 'all' });
            }

            this.set('defaultAssetTypes', assetTypes);
            this._loadAssetTypes();
        },

        _loadAssetTypes: function () {
            var that = this;
            var assetTypes = this.get('defaultAssetTypes');

            _ember.default.$.each(assetTypes, function (key, market) {
                _ember.default.set(market, 'displayDesc', that.get('app').lang.labels[market.desc] ? that.get('app').lang.labels[market.desc] : that.get('app').lang.labels.unknown);

                // Set the default tab highlighted
                if (market.inst === undefined) {
                    that.set('assetTypNewActive', market);
                }
            });
        }.observes('defaultAssetTypes.@each'),

        _filterStocks: function _filterStocks() {
            var textFilter = this.utils.validators.isAvailable(this.get('textFilter')) ? this.get('textFilter') : false; // If any filter is false, that means that filter is not applied
            var assetFilter = this.get('assetFilter') ? this.get('assetFilter').inst : false;
            var todayFilter = this.get('todayFilter');
            var hideSuspendedFilter = this.get('hideSuspendedFilter');
            var sectorFilter = this.utils.validators.isAvailable(this.get('sectorFilter')) ? this.get('sectorFilter').sec : false;

            var symbolTypeGroup = _appConfig.default.customisation.isGroupByAssetType ? this.utils.AssetTypes.IndexAssetType : this.utils.AssetTypes.Indices;
            var dataCollection = assetFilter === symbolTypeGroup ? this.priceService.stockDS.getIndexCollectionByExchange(this.get('exchange.exg')) : this.get('masterContent');

            if (!this.get('isCustomWLMode') && (textFilter || assetFilter || todayFilter || hideSuspendedFilter || sectorFilter || assetFilter === 0)) {
                var filteredStocks = dataCollection.filter(function (that) {
                    //eslint-disable-line
                    return function (stock) {
                        return that.checkFilterMatch(stock, textFilter, assetFilter, todayFilter, sectorFilter, hideSuspendedFilter);
                    };
                }(this));

                this.set('content', filteredStocks); // Need to capture filter removing event to avoid 'set' without filters
                this.trackFiltersGA();
            } else {
                this.set('content', this.get('masterContent'));
            }
        },

        _generateFullContextMenu: function _generateFullContextMenu() {
            this.menuComponent.customWatchListArray = this.customWatchListArray;

            if (this.menuComponent.fullContextMenu.length === 1) {
                if (this.get('isCustomWLMode')) {
                    if (_appConfig.default.customisation.isTradingEnabled) {
                        this.menuComponent.fullContextMenu.insertAt(0, this.menuComponent.tradeContextMenu);
                        this.menuComponent.fullContextMenu.pushObject(this.deleteSymbolMenu);
                    } else {
                        this.menuComponent.fullContextMenu.pushObject(this.deleteSymbolMenu);
                    }
                } else {
                    if (_appConfig.default.customisation.isTradingEnabled) {
                        this.menuComponent.fullContextMenu.insertAt(0, this.menuComponent.tradeContextMenu);
                        this.menuComponent.fullContextMenu.insertAt(1, this.addToWatchlistMenu);
                        this.menuComponent.fullContextMenu.insertAt(3, this.priceContextMenu);
                    } else {
                        this.menuComponent.fullContextMenu.insertAt(0, this.addToWatchlistMenu);
                        this.menuComponent.fullContextMenu.insertAt(2, this.priceContextMenu);
                    }
                }
            }
        },

        _navigateUpDown: function _navigateUpDown(navDirection) {
            var mainDiv, childTop, currentTop, beforeLastDiv, lastRowTop, previousLastRow, lastRow, noOfRows;

            var currentIndex = 0;
            var isSelected = false;
            var minNextTopIndex = 0;
            var innerScroll = this.getAntiScroller();
            var rowHeight = this.get('rowHeight');
            var tableIdDiv = _ember.default.$('#table-' + this.get('wkey'));

            if (tableIdDiv.length !== 0) {
                mainDiv = tableIdDiv.children().closest('div').get('1').children[0].children[0].children[0];
            }

            var rightDivSet = mainDiv.children[1];
            var leftDivSet = mainDiv.children[0];
            var tableHeight = mainDiv.clientHeight;
            var lastDivTop = navDirection * tableHeight;

            // Get current selected row if any
            for (var i = 0; i < rightDivSet.childElementCount; i++) {
                childTop = parseInt(rightDivSet.children[i].style.top, 10);

                if (navDirection === this.navigation.down) {
                    if (childTop > lastDivTop) {
                        lastDivTop = childTop;
                    }
                } else {
                    if (childTop < lastDivTop) {
                        lastDivTop = childTop;
                    }
                }

                if (rightDivSet.children[i].classList.contains('ember-table-hover-new')) {
                    currentTop = childTop;
                    currentIndex = i;
                    isSelected = true;
                }
            }

            // Select first row if none of rows are selected
            if (!isSelected) {
                this._setFirstElement(rightDivSet);
                this._setFirstElement(leftDivSet);
                this.set('viewId', rightDivSet.children[0].id);
                return false;
            }

            if (navDirection === this.navigation.down) {
                lastRow = tableHeight - 2 * rowHeight; // Scroll down when it reaches last fully rendered row
                lastRowTop = tableHeight - 2 * rowHeight; // Set top of scrolling point
            } else {
                noOfRows = rightDivSet.childElementCount - 2; // Scroll up when it reaches first fully rendered row
                lastRowTop = tableHeight - noOfRows * rowHeight; // Set top of scrolling point
            }

            // If it reaches the bottom,it scrolls to the top of the watch-list
            if (navDirection === this.navigation.down && currentTop === lastRow) {
                innerScroll.scrollTop = 0;
                return false;
            }

            if (navDirection === this.navigation.up && currentTop === 0) {
                innerScroll.scrollTop = lastRowTop;
                return false;
            }

            // Remove selected css class if any
            if (isSelected) {
                rightDivSet.children[currentIndex].classList.remove('ember-table-hover-new');
                leftDivSet.children[currentIndex].classList.remove('ember-table-hover-new');
                minNextTopIndex = currentIndex - 1;
            }

            var minNextTop = navDirection === this.navigation.up ? lastDivTop : tableHeight;

            // Search for the row element which has minimum scroll Top after current scrollTop
            for (var j = 0; j < rightDivSet.childElementCount; j++) {
                childTop = parseInt(rightDivSet.children[j].style.top, 10);

                if (navDirection === this.navigation.down) {
                    if (childTop > currentTop && childTop < minNextTop) {
                        minNextTop = childTop;
                        minNextTopIndex = j;
                    }
                } else {
                    if (childTop < currentTop && childTop > minNextTop) {
                        minNextTop = childTop;
                        minNextTopIndex = j;
                    }
                }
            }

            // Apply selected css class to next element
            this._setNextElement(rightDivSet.children[minNextTopIndex]);
            this._setNextElement(leftDivSet.children[minNextTopIndex]);

            // Update viewId of currently selected row
            if (leftDivSet.children[minNextTopIndex]) {
                this.set('viewId', leftDivSet.children[minNextTopIndex].id);
            }

            // Get previous row of last row in current list
            if (navDirection === this.navigation.down) {
                beforeLastDiv = lastDivTop - 2 * rowHeight; // Get last fully rendered row
                previousLastRow = lastRowTop - 2 * rowHeight; // Get top value of last fully rendered row
            } else {
                beforeLastDiv = lastDivTop + rowHeight;
            }

            // Check whether selected item has reached to before last row and previous row of bottom of watchlist
            if (navDirection === this.navigation.down && currentTop === beforeLastDiv && currentTop !== previousLastRow) {
                innerScroll.scrollTop = currentTop;
                return false;
            }

            if (navDirection === this.navigation.up && currentTop === beforeLastDiv) {
                innerScroll.scrollTop = currentTop - noOfRows * rowHeight;
                return false;
            }

            return false;
        },

        _setFirstElement: function _setFirstElement(divElement) {
            var element = divElement.children[0];
            element.className += ' ember-table-hover-new';
        },

        _setNextElement: function _setNextElement(divElement) {
            if (divElement) {
                divElement.className += ' ember-table-hover-new';
            }
        },

        _setDefaultExchange: function _setDefaultExchange() {
            // Need to reset to default exchange when restoring from cache
            var defExg = _sharedService.default.getService('price').exchangeDS.getExchange(_sharedService.default.userSettings.price.userDefaultExg);

            this.set('defaultExchange', defExg);
            this.set('exchange', defExg);
            this.set('isDefaultExchangeSelected', true);
        },

        _setSectorArray: function _setSectorArray(exgCode) {
            var sectorList = this.priceService.sectorDS.getSectorCollectionByExchange(exgCode ? exgCode : this.get('defaultExchange.exg'));
            var allSectorDes = this.get('app').lang.labels.allSectors;

            if (sectorList && (sectorList.length === 0 || sectorList.length > 0 && sectorList[0].sec !== undefined)) {
                sectorList.insertAt(0, { sec: undefined, des: allSectorDes });
            } else if (sectorList.length > 0 && sectorList[0].sec === undefined) {
                sectorList[0].des = allSectorDes;
            }

            this.set('isSectorStaticLabelEnabled', true);
            this.set('sectorsArray', sectorList);
        },

        showSearchPopup: function showSearchPopup() {
            var modal = this.get('watchListSymbolSearch');
            modal.send('showModalPopup');
        },

        searchKeyDidChange: function () {
            var searchKey = this.get('addStockSearchKey');

            if (searchKey && searchKey.length) {
                _ember.default.run.debounce(this, this.showSearchPopup, 300);
            }
        }.observes('addStockSearchKey'),

        setSavedColumnConfig: function setSavedColumnConfig() {
            var defaultColumns = this.get('marketWatchListColumnIds');
            var savedColumns = this.get('watchlistSavedColumnIds');
            var assetColumns = {};

            if (savedColumns.defaultAssetIds) {
                assetColumns.defaultAssetIds = _ember.default.$.extend(defaultColumns.defaultAssetIds, savedColumns.defaultAssetIds);
            }

            if (savedColumns.classicAssetIds) {
                assetColumns.classicAssetIds = _ember.default.$.extend(defaultColumns.classicAssetIds, savedColumns.classicAssetIds);
            }

            var mergedDefaultClassicColumns = _ember.default.$.extend(defaultColumns, savedColumns);
            var mergedColumns = _ember.default.$.extend(mergedDefaultClassicColumns, assetColumns);

            this.set('marketWatchListColumnIds', mergedColumns);
        },

        actions: {
            onTabSelectionChanged: function onTabSelectionChanged(option) {
                if (option && option.inst === 7) {
                    // Only indices are taken from indexDS, not from StockDS
                    this.loadContent(this.priceService.stockDS.get('indexMapByExg'));
                } else if (option && option.isNoSubMarket) {
                    // Load full StockDS to none sub-market asserts
                    this.set('isNoSubMarket', true);
                    this.loadContent();
                } else if (this.get('currentAssetType') === 7 || this.get('isNoSubMarket')) {
                    // Load StockDS back from previous index load or Load StockDS according to sub-market
                    this.set('isNoSubMarket', false);
                    this.loadContent();
                }

                // Filters
                this.set('assetFilter', option);
                this.set('currentAssetType', option ? option.inst : undefined);
                this.set('sectorFilter', undefined); // When asset filter is on, sector filter is off

                // Set columns for new Asset Type
                this.setAssetTypeColumns(option ? option.inst : undefined);
                this.setDefaultColumnDeclarations();
                this.setDefaultSort();
            },

            setSector: function setSector(option) {
                this.set('isSectorStaticLabelEnabled', false);

                if (this.get('currentAssetType') === 7) {
                    // Load StockDS back from previous index load
                    this.loadContent();
                }

                // Removing the highlight css of the previous tab
                this.setActiveAssetType();

                // Filters
                this.set('sectorFilter', option);
                this.set('assetFilter', undefined); // When sector filter is on, asset filter is off
                this.set('currentAssetType', undefined);

                // Reset columns for sector
                this.setDefaultColumns();
                this.setDefaultColumnDeclarations();
            },

            setTableSettings: function setTableSettings() {
                this.toggleProperty('isClassicView');
                var newValue = this.get('isClassicView');
                this.saveWidget({ isClassicView: newValue });
                this.setDefaultSort();
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['isClassicView:', newValue].join(''));
            },

            addStocksFromCustomWL: function addStocksFromCustomWL(stock) {
                var modal = this.get('watchListSymbolSearch');
                var currentWatchlistId = this.get('currentCustomWLId');

                this.priceService.watchListDS.addStocksToCustomWL({ sym: stock.sym, exg: stock.exg }, currentWatchlistId);
                this.loadCustomWL(currentWatchlistId);
                this.set('addStockSearchKey', '');

                if (modal) {
                    modal.send('closeModalPopup');
                }

                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['addStocksToCustomWL:', stock ? stock.sym : ''].join(''));
            },

            deleteWatchList: function deleteWatchList() {
                this.deleteWatchList();
            },

            onCustomWlSelect: function onCustomWlSelect(id) {
                this.onCustomWlSelect(id);
            },

            showSearchPopup: function showSearchPopup() {
                this.showSearchPopup();
            },

            closeSearchPopup: function closeSearchPopup() {
                var modal = this.get('watchListSymbolSearch');
                modal.send('closeModalPopup');
            },

            popUpWidgetButtonMenu: function popUpWidgetButtonMenu() {
                var stock = { sym: this.get('clickedRowSymbol'), exg: this.get('clickedRowExchange'), inst: this.get('clickedRowInstrument') };

                this._initializeMenuComponents();
                this.menuComponent.initialize(this.get('wkey'), stock);

                var viewName = 'components/symbol-click-menu-popup';
                var modal = _sharedService.default.getService('sharedUI').getService('modalPopupId');

                this.menuComponent.showPopup(this.menuComponent, viewName, modal);
            },

            clickRow: function clickRow(selectedRow, event) {
                var rowData = selectedRow.getProperties('dataObj.exg', 'dataObj.sym', 'dataObj.inst');
                var selectedLink = this.get('selectedLink');

                rowData = {
                    exg: rowData['dataObj.exg'],
                    sym: rowData['dataObj.sym'],
                    inst: rowData['dataObj.inst']
                };

                if (event && event.button !== 2) {
                    var target = event.target ? event.target : event.srcElement;
                    var isTradeEnabled = _appConfig.default.customisation.isTradingEnabled;

                    if (target && isTradeEnabled && selectedLink) {
                        var priceUIService = _sharedService.default.getService('priceUI');
                        var cellId = target.attributes && target.attributes.getNamedItem('cell-id') && target.attributes.getNamedItem('cell-id').value ? target.attributes.getNamedItem('cell-id').value : '';

                        if (cellId === 'dataObj.bap' || cellId === 'dataObj.baq') {
                            // In case target is the top most element (closest() is not working for IE)
                            priceUIService.onBidOfferChanged(false, selectedLink);
                        } else if (cellId === 'dataObj.bbp' || cellId === 'dataObj.bbq') {
                            priceUIService.onBidOfferChanged(true, selectedLink);
                        } else {
                            if (_ember.default.$(target).parents('[cell-id="dataObj.bbp"]').length > 0 || _ember.default.$(target).parents('[cell-id="dataObj.bbq"]').length > 0) {
                                priceUIService.onBidOfferChanged(true, selectedLink);
                            } else if (_ember.default.$(target).parents('[cell-id="dataObj.bap"]').length > 0 || _ember.default.$(target).parents('[cell-id="dataObj.baq"]').length > 0) {
                                priceUIService.onBidOfferChanged(false, selectedLink);
                            }
                        }
                    }
                }

                this._super(rowData, event);

                if (rowData && rowData.sym) {
                    this.set('clickedRowSymbol', rowData.sym);
                    this.set('clickedRowExchange', rowData.exg);
                    var ex = this.priceService.exchangeDS.getExchange(rowData.exg);
                    this.set('clickedRowExchangeCode', ex.de);
                    this.set('clickedRowInstrument', rowData.inst);
                }
            },

            doubleClickRow: function doubleClickRow(selectedRow, event) {
                var rowSymbol, rowInst;
                var widgetId = 0; // Detailed Quote is shown by double click - Default
                var target = event.target ? event.target : event.srcElement;
                var rowData = selectedRow.getProperties('dataObj.exg', 'dataObj.sym', 'dataObj.inst');

                rowData = {
                    exg: rowData['dataObj.exg'],
                    sym: rowData['dataObj.sym'],
                    inst: rowData['dataObj.inst']
                };

                if (rowData) {
                    rowSymbol = rowData.sym;
                    rowInst = rowData.inst;
                    this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.rowDoubleClick, ['sym:', rowSymbol, '~', 'inst:', rowInst].join(''));
                }

                if (rowInst === this.utils.AssetTypes.Equity || rowInst === this.utils.AssetTypes.Etf) {
                    if (target) {
                        var isTradeEnabled = _appConfig.default.customisation.isTradingEnabled;
                        var cellId = target.attributes && target.attributes.getNamedItem('cell-id') && target.attributes.getNamedItem('cell-id').value ? target.attributes.getNamedItem('cell-id').value : '';

                        if (cellId) {
                            // In case target is the top most element (closest() is not working for IE)
                            switch (cellId) {
                                case 'dataObj.ltp':
                                    widgetId = 1;
                                    break;

                                case 'dataObj.bap':
                                case 'dataObj.baq':
                                    widgetId = isTradeEnabled ? 5 : 2;
                                    break;

                                case 'dataObj.bbp':
                                case 'dataObj.bbq':
                                    widgetId = isTradeEnabled ? 6 : 2;
                                    break;

                                default:
                                    widgetId = 0;
                                    break;
                            }
                        } else {
                            if (_ember.default.$(target).parents('[cell-id="dataObj.bbp"]').length > 0 || _ember.default.$(target).parents('[cell-id="dataObj.bbq"]').length > 0) {
                                widgetId = isTradeEnabled ? 6 : 2;
                            } else if (_ember.default.$(target).parents('[cell-id="dataObj.bap"]').length > 0 || _ember.default.$(target).parents('[cell-id="dataObj.baq"]').length > 0) {
                                widgetId = isTradeEnabled ? 5 : 2;
                            } else if (_ember.default.$(target).parents('[cell-id="dataObj.ltp"]').length > 0) {
                                widgetId = 1;
                            }
                        }
                    }
                }

                this.popUpWidget(widgetId);
            },

            fullScreenToggle: function fullScreenToggle() {
                this.toggleProperty('isFullScreenWL');
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['isFullScreenWL:', this.get('isFullScreenWL')].join(''));
            },

            sort: function sort(column) {
                if (!column.get('isSortSupported')) {
                    return;
                }

                if (this.get('sortColumn') !== column) {
                    this.get('columns').setEach('isSorted', false);
                    column.set('isSorted', true);
                    this.set('sortColumn', column);
                    this.set('sortProperties', [column.get('sortKey')]);
                    this.set('isSortApplied', true);
                } else if (this.get('sortColumn') === column) {
                    // Handle disabling sorts
                    if (this.get('sortAscending') === true) {
                        this.set('sortColumn', undefined);
                        this.set('sortAscending', false);
                        column.set('isSorted', false);
                        this.set('isSortApplied', false);
                        this.set('sortProperties', []);
                    } else {
                        this.set('sortProperties', [column.get('sortKey')]);
                        this.toggleProperty('sortAscending');
                    }
                }

                this.saveWidget({ sortAsc: this.get('sortAscending'), sortCols: this.get('sortProperties') });
                this.utils.analyticsService.trackEvent(this.get('gaKey'), this.utils.Constants.GAActions.select, ['sortedColumn:', this.get('sortProperties').join('')].join(''));
            },

            setCurrentCustomWLName: function setCurrentCustomWLName() {
                var customWatchLists = this.get('customWatchListArray');
                var currentCustomWLId = this.get('currentCustomWLId');
                var watchList = customWatchLists[currentCustomWLId];

                this.set('currentCustomWLName', watchList.name);
            }
        }
    });


    // Watchlist specific helpers registration
    _ember.default.Handlebars.helper('custom-watchlist-dialog', _customWatchlistDialog.default);
    _ember.default.Handlebars.helper('column-context-menu', _columnContextMenu.default);
    _ember.default.Handlebars.helper('more-markets-dropdown', _moreMarketsDropdown.default);
    _ember.default.Handlebars.helper('sub-markets-dropdown', _subMarketsDropdown.default);
});
define('universal-app/controllers/top-panel-container-controller', ['exports', './widget-container-controller'], function (exports, _widgetContainerController) {
    'use strict';

    exports.default = _widgetContainerController.default.extend({
        // Subscription key
        containerKey: 'topPanel',
        outletName: 'priceTopPanel',

        getLastActiveMenu: function getLastActiveMenu() {
            return undefined;
        },

        getLastActiveTab: function getLastActiveTab() {
            return undefined;
        } /* ,
          controllers: {},
            onThemeChanged: function (theme) {
          this.changeControllerTheme(this.controllers, theme);
          },
            onLanguageChanged: function (language) {
          this.changeControllerLanguage(this.controllers, language);
          },
            onVisibilityChanged: function (isHidden) {
          this.changeVisibility(this.controllers, isHidden);
          },
            saveLastMenuTab: function () {
          return null;
          }*/
    });
});
define('universal-app/models/chart/business-entities/ohlc-series', ['exports', 'ember', './ohlc', '../../../utils/utils'], function (exports, _ember, _ohlc, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        sym: '', // Symbol
        exg: '', // Exchange
        min: Number.MAX_VALUE, // Min val of the series
        arrOHLCObservers: [], // Array of OHLC data observers
        ohlcDataPoints: null, // OHLC data points

        max: 0, // Max val of the series
        minVol: Number.MAX_VALUE, // Min volume of the series
        chartDataLevel: -1, // Chart data level

        maxVol: 0, // Max volume of the series

        stockRef: null, // Previous close

        init: function init() {
            this._super();
            this.set('arrOHLCObservers', []);
            this.set('ohlcDataPoints', []);
        },

        setData: function setData(ohlcMessage, isRealTime) {
            try {
                var ohlcArray = this.get('ohlcDataPoints');
                var count = ohlcArray.length;
                var currMin = this.get('min');
                var currMax = this.get('max');
                var currMinVol = this.get('minVol');
                var currMaxVol = this.get('maxVol');

                if (count === 0 || ohlcArray[count - 1].DT.getTime() < ohlcMessage.dt.getTime()) {
                    // Add elements to the end of array
                    var ohlcPoint = _ohlc.default.getOHLCObj(ohlcMessage);
                    ohlcArray[count] = ohlcPoint;

                    if (ohlcMessage.close < currMin) {
                        this.set('min', ohlcMessage.close);
                    }

                    if (ohlcMessage.close > currMax) {
                        this.set('max', ohlcMessage.close);
                    }

                    if (ohlcMessage.volume < currMinVol) {
                        this.set('minVol', ohlcMessage.volume);
                    }

                    if (ohlcMessage.volume > currMaxVol) {
                        this.set('maxVol', ohlcMessage.volume);
                    }

                    // Notify the observers
                    if (isRealTime) {
                        var arr = this.get('arrOHLCObservers');
                        for (var a = 0; a < arr.length; a++) {
                            arr[a].onDataFromRealTime(ohlcPoint, this.get('exg'), this.get('sym'));
                        }
                    }
                }

                /** else if (ohlcArray[0].TimeStamp > ohlcMessage.TimeStamp) {
                // Add elements to the begin of the array
                ohlcArray.unshift(ohlcPoint);
                } else {
                // If something comes in-between, can't help, go for the costly search and insert
                alert('comes in the middle');
                }*/
            } catch (ex) {
                _utils.default.logger.logError('Ohlc series set data is giving error ' + ex);
            }
        },

        indexOfElement: function indexOfElement(key) {
            var ohlcArray = this.get('ohlcDataPoints');
            var lo = 0,
                hi = ohlcArray.length - 1,
                mid,
                element;

            while (lo <= hi) {
                mid = lo + hi >> 1;
                element = ohlcArray[mid];
                if (element.DT.getTime() < key) {
                    lo = mid + 1;
                } else if (element.DT.getTime() > key) {
                    hi = mid - 1;
                } else {
                    return mid;
                }
            }

            // If not found, return lo and the period will be calculated from that element
            return lo;
        },

        queryPointsForRange: function queryPointsForRange(fromTime, toTime) {
            if (fromTime && fromTime === -1) {
                return [];
            }

            var startIndex = this.indexOfElement(fromTime);
            var ohlcArray = this.get('ohlcDataPoints');

            if (toTime) {
                var endIndex = this.indexOfElement(toTime);
                return ohlcArray.slice(startIndex, endIndex);
            }

            return ohlcArray.slice(startIndex);
        },

        registerForRealtimeData: function registerForRealtimeData(cdp) {
            if (cdp && _ember.default.$.isFunction(cdp.onDataFromRealTime)) {
                var arrObservers = this.get('arrOHLCObservers');
                arrObservers[arrObservers.length] = cdp;
            }
        }
    });
});
define('universal-app/models/chart/business-entities/ohlc', ['exports'], function (exports) {
    'use strict';

    exports.default = function () {
        // CharIQ expects Pascal case references as its data format
        var getOHLCObj = function getOHLCObj(args) {
            var ohlcObj = null;
            if (args) {
                ohlcObj = {
                    'DT': args.dt, // Javascript Date
                    'Open': args.open,
                    'High': args.high,
                    'Low': args.low,
                    'Close': args.close,
                    'Volume': args.volume,
                    'Turnover': args.turnover,
                    'PER': args.per,
                    'PBR': args.pbr
                };
            }
            return ohlcObj;
        };
        return {
            getOHLCObj: getOHLCObj
        };
    }();
});
define('universal-app/models/chart/business-entities/tech-study-record', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        key: '',
        value: ''
    });
});
define('universal-app/models/chart/data-stores/ohlc-data-store', ['exports', 'ember', '../chart-constants', '../business-entities/ohlc-series', '../../../utils/utils', '../../../config/app-config'], function (exports, _ember, _chartConstants, _ohlcSeries, _utils, _appConfig) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        intradayStore: undefined,
        historyStore: undefined,
        chartDataSubscription: undefined,

        initialize: function initialize() {
            this.set('intradayStore', {});
            this.set('historyStore', {});
            this.set('chartDataSubscription', {});
        },

        getOHLCSeries: function getOHLCSeries(exchange, symbol, chartCategory) {
            var ohlcStore = _chartConstants.default.ChartCategory.Intraday.ID === chartCategory.ID ? this.get('intradayStore') : this.get('historyStore');
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);

            var ohlcSeriesObj = ohlcStore[key];
            if (!ohlcSeriesObj) {
                ohlcSeriesObj = _ohlcSeries.default.create({
                    sym: symbol,
                    exg: exchange,
                    stockRef: this.priceService.stockDS.getStock(exchange, symbol)
                });

                ohlcStore[key] = ohlcSeriesObj;
            }

            return ohlcSeriesObj;
        },

        removeOHLCSeries: function removeOHLCSeries(exchange, symbol, chartCategory) {
            _utils.default.logger.logInfo('Removing ohlc series of ' + symbol);

            // Todo [Ravindu] check request count before removing data stores
            var ohlcStore = _chartConstants.default.ChartCategory.Intraday.ID === chartCategory.ID ? this.get('intradayStore') : this.get('historyStore');

            if (ohlcStore) {
                var key = _utils.default.keyGenerator.getKey(exchange, symbol);
                if (ohlcStore[key]) {
                    ohlcStore[key] = null;
                }
            }
        },

        sendIntraDayOHLCDataRequest: function sendIntraDayOHLCDataRequest(cdp, chartSymbolObj) {
            _utils.default.logger.logTrace('Sending intraday request is invoked at Ohlc Data Store');

            this.priceService.downloadIntradayOHLCData({
                exchange: chartSymbolObj.exg,
                symbol: chartSymbolObj.sym,
                chartDataLevel: cdp.chartDataLevel,
                begin: undefined,
                chartType: _appConfig.default.chartConfig.chartType,

                reqSuccessFn: function reqSuccessFn() {
                    cdp.onDataDownloadedFromMix(cdp, chartSymbolObj);
                },

                reqFailureFn: function reqFailureFn() {
                    if (cdp.onErrorFn && _ember.default.$.isFunction(cdp.onErrorFn)) {
                        cdp.onErrorFn(chartSymbolObj.exg, chartSymbolObj.sym);
                    }

                    _utils.default.logger.logDebug('Data Unavailable Intraday');
                }
            });
        },

        sendHistoryOHLCDataRequest: function sendHistoryOHLCDataRequest(cdp, chartSymbolObj, begin) {
            this.priceService.downloadHistoryOHLCData({
                exchange: chartSymbolObj.exg,
                symbol: chartSymbolObj.sym,
                begin: begin,
                chartType: _appConfig.default.chartConfig.chartType,

                reqSuccessFn: function reqSuccessFn() {
                    cdp.onDataDownloadedFromMix(cdp, chartSymbolObj);
                },

                reqFailureFn: function reqFailureFn() {
                    if (cdp.onErrorFn && _ember.default.$.isFunction(cdp.onErrorFn)) {
                        cdp.onErrorFn(chartSymbolObj.exg, chartSymbolObj.sym);
                    }

                    _utils.default.logger.logDebug('Data Unavailable For History');
                }
            });
        },

        subscribeChartDataReady: function subscribeChartDataReady(cdp, symObj, key, wKey) {
            var chartDataSubscription = this.get('chartDataSubscription');

            if (_utils.default.validators.isAvailable(key) && _utils.default.validators.isAvailable(wKey)) {
                chartDataSubscription[key] = chartDataSubscription[key] || {};
                chartDataSubscription[key][wKey] = { cdp: cdp, symObj: symObj };
            }
        },

        onChartDataReady: function onChartDataReady(exgSymKey) {
            var chartDataSubscription = this.get('chartDataSubscription');

            if (_utils.default.validators.isAvailable(exgSymKey) && chartDataSubscription[exgSymKey]) {
                _ember.default.$.each(chartDataSubscription[exgSymKey], function (key, subscriber) {
                    if (subscriber && subscriber.cdp && _ember.default.$.isFunction(subscriber.cdp.onDataDownloadedFromMix)) {
                        subscriber.cdp.onDataDownloadedFromMix(subscriber.cdp, subscriber.symObj);
                    }
                });
            }
        },

        unSubscribeChartDataReady: function unSubscribeChartDataReady(key, wKey) {
            var chartDataSubscription = this.get('chartDataSubscription');

            if (_utils.default.validators.isAvailable(key) && _utils.default.validators.isAvailable(wKey) && chartDataSubscription[key]) {
                chartDataSubscription[key][wKey] = undefined;
            }
        }
    });
});
define('universal-app/models/price/business-entities/alert', ['exports', 'ember', '../../../models/shared/shared-service', '../../../models/price/price-constants'], function (exports, _ember, _sharedService, _priceConstants) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        sym: '', // Symbol
        exg: '', // Exchange
        token: '', // Alert Token
        status: '', // Alert Status
        ts: '', // Time Stamp
        param: '', // Alert Parameter
        crit: '', // Alert Criteria
        val: '', // Alert Value
        tval: '', // Alert Trigger Value
        trv: '', // Alert Triggered Value
        tts: '', // Triggered Time Stamp
        exp: '', // Expiry time period
        flt: '', // Alert Filter
        dispProp1: '', // Alert Symbol Display Property
        deci: '', // Alert Symbol Decimal Places

        setSymbolInfo: function () {
            var stock = _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), this.get('sym'));
            this.set('dispProp1', stock.get('dispProp1'));
            this.set('deci', stock.get('deci'));
        }.observes('sym'),

        // Since param, crit, val are important for alert object, below assignments done in business entity
        setFilterComponents: function () {
            var filter = this.get('flt');
            var splitConstant = '#';

            if (filter) {
                var filterComponents = filter.split(splitConstant);

                if (filterComponents.length > 2) {
                    var paramSplitConstant = '$';
                    var parameter = filterComponents[0].split(paramSplitConstant)[1];

                    this.set('param', _priceConstants.default.AlertParamMap[parameter]);
                    this.set('crit', filterComponents[1]);
                    this.set('val', filterComponents[2]);
                }
            }
        }.observes('flt'),

        isEditEnabled: function () {
            return this.get('status') === _priceConstants.default.AlertStatus.Active; // Status from server comes as 'active'
        }.property('status'),

        setData: function setData(alertMessage) {
            var that = this;

            _ember.default.$.each(alertMessage, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/announcement', ['exports', 'ember', '../price-constants', '../../../utils/utils'], function (exports, _ember, _priceConstants, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        id: '', // Announcement id - Unique identifier
        exg: '', // Exchange or news provider
        sym: '', // Symbol
        ln: '', // Language
        hed: '', // Header
        bod: '', // Body
        ref: '', // Reference Code
        type: _priceConstants.default.ResponseType.Data.ResponseAnnouncement, // 11 - Announcement, 77 - News, ?? - Calendar Event
        isRead: false, // Read or not
        dt: '', // Date Time
        dSymExg: '', // Display Symbol (dSym) or Exchange (de)

        dHed: function () {
            return _utils.default.formatters.convertUnicodeToNativeString(this.get('hed'));
        }.property('hed'), // Display Header

        dBody: function () {
            return _utils.default.formatters.convertUnicodeToNativeString(this.get('bod'));
        }.property('bod'), // Display Body

        dDt: function () {
            var dateTime = this.get('dt');

            return _utils.default.formatters.formatToDateTimeMinute(dateTime);
        }.property('dt'), // Display date Time

        isAnnouncement: function () {
            return this.type === _priceConstants.default.ResponseType.Data.ResponseAnnouncement;
        }.property('type'),

        isNews: function () {
            return this.type === _priceConstants.default.ResponseType.Data.ResponseNews;
        }.property('type'),

        isBodyUpdated: function () {
            return _utils.default.validators.isAvailable(this.bod);
        }.property('bod'),

        isArabic: function () {
            return this.get('ln') === 'AR';
        }.property('ln'),

        dateObj: function () {
            var dateTime = this.get('dt');
            return _utils.default.formatters.convertStringToDate(dateTime);
        }.property('dt'),

        setData: function setData(announcementMessage) {
            var that = this;

            _ember.default.$.each(announcementMessage, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/company-management', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        name: '', // Name
        desig: '', // Designation
        date: '', // Date
        sortOrder: '', // Sort Order

        setData: function setData(companyManagmentData) {
            var that = this;

            _ember.default.$.each(companyManagmentData, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/company-owners', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        ownerName: '', // Owners Name
        sherPrs: '', // Share parentage
        ownerDesig: '', // Owner Designation

        setData: function setData(companyOwnersData) {
            var that = this;

            _ember.default.$.each(companyOwnersData, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/company-profile', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        // Basic Information
        logo: '', // Logo
        sym: '', // Symbol
        compName: '', // Company Name
        des: '', // Description
        indGrp: '', // Industry Group
        subInd: '', // Sub Industry
        isin: '', // ISIN Code
        estbOn: '', // Established On
        outShr: '', // Outstanding Share
        listedShr: '', // Listed Shares
        mktCap1: '', // Market Cap
        authCap: '', // Authorized Capital
        trdName: '', // Trade Name
        currency: '', // Currency
        country: '', // Country
        bbgid: '', // BBGID
        sector: '', // Sector
        auditor: '', // Auditor
        compID: '', // Company ID

        // Contact Information
        addr: '', // Address
        phn: '', // Tel
        fax: '', // Fax
        email: '', // Email
        web: '', // Website

        compManagement: null,
        compOwners: null,
        compSubsidiaries: null,

        init: function init() {
            this._super();
            this.set('compManagement', _ember.default.A());
            this.set('compOwners', _ember.default.A());
            this.set('compSubsidiaries', _ember.default.A());
        },

        setData: function setData(companyProfileData) {
            var that = this;

            _ember.default.$.each(companyProfileData, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/company-subsidiaries', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        subsiName: '', // Name
        subsiSherPrs: '', // Share parentage

        setData: function setData(companySubsidiariesData) {
            var that = this;

            _ember.default.$.each(companySubsidiariesData, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/day-light-saving', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        tzId: '',
        sDate: '',
        eDate: '',
        dls: '',

        setData: function setData(dlsObj) {
            var that = this;

            _ember.default.$.each(dlsObj, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/depth-record', ['exports', 'ember', '../price-constants'], function (exports, _ember, _priceConstants) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        type: '', // Depth side (bid = 0 or offer = 1)
        lvl: '', // Depth level
        prc: '', // Price
        qty: '', // Quantity
        splt: '', // Number of splits
        per: '', // Bar width percentage
        isHighestVol: false, // Is highest Volume

        isBid: function isBid() {
            return this.get('type') === _priceConstants.default.MarketDepthSide.Bid;
        },

        setData: function setData(depthRecord) {
            var that = this;

            _ember.default.$.each(depthRecord, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/depth', ['exports', 'ember', './depth-record', '../price-constants'], function (exports, _ember, _depthRecord, _priceConstants) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        sym: '', // Symbol
        exg: '', // Exchange
        dt: _priceConstants.default.MarketDepthType.DepthByPrice, // Depth Type (DepthByPrice: 1, DepthByOrder: 2)
        bidRecords: null, // Bid side records
        offerRecords: null, // Offer side records

        // Calculation related params
        minBidQty: Number.MAX_VALUE,
        maxBidQty: 0,
        minOfferQty: Number.MAX_VALUE,
        maxOfferQty: 0,

        init: function init() {
            this._super();
            this.set('bidRecords', _ember.default.A());
            this.set('offerRecords', _ember.default.A());
        },

        setData: function setData(depthMessage, depthType) {
            // TODO: [Amila] Review the depth logic for ISE as it needs an additional processing (i.e prices are coming as negative values)
            var that = this;
            var recordArray;
            var rec;
            var skipBid = false;
            var skipOffer = false;

            _ember.default.$.each(depthMessage, function (key, value) {
                // If both sides have qty 0 we are done with processing.
                if (skipBid && skipOffer) {
                    return false;
                }

                // Load the correct container first
                if (value.type === _priceConstants.default.MarketDepthSide.Bid) {
                    if (skipBid) {
                        return false;
                    }
                    recordArray = that.get('bidRecords');
                } else {
                    if (skipOffer) {
                        return false;
                    }
                    recordArray = that.get('offerRecords');
                }

                if (value.qty === 0) {
                    // Apply the depth reset logic
                    // Reset logic :    For both market depth types if the quantity
                    //                  received as 0, then all the records after that including
                    //                  the current record with 0 qty should be removed.
                    if (value.type === _priceConstants.default.MarketDepthSide.Bid) {
                        skipBid = true;
                    } else {
                        skipOffer = true;
                    }

                    var itemToBeRemoved = [];
                    recordArray.forEach(function (item, index) {
                        if (value.lvl <= index) {
                            itemToBeRemoved.push(item);
                        }
                    });

                    if (itemToBeRemoved.length > 0) {
                        recordArray.removeAt(value.lvl, itemToBeRemoved.length);
                    }
                } else {
                    // Check for the existence of the level, if not create a new one
                    rec = recordArray.objectAt(value.lvl);
                    if (!rec) {
                        rec = _depthRecord.default.create();
                        recordArray.pushObject(rec);
                    }

                    // Set the depth record values
                    rec.setData(value);

                    if (depthType === _priceConstants.default.MarketDepthType.DepthByOrder) {
                        // Fill the sequence manually
                        rec.set('splt', value.lvl + 1);
                    }
                }
            });

            // TODO: [Amila] Below 2 methods needs to be refactored. Calculating min and max values logic needs to be revised
            if (this.get('bidRecords').length > 0) {
                that.calculateBidBarValues();
            }

            if (this.get('offerRecords').length > 0) {
                that.calculateOfferBarValues();
            }
        },

        calculateBidBarValues: function calculateBidBarValues() {
            // Bid side calculations
            var that = this;
            var highestVolIndex = -1,
                tempVal;
            var arrRecords = that.get('bidRecords');

            that.set('minBidQty', Number.MAX_VALUE);
            that.set('maxBidQty', 0);

            arrRecords.forEach(function (item, index) {
                tempVal = parseInt(item.qty, 10);

                if (index === 0) {
                    item.set('isBestPrice', true);
                }

                if (tempVal < that.get('minBidQty')) {
                    that.set('minBidQty', tempVal);
                }

                if (tempVal > that.get('maxBidQty')) {
                    that.set('maxBidQty', tempVal);
                    highestVolIndex = index;
                }
            });

            // Now calculate the percentages
            var min = that.get('minBidQty');
            var max = that.get('maxBidQty');
            arrRecords.forEach(function (item) {
                var percentage = 20 + 100 * (parseInt(item.qty, 10) - min) / (max - min) * 0.80;
                item.set('per', 'width:' + percentage + '%');

                if (highestVolIndex > -1) {
                    if (item.get('qty') === max) {
                        item.set('isHighestVol', true);
                    } else {
                        item.set('isHighestVol', false);
                    }
                }
            });
        },

        calculateOfferBarValues: function calculateOfferBarValues() {
            // Offer side calculations
            var that = this;
            var highestVolIndex = -1,
                tempVal;
            var arrRecords = that.get('offerRecords');

            that.set('minOfferQty', Number.MAX_VALUE);
            that.set('maxOfferQty', 0);

            arrRecords.forEach(function (item, index) {
                tempVal = parseInt(item.qty, 10);

                if (index === 0) {
                    item.set('isBestPrice', true);
                }

                if (tempVal < that.get('minOfferQty')) {
                    that.set('minOfferQty', tempVal);
                }

                if (tempVal > that.get('maxOfferQty')) {
                    that.set('maxOfferQty', tempVal);
                    highestVolIndex = index;
                }
            });

            // Now calculate the percentages
            var min = that.get('minOfferQty');
            var max = that.get('maxOfferQty');
            arrRecords.forEach(function (item) {
                var percentage = 20 + 100 * (parseInt(item.qty, 10) - min) / (max - min) * 0.8;
                item.set('per', 'width:' + percentage + '%');

                if (highestVolIndex > -1) {
                    if (item.get('qty') === max) {
                        item.set('isHighestVol', true);
                    } else {
                        item.set('isHighestVol', false);
                    }
                }
            });
        }
    });
});
define('universal-app/models/price/business-entities/exchange', ['exports', 'ember', '../../../models/shared/language/language-data-store', '../../../models/shared/shared-service', '../../../utils/utils'], function (exports, _ember, _languageDataStore, _sharedService, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        app: undefined,

        exg: '', // Exchange
        des: '', // Description
        sDes: '', // Short Description
        dcf: '', // Decimal Correction Factor
        dep: '', // Decimal Places
        de: '', // Display exchange
        stat: '', // Market Status
        cur: '', // Currency
        delTime: '', // Market Data Delayed Time (in minutes)
        country: '', // Country Code
        tzo: '', // Time zone offset
        date: '', // Market Date
        time: '', // Market Time
        led: '', // Last Eod Date - Need to check the usage of this
        ups: '', // UPs
        dwns: '', // Downs
        nChg: '', // No Change
        symt: '', // Number of Symbols Traded
        vol: '', // Volume
        tovr: '', // TurnOver
        trades: '', // No Of Trades
        mktCap: '', // Market Capitalisation
        mboal: 0, // MboAdvancedLimit
        mbol: 0,
        mbpal: 0, // MbpAdvancedLimit
        mbpl: 0,
        mboae: false, // IsAdvancedMboEnabled
        mbpae: false, // IsAdvancedMbpEnabled
        virtual: false, // IsVirtual Exchange
        cio: '', // Cash In No of Orders
        civ: '', // Cash In Volume
        cit: '', // Cash In Turn Over
        coo: '', // Cash Out No of Orders
        cov: '', // Cash Out Volume
        cot: '', // Cash Out Turnover
        netCashPer: '', // Net Cash per
        cashInPer: '', // Cash in per
        mainIdx: '', // Main index
        newsProv: '', // News Provider
        openTime: '', // Market Open Time
        closeTime: '', // Market Close Time
        statStr: '', // Market Status String
        subMarketArray: undefined, // Sub Markets
        tick: 0, // Exchange Tick Size
        statStrLong: '',
        brokerMapping: {}, // Broker Mapping
        exgOtherDesc: '', // Exchange Other Description

        init: function init() {
            this._super();
            this.set('app', _languageDataStore.default.getLanguageObj());
        },

        adjustedMktTime: function () {
            var adjustedTime = _utils.default.formatters.getAdjustedDateTime(this.get('time'), this.get('tzo'));
            var displayTime = _utils.default.formatters.convertToDisplayTimeFormat(adjustedTime);

            return displayTime;
        }.property('time'),

        mktTime: function () {
            return this.get('date') + '' + this.get('time');
        }.property('date', 'time'),

        setStatStr: function () {
            this.set('statStr', this.app.lang.labels['mktStatus_' + this.get('stat')]); // Market Status String
        }.observes('stat', 'des'), // Description is changed with language

        setStatStrLong: function () {
            // Market Status String Long
            if (this.app.lang.labels['mktStatusLong_' + this.get('stat')]) {
                // return this.app.lang.labels['mktStatusLong_' + this.get('stat')];
                this.set('statStrLong', this.app.lang.labels['mktStatusLong_' + this.get('stat')]);
            } else {
                //  return this.get('statStr');
                this.set('statStrLong', this.app.lang.labels['mktStatus_' + this.get('stat')]);
            }
        }.observes('stat', 'des'),

        calculateCashPer: function () {
            var cashInTurnOver = this.get('cit');
            var cashOutTurnOver = this.get('cot');

            this.set('cashInPer', cashInTurnOver * 100 / (cashInTurnOver + cashOutTurnOver));
            this.set('netCashPer', (cashInTurnOver - cashOutTurnOver) * 100 / (cashInTurnOver + cashOutTurnOver));
        }.observes('cit', 'cot'),

        getBrokerDescription: function getBrokerDescription(brokerCode) {
            var brokerMapping = this.get('brokerMapping');
            var brokerDes = brokerMapping[brokerCode];

            return brokerDes ? brokerDes : _sharedService.default.userSettings.displayFormat.noValue;
        },

        setData: function setData(exchangeMessage) {
            var that = this;

            _ember.default.$.each(exchangeMessage, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/market', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        id: '', // Market id - Unique identifier
        exg: '', // Exchange
        sym: '', // Symbol
        dcf: '', // Correction Factor
        stat: '', // Market Status
        vol: '', // Volume
        tovr: '', // TurnOver
        cat: '', // Category
        sec: '', // Sector
        sou: '', // Source
        cid: '', // Company Id
        cnm: '', // Company Name
        symt: '', // Number of Symbols Traded
        trades: '', // No Of Trades
        ups: '', // UPs
        dwns: '', // Downs
        nChg: '', // No Change
        cio: '', // Cash In No of Orders
        civ: '', // Cash In Volume
        cit: '', // Cash In Turn Over
        coo: '', // Cash Out No of Orders
        cov: '', // Cash Out Volume
        cot: '', // Cash Out Turnover

        setData: function setData(marketMessage) {
            _ember.default.$.each(marketMessage, function (key, value) {
                this[key] = value;
            });
        }
    });
});
define('universal-app/models/price/business-entities/option-period', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        optPrd: undefined,
        optExg: undefined,
        trdExg: undefined,
        optWeek: undefined,

        setData: function setData(message) {
            var that = this;

            _ember.default.$.each(message, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/option-stock-entity', ['exports', '../../price/business-entities/stock'], function (exports, _stock) {
    'use strict';

    exports.default = _stock.default.extend({
        trdExg: undefined,
        optExg: undefined,
        baseSym: undefined,
        optPrd: undefined,
        strkPrc: undefined,
        nearMon: undefined,
        optWeek: undefined,

        // Please do not access any properties inside below fields to map to ember table via price-widget-config
        // If do so, cannot identify user clicked column name as it is a second level property of below objects
        cStock: {},
        pStock: {},

        // All below properties are already available in 'cStock' and 'pStock'
        // But there is an issue when accessing these fields when identifying user clicked column name due to second level properties
        // Therefore exposed all required properties as first level properties to overcome that issue
        cSym: function () {
            return this.get('cStock.sym');
        }.property('cStock.sym'),

        cDisSym: function () {
            return this.get('cStock.dSym');
        }.property('cStock.dSym'),

        cExg: function () {
            return this.get('cStock.exg');
        }.property('cStock.exg'),

        cInst: function () {
            return this.get('cStock.inst');
        }.property('cStock.inst'),

        cLtp: function () {
            return this.get('cStock.ltp');
        }.property('cStock.ltp'),

        cChg: function () {
            return this.get('cStock.chg');
        }.property('cStock.chg'),

        cBbp: function () {
            return this.get('cStock.bbp');
        }.property('cStock.bbp'),

        cBap: function () {
            return this.get('cStock.bap');
        }.property('cStock.bap'),

        cVol: function () {
            return this.get('cStock.vol');
        }.property('cStock.vol'),

        pSym: function () {
            return this.get('pStock.sym');
        }.property('pStock.sym'),

        pDisSym: function () {
            return this.get('pStock.dSym');
        }.property('pStock.dSym'),

        pExg: function () {
            return this.get('pStock.exg');
        }.property('pStock.exg'),

        pInst: function () {
            return this.get('pStock.inst');
        }.property('pStock.inst'),

        pLtp: function () {
            return this.get('pStock.ltp');
        }.property('pStock.ltp'),

        pChg: function () {
            return this.get('pStock.chg');
        }.property('pStock.chg'),

        pBbp: function () {
            return this.get('pStock.bbp');
        }.property('pStock.bbp'),

        pBap: function () {
            return this.get('pStock.bap');
        }.property('pStock.bap'),

        pVol: function () {
            return this.get('pStock.vol');
        }.property('pStock.vol')
    });
});
define('universal-app/models/price/business-entities/panel-field', ['exports', 'ember', '../../../utils/utils', '../../../models/shared/shared-service', '../../../models/shared/language/language-data-store'], function (exports, _ember, _utils, _sharedService, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        lanKey: '',
        valueObj: null,
        noOfDecimals: '',
        dataField: '',
        fieldObj: '',
        value: '',
        app: _languageDataStore.default.getLanguageObj(),

        onInit: function () {
            this.set('dataField', this.get('fieldObj').dataField);
            this.set('noValue', _sharedService.default.userSettings.displayFormat.noValue);

            this.generateCaption();
            this.generateStyle();
            this.generateContainerStyle();
            this.generateFormattedValue();
        }.on('init'),

        generateCaption: function generateCaption() {
            var that = this;

            _ember.default.defineProperty(this, 'caption', _ember.default.computed('app.lang', function () {
                return that.get('app').lang.labels[that.get('fieldObj').lanKey] ? that.get('app').lang.labels[that.get('fieldObj').lanKey] : that.get('fieldObj').lanKey;
            }));
        },

        generateContainerStyle: function generateContainerStyle() {
            var that = this;
            var field = this.get('dataField');

            _ember.default.defineProperty(this, 'containerStyle', _ember.default.computed('valueObj.' + field, function () {
                return that.get('fieldObj').containerStyle;
            }));
        },

        generateStyle: function generateStyle() {
            var that = this;
            var field = this.get('dataField');

            _ember.default.defineProperty(this, 'style', _ember.default.computed('valueObj.' + field, function () {
                var dataField = that.get('dataField');
                var value = that.get('valueObj').get(dataField);

                if (that.get('fieldObj').isCustomStyle) {
                    return [that.get('fieldObj').lanKeyAppend, that.get('valueObj').get(dataField)].join('_');
                } else if (that.get('fieldObj').isValueBaseCss) {
                    var css = 'fore-color';

                    if (value < 0) {
                        css = 'down-fore-color';
                    } else if (value > 0) {
                        css = 'up-fore-color';
                    }

                    return css;
                } else {
                    return that.get('fieldObj').style;
                }
            }));
        },

        generateFormattedValue: function generateFormattedValue() {
            var that = this;
            var field = this.get('dataField');

            _ember.default.defineProperty(this, 'formattedValue', _ember.default.computed('valueObj.' + field, function () {
                var dataField = that.get('dataField');
                var valueObj = that.get('valueObj');

                if (!_ember.default.$.isEmptyObject(valueObj)) {
                    var formattedValue = '';
                    var exg = valueObj.exg;
                    var value = valueObj.get(dataField);

                    if (that.get('fieldObj').lanKeyAppend) {
                        formattedValue = that.get('app').lang.labels[[that.get('fieldObj').lanKeyAppend, value].join('_')];
                    } else if (that.get('fieldObj').isAssetType) {
                        formattedValue = that.get('app').lang.labels[_utils.default.AssetTypes.InstrumentLangKeys[value]];
                    } else {
                        formattedValue = value;
                    }

                    if (_utils.default.validators.isAvailable(formattedValue) && formattedValue !== -1) {
                        switch (that.get('fieldObj.formatter')) {
                            case _utils.default.Constants.DataFormatter.Currency:
                                return _utils.default.formatters.formatNumber(formattedValue, this.noOfDecimals);

                            case _utils.default.Constants.DataFormatter.Long:
                                return _utils.default.formatters.formatNumber(formattedValue, 0);

                            case _utils.default.Constants.DataFormatter.Integer:
                                return _utils.default.formatters.formatNumber(formattedValue, 0);

                            case _utils.default.Constants.DataFormatter.Date:
                                return formattedValue ? _utils.default.formatters.formatToDate(formattedValue) : _sharedService.default.userSettings.displayFormat.noValue;

                            case _utils.default.Constants.DataFormatter.Percentage:
                                return _utils.default.formatters.formatNumberPercentage(formattedValue);

                            case _utils.default.Constants.DataFormatter.DivideNumber:
                                return _utils.default.formatters.divideNumber(formattedValue, this.noOfDecimals);

                            case _utils.default.Constants.DataFormatter.Time:
                                return formattedValue ? _utils.default.formatters.formatToTime(formattedValue, exg) : _sharedService.default.userSettings.displayFormat.noValue;

                            case _utils.default.Constants.DataFormatter.DateTime:
                                return formattedValue ? _utils.default.formatters.formatToDateTime(formattedValue) : _sharedService.default.userSettings.displayFormat.noValue;

                            default:
                                return formattedValue;
                        }
                    } else {
                        return that.get('noValue');
                    }
                } else {
                    return that.get('noValue');
                }
            }));
        }
    });
});
define('universal-app/models/price/business-entities/price-exchange-meta', ['exports', 'ember', '../../../models/shared/business-entities/persistent-object', '../../../utils/utils'], function (exports, _ember, _persistentObject, _utils) {
    'use strict';

    exports.default = _persistentObject.default.extend({
        // RT = 308
        cacheKey: 'priceExchangeMeta',
        isCompress: true,
        exgMetaData: undefined,

        getExgSummaryObj: function getExgSummaryObj() {
            if (_ember.default.$.isEmptyObject(this.get('exgMetaData'))) {
                this.set('exgMetaData', { HED: {}, DAT: {}, VRS: {} });
            }

            return this.get('exgMetaData');
        },

        setData: function setData(userParams) {
            if (userParams) {
                this._super(userParams);
            } else {
                this.set('exgMetaData', { HED: {}, DAT: {}, VRS: {} });
            }
        },

        save: function save(language) {
            this._super(_utils.default.Constants.StorageType.Local, undefined, language);
        },

        load: function load(language) {
            return this._super(_utils.default.Constants.StorageType.Local, language);
        },

        getPersistentData: function getPersistentData() {
            return { exgMetaData: this.get('exgMetaData') };
        }
    }).create();
});
define('universal-app/models/price/business-entities/price-meta', ['exports', '../../../models/shared/business-entities/persistent-object', '../../../utils/utils'], function (exports, _persistentObject, _utils) {
    'use strict';

    exports.default = _persistentObject.default.extend({
        // RT = 306
        cacheKey: 'priceMeta',
        isCompress: true,
        metaData: {},

        getExgMetaObj: function getExgMetaObj(exchange) {
            var exgObj = this.get('metaData')[exchange];

            if (!exgObj) {
                exgObj = { DAT: { VRS: { WL: 0, SRC: 0 } }, HED: {} };
                this.metaData[exchange] = exgObj;
            }

            return exgObj;
        },

        setData: function setData(userParams) {
            if (userParams) {
                this._super(userParams);
            } else {
                this.set('metaData', {});
            }
        },

        save: function save(language) {
            this._super(_utils.default.Constants.StorageType.Local, undefined, language);
        },

        load: function load(language) {
            return this._super(_utils.default.Constants.StorageType.Local, language);
        },

        getPersistentData: function getPersistentData() {
            return { metaData: this.get('metaData') };
        }
    }).create();
});
define('universal-app/models/price/business-entities/price-symbol-meta', ['exports', '../../../models/shared/business-entities/persistent-object', '../../../utils/utils'], function (exports, _persistentObject, _utils) {
    'use strict';

    exports.default = _persistentObject.default.extend({
        // RT = 303
        cacheKey: 'priceSymbolMeta',
        isCompress: true,
        metaData: {},

        getExgMetaObj: function getExgMetaObj(exchange) {
            var exgObj = this.get('metaData')[exchange];

            if (!exgObj) {
                exgObj = { DAT: { TD: {}, VRS: [0] }, HED: { TD: {} } };
                this.metaData[exchange] = exgObj;
            }

            return exgObj;
        },

        setData: function setData(userParams) {
            if (userParams) {
                this._super(userParams);
            } else {
                this.set('metaData', {});
            }
        },

        save: function save(language) {
            this._super(_utils.default.Constants.StorageType.Local, undefined, language);
        },

        load: function load(language) {
            return this._super(_utils.default.Constants.StorageType.Local, language);
        },

        getPersistentData: function getPersistentData() {
            return { metaData: this.get('metaData') };
        }
    }).create();
});
define('universal-app/models/price/business-entities/price-user-data', ['exports', '../../../models/shared/business-entities/persistent-object'], function (exports, _persistentObject) {
    'use strict';

    exports.default = _persistentObject.default.extend({
        cacheKey: 'priceUserData'
        // This object contains user data shared across same type of widgets
        // Data key is dynamic and not pre-defined
    }).create();
});
define('universal-app/models/price/business-entities/price-user', ['exports', 'ember', '../../../models/shared/business-entities/persistent-object', '../../../utils/utils', '../../../config/app-config'], function (exports, _ember, _persistentObject, _utils, _appConfig) {
    'use strict';

    exports.default = _persistentObject.default.extend({
        cacheKey: 'priceUser',
        isEncrypt: true,
        oneDayInMillis: 86400000, // 1000 * 60 * 60 * 24

        // Auth related params
        sessionId: '',
        authStatus: 0,
        userId: '',
        username: '',
        userExchg: _ember.default.A(), // Only default exchanges
        newsProviders: '',
        expiryDate: '',
        windowTypes: {},
        name: '',
        expiredExchg: '',
        inactiveExchg: '',
        metaVersion: '',
        delayedExchg: [], // Only delayed exchanges
        billingCode: 'ISI',
        nonDefExg: _ember.default.A(), // Only non-default exchanges
        isMultipleUserExchangesAvailable: false,

        expDate: function () {
            var expDateObj;
            var expDateString = this.get('expiryDate');

            if (_utils.default.validators.isAvailable(expDateString)) {
                expDateObj = _utils.default.formatters.convertStringToDate(expDateString);
            }

            return expDateObj;
        }.property('expiryDate'),

        allExg: function () {
            return this.get('userExchg').concat(this.get('nonDefExg'));
        }.property('userExchg', 'nonDefExg'),

        authResponseMapping: {
            'SID': 'sessionId',
            'AUTHSTAT': 'authStatus',
            'UID': 'userId',
            'UNM': 'username',
            'UE': 'userExchg',
            'NWSP': 'newsProviders',
            'EXPDATE': 'expiryDate',
            'WT': 'windowTypes',
            'NAME': 'name',
            'EXPEXG': 'expiredExchg',
            'INACEXG': 'inactiveExchg',
            'METAVER': 'metaVersion',
            'DE': 'delayedExchg',
            'NDE': 'nonDefExg'
        },

        isWindowTypeAvailable: function isWindowTypeAvailable(windowTypes, exchange) {
            var isAvailable = false;
            var exgWindowTypes = this.windowTypes && this.windowTypes[exchange];

            if (exgWindowTypes) {
                _ember.default.$.each(windowTypes, function (index, windowType) {
                    isAvailable = exgWindowTypes.indexOf(windowType) >= 0;

                    if (isAvailable) {
                        return false;
                    }
                });
            }

            return isAvailable;
        },

        isExchangeDelayed: function isExchangeDelayed(exchangeCode) {
            return this.delayedExchg.indexOf(exchangeCode) >= 0;
        },

        isDelayedExchangesAvailable: function isDelayedExchangesAvailable() {
            return this.delayedExchg.length > 0;
        },

        isRealtimeExchangesAvailable: function isRealtimeExchangesAvailable() {
            return this.delayedExchg.length !== this.userExchg.length;
        },

        willExpireRecently: function willExpireRecently() {
            return (this.get('expDate') - new Date()) / this.oneDayInMillis <= _appConfig.default.subscriptionConfig.daysBeforeExpiration;
        },

        isNonDefaultExchangesAvailable: function isNonDefaultExchangesAvailable() {
            return this.nonDefExg.length > 0;
        },

        isOptionSymbolSearchEnabled: function () {
            var allExg = this.get('allExg');

            return allExg.indexOf('OPRA') > -1;
        }.property('allExg'),

        setMultipleUserExchangesAvailability: function () {
            this.set('isMultipleUserExchangesAvailable', this.get('userExchg').length > 1);
        }.observes('userExchg'),

        /* *
         * Checks whether user has subscription for given exchange as a default exchange (real time or delayed, but not non-default)
         * @param exchange Exchange code to check
         * @returns {boolean} True if user has price subscription for the exchange as a default exchange, false otherwise
         */
        isNotSubscribedAsDefaultExchange: function isNotSubscribedAsDefaultExchange(exchange) {
            var allDefaultExg = this.get('userExchg');
            return allDefaultExg.length > 0 && allDefaultExg.indexOf(exchange) === -1;
        },

        /* *
         * Checks whether user has subscription for given exchange (real time, delayed or non-default)
         * @param exchange Exchange code to check
         * @returns {boolean} True if user has price subscription for the exchange, false otherwise
         */
        isExchangeSubscribed: function isExchangeSubscribed(exchange) {
            return this.get('allExg').indexOf(exchange) > -1;
        },

        setData: function setData(userParams, isAuthResponse) {
            if (isAuthResponse) {
                var that = this;

                _ember.default.$.each(userParams, function (key, value) {
                    var prop = that.authResponseMapping[key];

                    if (prop) {
                        that.set(prop, value);
                    }
                });
            } else {
                this._super(userParams);
            }
        },

        save: function save() {
            this._super(_utils.default.Constants.StorageType.Local);
        },

        load: function load() {
            return this._super(_utils.default.Constants.StorageType.Local);
        },

        isLevelTwoDataAvailable: function isLevelTwoDataAvailable(instrumentType) {
            var optionInstrumentType = 10; // TODO [Anushka] Implement advance method set to identify available data for a user
            return instrumentType !== optionInstrumentType;
        },

        isPriceUserExchange: function isPriceUserExchange(exg) {
            var userExchanges = this.get('userExchg');
            return userExchanges.length > 0 && userExchanges.contains(exg);
        }
    }).create();
});
define('universal-app/models/price/business-entities/search-result-item', ['exports', 'ember', '../../../config/app-config'], function (exports, _ember, _appConfig) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        sym: '', // Symbol
        lDes: '', // Long Description
        sDes: '', // Short Description
        dSym: '', // Display Symbol
        exg: '', // Exchange
        inst: '', // Instrument Type
        ast: '', // Asset Type
        type: -1, // Search result type
        isDisLDes: false, // Display long description
        priority: 0, // For sorting the final array
        cid: '', // Company Id

        setData: function setData(message) {
            var that = this;

            _ember.default.$.each(message, function (key, value) {
                that.set(key, value);
            });
        },

        dispProp1: function () {
            // TODO [Pradeep] Merge this with stock object
            var that = this;
            var dispValue = '';
            var dispValueArray = [];
            var dispConfig = _appConfig.default.customisation.displayProperties;
            var property = dispConfig && dispConfig.dispProp1 ? dispConfig.dispProp1 : 'dSym';

            if (_ember.default.$.isArray(property)) {
                _ember.default.$.each(property, function (indexValue, propValue) {
                    var valueForProp = that.get(propValue);

                    if (valueForProp) {
                        dispValueArray[dispValueArray.length] = valueForProp;
                    }
                });

                dispValue = dispValueArray.join(' - ');
            } else {
                dispValue = this.get(property);
            }

            return dispValue;
        }.property('sDes')
    });
});
define('universal-app/models/price/business-entities/sector', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        sec: '', // Sector Code
        des: '', // Description

        setData: function setData(sectorMessage) {
            var that = this;

            _ember.default.$.each(sectorMessage, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/stock', ['exports', 'ember', '../../../utils/utils', '../price-constants', '../../../config/app-config', '../../../models/shared/language/language-data-store'], function (exports, _ember, _utils, _priceConstants, _appConfig, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        app: undefined,

        sym: '', // Symbol
        symStat: '0', // Symbol Status
        lDes: '', // Long Description
        sDes: '', // Short Description
        dSym: '', // Display Symbol
        exg: '', // Exchange
        inst: '', // Instrument Type
        ast: '', // Asset Type
        cid: '', // Company Id
        sec: '', // Sector Code
        subMkt: '', // Sub Market Code
        open: 0, // Open
        high: 0, // High
        low: 0, // Low
        cls: '', // Close
        chg: 0, // Change
        pctChg: 0, // Percentage Change
        prvCls: 0, // Previous Close
        tovr: 0, // TurnOver
        vol: 0, // Volume
        trades: 0, // No Of Trades
        cur: '', // Currency
        ltp: 0, // Last Traded Price - need to add a related logic
        ltq: '', // Last Traded Quantity
        ltd: '', // Last Traded Date - need to map to the new columns
        ltt: '', // Last Traded Time - need to map to the new columns
        bap: 0, // Best Ask Price
        baq: 0, // Best Ask Qty
        bbp: 0, // Best Bid Price
        bbq: 0, // Best Bid Qty
        tbq: 0, // Total Bid Quantity
        taq: 0, // Total Ask Quantity
        h52: 0, // 52 Weeks High
        l52: 0, // 52 Weeks Low
        per: '', // P / E Ratio
        pbr: '', // P / B Ratio
        eps: '', // Earnings Per Share
        yld: '', // Yield
        lot: 0, // Lot Size
        uSym: '', // Underline Symbol (for options)
        stkP: '', // Strike Price
        expDt: '', // Expire Date
        deci: 2, // Decimal Places
        dcf: '', // Decimal Correction Factor
        refValue: 0.0, // Ref Value - This is there in RIA, Do we need this.
        vwap: 0, // VWAP
        rng: '', // Range
        pctRng: '', // Percentage Range
        cshMp: '', // Cash Map
        mktCap: '0', // Market Cap
        mktCapChg: '', // Market Cap Change
        pctYtd: '', // Percentage Year To Date
        cit: '', // Cash In Turn Over
        cot: '', // Cash Out Turnover
        civ: 0, // Cash In Volume
        cov: 0, // Cash Out Volume
        min: 0, // Min Price
        max: 0, // Max Price
        cor: 0, // Coupon Rate
        cof: 0, // Coupon frequency
        pcd: 0, // Previous Coupon Date
        fVal: 0, // Face Value,
        bor: 0, // Bid/Offer Ratio
        oInt: 0, // Open Interest
        oIntC: 0, // Open Interest Change%
        div: 0, // Dividend
        edd: '', // Ex-Dividend Date
        sp: 0, // Settlement Price
        matD: '', // Maturity Date
        boT: 0, // Bond Type
        outA: 0, // Outstanding Amount
        setD: 0, // Settlement Date
        dcm: 0, // Day Count Method
        isMainIdx: false, // IsMainIndex (Index type)
        lstShares: 0, // Listed Shares
        lAnn: null, // Top Announcement referance
        ann: '', // Top Announcement header
        dcfs: '', // Distressed  company flag
        cvwap: '', // Closing VWAP
        intsV: '', // Intrinsic value
        twap: 0, // TWAP
        top: 0, // Theoretical Open Price
        tcp: 0, // Theoretical Close Price
        tov: 0, // Theoretical Open Volume
        tcv: 0, // Theoretical Close Volume
        av5d: 0, // Average 5 Dat Volume
        isin: '', // ISIN
        tick: 0, // Symbol Tick Size
        shreCap: '', // Share Capital
        issueAmnt: 0, // Issue Amount
        dayCountMethod: '', // Day Count Method
        stlmt: 0, // Settlement type
        nms: 0, // Normal Market Size
        sname: '', // Symbol Session Name

        is52WeekHigh: function () {
            return this.get('high') >= this.get('h52') && this.get('high') > 0 && this.get('h52') > 0;
        }.property('high', 'h52'), // Reached 52 week high value

        is52WeekLow: function () {
            return this.get('low') <= this.get('l52') && this.get('low') > 0 && this.get('l52') > 0;
        }.property('low', 'l52'), //  Reached 52 week low value

        isTodayHigh: function () {
            return this.get('ltp') >= this.get('max') && this.get('ltp') > 0 && this.get('max') > 0;
        }.property('ltp', 'max'), //  Reached today's low value

        isTodayLow: function () {
            return this.get('ltp') <= this.get('min') && this.get('ltp') > 0 && this.get('min') > 0;
        }.property('ltp', 'min'), //  Reached today's low value

        isChangeNegative: function () {
            return this.get('pctChg') < 0;
        }.property('pctChg'),

        key: function () {
            return this.get('sym') + _utils.default.Constants.StringConst.Tilde + this.get('exg');
        }.property('sym', 'exg'), // Unique key to identify stock uniquely.

        dExg: function () {
            return this.get('exg');
        }.property('exg'), // Display Exchange - This need to collect from the correct repository.

        dltt: function () {
            var noOfTrades = this.get('trades');
            var time = this.get('ltt');
            var displayTime = 0;

            if (noOfTrades > 0) {
                displayTime = _utils.default.formatters.formatToTime(time, this.get('exg'));
            }

            return displayTime;
        }.property('ltt', 'trades'), // Display Time

        bar: function () {
            var tbq, taq, val;

            tbq = this.get('tbq');
            taq = this.get('taq');

            if (tbq === 0 && taq === 0) {
                val = '';
            } else if (tbq === 0 || taq === 0) {
                val = 0;
            } else {
                val = tbq / taq;
            }

            return val;
        }.property('tbq', 'taq'), // Bid Ask Ratio

        spread: function () {
            var bbp = this.get('bbp');
            var bap = this.get('bap');
            var ltp = this.get('ltp');
            var spread = 0;

            if (bbp > 0 && bap > 0 && ltp > 0) {
                var diff = bap - bbp;

                if (diff > 0) {
                    spread = bap - bbp;
                }
            }

            return spread;
        }.property('bbp', 'bap'), // Spread

        trend: function () {
            // Trend
            var change = this.get('chg');
            return change > 0 ? 1 : change < 0 ? -1 : 0;
        }.property('chg'),

        calcNetCash: function () {
            var cashIn = this.get('cit');
            var cashOut = this.get('cot');
            var value = cashIn - cashOut;

            this.set('netCash', isNaN(value) ? 0 : value);
            this.set('netCashPer', (cashIn - cashOut) * 100 / (cashIn + cashOut));
        }.observes('cit', 'cot'),

        isActive: function isActive() {
            return this.get('symStat') !== _priceConstants.default.SymbolStatus.Expired && this.get('symStat') !== _priceConstants.default.SymbolStatus.Delisted;
        },

        dispProp2: function () {
            var dispConfig = _appConfig.default.customisation.displayProperties;
            var property = dispConfig ? dispConfig.dispProp2 : 'lDes';

            return this.get(property);
        }.property('sDes'),

        dispProp3: function () {
            var dispConfig = _appConfig.default.customisation.displayProperties;
            var property = dispConfig ? dispConfig.dispProp3 : 'cid';

            return this.get(property);
        }.property('sDes'),

        indexDispProp: function () {
            var dispConfig = _appConfig.default.customisation.displayProperties;
            var property = dispConfig && dispConfig.indexDispProp ? dispConfig.indexDispProp : 'lDes';

            return this._getEditedValue(property);
        }.property('sDes'),

        instDes: function () {
            var instTypVal = this.get('inst');
            var instLang = this.app.lang.labels[_utils.default.AssetTypes.InstrumentLangKeys[instTypVal]];

            return instLang ? instLang : '--';
        }.property('inst', 'app.lang'),

        _setDispProp1: function _setDispProp1() {
            // Symbol Text Based on config
            var dispConfig = _appConfig.default.customisation.displayProperties;
            var property = dispConfig && dispConfig.dispProp1 ? dispConfig.dispProp1 : 'dSym';

            return this._getEditedValue(property);
        },

        _getEditedValue: function _getEditedValue(property) {
            var that = this;
            var dispValue = '';
            var dispValueArray = [];

            if (_ember.default.$.isArray(property)) {
                _ember.default.$.each(property, function (indexValue, propValue) {
                    var valueForProp = that.get(propValue);

                    if (valueForProp) {
                        dispValueArray[dispValueArray.length] = valueForProp;
                    }
                });

                dispValue = dispValueArray.join(' - ');
            } else {
                dispValue = this.get(property);
            }

            return dispValue;
        },

        _defineDispProp1: function _defineDispProp1() {
            // Dynamic dependent keys based on config
            var displayProperties = _appConfig.default.customisation.displayProperties;
            var dispPropCollection = displayProperties && displayProperties.dispProp1 ? displayProperties.dispProp1 : ['dSym'];

            if (dispPropCollection) {
                var argsArray = dispPropCollection.concat(this._setDispProp1);
                _ember.default.defineProperty(this, 'dispProp1', _ember.default.computed.apply(this, argsArray));
            }
        },

        init: function init() {
            this._super();
            this.set('app', _languageDataStore.default.getLanguageObj());
            this._defineDispProp1();
        },

        setData: function setData(symbolMessage) {
            var that = this;

            _ember.default.$.each(symbolMessage, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/sub-market', ['exports', 'ember', '../../../models/shared/language/language-data-store'], function (exports, _ember, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        marketId: '',
        lDes: '',
        def: '',
        isMktSummary: '',
        stat: '',

        init: function init() {
            this._super();
            this.set('app', _languageDataStore.default.getLanguageObj());
        },

        statStr: function () {
            return this.app.lang.labels['mktStatus_' + this.get('stat')]; // Sub Market Status String
        }.property('stat', 'lDes'),

        setData: function setData(subMktMsg) {
            var that = this;

            _ember.default.$.each(subMktMsg, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/topstock', ['exports', 'ember', '../../../utils/utils'], function (exports, _ember, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        sym: '', // Symbol
        chg: '', // Change
        pctChg: '', // Percentage change
        ltp: '', // Last Trade Price
        vol: '', // Volume
        trades: '', // No of trades
        tovr: '', // Turnover
        desc: '', // Description
        dSym: '', // Display Symbol

        dDesc: function () {
            return _utils.default.formatters.convertUnicodeToNativeString(this.get('desc'));
        }.property('desc'), // Display symbol description

        setData: function setData(topStockMsg) {
            var that = this;

            _ember.default.$.each(topStockMsg, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/business-entities/trade', ['exports', 'ember', '../../../utils/utils', '../../../models/shared/shared-service'], function (exports, _ember, _utils, _sharedService) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        sym: '', // Symbol
        dSym: '', // Display Symbol
        exg: '', // Exchange
        inst: '', // Instrument Type
        trp: 0, // Traded Price
        trq: 0, // Traded Quantity
        tts: '', // Trade Time String
        mds: '', // Market Date String
        tick: 0, // Tick
        splits: 0, // Splits
        nChg: '', // Net Change
        pctChg: '', // Percentage Change
        seq: '', // Sequence
        vwap: '', // VWAP
        trdType: 0, // Trade Type
        buyCode: '', // Buyer Code
        selCode: '', // Seller Code

        isEmpty: false, // Used to hide the row data before data updated.

        dDt: function () {
            var time = this.get('tts');

            return _utils.default.formatters.formatToTime(time, this.get('exg'));
        }.property('tts'), // Display date Time

        // TODO [Rasike] : No need to review this method until calculation logic get finalized.
        setTradeTick: function setTradeTick(prevTrp) {
            var currentTrp = this.get('trp');

            if (currentTrp === 0) {
                // If default value for trp changed this need to be changed accordingly.
                currentTrp = prevTrp;
            }

            if (prevTrp < currentTrp) {
                this.set('tick', 1);
            } else if (prevTrp === currentTrp) {
                this.set('tick', 0);
            } else {
                this.set('tick', -1);
            }
        },

        sDes: function () {
            var stock = _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), this.get('sym'));
            return stock.sDes;
        }.property('sym'),

        buyerDes: function () {
            var exchange = _sharedService.default.getService('price').exchangeDS.getExchange(this.get('exg'));
            return exchange.getBrokerDescription(this.get('buyCode'));
        }.property('buyCode'),

        sellerDes: function () {
            var exchange = _sharedService.default.getService('price').exchangeDS.getExchange(this.get('exg'));
            return exchange.getBrokerDescription(this.get('selCode'));
        }.property('selCode'),

        dispProp1: function () {
            var stock = _sharedService.default.getService('price').stockDS.getStock(this.get('exg'), this.get('sym'));
            return stock.get('dispProp1');
        }.property('sym'),

        setData: function setData(symbolMessage) {
            var that = this;

            _ember.default.$.each(symbolMessage, function (key, value) {
                that.set(key, value);
            });
        }
    });
});
define('universal-app/models/price/data-stores/alert-data-store', ['exports', 'ember', '../business-entities/alert', '../../../utils/utils'], function (exports, _ember, _alert, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        subscriptionKey: 'alertDS',
        store: {},
        alertArray: _ember.default.A(),
        alertMapBySymExg: {},
        alertToggle: true,

        getAlert: function getAlert(token, exg) {
            var key = token;
            var currentStore = this.get('store');
            var currentAlert = currentStore[key];

            if (!currentAlert) {
                currentAlert = _alert.default.create({
                    token: token,
                    exg: exg
                });

                currentStore[key] = currentAlert;
                this.addToOtherCollections(currentAlert);
            }

            return currentAlert;
        },

        getAlertsBySymbol: function getAlertsBySymbol(exg, sym) {
            return this._getSymbolArray(exg, sym);
        },

        getAllAlerts: function getAllAlerts() {
            return this.get('alertArray');
        },

        addToOtherCollections: function addToOtherCollections(currentAlert) {
            this.get('alertArray').pushObject(currentAlert);
            this._getSymbolArray(currentAlert.exg, currentAlert.sym).pushObject(currentAlert);
        },

        alertUpdateRecieved: function alertUpdateRecieved() {
            this.toggleProperty('alertToggle');
        },

        removeAlertFromCollections: function removeAlertFromCollections(alertToken) {
            var currentStore = this.get('store');
            var currentAlert = currentStore[alertToken];
            var symArray = this._getSymbolArray(currentAlert.exg, currentAlert.sym);

            if (symArray) {
                this._removeItemFromArray(alertToken, symArray);
            }

            currentStore[alertToken] = undefined;

            // Remove alert from alertArray
            var alertArray = this.get('alertArray');
            this._removeItemFromArray(alertToken, alertArray);
        },

        getAlertMapKey: function getAlertMapKey(exchange, symbol) {
            return _utils.default.keyGenerator.getKey(exchange, symbol);
        },

        _removeItemFromArray: function _removeItemFromArray(token, alertArray) {
            var alertIndex;
            var array = alertArray;

            _ember.default.$.each(array, function (index, item) {
                if (item.token === token) {
                    alertIndex = index;

                    return false;
                }
            });

            if (alertIndex || alertIndex === 0) {
                array.removeAt(alertIndex);
            }
        },

        _getSymbolArray: function _getSymbolArray(exchange, symbol) {
            var key = this.getAlertMapKey(exchange, symbol);
            var alertMapBySymExg = this.get('alertMapBySymExg');

            if (!alertMapBySymExg[key]) {
                alertMapBySymExg[key] = _ember.default.A();
            }

            return alertMapBySymExg[key];
        }
    });
});
define('universal-app/models/price/data-stores/announcements-data-store', ['exports', 'ember', '../business-entities/announcement', '../price-constants', '../../../utils/web-storage', '../../../utils/utils', '../../../models/shared/shared-service'], function (exports, _ember, _announcement, _priceConstants, _webStorage, _utils, _sharedService) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        store: {},
        annStoreArray: _ember.default.A(),
        newsStoreArray: _ember.default.A(),
        annNewsStoreArray: _ember.default.A(),
        storeMapBySymbolExchange: {},
        isNewItemsAvailable: true,
        annCacheTimerID: undefined,
        contentSearchStore: _ember.default.A(),
        searchStore: {},
        isCachingEnabled: true,

        createAnnouncement: function createAnnouncement(annsId, type, sym, exg) {
            var that = this;
            var currentStore = that.get('store');

            currentStore[type] = currentStore[type] || {};

            if (!currentStore[type][annsId]) {
                var annObj = this.getAnnouncement(annsId, type, sym, exg);
                var arr = _ember.default.A();
                var annNewsArr = that.get('annNewsStoreArray');

                if (type === _priceConstants.default.ResponseType.Data.ResponseNews) {
                    arr = that.get('newsStoreArray');
                } else if (type === _priceConstants.default.ResponseType.Data.ResponseAnnouncement) {
                    arr = that.get('annStoreArray');
                }

                arr.pushObject(annObj);
                annNewsArr.pushObject(annObj);
                that.isNewItemsAvailable = true;

                // Initiate the timer for caching. At least n items needs to be there for caching
                if (!that.get('annCacheTimerID')) {
                    var timerID = setTimeout(function () {
                        that.cacheAnnouncementsTimer(_priceConstants.default.TimeIntervals.AnnouncementCachingInterval * 30);
                    }, _priceConstants.default.TimeIntervals.AnnouncementCachingInterval);

                    that.set('annCacheTimerID', timerID);
                }
            }

            return currentStore[type][annsId];
        },

        addToOtherCollections: function addToOtherCollections(annObj, type) {
            var key = _utils.default.keyGenerator.getKey(annObj.exg, annObj.sym);
            var currentStore = this.get('storeMapBySymbolExchange');

            currentStore[type] = currentStore[type] || {};

            var annCollectionBySym = currentStore[type][key];

            if (annCollectionBySym) {
                // Add to announcement collection which is managed for symbol
                annCollectionBySym.pushObject(annObj);
            }
        },

        getAnnouncement: function getAnnouncement(annId, type, sym, exg) {
            var currentStore = this.get('store');
            currentStore[type] = currentStore[type] || {};

            var annObj = currentStore[type][annId];

            if (!annObj) {
                var dSymExg;

                if (_utils.default.validators.isAvailable(sym)) {
                    dSymExg = sym;
                } else {
                    var exchangeObj = _sharedService.default.getService('price').exchangeDS.getExchange(exg);
                    dSymExg = exchangeObj && exchangeObj.de ? exchangeObj.de : exg;
                }

                annObj = _announcement.default.create({
                    type: type,
                    id: annId
                });

                var dispProp1;
                var that = this;

                if (sym && sym.indexOf(',') > -1) {
                    var symArray = sym.split(',');
                    var dispPropArray = [];

                    _ember.default.$.each(symArray, function (indexValue, symValue) {
                        dispProp1 = that._getDispProp1(symValue, exg);
                        dispPropArray[dispPropArray.length] = dispProp1 ? dispProp1 : dSymExg;
                    });

                    annObj.set('dispProp1', dispPropArray.join(', '));
                } else if (sym) {
                    dispProp1 = this._getDispProp1(sym, exg);
                    annObj.set('dispProp1', dispProp1 ? dispProp1 : dSymExg);
                } else {
                    annObj.set('dispProp1', dSymExg);
                }

                currentStore[type][annId] = annObj;
            }

            return annObj;
        },

        cacheAnnouncementNews: function cacheAnnouncementNews() {
            if (this.isCachingEnabled) {
                // Flag for validating if there are new items available
                if (this.isNewItemsAvailable) {
                    var storageObj = {};

                    var newsSlicedArr = this.get('newsStoreArray').sortBy('dDt').slice(Math.max(this.get('newsStoreArray').get('length') - _priceConstants.default.AnnouncementNewsCashSize, 0));
                    var annSlicedArr = this.get('annStoreArray').sortBy('dDt').slice(Math.max(this.get('annStoreArray').get('length') - _priceConstants.default.AnnouncementNewsCashSize, 0));

                    storageObj[_priceConstants.default.ResponseType.Data.ResponseNews] = newsSlicedArr;
                    storageObj[_priceConstants.default.ResponseType.Data.ResponseAnnouncement] = annSlicedArr;

                    _webStorage.default.addObject(_webStorage.default.getKey(_utils.default.Constants.CacheKeys.LatestAnnouncements), storageObj, _utils.default.Constants.StorageType.Local);
                    this.isNewItemsAvailable = false;
                }
            }
        },

        cacheAnnouncementsTimer: function cacheAnnouncementsTimer(nextCachingInterval) {
            if (this.isCachingEnabled) {
                // This function will cache the top n items, which will be used for next time loading.
                // Caching will periodically check and update to have the latest ones in the cash
                this.cacheAnnouncementNews();

                var that = this;
                // Next execution
                var timerID = setTimeout(function () {
                    that.cacheAnnouncementsTimer(_priceConstants.default.TimeIntervals.AnnouncementCachingInterval * 30);
                }, nextCachingInterval);

                that.set('annCacheTimerID', timerID);
            }
        },

        getAnnCollectionBySymbol: function getAnnCollectionBySymbol(exchange, symbol) {
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);
            var currentStore = this.get('storeMapBySymbolExchange');
            var annCollectionBySym = currentStore[key];

            if (!annCollectionBySym) {
                annCollectionBySym = _ember.default.A([]);
                currentStore[key] = annCollectionBySym;
            }

            return annCollectionBySym;
        },

        loadCachedStore: function loadCachedStore() {
            if (this.isCachingEnabled) {
                var that = this;

                var _loadAnnNews = function _loadAnnNews(dataArray) {
                    if (dataArray) {
                        _ember.default.$.each(dataArray, function (key, value) {
                            var annObj = value;

                            if (annObj && annObj.hed) {
                                var newAnnObj = that.createAnnouncement(annObj.id, annObj.type);
                                newAnnObj.setData(annObj);
                            }
                        });
                    }
                };

                var storageObj = _webStorage.default.getObject(_webStorage.default.getKey(_utils.default.Constants.CacheKeys.LatestAnnouncements));

                if (storageObj) {
                    _loadAnnNews(storageObj[_priceConstants.default.ResponseType.Data.ResponseNews]);
                    _loadAnnNews(storageObj[_priceConstants.default.ResponseType.Data.ResponseAnnouncement]);
                }
            }
        },

        removeAnnCollectionBySymbol: function removeAnnCollectionBySymbol(exchange, symbol) {
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);
            var currentStore = this.get('storeMapBySymbolExchange');

            currentStore[key] = null;
        },

        getContentSearchResult: function getContentSearchResult() {
            return this.get('contentSearchStore');
        },

        getAnnouncementSearchCollection: function getAnnouncementSearchCollection(key) {
            var searchStore = this.get('searchStore');

            if (!searchStore[key]) {
                searchStore[key] = _ember.default.A([]);
            }

            return searchStore[key];
        },

        removeAnnouncementSearchCollection: function removeAnnouncementSearchCollection(key) {
            var searchStore = this.get('searchStore');

            if (searchStore[key]) {
                searchStore[key] = null;
            }
        },

        filterContentSearchResults: function filterContentSearchResults(searchKey, language, isEnabledAnnSearch, isEnabledNewsSearch, notifyFn) {
            this.get('contentSearchStore').clear();

            if (isEnabledAnnSearch) {
                this.priceService.sendAnnouncementSearchRequest({
                    searchKey: searchKey,
                    language: language,
                    pageSize: _priceConstants.default.AnnouncementSearchPageSize,

                    reqSuccessFn: function reqSuccessFn() {},

                    reqFailureFn: function reqFailureFn() {
                        notifyFn();
                    }
                }, this.get('contentSearchStore'));
            }

            if (isEnabledNewsSearch) {
                this.priceService.sendNewsSearchRequest({
                    searchKey: searchKey,
                    language: language,
                    pageSize: _priceConstants.default.NewsSearchPageSize,

                    reqSuccessFn: function reqSuccessFn() {},

                    reqFailureFn: function reqFailureFn() {
                        notifyFn();
                    }
                });
            }
        },

        _getDispProp1: function _getDispProp1(sym, exg) {
            if (sym && exg) {
                var stockObj = this.priceService.stockDS.getStock(exg, sym);
                return stockObj.get('dispProp1');
            }
        },

        _formatDisplaySymExg: function _formatDisplaySymExg(sym, exg) {
            var dSymExg;
            var isSymAvailable = _utils.default.validators.isAvailable(sym);
            var symExg = isSymAvailable ? sym : exg;

            // To add delayed icon when when the symbol and exchange are same in the announcement object. eg: sym: 'TDWL', exg: 'TDWL'
            // DFM exchange having a symbol DFM.
            if (sym === exg) {
                isSymAvailable = false;
            }

            if (symExg.indexOf(_utils.default.Constants.StringConst.Comma) >= 0) {
                var that = this;
                var dSymExgArray = [];
                var symExgArray = symExg.split(_utils.default.Constants.StringConst.Comma);

                symExgArray.forEach(function (value) {
                    var symExgItem = value.trim();

                    dSymExgArray[dSymExgArray.length] = isSymAvailable ? that.priceService.stockDS.getStock(exg, symExgItem).dSym : that.priceService.exchangeDS.getExchange(symExgItem).de;
                });

                dSymExg = dSymExgArray.join(', ');
            } else {
                dSymExg = isSymAvailable ? this.priceService.stockDS.getStock(exg, sym).dSym : this.priceService.exchangeDS.getExchange(exg).de;
            }

            return dSymExg;
        }
    });
});
define('universal-app/models/price/data-stores/company-profile-data-store', ['exports', 'ember', '../business-entities/company-profile', '../business-entities/company-management', '../business-entities/company-owners', '../business-entities/company-subsidiaries', '../../../utils/utils'], function (exports, _ember, _companyProfile, _companyManagement, _companyOwners, _companySubsidiaries, _utils) {
    'use strict';

    exports.default = function (priceService) {
        var store = {};
        var flagsAndFns = {};

        var createCompanyManagement = function createCompanyManagement() {
            return _companyManagement.default.create();
        };

        var createCompanyOwners = function createCompanyOwners() {
            return _companyOwners.default.create();
        };

        var createCompanySubsidiaries = function createCompanySubsidiaries() {
            return _companySubsidiaries.default.create();
        };

        var getCompanyProfile = function getCompanyProfile(exchange, symbol, language, successFn, errorFn) {
            var key = _getKey(exchange, symbol, language);
            var companyProfFlagsAndFns = flagsAndFns[key];
            var companyProfObj;

            var postSuccess = function postSuccess() {
                companyProfFlagsAndFns.dataAvailable = true;
                var successFns = companyProfFlagsAndFns.successFns;

                _ember.default.$.each(successFns, function (index, sFn) {
                    if (_ember.default.$.isFunction(sFn)) {
                        sFn();
                    }
                });
            };

            var error = function error() {
                store[key] = undefined;
                var errorFns = companyProfFlagsAndFns.errorFns;

                _ember.default.$.each(errorFns, function (index, eFn) {
                    if (_ember.default.$.isFunction(eFn)) {
                        eFn();
                    }
                });

                flagsAndFns[key] = undefined;
            };

            var addFnsToArray = function addFnsToArray() {
                companyProfFlagsAndFns.successFns[companyProfFlagsAndFns.successFns.length] = successFn;
                companyProfFlagsAndFns.errorFns[companyProfFlagsAndFns.successFns.length] = errorFn;
            };

            if (!companyProfFlagsAndFns) {
                companyProfObj = _companyProfile.default.create({
                    exg: exchange,
                    sym: symbol,
                    lan: language
                });

                companyProfFlagsAndFns = {
                    dataAvailable: false,
                    successFns: [],
                    errorFns: []
                };

                store[key] = companyProfObj;
                flagsAndFns[key] = companyProfFlagsAndFns;

                addFnsToArray();
                priceService.sendCompanyProfileRequest(exchange, symbol, language, postSuccess, error);
            } else {

                if (companyProfFlagsAndFns.dataAvailable) {
                    companyProfObj = store[key];

                    if (_ember.default.$.isFunction(successFn)) {
                        successFn();
                    }
                } else {
                    addFnsToArray();
                    companyProfObj = store[key];
                }
            }
            return companyProfObj;
        };

        var checkCompProfDataAvailability = function checkCompProfDataAvailability(exchange, symbol, language) {
            return store[_getKey(exchange, symbol, language)];
        };

        var getCompanyManagement = function getCompanyManagement(exchange, symbol, language) {
            return getCompanyProfile(exchange, symbol, language).get('compManagement');
        };

        var _getKey = function _getKey(exchange, symbol, language) {
            return [exchange, _utils.default.Constants.StringConst.Tilde, symbol, _utils.default.Constants.StringConst.Tilde, language].join('');
        };

        return {
            getCompanyProfile: getCompanyProfile,
            getCompanyManagement: getCompanyManagement,
            createCompanyManagement: createCompanyManagement,
            createCompanyOwners: createCompanyOwners,
            createCompanySubsidiaries: createCompanySubsidiaries,
            checkCompProfDataAvailability: checkCompProfDataAvailability
        };
    };
});
define('universal-app/models/price/data-stores/depth-data-store', ['exports', '../business-entities/depth', '../../../utils/utils'], function (exports, _depth, _utils) {
    'use strict';

    exports.default = function () {
        var depthStore = {};

        var getDepthItem = function getDepthItem(exchange, symbol, depthType) {
            var key = _getKey(exchange, symbol, depthType);
            var depthObj = depthStore[key];

            if (!depthObj) {
                depthObj = _depth.default.create({
                    sym: symbol,
                    exg: exchange,
                    dt: depthType
                });
                depthStore[key] = depthObj;
            }

            return depthObj;
        };

        var _getKey = function _getKey(exchange, symbol, depthType) {
            return [exchange, _utils.default.Constants.StringConst.Tilde, symbol, _utils.default.Constants.StringConst.Tilde, depthType].join('');
        };

        return {
            getDepthItem: getDepthItem
        };
    };
});
define('universal-app/models/price/data-stores/exchange-data-store', ['exports', 'ember', '../business-entities/exchange', '../../../models/shared/shared-service', '../../../utils/utils'], function (exports, _ember, _exchange, _sharedService, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        store: {},

        getExchange: function getExchange(exchange) {
            var store = this.get('store');
            var exchangeObj = store[exchange];

            if (!exchangeObj) {
                store[exchange] = _exchange.default.create({ 'exg': exchange });
            }

            return store[exchange];
        },

        /* *
         * Read exchange metadata from browser storage and load into to memory
         * @param language Current language
         */
        populateExchangeMetadata: function populateExchangeMetadata(language) {
            this.populatePriceMeta(language);
            this.populatePriceExchangeMeta(language);
            this.populatePriceSymbolMeta(language);
        },

        /* *
         * Request for exchange metadata from the server
         * This function will be required only in initializer as it loads metadata from browser storage in pre-initialize-
         * and request for update in post-initialize
         * Other usages simply call to other utility methods like changeLanguage(), getExchangeMetadata() etc.
         * It will invoke required functions to load metadata as per need
         * This function will not check for data availability, instead of this will request with current version
         * @param exchange Exchange to request metadata
         * @param successFn Callback function for success event
         * @param errorFn Callback function for error event
         */
        requestExchangeMetadata: function requestExchangeMetadata(exchange, successFn, errorFn) {
            this.priceService.loadExchangeMetadata([exchange], successFn, errorFn);
            this.priceService.loadExchangeSymbolData([exchange]);
        },

        /* *
         * Request for exchange metadata for multiple all user exchanges from server
         * This function will filter out most required exchanges from total user exchange list based on below algorithm-
         * -to achieve higher performance by reducing unnecessary data loading and processing
         * Filter fo most required exchanges can be modified only from here without affecting other usages
         */
        requestAllExchangeMetadata: function requestAllExchangeMetadata() {
            var userExchanges = this._getUserRequiredExchanges();

            this.priceService.loadExchangeMetadata(userExchanges);
            this.priceService.loadExchangeSymbolData(userExchanges);
        },

        getExchangeMetadata: function getExchangeMetadata(exg, isGlobal, callBackFn) {
            var isUserAllowedGlobal = isGlobal /* && this.priceService.userDS.isPriceUserExchange(exg)*/;

            var successFn = function successFn() {

                if (isUserAllowedGlobal) {
                    _sharedService.default.userSettings.set('price.currentExchange', exg);
                    _sharedService.default.userSettings.set('price.currentIndex', this.getExchange(exg).get('mainIdx'));
                    _sharedService.default.userSettings.save();
                }

                if (_ember.default.$.isFunction(callBackFn)) {
                    callBackFn();
                }
            };

            if (isUserAllowedGlobal) {
                _sharedService.default.userState.globalArgs.exg = exg;
            }

            // Pass callBackFn as error function to allow login while price meta request fails
            this.requestExchangeMetadata(exg, successFn.bind(this), callBackFn);
            _sharedService.default.userSettings.addToFavoriteExgs(exg);
        },

        populatePriceExchangeMeta: function populatePriceExchangeMeta(language) {
            this.priceService.priceExchangeMeta.load(language);
            this.priceService.processPriceExchangeMeta(language);
        },

        populatePriceMeta: function populatePriceMeta(language) {
            this.priceService.priceMeta.load(language);
            this.priceService.processPriceMeta(language);
        },

        populatePriceSymbolMeta: function populatePriceSymbolMeta(language) {
            this.priceService.priceSymbolMeta.load(language);
            this.priceService.processPriceSymbolMeta(language);
        },

        getDefaultSubMarket: function getDefaultSubMarket(exchange) {
            var defSubMkt;
            var exchangeObj = this.getExchange(exchange);
            var subMarkets = exchangeObj.subMarketArray;

            if (subMarkets) {
                _ember.default.$.each(subMarkets, function (key, item) {
                    if (item && item.def === _utils.default.Constants.Yes) {
                        defSubMkt = item;
                        return false;
                    }
                });
            }

            if (defSubMkt) {
                return defSubMkt.marketId;
            } else {
                if (subMarkets && subMarkets.length > 0) {
                    return subMarkets[0].marketId;
                } else {
                    return -1;
                }
            }
        },

        _getUserRequiredExchanges: function _getUserRequiredExchanges() {
            var secondaryExgs = _sharedService.default.userSettings.price.secondaryExchanges;
            var favoriteExgs = _sharedService.default.userSettings.getFavoriteExgs();
            var recentExgs = _sharedService.default.userState.recentExgs;
            var requiredExgs = [_sharedService.default.userSettings.price.userDefaultExg];

            requiredExgs = this._addToRequiredExgs(recentExgs, requiredExgs);

            var tempExgArray = favoriteExgs.length > 0 ? favoriteExgs : secondaryExgs;
            requiredExgs = this._addToRequiredExgs(tempExgArray, requiredExgs);

            return requiredExgs;
        },

        _addToRequiredExgs: function _addToRequiredExgs(exgArray, requiredExgs) {
            var index;

            _ember.default.$.each(exgArray, function (id, exg) {
                index = requiredExgs.indexOf(exg);

                if (index === -1) {
                    requiredExgs[requiredExgs.length] = exg;
                }
            });

            return requiredExgs;
        },

        isSubMarketAvailable: function isSubMarketAvailable(exg) {
            var exchange = this.getExchange(exg);

            return exchange.subMarketArray && exchange.subMarketArray.length > 0;
        },

        updateOffsetTime: function updateOffsetTime(dlsObj) {
            var store = this.get('store');
            var that = this;

            _ember.default.$.each(store, function (key, val) {
                that.setTimeZoneValue(val, dlsObj[val.tzId]);
            });
        },

        setTimeZoneValue: function setTimeZoneValue(exchangeObj, dlsObj) {
            if (dlsObj) {
                var currentDate = new Date();
                var cDate = _utils.default.formatters.formatDateToDisplayDate(currentDate, true);
                var sDate = dlsObj.sDate;
                var eDate = dlsObj.eDate;
                var dls = dlsObj.dls;

                if (cDate >= sDate && cDate <= eDate) {
                    var tzo = exchangeObj.tzo;

                    tzo = tzo + dls;
                    exchangeObj.set('tzo', tzo);
                }
            }
        }
    });
});
define('universal-app/models/price/data-stores/gms-data-store', ['exports', 'ember', '../../../utils/utils', '../price-constants'], function (exports, _ember, _utils, _priceConstants) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        store: {},
        gmsByAssetType: _ember.default.A(),
        gmsSummaryByAssetType: _ember.default.A(),
        currentLanguage: '',
        status: 0,
        summarySymbolKeysByAssetType: {},

        init: function init() {
            this._super();
            this.summarySymbolKeysByAssetType[_priceConstants.default.GmsType.Indices] = ['I:DJI', 'I:SP500', 'I:UKX', 'XU100', 'TASI', 'DFMGI', 'ADI', '11', 'GNRI', 'EGX30'];
            this.summarySymbolKeysByAssetType[_priceConstants.default.GmsType.Commodities] = ['PWTIUSDBR.SP', 'PBROUSDBR.SP', 'PXAUUSDOZ.SP', 'PXAGUSDOZ.SP', 'PXPTUSDOZ.SP', 'EBROUSDBR.SP', 'EWTIUSDBR.SP', 'SXAGUSDOZ.SP', 'SXPTUSDOZ.SP', 'SXAUUSDOZ.SP'];
            this.summarySymbolKeysByAssetType[_priceConstants.default.GmsType.Currencies] = ['EURUSD', 'EURSAR', 'EURAED'];
        },

        getGms: function getGms(exchange, symbol, assetType, instrumentType) {
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);
            var store = this.get('store');
            var gmsObj = this.priceService.stockDS.getStock(exchange, symbol, instrumentType);

            if (!store[key]) {
                this.addToCategory(assetType, gmsObj);
                store[key] = gmsObj;
            }

            return gmsObj;
        },

        sendGmsRequest: function sendGmsRequest(language) {
            var reqStatus = _utils.default.Constants.ReqStatus;

            if (this.currentLanguage !== language) {
                this.currentLanguage = language;
                this.set('status', reqStatus.NotSent);
            }

            if (this.status === reqStatus.NotSent || this.status === reqStatus.Failed) {
                this.priceService.sendGmsSummaryRequest();
                this.set('status', reqStatus.InProgress);
            }
        },

        addToCategory: function addToCategory(assetType, gmsObj) {
            var currentGmsMapByAssetType = this.get('gmsByAssetType');

            if (currentGmsMapByAssetType[assetType]) {
                currentGmsMapByAssetType[assetType].pushObject(gmsObj);
            } else {
                currentGmsMapByAssetType[assetType] = _ember.default.A([gmsObj]);
            }
        },

        getGmsCollectionByAssetType: function getGmsCollectionByAssetType(assetType) {
            var gmsByAssetType = this.get('gmsByAssetType');

            if (!gmsByAssetType[assetType]) {
                gmsByAssetType[assetType] = _ember.default.A([]);
            }

            return gmsByAssetType[assetType];
        },

        getSummaryCollectionByAssetType: function getSummaryCollectionByAssetType(assetType) {
            var summarySymbolKeys = this.summarySymbolKeysByAssetType[assetType];
            var assetSymbols = this.getGmsCollectionByAssetType(assetType);
            var gmsSummaryByAssetType = this.get('gmsSummaryByAssetType');
            var summarySymbols = gmsSummaryByAssetType[assetType];

            if (!summarySymbols) {
                summarySymbols = _ember.default.A([]);
                gmsSummaryByAssetType[assetType] = summarySymbols;
            }

            if (summarySymbols.length === 0) {
                if (summarySymbolKeys !== null) {
                    _ember.default.$.each(assetSymbols, function (prop, gmsObj) {
                        if (summarySymbolKeys.indexOf(gmsObj.sym) > -1) {
                            summarySymbols.pushObject(gmsObj);
                        }
                    });
                }
            }

            return summarySymbols;
        }
    });
});
define('universal-app/models/price/data-stores/option-period-data-store', ['exports', 'ember', '../../../utils/utils', '../business-entities/option-period'], function (exports, _ember, _utils, _optionPeriod) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        store: {},
        periodMap: {},

        getOptionPeriod: function getOptionPeriod(exchange, baseSymbol, optPeriod) {
            var key = _utils.default.keyGenerator.getKey([exchange, baseSymbol].join('~'), optPeriod);
            var currentStore = this.get('store');
            var periodObj = currentStore[key];

            if (!periodObj) {
                periodObj = _optionPeriod.default.create({ sym: baseSymbol, exg: exchange, optPrd: optPeriod });
                currentStore[key] = periodObj;

                this._addToOtherCollection(exchange, baseSymbol, periodObj);
            }

            return periodObj;
        },

        getOptionPeriodList: function getOptionPeriodList(exchange, baseSymbol) {
            return this._getPeriodCollection(exchange, baseSymbol);
        },

        _addToOtherCollection: function _addToOtherCollection(exchange, baseSymbol, periodObj) {
            this._getPeriodCollection(exchange, baseSymbol).pushObject(periodObj);
        },

        _getPeriodCollection: function _getPeriodCollection(exchange, baseSymbol) {
            var periodMap = this.get('periodMap');

            if (!periodMap[exchange]) {
                periodMap[exchange] = {};
            }

            if (!periodMap[exchange][baseSymbol]) {
                periodMap[exchange][baseSymbol] = _ember.default.A();
            }

            return periodMap[exchange][baseSymbol];
        }
    });
});
define('universal-app/models/price/data-stores/option-stock-data-store', ['exports', 'ember', '../../../utils/utils', '../business-entities/option-stock-entity'], function (exports, _ember, _utils, _optionStockEntity) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        store: {},
        stockEntityMap: {},

        getOptionStock: function getOptionStock(exchange, symbol) {
            var currentStore = this.get('store');
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);

            return currentStore[key];
        },

        setOptionStockEntityList: function setOptionStockEntityList(entityList) {
            var that = this;

            if (entityList) {
                _ember.default.$.each(entityList, function (key, val) {
                    var stockEntityObj;
                    var currentStore = that.get('store');
                    var callKey = _utils.default.keyGenerator.getKey(val.optExg, val.cSym);
                    var putKey = _utils.default.keyGenerator.getKey(val.optExg, val.pSym);

                    if (!currentStore[callKey]) {
                        stockEntityObj = _optionStockEntity.default.create({ baseSym: val.sym, trdExg: val.exg, optPrd: val.optPrd,
                            strkPrc: val.strkPrc, nearMon: val.nearMon, optWeek: val.optWeek, optExg: val.optExg });

                        var callStock = that.priceService.stockDS.getStock(val.optExg, val.cSym, _utils.default.AssetTypes.Option);
                        var putStock = that.priceService.stockDS.getStock(val.optExg, val.pSym, _utils.default.AssetTypes.Option);

                        stockEntityObj.set('cStock', callStock);
                        stockEntityObj.set('pStock', putStock);

                        that._addToOtherCollection(val.exg, val.sym, val.optPrd, stockEntityObj);
                    }

                    if (!currentStore[callKey]) {
                        currentStore[callKey] = stockEntityObj;
                    }

                    if (!currentStore[putKey]) {
                        currentStore[putKey] = stockEntityObj;
                    }
                });
            }
        },

        getOptionStockList: function getOptionStockList(exchange, symbol, optPeriod) {
            return optPeriod ? this._getStockCollection(exchange, symbol, optPeriod) : _ember.default.A();
        },

        getDefaultOptionPeriod: function getDefaultOptionPeriod(exchange, symbol) {
            var defaultPeriod;
            var periodList = this.priceService.optionPeriodDS.getOptionPeriodList(exchange, symbol);

            if (periodList.length > 0) {
                defaultPeriod = periodList.sortBy('optPrd')[0];
            }

            return defaultPeriod ? defaultPeriod.optPrd : undefined;
        },

        _addToOtherCollection: function _addToOtherCollection(exchange, symbol, optPeriod, entityObj) {
            this._getStockCollection(exchange, symbol, optPeriod, entityObj);
        },

        _getStockCollection: function _getStockCollection(exchange, symbol, optPeriod, entityObj) {
            var stockEntityMap = this.get('stockEntityMap');

            if (!stockEntityMap[exchange]) {
                stockEntityMap[exchange] = {};
            }

            if (!stockEntityMap[exchange][symbol]) {
                stockEntityMap[exchange][symbol] = {};
            }

            if (!stockEntityMap[exchange][symbol][optPeriod]) {
                stockEntityMap[exchange][symbol][optPeriod] = _ember.default.A();
            }

            if (entityObj) {
                stockEntityMap[exchange][symbol][optPeriod].pushObject(entityObj);
            }

            return stockEntityMap[exchange][symbol][optPeriod];
        }
    });
});
define('universal-app/models/price/data-stores/price-data-store-factory', ['exports', './announcements-data-store', './depth-data-store', './exchange-data-store', '../../chart/data-stores/ohlc-data-store', './stock-data-store', './gms-data-store', './system-meta-data-store', './alert-data-store', './top-stocks-data-store', './company-profile-data-store', './time-and-sales-data-store', './search-data-store', './sector-data-store', './sub-market-data-store', './watch-list-data-store', '../../../config/app-config', './option-stock-data-store', './option-period-data-store'], function (exports, _announcementsDataStore, _depthDataStore, _exchangeDataStore, _ohlcDataStore, _stockDataStore, _gmsDataStore, _systemMetaDataStore, _alertDataStore, _topStocksDataStore, _companyProfileDataStore, _timeAndSalesDataStore, _searchDataStore, _sectorDataStore, _subMarketDataStore, _watchListDataStore, _appConfig, _optionStockDataStore, _optionPeriodDataStore) {
    'use strict';

    exports.default = function () {
        var createAnnouncementDataStore = function createAnnouncementDataStore(priceService) {
            return _announcementsDataStore.default.create({ priceService: priceService, isCachingEnabled: !_appConfig.default.customisation.isMobile });
        };

        var createMarketDepthDataStore = function createMarketDepthDataStore(priceService) {
            return (0, _depthDataStore.default)(priceService);
        };

        var createExchangeDataStore = function createExchangeDataStore(priceService) {
            return _exchangeDataStore.default.create({ priceService: priceService });
        };

        var createOHLCDataStore = function createOHLCDataStore(priceService) {
            var ohlcDataStore = _ohlcDataStore.default.create({ priceService: priceService });
            ohlcDataStore.initialize();

            return ohlcDataStore;
        };

        var createStockDataStore = function createStockDataStore(priceService) {
            var stockDataStore = _stockDataStore.default.create({ priceService: priceService });
            stockDataStore.initialize();

            return stockDataStore;
        };

        var createAlertDataStore = function createAlertDataStore(priceService) {
            return _alertDataStore.default.create({ priceService: priceService });
        };

        var createGMSDataStore = function createGMSDataStore(priceService) {
            return _gmsDataStore.default.create({ priceService: priceService });
        };

        var createSystemMetaDataStore = function createSystemMetaDataStore(priceService) {
            return _systemMetaDataStore.default.create({ priceService: priceService });
        };

        var createTopStockDataStore = function createTopStockDataStore(priceService) {
            return _topStocksDataStore.default.create({ priceService: priceService });
        };

        var createCompanyProfileDataStore = function createCompanyProfileDataStore(priceService) {
            return (0, _companyProfileDataStore.default)(priceService);
        };

        var createTimeAndSalesDataStore = function createTimeAndSalesDataStore(priceService) {
            return _timeAndSalesDataStore.default.create({ priceService: priceService });
        };

        var createSearchDataStore = function createSearchDataStore(priceService) {
            return _searchDataStore.default.create({ priceService: priceService });
        };

        var createSectorDataStore = function createSectorDataStore(priceService) {
            return _sectorDataStore.default.create({ priceService: priceService });
        };

        var createSubMarketDataStore = function createSubMarketDataStore(priceService) {
            return _subMarketDataStore.default.create({ priceService: priceService });
        };

        var createWatchListDataStore = function createWatchListDataStore(priceService) {
            return _watchListDataStore.default.create({ priceService: priceService });
        };

        var createFairValueDataStore = function createFairValueDataStore() {
            // return fairValueDS.create({priceService: priceService});
            return {};
        };

        var createCorporateActionDataStore = function createCorporateActionDataStore() {
            // return corporateActionDS.create({priceService: priceService});
            return {};
        };

        var createTheoreticalChartDataStore = function createTheoreticalChartDataStore() {
            // var theoreticalDS = theoreticalChartDS.create({priceService: priceService});
            // theoreticalDS.initialize();
            //
            // return theoreticalDS;
            return {};
        };

        var createTheoreticalStockDataStore = function createTheoreticalStockDataStore() {
            // return theoreticalStockDS.create({priceService: priceService});
            return {};
        };

        var createOptionStockDataStore = function createOptionStockDataStore(priceService) {
            return _optionStockDataStore.default.create({ priceService: priceService });
        };

        var createOptionPeriodDataStore = function createOptionPeriodDataStore(priceService) {
            return _optionPeriodDataStore.default.create({ priceService: priceService });
        };

        return {
            createAnnouncementDataStore: createAnnouncementDataStore,
            createMarketDepthDataStore: createMarketDepthDataStore,
            createExchangeDataStore: createExchangeDataStore,
            createOHLCDataStore: createOHLCDataStore,
            createStockDataStore: createStockDataStore,
            createAlertDataStore: createAlertDataStore,
            createGMSDataStore: createGMSDataStore,
            createSystemMetaDataStore: createSystemMetaDataStore,
            createTopStockDataStore: createTopStockDataStore,
            createCompanyProfileDataStore: createCompanyProfileDataStore,
            createTimeAndSalesDataStore: createTimeAndSalesDataStore,
            createSearchDataStore: createSearchDataStore,
            createSectorDataStore: createSectorDataStore,
            createSubMarketDataStore: createSubMarketDataStore,
            createWatchListDataStore: createWatchListDataStore,
            createFairValueDataStore: createFairValueDataStore,
            createCorporateActionDataStore: createCorporateActionDataStore,
            createTheoreticalChartDataStore: createTheoreticalChartDataStore,
            createTheoreticalStockDataStore: createTheoreticalStockDataStore,
            createOptionStockDataStore: createOptionStockDataStore,
            createOptionPeriodDataStore: createOptionPeriodDataStore
        };
    }();
});
define('universal-app/models/price/data-stores/search-data-store', ['exports', 'ember', '../../../models/price/business-entities/search-result-item', '../../../config/price-widget-config', '../../../models/price/price-constants', '../../../utils/utils', '../../../models/shared/language/language-data-store'], function (exports, _ember, _searchResultItem, _priceWidgetConfig, _priceConstants, _utils, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        symbolSearchResults: _ember.default.A(),
        recentSearchedItems: _ember.default.A(),
        app: _languageDataStore.default.getLanguageObj(),

        initialFilteredContent: _ember.default.A(),
        initialFilteredMap: {},
        previousSearchNumber: {},

        filterSymbolFromLocalStorage: function filterSymbolFromLocalStorage(searchKey, exclInst, searchNumber) {
            var resultItem, groupingObj;
            var that = this;
            var stocks = this.getStockCollection();
            var config = _priceWidgetConfig.default.globalSearch.groups;
            var priceUser = this.priceService.userDS;

            if (stocks) {
                var filteredContent = _ember.default.$.map(stocks, function (value) {
                    var companyId = value.cid.toString();

                    if ((_utils.default.validators.isAvailable(value.sym) && value.sym.isExist(searchKey) || _utils.default.validators.isAvailable(value.lDes) && value.lDes.isExist(searchKey) || _utils.default.validators.isAvailable(value.sDes) && value.sDes.isExist(searchKey) || _utils.default.validators.isAvailable(value.cid) && companyId.isExist(searchKey)) && _utils.default.validators.isAvailable(value.inst) && (!exclInst || exclInst.length <= 0 || exclInst.indexOf(value.inst) < 0) && value.exg !== 'GLOBAL' && priceUser.isExchangeSubscribed(value.exg)) {

                        // Above line is intentionally left blank to separate conditional statement
                        // TODO: [Eranga G] Instrument types filtering is added temorary in order to avoid duplicating TASI
                        // symbol in search result. This statement can be removed after stopping adding index to stock collection

                        resultItem = _searchResultItem.default.create();
                        groupingObj = config[value.ast] ? config[value.ast] : config.other;

                        resultItem.setData({
                            sym: value.sym,
                            exg: value.exg,
                            dSym: value.dSym,
                            inst: value.inst,
                            lDes: value.lDes,
                            sDes: value.sDes,
                            ast: value.ast,
                            subMkt: value.subMkt,
                            dispProp1: value.get('dispProp1'),
                            groupingObj: groupingObj
                        });

                        var exchange = that.priceService.exchangeDS.getExchange(value.exg);
                        resultItem.set('de', exchange.de ? exchange.de : exchange.exg);

                        return resultItem;
                    }
                });

                if (filteredContent && filteredContent.length > 0) {
                    var mergedContent = this._mergeServerLocalContent(filteredContent, searchNumber);

                    this._groupFilteredContent(mergedContent, searchKey);
                } else {
                    this._setSearchResultUnavailability();
                }
            }
        },

        getStockCollection: function getStockCollection() {
            return this.priceService.stockDS.getStockCollection();
        },

        _groupFilteredContent: function _groupFilteredContent(filteredContent, searchKey) {
            var that = this;
            var hasType, type, groupSetting, assetType, resultArray, priority;
            var config = _priceWidgetConfig.default.globalSearch.groups;
            var resultLimit = _priceWidgetConfig.default.globalSearch.maxResultsForGroup;

            _ember.default.$.each(filteredContent, function (key, item) {
                assetType = item.get('ast');
                groupSetting = config[assetType] ? config[assetType] : config.other;

                /* if (item.sym.isExactMatch(searchKey) || item.lDes.isExactMatch(searchKey) || item.sDes.isExactMatch(searchKey)) {
                 groupSetting = config.topHits;
                 } else if (item.sym.isStartedWith(searchKey) || item.lDes.isStartedWith(searchKey) || item.sDes.isStartedWith(searchKey)) {
                 hasStartingChar = true;
                 }*/

                // TODO: [Nipun] Top Hits implementation should be done

                if (_utils.default.validators.isAvailable(item.sym) && item.sym.isExactMatch(searchKey)) {
                    priority = 1;
                } else if (_utils.default.validators.isAvailable(item.sDes) && item.sDes.isExactMatch(searchKey)) {
                    priority = 2;
                } else if (_utils.default.validators.isAvailable(item.lDes) && item.lDes.isExactMatch(searchKey)) {
                    priority = 3;
                } else if (_utils.default.validators.isAvailable(item.sym) && item.sym.isStartedWith(searchKey)) {
                    priority = 4;
                } else if (_utils.default.validators.isAvailable(item.sDes) && item.sDes.isStartedWith(searchKey)) {
                    priority = 5;
                } else if (_utils.default.validators.isAvailable(item.lDes) && item.lDes.isStartedWith(searchKey)) {
                    priority = 6;
                } else {
                    priority = 7;
                }

                type = groupSetting.type;
                hasType = that.symbolSearchResults.findBy('type', type);

                if (!hasType) {
                    that.symbolSearchResults.pushObject(_ember.default.Object.create({
                        type: type,
                        rank: groupSetting.rank,
                        name: that.app.lang.labels[groupSetting.lanKey],
                        colorCss: groupSetting.colorCss,
                        contents: _ember.default.A()
                    }));
                }

                resultArray = that.symbolSearchResults.findBy('type', type).get('contents');

                item.set('priority', priority);
                resultArray.pushObject(item);

                if (resultArray.length > resultLimit) {
                    resultArray.pop();
                }
            });

            _ember.default.$.each(this.symbolSearchResults, function (key, item) {
                item.set('contents', item.get('contents').sortBy('priority'));
            });

            var sortedSymbolSearchResult = this.symbolSearchResults.sortBy('rank');

            this.symbolSearchResults.clear();
            this.symbolSearchResults.pushObjects(sortedSymbolSearchResult);
        },

        _setSearchResultUnavailability: function _setSearchResultUnavailability() {
            if (this.symbolSearchResults.length === 0) {
                this.symbolSearchResults.pushObject(_ember.default.Object.create({
                    isDataUnavailable: true
                }));
            }
        },

        _mergeServerLocalContent: function _mergeServerLocalContent(filteredContent, searchNumber) {
            var that = this;
            this.symbolSearchResults.clear();

            if (this.previousSearchNumber !== searchNumber) {
                this.initialFilteredContent.clear();
                this.initialFilteredMap = {};
                this.previousSearchNumber = searchNumber;
            }

            if (this.initialFilteredContent.length > 0) {
                _ember.default.$.each(filteredContent, function (key, item) {
                    var itemKey = [item.sym, item.exg].join('~');

                    if (!that.initialFilteredMap[itemKey]) {
                        that.initialFilteredContent.pushObject(item);
                    }
                });
            } else {
                _ember.default.$.each(filteredContent, function (key, item) {
                    var itemKey = [item.sym, item.exg].join('~');
                    that.initialFilteredMap[itemKey] = item;
                });

                this.initialFilteredContent.pushObjects(filteredContent);
            }

            return this.initialFilteredContent;
        },

        getSymbolSearchResults: function getSymbolSearchResults() {
            return this.symbolSearchResults;
        },

        filterSymbolSearchResults: function filterSymbolSearchResults(searchKey, language, exclInst, params) {
            this.symbolSearchResults.clear();

            var searchNumber = Math.random();
            var userDataStore = this.priceService.userDS;

            this.filterSymbolFromLocalStorage(searchKey, exclInst, searchNumber);

            if (userDataStore.get('isMultipleUserExchangesAvailable') || userDataStore.isNonDefaultExchangesAvailable()) {
                this.priceService.sendSymbolSearchRequest(searchKey, language, _priceConstants.default.SymbolSearchPageSize, this.getFilteredContentFromServer.bind(this), params, searchNumber);
            }
        },

        getFilteredContentFromServer: function getFilteredContentFromServer(isSuccess, searchKey, content, searchNumber) {
            if (isSuccess) {
                var mergedContent = this._mergeServerLocalContent(content, searchNumber);
                this._groupFilteredContent(mergedContent, searchKey);
            } else {
                this._setSearchResultUnavailability();
            }
        },

        addRecentSearchedItem: function addRecentSearchedItem(searchedItem) {
            if (searchedItem.sym) {
                var isAvailableInRecentArray = false;

                _ember.default.$.each(this.recentSearchedItems, function (key, recentSymbol) {
                    if (recentSymbol.sym === searchedItem.sym) {
                        isAvailableInRecentArray = true;
                    }
                });

                if (!isAvailableInRecentArray) {
                    this.recentSearchedItems.pushObject(searchedItem);
                }
            }
        },

        getRecentSearchedItems: function getRecentSearchedItems() {
            return this.recentSearchedItems;
        }
    });
});
define('universal-app/models/price/data-stores/sector-data-store', ['exports', 'ember', '../business-entities/sector', '../../../utils/utils'], function (exports, _ember, _sector, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        store: {},
        sectorMapByExg: {},

        getSector: function getSector(exchange, secCode) {
            var key = _utils.default.keyGenerator.getKey(exchange, secCode);
            var currentStore = this.get('store');
            var sectorObj = currentStore[key];

            if (!sectorObj) {
                sectorObj = _sector.default.create({
                    sec: secCode
                });

                this.addToOtherCollections(exchange, sectorObj);
                currentStore[key] = sectorObj;
            }

            return sectorObj;
        },

        addToOtherCollections: function addToOtherCollections(exchange, sectorObj) {
            var currentStockMapByExg = this.get('sectorMapByExg');

            if (currentStockMapByExg[exchange]) {
                currentStockMapByExg[exchange].pushObject(sectorObj);
            } else {
                currentStockMapByExg[exchange] = _ember.default.A([sectorObj]);
            }
        },

        getSectorCollectionByExchange: function getSectorCollectionByExchange(exchange) {
            var sectorMapByExg = this.get('sectorMapByExg');

            if (!sectorMapByExg[exchange]) {
                sectorMapByExg[exchange] = _ember.default.A([]);
            }

            return sectorMapByExg[exchange];
        },

        addSectors: function addSectors(sectorArray) {
            var that = this;
            var sortedSectorArray = sectorArray.sortBy('desc');

            _ember.default.$.each(sortedSectorArray, function (key, val) {
                var sectorObj = that.getSector(val.exg, val.sec);

                sectorObj.setData({
                    des: _utils.default.formatters.convertUnicodeToNativeString(val.desc)
                });
            });
        }
    });
});
define('universal-app/models/price/data-stores/stock-data-store', ['exports', 'ember', '../business-entities/stock', '../../../config/price-widget-config', '../../../utils/utils', '../price-constants', '../../../config/app-config'], function (exports, _ember, _stock, _priceWidgetConfig, _utils, _priceConstants, _appConfig) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        subscriptionKey: 'stockDS',
        store: {},
        stockMapByExg: {},
        indexMapByExg: {},
        stockMapBySubMkt: {},
        assetTypesByExg: {},
        commoditiesCollection: _ember.default.A(),

        // Symbol Validation Params
        validationStockMap: {},
        isBulkAdditionInProgress: false,
        validationArrayMaxLength: 100,
        symbolValidationInterval: 1000, // 1 second
        counterMapByExg: {},
        stockPool: {},

        initialize: function initialize() {
            this.priceService.subscribeFullMarketReceived(this.get('subscriptionKey'), this);
        },

        getStock: function getStock(exchange, symbol, instype, subMarket, symbolStatus) {
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);
            var currentStore = this.get('store');
            var symbolObj = currentStore[key];
            var isAdded = false;

            if (!symbolObj) {
                var counterMapByExg = this.get('counterMapByExg');
                var stockPool = this.get('stockPool');

                if (!counterMapByExg[exchange]) {
                    counterMapByExg[exchange] = 0;
                }

                var counter = counterMapByExg[exchange];
                var symStat = symbolStatus || _priceConstants.default.SymbolStatus.Available;

                if (stockPool[exchange] && counter < stockPool[exchange].length && !_utils.default.AssetTypes.isIndices(instype)) {
                    symbolObj = stockPool[exchange][counter];
                    symbolObj.setData({ sym: symbol, exg: exchange, inst: instype, subMkt: subMarket, dSym: symbol, lDes: symbol, sDes: symbol, symStat: symStat });

                    if (_utils.default.validators.isAvailable(symbol)) {
                        counterMapByExg[exchange] = counter + 1;
                    }

                    isAdded = true;
                } else {
                    symbolObj = _stock.default.create({ sym: symbol, exg: exchange, inst: instype, subMkt: subMarket, dSym: symbol, lDes: symbol, sDes: symbol, symStat: symStat });
                }

                currentStore[key] = symbolObj;

                if (instype !== undefined && _utils.default.validators.isAvailable(symbol)) {
                    this.addToOtherCollections(exchange, instype, symbolObj, subMarket, isAdded);
                }

                if (!this.get('isBulkAdditionInProgress')) {
                    var validationStore = this.get('validationStockMap');
                    validationStore[key] = symbolObj;
                }
            }

            return symbolObj;
        },

        getCommodity: function getCommodity(exchange, symbol) {
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);
            var currentStore = this.get('store');
            var symbolObj = currentStore[key];

            if (!symbolObj) {
                var commodity = _priceWidgetConfig.default.gms.findBy('sym', symbol);
                var commodities = this.get('commoditiesCollection');

                symbolObj = _stock.default.create({ sym: symbol, exg: exchange, dSym: symbol, lDes: symbol, sDes: symbol });
                symbolObj.icon = commodity.icon;
                commodities.pushObject(symbolObj);
                currentStore[key] = symbolObj;
            }

            return symbolObj;
        },

        initializeSymbolValidation: function initializeSymbolValidation() {
            var that = this;

            setTimeout(function () {
                that.validateSymbolsPeriodically();
            }, that.get('symbolValidationInterval'));
        },

        validateSymbolsPeriodically: function validateSymbolsPeriodically() {
            var that = this;
            var stockArray = [];
            var stockMap = that.get('validationStockMap');
            var count = 0;

            _ember.default.$.each(stockMap, function (key, val) {
                if (val) {
                    stockArray[stockArray.length] = val;
                    count++;

                    if (count === that.get('validationArrayMaxLength')) {
                        that.priceService.sendSymbolValidationBulkRequest(stockArray);
                        stockArray = [];
                        count = 0;
                    }
                }
            });

            if (stockArray.length > 0) {
                this.priceService.sendSymbolValidationBulkRequest(stockArray);
            }

            that.set('validationStockMap', {});

            setTimeout(function () {
                that.validateSymbolsPeriodically();
            }, that.get('symbolValidationInterval'));
        },

        removeFromValidationStockMap: function removeFromValidationStockMap(exchange, symbol) {
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);
            var validationStockMap = this.get('validationStockMap');

            if (validationStockMap[key]) {
                validationStockMap[key] = undefined;
            }
        },

        setAnnouncement: function setAnnouncement(annObj) {
            var exchange = annObj.exg;
            var symbol = annObj.sym;

            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var stockObj = this.getStock(exchange, symbol);

                if (stockObj && (!_stock.default.lAnn || stockObj.lAnn.dateObj > annObj.dateObj)) {
                    stockObj.set('lAnn', annObj);
                    stockObj.set('ann', annObj.get('dHed'));
                }
            }
        },

        addToOtherCollections: function addToOtherCollections(exchange, instype, stockObj, subMarket, isAdded) {
            var store = _utils.default.AssetTypes.isIndices(instype) ? this.get('indexMapByExg') : this.get('stockMapByExg');

            if (!store[exchange]) {
                store[exchange] = _ember.default.A();
            }

            if (!isAdded && stockObj.isActive()) {
                store[exchange].pushObject(stockObj);
            }

            if (!_utils.default.AssetTypes.isIndices(instype) && subMarket) {
                this.addToSubMarketStore(stockObj, exchange, subMarket);
            }

            this.addAssetType(exchange, instype, stockObj);
        },

        addToSubMarketStore: function addToSubMarketStore(stockObj, exchange, subMarket) {
            var store = this.get('stockMapBySubMkt');

            if (!store[exchange]) {
                store[exchange] = {};
            }

            if (!store[exchange][subMarket]) {
                store[exchange][subMarket] = _ember.default.A();
            }

            if (stockObj.isActive()) {
                store[exchange][subMarket].pushObject(stockObj);
            }
        },

        addAssetType: function addAssetType(exchange, instype, stockObj) {
            // Populate the unique instrument type array
            var isNoSubMarket = !stockObj.subMkt;
            var currentInstMapByExg = this.get('assetTypesByExg');
            var assetType, assetTypeDescription;

            if (_appConfig.default.customisation.isGroupByAssetType) {
                assetType = _utils.default.AssetTypes.InstrumentToAssetMapping[instype];
                assetTypeDescription = _utils.default.AssetTypes.AssetLangKeys[assetType];
            } else {
                assetType = instype;
                assetTypeDescription = _utils.default.AssetTypes.InstrumentLangKeys[instype];
            }

            if (currentInstMapByExg[exchange]) {
                var arrInstTypes = currentInstMapByExg[exchange];
                var found = false;

                for (var a = 0; a < arrInstTypes.length; a++) {
                    if (arrInstTypes[a].inst === assetType) {
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    arrInstTypes.pushObject({ inst: assetType, desc: assetTypeDescription, isNoSubMarket: isNoSubMarket });
                }
            } else {
                currentInstMapByExg[exchange] = _ember.default.A([{ inst: assetType, desc: assetTypeDescription, isNoSubMarket: isNoSubMarket }]);
            }
        },

        getIndexCollectionByExchange: function getIndexCollectionByExchange(exchange) {
            var indexMapByExg = this.get('indexMapByExg');

            if (!indexMapByExg[exchange]) {
                indexMapByExg[exchange] = _ember.default.A([]);
            }

            return indexMapByExg[exchange];
        },

        getSymbolCollectionByExchange: function getSymbolCollectionByExchange(exchange) {
            var stockMapByExg = this.get('stockMapByExg');

            if (!stockMapByExg[exchange]) {
                this._createEmptyStockArray(stockMapByExg, exchange);
            }

            return stockMapByExg[exchange];
        },

        onFullMarketSnapshotReceived: function onFullMarketSnapshotReceived(exchange) {
            this._removeInactiveStocks(this.get('stockMapByExg')[exchange]);

            var that = this;
            var stocksBySubMkt = this.get('stockMapBySubMkt')[exchange];

            if (stocksBySubMkt) {
                _ember.default.$.each(stocksBySubMkt, function (subMkt) {
                    that._removeInactiveStocks(stocksBySubMkt[subMkt]);
                });
            }
        },

        _removeInactiveStocks: function _removeInactiveStocks(stockArray) {
            if (stockArray) {
                var arrayLength = stockArray.length;

                for (var i = arrayLength - 1; i >= 0; i--) {
                    if (!stockArray[i].isActive()) {
                        stockArray.splice(i, 1);
                    }
                }
            }
        },

        _createEmptyStockArray: function _createEmptyStockArray(stockMapByExg, exchange) {
            var stockPool = this.get('stockPool');
            var symbolObj;

            stockMapByExg[exchange] = _ember.default.A([]);
            stockPool[exchange] = _ember.default.A([]);

            for (var count = 0; count < 25; count++) {
                symbolObj = _stock.default.create({ sym: '', exg: '', dSym: '' });
                stockMapByExg[exchange].pushObject(symbolObj);
                stockPool[exchange].pushObject(symbolObj);
            }
        },

        getAssetTypeCollectionByExchange: function getAssetTypeCollectionByExchange(exchange) {
            var assetTypeMapByExg = this.get('assetTypesByExg');

            if (!assetTypeMapByExg[exchange]) {
                assetTypeMapByExg[exchange] = _ember.default.A([]);
            }

            return assetTypeMapByExg[exchange];
        },

        getStockCollection: function getStockCollection() {
            return this.get('store');
        },

        getStockCollectionBySubMarket: function getStockCollectionBySubMarket(exchange, subMkt) {
            var store = this.get('stockMapBySubMkt');

            if (!store[exchange]) {
                store[exchange] = {};
            }

            if (!store[exchange][subMkt]) {
                store[exchange][subMkt] = _ember.default.A();
            }

            return store[exchange][subMkt];
        },

        beginBulkSymbolAddition: function beginBulkSymbolAddition() {
            this.set('isBulkAdditionInProgress', true);
        },

        endBulkSymbolAddition: function endBulkSymbolAddition() {
            this.set('isBulkAdditionInProgress', false);
        }
    });
});
define('universal-app/models/price/data-stores/sub-market-data-store', ['exports', 'ember', '../business-entities/sub-market', '../../../utils/utils'], function (exports, _ember, _subMarket, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        store: {},
        subMktMapByExg: {},

        getSubMarket: function getSubMarket(exchange, subMktCode) {
            var key = _utils.default.keyGenerator.getKey(exchange, subMktCode);
            var currentStore = this.get('store');
            var subMktObj = currentStore[key];

            if (!subMktObj) {
                subMktObj = _subMarket.default.create({
                    marketId: subMktCode
                });

                if (_utils.default.validators.isAvailable(subMktCode)) {
                    this.addToOtherCollections(exchange, subMktObj);
                }

                currentStore[key] = subMktObj;
            }

            return subMktObj;
        },

        addToOtherCollections: function addToOtherCollections(exchange, subMktObj) {
            var subMktMapByExg = this.get('subMktMapByExg');

            if (subMktMapByExg[exchange]) {
                subMktMapByExg[exchange].pushObject(subMktObj);
            } else {
                subMktMapByExg[exchange] = _ember.default.A([subMktObj]);
            }
        },

        getSubMarketCollectionByExchange: function getSubMarketCollectionByExchange(exchange) {
            var subMktMapByExg = this.get('subMktMapByExg');

            if (!subMktMapByExg[exchange]) {
                subMktMapByExg[exchange] = _ember.default.A([]);
            }

            return subMktMapByExg[exchange];
        }
    });
});
define("universal-app/models/price/data-stores/system-data-store", [], function () {
  "use strict";
});
define('universal-app/models/price/data-stores/system-meta-data-store', ['exports', 'ember', '../../../utils/utils', '../business-entities/day-light-saving'], function (exports, _ember, _utils, _dayLightSaving) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        store: {},
        typeMap: { DLS_TZ: _dayLightSaving.default },

        getSystemMetaDataByKey: function getSystemMetaDataByKey(type, key) {
            var store = this.get('store');
            var typeMap = this.get('typeMap');

            this._initType(store, type);

            if (!store[type][key]) {
                store[type][key] = typeMap[type].create();
            }

            return store[type][key];
        },

        getSystemMetaDataByType: function getSystemMetaDataByType(type) {
            var store = this.get('store');
            this._initType(store, type);

            return store[type];
        },

        _initType: function _initType(obj, type) {
            if (!obj[type]) {
                obj[type] = {};
            }
        }
    });
});
define('universal-app/models/price/data-stores/time-and-sales-data-store', ['exports', 'ember', '../business-entities/trade', '../../../utils/utils'], function (exports, _ember, _trade, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        tradesMapBySymbolExchange: {},
        lastTradeMapByKey: {},
        symSubscriptions: {},

        getNewTrade: function getNewTrade(exchange, symbol, seq) {
            var tradeObj;
            var tradeStore = this.isSubscribed(_utils.default.keyGenerator.getKey(exchange, symbol)) ? this.getTradeCollection(exchange, symbol) : this.isSubscribed(exchange) ? this.getTradeCollection(exchange) : undefined;
            var lastTrade = this.getLastTrade(exchange, symbol);

            if (!lastTrade || lastTrade.seq < seq) {
                // Check real-time path duplications
                if (tradeStore && (tradeStore.isDuplicateRemoved || tradeStore.backlog.length === 0 || tradeStore.backlog[0].seq < seq)) {
                    tradeObj = _trade.default.create({ sym: symbol, exg: exchange, seq: seq });

                    tradeStore.realTime.unshiftObject(tradeObj);
                    tradeStore.isDuplicateRemoved = true;
                }
            } else {
                _utils.default.logger.logError('Realtime path duplicate removed');
            }

            return tradeObj;
        },

        getBacklogTrade: function getBacklogTrade(exchange, symbol, seq) {
            var tradeObj, tradeStore;

            tradeStore = this.getTradeCollection(exchange, symbol);
            tradeObj = tradeStore.backlog[tradeStore.backlogIndex];

            if (!tradeObj) {
                if (!tradeStore.isFirstBatch || tradeStore.realTime.length === 0 || tradeStore.realTime[0].seq > seq) {
                    tradeObj = _trade.default.create({ sym: symbol, exg: exchange, seq: seq });
                    tradeStore.backlog[tradeStore.backlogIndex] = tradeObj;
                } else {
                    return undefined;
                }
            }

            tradeStore.backlogIndex++;

            return tradeObj;
        },

        getBacklogEmptyRecord: function getBacklogEmptyRecord(exchange, symbol, index) {
            var tradeObj;

            if (exchange) {
                tradeObj = _trade.default.create({ isEmpty: true });
                this.getTradeCollection(exchange, symbol).backlog[index] = tradeObj;
            }

            return tradeObj;
        },

        isSubscribed: function isSubscribed(key) {
            var subscription = this.get('symSubscriptions')[key];

            return subscription && subscription.subsCount > 0;
        },

        getLastTrade: function getLastTrade(exchange, symbol) {
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);
            var lastTradeStore = this.get('lastTradeMapByKey');
            return lastTradeStore[key];
        },

        setLastTrade: function setLastTrade(exchange, symbol, tradeObj) {
            var key = _utils.default.keyGenerator.getKey(exchange, symbol);
            var lastTradeStore = this.get('lastTradeMapByKey');
            var lastTrade = lastTradeStore[key];

            if (!lastTrade) {
                lastTrade = tradeObj;
                lastTradeStore[key] = lastTrade;
            }

            if (lastTrade.seq <= tradeObj.seq) {
                lastTradeStore[key] = tradeObj;
            }
        },

        getTradeCollection: function getTradeCollection(exchange, symbol) {
            var key = exchange;

            if (symbol !== undefined) {
                key = _utils.default.keyGenerator.getKey(exchange, symbol);
            }

            var currentStore = this.get('tradesMapBySymbolExchange');
            var tradeCollection = currentStore[key];

            if (!tradeCollection) {
                tradeCollection = {};
                currentStore[key] = tradeCollection;

                tradeCollection.realTime = _ember.default.A([]);
                tradeCollection.backlog = _ember.default.A([]);
                tradeCollection.backlogLen = 0;
                tradeCollection.backlogIndex = 0;
                tradeCollection.isDuplicateRemoved = false;
                tradeCollection.isFirstBatch = true;
            }

            return tradeCollection;
        },

        subscribeSymTS: function subscribeSymTS(exg, sym, wkey, controller) {
            var key = exg;

            if (sym !== undefined) {
                key = _utils.default.keyGenerator.getKey(exg, sym);
            }

            var symSubscriptions = this.get('symSubscriptions');
            var subscription = symSubscriptions[key];

            if (!subscription) {
                subscription = { subsCount: 0, subscribers: {} };
                symSubscriptions[key] = subscription;
            }

            subscription.subsCount = subscription.subsCount + 1;
            subscription.subscribers[wkey] = controller;
        },

        unSubscribeSymTS: function unSubscribeSymTS(exg, sym, wkey) {
            var subKey = exg;

            if (sym !== undefined) {
                subKey = _utils.default.keyGenerator.getKey(exg, sym);
            }

            var symSubscriptions = this.get('symSubscriptions');

            if (symSubscriptions && symSubscriptions[subKey]) {
                var subscription = symSubscriptions[subKey];

                subscription.subsCount = subscription.subsCount - 1;
                subscription.subscribers[wkey] = undefined;

                if (subscription.subsCount === 0) {
                    this._removeTradeCollection(subKey);
                }
            }
        },

        setBacklogLength: function setBacklogLength(exg, sym, backlogLen) {
            var tradeCollection = this.getTradeCollection(exg, sym);

            if (tradeCollection && backlogLen > tradeCollection.backlogLen) {
                tradeCollection.backlogLen = backlogLen;
            }
        },

        onBacklogDataReady: function onBacklogDataReady(exg, sym) {
            var key = sym !== undefined ? _utils.default.keyGenerator.getKey(exg, sym) : exg;
            var subscription = this.get('symSubscriptions')[key];

            if (subscription && subscription.subscribers) {
                _ember.default.$.each(subscription.subscribers, function (id, subscriber) {
                    if (subscriber && _ember.default.$.isFunction(subscriber.onBacklogDataReady)) {
                        subscriber.onBacklogDataReady();
                    }
                });
            } else if (subscription && !subscription.subscribers) {
                this._removeTradeCollection(key);
            }

            var tradeCollection = this.getTradeCollection(exg, sym);
            tradeCollection.isFirstBatch = false;
        },

        _removeTradeCollection: function _removeTradeCollection(key) {
            var currentStore = this.get('tradesMapBySymbolExchange');

            if (currentStore) {
                currentStore[key] = undefined;
            }
        }
    });
});
define('universal-app/models/price/data-stores/top-stocks-data-store', ['exports', 'ember', '../business-entities/topstock'], function (exports, _ember, _topstock) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        topStocksMapByExgs: {},
        defaultSubMarket: -1,

        createTopStocks: function createTopStocks(exchange, type, topStocks, subMarket) {
            // Sub market is last argument because it will not available in some exchanges so it will be optional
            var that = this;
            var topStocksMapByExg = this.get('topStocksMapByExgs');
            var topStocksForExg = topStocksMapByExg[exchange] ? topStocksMapByExg[exchange] : {};
            var subMkt = subMarket ? subMarket : this.defaultSubMarket;
            var topStocksForSubMkt = topStocksForExg[subMkt] ? topStocksForExg[subMkt] : {};
            var topStockArr = topStocksForSubMkt[type] ? topStocksForSubMkt[type] : _ember.default.A([]);

            if (topStocks && topStocks.length > 0) {
                _ember.default.$.each(topStocks, function (index, topVal) {
                    var tempObj = topStockArr.objectAt(index);
                    var valueObj = _ember.default.Object.create(topVal);

                    if (tempObj === undefined) {
                        tempObj = _topstock.default.create();
                        topStockArr.pushObject(tempObj);
                    }

                    valueObj.set('stock', that.priceService.stockDS.getStock(exchange, topVal.sym));
                    tempObj.set('val', valueObj);
                });

                if (topStockArr.length > topStocks.length) {
                    topStockArr.removeAt(topStocks.length, topStockArr.length - topStocks.length);
                }
            } else {
                topStockArr.clear();
            }

            topStocksForSubMkt[type] = topStockArr;
            topStocksForExg[subMkt] = topStocksForSubMkt;
            topStocksMapByExg[exchange] = topStocksForExg;
        },

        getTopStocksCollectionByType: function getTopStocksCollectionByType(exchange, type, subMarket) {
            var topStocksMapByExg = this.get('topStocksMapByExgs');
            var subMkt = subMarket ? subMarket : this.defaultSubMarket;

            if (!topStocksMapByExg[exchange] || !topStocksMapByExg[exchange][subMkt] || !topStocksMapByExg[exchange][subMkt][type]) {
                this.createTopStocks(exchange, type, [], subMarket);
            }

            return topStocksMapByExg[exchange][subMkt][type];
        }
    });
});
define('universal-app/models/price/data-stores/watch-list-data-store', ['exports', 'ember', '../../../models/shared/shared-service', '../../../utils/utils'], function (exports, _ember, _sharedService, _utils) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        myFavouritesIndex: 0,
        myFavouritesKey: 'myFavourites',
        customWatchListKey: 'customWL',
        customWatchListArray: _ember.default.A([]),
        customWatchListColumnArray: _ember.default.A([{ id: 0, name: 'My Favourites', classicColumnArray: _ember.default.A(), defaultColumnArray: _ember.default.A() }]),

        watchListTypes: {
            fullMarket: 'fullMarket',
            customWL: 'customWL',
            portfolio: 'portfolio'
        },

        loadCustomWatchLists: function loadCustomWatchLists() {
            return this.priceService.priceUserData[this.customWatchListKey];
        },

        initializeCustomColumnArray: function initializeCustomColumnArray(widgetArgsKey) {
            var columnState = _sharedService.default.userState.getWidgetState(widgetArgsKey);

            if (columnState && columnState.customWatchListColumnArray) {
                this.set('customWatchListColumnArray', columnState.customWatchListColumnArray);
            }
        },

        getCustomWLArray: function getCustomWLArray() {
            return this.get('customWatchListArray');
        },

        getCustomWatchListColumnArray: function getCustomWatchListColumnArray() {
            return this.get('customWatchListColumnArray');
        },

        initializeCustomWL: function initializeCustomWL() {
            var customWatchListArray = this.get('customWatchListArray');

            if (customWatchListArray.length === 0) {
                var savedCustomWL = this.loadCustomWatchLists();
                var favouriteData = { id: this.get('myFavouritesIndex'), key: this.get('myFavouritesKey'), stkArray: _ember.default.A() };

                if (savedCustomWL) {
                    if (savedCustomWL[favouriteData.key] && savedCustomWL[favouriteData.key].key === favouriteData.key) {
                        customWatchListArray.pushObject(savedCustomWL[favouriteData.key]);
                    } else {
                        customWatchListArray.pushObject(favouriteData);
                    }

                    _ember.default.$.each(savedCustomWL, function (key, custWatchlist) {
                        if (key !== favouriteData.key) {
                            custWatchlist.id = customWatchListArray.length;
                            customWatchListArray[customWatchListArray.length] = custWatchlist;
                        }
                    });
                } else {
                    customWatchListArray.pushObject(favouriteData);

                    if (!_utils.default.validators.isAvailable(savedCustomWL) || !_utils.default.validators.isAvailable(savedCustomWL[favouriteData.key])) {
                        this._removeCustomWlActiveCss(favouriteData);
                    }
                }

                if (customWatchListArray && customWatchListArray.length > 0) {
                    _ember.default.$.each(customWatchListArray, function (key, cusWatchlist) {
                        if (cusWatchlist && cusWatchlist.activeClass === 'active') {
                            _ember.default.set(cusWatchlist, 'activeClass', '');
                        }
                    });
                }
            }
        },

        addNewWatchList: function addNewWatchList(name) {
            var newWatchList;
            var isWatchListAvailable = false;
            var customWatchLists = this.get('customWatchListArray');

            if (_utils.default.validators.isAvailable(name)) {
                isWatchListAvailable = this.isCustomWatchListAvailable(name, customWatchLists);

                if (!isWatchListAvailable) {
                    var newWatchListColumns = this.get('customWatchListColumnArray');
                    newWatchList = { id: customWatchLists.length, name: name, stkArray: _ember.default.A() };

                    customWatchLists.insertAt(customWatchLists.length, newWatchList);
                    newWatchListColumns.insertAt(newWatchListColumns.length, { id: newWatchListColumns.length, name: name, classicColumnArray: _ember.default.A(), defaultColumnArray: _ember.default.A() });

                    this._removeCustomWlActiveCss(newWatchList);
                }
            }

            return isWatchListAvailable ? isWatchListAvailable : customWatchLists[customWatchLists.length - 1].id;
        },

        deleteWL: function deleteWL(watchListId) {
            var customWatchLists = this.get('customWatchListArray');
            var customWatchListColumns = this.get('customWatchListColumnArray');
            var currentCustomWLId = watchListId;
            var myFavouritesIndex = this.get('myFavouritesIndex');
            var that = this;

            if (currentCustomWLId && currentCustomWLId !== myFavouritesIndex && currentCustomWLId < customWatchLists.length) {
                if (customWatchLists[currentCustomWLId]) {
                    this._deleteCustomWatchList(customWatchLists[currentCustomWLId].name);
                    customWatchLists.removeAt(currentCustomWLId);
                }

                if (customWatchListColumns[currentCustomWLId]) {
                    customWatchListColumns.removeAt(currentCustomWLId);
                    _sharedService.default.userState.save();
                }

                // Make id and the index same
                _ember.default.$.each(customWatchLists, function (index, watchlist) {
                    if (watchlist) {
                        _ember.default.set(watchlist, 'id', index);
                        that._removeCustomWlActiveCss(watchlist);
                    }
                });

                _ember.default.$.each(customWatchListColumns, function (index, watchlistColumns) {
                    if (watchlistColumns) {
                        _ember.default.set(watchlistColumns, 'id', index);
                    }
                });
            }
        },

        renameCustomWatchList: function renameCustomWatchList(name, currentWatchListId) {
            var customWatchLists = this.get('customWatchListArray');
            var currentCustomWLId = currentWatchListId;
            var myFavouritesIndex = this.get('myFavouritesIndex');
            var isCustomWatchListAvailable = this.isCustomWatchListAvailable(name, customWatchLists);

            if (!isCustomWatchListAvailable && currentCustomWLId && currentCustomWLId !== myFavouritesIndex && currentCustomWLId < customWatchLists.length) {
                var watchList = customWatchLists[currentCustomWLId];
                this._deleteCustomWatchList(watchList.name);

                _ember.default.set(watchList, 'name', name);
                this._removeCustomWlActiveCss(watchList);
            }

            return !isCustomWatchListAvailable;
        },

        addStocksToCustomWL: function addStocksToCustomWL(stock, watchListId) {
            var stockFromStore = this.priceService.stockDS.getStock(stock.exg, stock.sym, stock.inst);
            var watchList = this.get('customWatchListArray')[watchListId];
            var stockArray = watchList.stkArray;
            var watchListName = watchList.name;
            var isStockAlreadyAdded = false;

            _ember.default.$.each(stockArray, function (id, stockAdded) {
                var stkKey = stockAdded.sym ? stockAdded.sym + _utils.default.Constants.StringConst.Tilde + stockAdded.exg : stockAdded.get('key'); // Access method is diff, newly added stk and saved stk

                if (stkKey === stockFromStore.get('key')) {
                    isStockAlreadyAdded = true;
                    _ember.default.set(stockAdded, 'isSelected', true);
                } else {
                    _ember.default.set(stockAdded, 'isSelected', false);
                }
            });

            if (isStockAlreadyAdded) {
                _sharedService.default.getService('priceUI').notifyAddToWatchList(stockFromStore, watchListName, true);
            } else {
                _ember.default.set(stockFromStore, 'isSelected', true);
                stockArray.pushObject(stockFromStore);

                _sharedService.default.getService('priceUI').notifyAddToWatchList(stockFromStore, watchListName);
                this._removeCustomWlActiveCss(watchList);
            }

            this._saveCustomWatchList(watchList.key ? watchList.key : watchList.name, watchList); // Favourites WL is saved by lang key
        },

        deleteSymbol: function deleteSymbol(stock, watchListId) {
            var deletedId = -1;
            var symbolKey = _utils.default.keyGenerator.getKey(stock.exg, stock.sym);
            var customWLId = watchListId;
            var customWatchLists = this.get('customWatchListArray');
            var currentCustomWL = customWatchLists[customWLId];
            var customStockArray = currentCustomWL ? currentCustomWL.stkArray : [];

            _ember.default.$.each(customStockArray, function (id, stockAdded) {
                var addedStockKey = _utils.default.keyGenerator.getKey(stockAdded.exg, stockAdded.sym);

                if (symbolKey === addedStockKey) {
                    deletedId = id;

                    return false;
                }
            });

            if (deletedId >= 0) {
                customStockArray.removeAt(deletedId);
                this._removeCustomWlActiveCss(currentCustomWL);

                _sharedService.default.getService('priceUI').notifyDeleteFromWatchList(stock, currentCustomWL.name);
            }
        },

        isCustomWatchListAvailable: function isCustomWatchListAvailable(name, customWatchLists) {
            var isCustomWatchListAvailable = false;
            var customWatchListsArray = customWatchLists ? customWatchLists : this.get('customWatchListArray');

            _ember.default.$.each(customWatchListsArray, function (id, watchList) {
                if (watchList.name === name || watchList.key === name) {
                    isCustomWatchListAvailable = true;
                    return false;
                }
            });

            return isCustomWatchListAvailable;
        },

        isSymbolAvailableInCustomWL: function isSymbolAvailableInCustomWL(symbol, customWatchListId) {
            var customWatchListArray = this.get('customWatchListArray');
            var watchlistId = customWatchListId ? customWatchListId : 0;
            var isSymbolAvailable = false;

            if (customWatchListArray && customWatchListArray.length > 0) {
                var symArray = customWatchListArray[watchlistId].stkArray;

                if (symArray && symArray.length > 0) {
                    _ember.default.$.each(symArray, function (key, stock) {
                        if (stock.sym === symbol.sym && stock.exg === symbol.exg) {
                            isSymbolAvailable = true;

                            return false;
                        }
                    });
                }
            }

            return isSymbolAvailable;
        },

        _saveCustomWatchList: function _saveCustomWatchList(customWLName, customWLObj) {
            var priceUserData = this.priceService.priceUserData;

            if (!priceUserData[this.customWatchListKey]) {
                priceUserData[this.customWatchListKey] = {};
            }

            priceUserData[this.customWatchListKey][customWLName] = customWLObj;
            this.priceService.priceUserData.save();
        },

        _removeCustomWlActiveCss: function _removeCustomWlActiveCss(customWL) {
            var isTabSelected = false;

            if (customWL.activeClass === 'active') {
                _ember.default.set(customWL, 'activeClass', '');
                isTabSelected = true;
            }

            this._saveCustomWatchList(customWL.key ? customWL.key : customWL.name, customWL); // Favourites WL is saved by lang key

            if (isTabSelected) {
                _ember.default.set(customWL, 'activeClass', 'active');
            }
        },

        _deleteCustomWatchList: function _deleteCustomWatchList(customWLName) {
            var priceUserData = this.priceService.priceUserData;

            if (priceUserData[this.customWatchListKey]) {
                delete priceUserData[this.customWatchListKey][customWLName]; // Delete used to prevent growing undefined properties in Local Storage
                this.priceService.priceUserData.save();
            }
        }
    });
});
define('universal-app/models/price/initializers/price-data-module-initializer', ['exports', 'ember', '../../../models/shared/initializers/base-module-initializer', '../../../models/shared/initializers/shared-data-module-initializer', '../../../controllers/authentication/price-retail-authenticator', '../../../controllers/authentication/price-sso-authenticator', '../../../models/price/price-service', '../../../models/shared/shared-service', '../../../models/shared/profile/profile-service', '../../../utils/utils', '../../../config/price-settings', '../../../config/price-widget-config', '../../../config/extended-settings-level-1', '../../../config/extended-settings-level-2', '../../../models/price/price-constants', '../../../config/app-config', '../../../controllers/authentication/authentication-constants', 'universal-app/config/environment', '../../../models/shared/formatter-extension'], function (exports, _ember, _baseModuleInitializer, _sharedDataModuleInitializer, _priceRetailAuthenticator, _priceSsoAuthenticator, _priceService, _sharedService, _profileService, _utils, _priceSettings, _priceWidgetConfig, _extendedSettingsLevel, _extendedSettingsLevel2, _priceConstants, _appConfig, _authenticationConstants, _environment, _formatterExtension) {
    'use strict';

    exports.default = _baseModuleInitializer.default.extend({
        preInitialize: function preInitialize() {
            var service;
            _ember.default.appGlobal.priceUser = {};

            this._mergeConfigSettings();

            if (_ember.default.appGlobal.multiScreen && !_ember.default.appGlobal.multiScreen.isParentWindow) {
                // if Child window of DT multiple window scenario
                var parentWindow = window.opener;
                service = parentWindow.Ember.appGlobal.multiScreen.parentSharedService.getService('price');
            } else {
                service = this.createService();
            }

            this.set('priceService', service);
            _sharedService.default.registerService(service.subscriptionKey, service);

            // Overwrite formatter.js functions
            _formatterExtension.default.overwritePrototypes(service);

            service.createDataStores();

            this._loadConfigs();
            this._loadPriceUserSettings();
            this._setAuthParams();
            this._setConnectionSettings();
            this._loadPriceUser();
            this._populateExchangeMetadata();
            this._loadPriceUserData();
        },

        postInitialize: function postInitialize() {
            this.priceService.announcementDS.loadCachedStore();
            this.priceService.exchangeDS.requestExchangeMetadata(_sharedService.default.userSettings.price.currentExchange);
            this.priceService.subscribeAuthSuccess(_sharedService.default.getService('analytics'), 'analytics');

            _profileService.default.initialize();
        },

        createService: function createService() {
            return _priceService.default.create();
        },

        _mergeConfigSettings: function _mergeConfigSettings() {
            // Intermediate level settings
            _utils.default.configHelper.mergeConfigSettings(_priceSettings.default, _extendedSettingsLevel.default.priceSettings);
            _utils.default.configHelper.mergeConfigSettings(_priceWidgetConfig.default, _extendedSettingsLevel.default.priceWidgetConfig);
            // Customization level settings
            _utils.default.configHelper.mergeConfigSettings(_priceSettings.default, _extendedSettingsLevel2.default.priceSettings);
            _utils.default.configHelper.mergeConfigSettings(_priceWidgetConfig.default, _extendedSettingsLevel2.default.priceWidgetConfig);

            // Increased socket frame processing latency based on device
            if (_appConfig.default.customisation.isTablet) {
                _priceConstants.default.TimeIntervals.WebSocketInQueueProcessingInterval = 500;
            }
        },

        _loadPriceUser: function _loadPriceUser() {
            // Load data as fresh, if version not available in local storage
            this.priceService.userDS.load();
            var authVersionMeta = this.priceService.userDS.get('metaVersion');

            if (!_utils.default.validators.isAvailable(authVersionMeta) || isNaN(authVersionMeta)) {
                authVersionMeta = 0;
            }

            this.priceService.userDS.set('metaVersion', authVersionMeta);

            if (_appConfig.default.customisation.isEmbeddedMode) {
                this.priceService.userDS.set('username', _ember.default.appGlobal.queryParams.appParams[_utils.default.Constants.EmbeddedModeParams.Username]);
                this.priceService.userDS.set('sessionId', _ember.default.appGlobal.queryParams.appParams[_utils.default.Constants.EmbeddedModeParams.Session]);
            }
        },

        _populateExchangeMetadata: function _populateExchangeMetadata() {
            this.priceService.exchangeDS.populateExchangeMetadata(_sharedService.default.userSettings.currentLanguage);
        },

        _loadPriceUserData: function _loadPriceUserData() {
            this.priceService.priceUserData.load();
        },

        _setAuthParams: function _setAuthParams() {
            switch (_appConfig.default.customisation.authenticationMode) {
                case _authenticationConstants.default.AuthModes.PriceRetail:
                    _sharedDataModuleInitializer.default.authController = _priceRetailAuthenticator.default;
                    break;

                case _authenticationConstants.default.AuthModes.PriceSso:
                case _authenticationConstants.default.AuthModes.PriceSsoTradeSso:
                    _sharedDataModuleInitializer.default.authController = _priceSsoAuthenticator.default;
                    break;

                default:
                    break;
            }
        },

        _setConnectionSettings: function _setConnectionSettings() {
            var embeddedPort = _ember.default.appGlobal.queryParams.appParams[_utils.default.Constants.EmbeddedModeParams.Port];
            var settings = _environment.default.APP.isTestMode ? _environment.default.APP.priceConnectionParameters.primary : _priceSettings.default.connectionParameters.primary;

            var connectionSettings = {
                ip: settings.ip,
                port: embeddedPort ? embeddedPort : settings.port,
                secure: settings.secure,
                reconnectInterval: _priceConstants.default.Pulse.ReconnectionTimeInterval,
                enablePulse: true
            };

            this.priceService.webSocketManager.setConnectionSettings(connectionSettings);
        },

        _loadConfigs: function _loadConfigs() {
            this.priceService.set('settings', _priceSettings.default);
            this.priceService.set('constants', _priceConstants.default);
        },

        _loadPriceUserSettings: function _loadPriceUserSettings() {
            var isSettingsChanged;

            if (_sharedService.default.userSettings.price) {
                isSettingsChanged = _utils.default.configHelper.mergeConfigSettings(_sharedService.default.userSettings.price, _priceSettings.default.configs, true);
            } else {
                _ember.default.set(_sharedService.default.userSettings, 'price', _priceSettings.default.configs);
                isSettingsChanged = true;
            }

            if (!_utils.default.validators.isAvailable(_sharedService.default.userSettings.get('price.currentExchange'))) {
                _sharedService.default.userSettings.set('price.currentExchange', _priceSettings.default.configs.defaultExchange);
                isSettingsChanged = true;
            }

            if (!_utils.default.validators.isAvailable(_sharedService.default.userSettings.get('price.currentIndex'))) {
                _sharedService.default.userSettings.set('price.currentIndex', _priceSettings.default.configs.defaultIndex);
                isSettingsChanged = true;
            }

            if (_sharedService.default.userSettings.get('price.secondaryExchanges').length === 0) {
                _sharedService.default.userSettings.set('price.secondaryExchanges', _priceSettings.default.configs.secondaryExchanges);
                isSettingsChanged = true;
            }

            if (!_utils.default.validators.isAvailable(_sharedService.default.userSettings.get('price.userDefaultExg'))) {
                _sharedService.default.userSettings.set('price.userDefaultExg', _priceSettings.default.configs.defaultExchange);
                isSettingsChanged = true;
            }

            if (isSettingsChanged) {
                _sharedService.default.userSettings.save();
            }

            if (!_sharedService.default.userState.globalArgs.exg) {
                _sharedService.default.userState.globalArgs.exg = _sharedService.default.userSettings.price.currentExchange;
            }
        }
    });
});
define('universal-app/models/price/price-service', ['exports', 'ember', '../shared/communication-adapters/web-socket-manager', './protocols/web-socket/price-socket-request-handler', './protocols/web-socket/price-socket-response-handler', './protocols/mix-web/mix-request-handler', './price-constants', '../chart/chart-constants', '../../models/price/price-subscription-manager', '../shared/profile/profile-service', './business-entities/price-meta', './business-entities/price-exchange-meta', './business-entities/price-symbol-meta', './protocols/mix-web/mix-response-handler', '../../config/app-config', './business-entities/price-user', './business-entities/price-user-data', '../shared/shared-service', '../../app-events', '../../utils/utils', './data-stores/price-data-store-factory', '../shared/language/language-data-store'], function (exports, _ember, _webSocketManager, _priceSocketRequestHandler, _priceSocketResponseHandler, _mixRequestHandler, _priceConstants, _chartConstants, _priceSubscriptionManager, _profileService, _priceMeta, _priceExchangeMeta, _priceSymbolMeta, _mixResponseHandler, _appConfig, _priceUser, _priceUserData, _sharedService, _appEvents, _utils, _priceDataStoreFactory, _languageDataStore) {
    'use strict';

    exports.default = _ember.default.Object.extend({
        subscriptionKey: 'price',
        symbolMultiSubscriptionMap: {},
        pendingFullMktSubscriptions: {},
        settings: {},

        // Generate single web socket manager instance specific to price service
        webSocketManager: undefined,
        connectionStatus: false,

        // API for accessing the data stores
        announcementDS: undefined,
        marketDepthDS: undefined,
        exchangeDS: undefined,
        ohlcDS: undefined,
        stockDS: undefined,
        gmsDS: undefined,
        systemMetaDS: undefined,
        alertDS: undefined,
        topStockDS: undefined,
        companyProfileDS: undefined,
        timeAndSalesDS: undefined,
        socialMediaDS: undefined,
        searchDS: undefined,
        sectorDS: undefined,
        subMarketDS: undefined,
        watchListDS: undefined,
        optionStockDS: undefined,
        fairValueDS: undefined,
        corporateActionDS: undefined,
        theoreticalChartDS: undefined,
        theoreticalStockDS: undefined,
        financialDS: undefined,
        portfolioDS: undefined,
        bookShelfDS: undefined,
        registrationDS: undefined,
        investorsDS: undefined,
        technicalScoreDS: undefined,

        userDS: _priceUser.default,
        priceMeta: _priceMeta.default,
        priceExchangeMeta: _priceExchangeMeta.default,
        priceSymbolMeta: _priceSymbolMeta.default,
        priceUserData: _priceUserData.default,
        authSuccessSubscription: {},
        fullMarketSubscription: {},
        priceMetaReadySubscription: {},
        priceExchangeSummaryMetaReadySubscription: {},
        connectionStatusSubscription: {},
        MarketStatus: _priceConstants.default.MarketStatus,

        isPriceMetaReady: false,
        isExchangeSummaryMetaReady: false,
        isDefaultMetaRequestFail: false,
        isAuthSuccess: false,
        mixReqQueue: new Queue(),
        socketReqQueue: new Queue(),
        isAuthResponse: false,
        changePasswordCallback: {},

        init: function init() {
            this._super();
            this.webSocketManager = new _webSocketManager.default(_priceSocketRequestHandler.default, _priceSocketResponseHandler.default, this, _priceSubscriptionManager.default);
            this.subscribeAuthSuccess(this, this.get('subscriptionKey'));

            _appEvents.default.subscribeLanguageChanged(this, this.get('subscriptionKey'));
            this.set('app', _languageDataStore.default.getLanguageObj());
        },

        isMoreMarketsAvailable: function isMoreMarketsAvailable() {
            return this.get('userDS').get('userExchg').length > 1;
        },

        isPriceMetadataReady: function isPriceMetadataReady() {
            return this.get('isPriceMetaReady');
        },

        isAuthenticated: function isAuthenticated() {
            return this.get('isAuthSuccess');
        },

        isExchangeSummaryMetadataReady: function isExchangeSummaryMetadataReady() {
            return this.get('isExchangeSummaryMetaReady');
        },

        createDataStores: function createDataStores() {
            this.set('announcementDS', _priceDataStoreFactory.default.createAnnouncementDataStore(this));
            this.set('marketDepthDS', _priceDataStoreFactory.default.createMarketDepthDataStore(this));
            this.set('exchangeDS', _priceDataStoreFactory.default.createExchangeDataStore(this));
            this.set('ohlcDS', _priceDataStoreFactory.default.createOHLCDataStore(this));
            this.set('stockDS', _priceDataStoreFactory.default.createStockDataStore(this));
            this.set('alertDS', _priceDataStoreFactory.default.createAlertDataStore(this));
            this.set('gmsDS', _priceDataStoreFactory.default.createGMSDataStore(this));
            this.set('systemMetaDS', _priceDataStoreFactory.default.createSystemMetaDataStore(this));
            this.set('topStockDS', _priceDataStoreFactory.default.createTopStockDataStore(this));
            this.set('companyProfileDS', _priceDataStoreFactory.default.createCompanyProfileDataStore(this));
            this.set('timeAndSalesDS', _priceDataStoreFactory.default.createTimeAndSalesDataStore(this));
            this.set('searchDS', _priceDataStoreFactory.default.createSearchDataStore(this));
            this.set('sectorDS', _priceDataStoreFactory.default.createSectorDataStore(this));
            this.set('subMarketDS', _priceDataStoreFactory.default.createSubMarketDataStore(this));
            this.set('watchListDS', _priceDataStoreFactory.default.createWatchListDataStore(this));
            this.set('fairValueDS', _priceDataStoreFactory.default.createFairValueDataStore(this));
            this.set('corporateActionDS', _priceDataStoreFactory.default.createCorporateActionDataStore(this));
            this.set('theoreticalChartDS', _priceDataStoreFactory.default.createTheoreticalChartDataStore(this));
            this.set('theoreticalStockDS', _priceDataStoreFactory.default.createTheoreticalStockDataStore(this));
            this.set('optionStockDS', _priceDataStoreFactory.default.createOptionStockDataStore(this));
            this.set('optionPeriodDS', _priceDataStoreFactory.default.createOptionPeriodDataStore(this));
        },

        subscribeAuthSuccess: function subscribeAuthSuccess(subscriber, key) {
            this.get('authSuccessSubscription')[key] = subscriber;
        },

        subscribePriceMetaReady: function subscribePriceMetaReady(subscriber, key) {
            if (_utils.default.validators.isAvailable(key)) {
                this.get('priceMetaReadySubscription')[key] = subscriber;
            }
        },

        unSubscribePriceMetaReady: function unSubscribePriceMetaReady(key) {
            if (_utils.default.validators.isAvailable(key)) {
                this.get('priceMetaReadySubscription')[key] = undefined;
            }
        },

        subscribePriceExchangeSummaryMetaReady: function subscribePriceExchangeSummaryMetaReady(subscriber, key) {
            if (_utils.default.validators.isAvailable(key)) {
                this.get('priceExchangeSummaryMetaReadySubscription')[key] = subscriber;
            }
        },

        onAuthSuccess: function onAuthSuccess() {
            var that = this;
            this.set('isAuthSuccess', true);

            _profileService.default.getUserProfile();
            this.sendExchangeSummaryRequest();

            // Update metadata with delayed indicator
            _mixResponseHandler.default.processDelayedPriceMeta();

            // Request for user exchange metadata
            this.exchangeDS.requestAllExchangeMetadata();
            // Initialize symbol validation timer to periodically validate for symbols
            this.stockDS.initializeSymbolValidation();

            // TODO: [Bashitha] Handle sub market wise full market subscription after QS implementation
            _ember.default.$.each(this.symbolMultiSubscriptionMap, function (exchange, requestSent) {
                if (requestSent) {
                    _ember.default.run.later(function () {
                        that.onFullMarketSnapshotReceived(exchange);
                    }, 30000);
                }
            });

            if (this.isPriceMetadataReady()) {
                this._sendQueuedMixSocketRequest();
            }

            _ember.default.run.later(function () {
                that.sendSystemMetaDataRequest();
            }, 2000);
        },

        onPriceExchangeSummaryMetaReady: function onPriceExchangeSummaryMetaReady() {
            this.set('isExchangeSummaryMetaReady', true);

            _ember.default.$.each(this.get('priceExchangeSummaryMetaReadySubscription'), function (key, subscriber) {
                if (subscriber && _ember.default.$.isFunction(subscriber.onPriceExchangeSummaryMetaReady)) {
                    subscriber.onPriceExchangeSummaryMetaReady();
                }
            });
        },

        subscribeFullMarketReceived: function subscribeFullMarketReceived(key, subscriber) {
            if (_utils.default.validators.isAvailable(key)) {
                this.get('fullMarketSubscription')[key] = subscriber;
            }
        },

        unSubscribeFullMarketReceived: function unSubscribeFullMarketReceived(key) {
            if (_utils.default.validators.isAvailable(key)) {
                this.get('fullMarketSubscription')[key] = undefined;
            }
        },

        onFullMarketSnapshotReceived: function onFullMarketSnapshotReceived(exchange) {
            _ember.default.$.each(this.get('fullMarketSubscription'), function (key, subscriber) {
                if (subscriber && _ember.default.$.isFunction(subscriber.onFullMarketSnapshotReceived)) {
                    subscriber.onFullMarketSnapshotReceived(exchange);
                }
            });
        },

        subscribeConnectionStatusChanged: function subscribeConnectionStatusChanged(key, subscriber) {
            if (_utils.default.validators.isAvailable(key)) {
                this.get('connectionStatusSubscription')[key] = subscriber;
            }
        },

        unSubscribeConnectionStatusChanged: function unSubscribeConnectionStatusChanged(key) {
            if (_utils.default.validators.isAvailable(key)) {
                this.get('connectionStatusSubscription')[key] = undefined;
            }
        },

        onPriceConnectionStatusChanged: function onPriceConnectionStatusChanged(stat) {
            _ember.default.$.each(this.get('connectionStatusSubscription'), function (key, subscriber) {
                if (subscriber && _ember.default.$.isFunction(subscriber.onPriceConnectionStatusChanged)) {
                    subscriber.onPriceConnectionStatusChanged(stat);
                }
            });
        },

        /* *
         * Authenticate with username and password
         * @param authParams An object with following properties set
         *                      username    : Username. Mandatory.
         *                      password    : Password. Mandatory.
         *                      loginIP     : Machine IP
         *                      appVersion  : Application version
         *                      lan         : Current Language. Mandatory.
         *                      metaVer     : Auth meta version (taken from the cache). Default 0. Mandatory.
         *                      authSuccess : Auth success function. Mandatory.
         *                      authFailed  : Auth failure function. Mandatory.
         */
        authenticateWithUsernameAndPassword: function authenticateWithUsernameAndPassword(authParams) {
            try {
                authParams.authSuccess = this._modifyAuthSuccess(authParams);
                authParams.authFailed = this._modifyAuthFailed(authParams);

                _utils.default.logger.logTrace('Authenticating price retail user...');

                var req = _priceSocketRequestHandler.default.generateRetailAuthRequest(authParams);
                this.webSocketManager.sendAuth(req, _priceConstants.default.SocketConnectionType.QuoteServer, authParams);
            } catch (e) {
                var errorMsg = 'Error in price retail authenticating... ' + e.message;

                _utils.default.logger.logTrace(errorMsg);
                _utils.default.logger.logError(errorMsg);
            }

            this._checkAuthResponse(authParams);
        },

        authenticateWithSsoToken: function authenticateWithSsoToken(authParams) {
            try {
                authParams.authSuccess = this._modifyAuthSuccess(authParams);
                authParams.authFailed = this._modifyAuthFailed(authParams);

                _utils.default.logger.logTrace('Authenticating price sso user...');

                var req = _priceSocketRequestHandler.default.generateSsoAuthRequest(authParams);
                this.webSocketManager.sendAuth(req, _priceConstants.default.SocketConnectionType.QuoteServer, authParams);
            } catch (e) {
                var errorMsg = 'Error in price sso authenticating... ' + e.message;

                _utils.default.logger.logTrace(errorMsg);
                _utils.default.logger.logError(errorMsg);
            }

            this._checkAuthResponse(authParams);
        },

        _modifyAuthSuccess: function _modifyAuthSuccess(authParams) {
            var that = this;
            var origAuthSuccess = authParams.authSuccess;

            return function () {
                that._updateUserExchange(origAuthSuccess);
            };
        },

        _modifyAuthFailed: function _modifyAuthFailed(authParams) {
            var origAuthFailed = authParams.authFailed;
            var that = this;

            return function (response) {
                if (_ember.default.$.isFunction(origAuthFailed)) {
                    that.set('isAuthResponse', true);
                    origAuthFailed(response);
                }
            };
        },

        _checkAuthResponse: function _checkAuthResponse(authParams) {
            var that = this;

            _ember.default.run.later(function () {
                if (!that.get('isAuthResponse')) {
                    var authTimeoutMessage = that.get('app').lang.messages.authTimedOut;
                    var origAuthFailed = authParams.authFailed;

                    _sharedService.default.userSettings.clearLoginToken();

                    if (_ember.default.$.isFunction(origAuthFailed)) {
                        origAuthFailed(authTimeoutMessage);
                    }
                }
            }, _priceConstants.default.TimeIntervals.AuthenticationTimeout);
        },

        setConnectionStatus: function setConnectionStatus(stat) {
            this.set('connectionStatus', stat);
            this.onPriceConnectionStatusChanged(stat);
        },

        isConnected: function isConnected() {
            return this.webSocketManager.isConnected(_priceConstants.default.SocketConnectionType.QuoteServer);
        },

        // API for handling market data and meta data

        /* *
         * Subscribe and Un-subscribe from exchange updates
         * @param exchange Exchange code string
         */
        addExchangeRequest: function addExchangeRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateAddExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestExchange);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeExchangeRequest: function removeExchangeRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestExchange);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from symbol updates
         * @param exchange Exchange Code string
         * @param symbol Symbol Code string
         * @param insType Instrument type String
         */
        addSymbolRequest: function addSymbolRequest(exchange, symbol, insType) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, this._updateSymbolCode(symbol, insType), this._getStockMessageType(insType));
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeSymbolRequest: function removeSymbolRequest(exchange, symbol, insType) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, this._updateSymbolCode(symbol, insType), this._getStockMessageType(insType));
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from index updates
         * @param exchange Exchange Code string
         * @param symbol Index Code string
         */
        addIndexRequest: function addIndexRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestIndex);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeIndexRequest: function removeIndexRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestIndex);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from full market symbol updates
         * @param exchange Exchange Code string
         * @param subMarketId sub marketId string
         */
        addFullMarketSymbolRequest: function addFullMarketSymbolRequest(exchange, subMarketId) {
            var exchangeObj = this.exchangeDS.getExchange(exchange);

            if (exchangeObj.get('subMarketArray')) {
                this._addFullMarketSymbolRequest(exchange, subMarketId);
            } else {
                this.pendingFullMktSubscriptions[exchange] = true;

                if (this.isPriceMetadataReady()) {
                    this._addFullMarketSymbolRequest(exchange, subMarketId);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._addFullMarketSymbolRequest,
                        args: [exchange, subMarketId] // Queue arguments as an array
                    });
                }
            }
        },

        _addFullMarketSymbolRequest: function _addFullMarketSymbolRequest(exchange, subMarketId) {
            var symbolList;
            var that = this;
            var subMarket = subMarketId ? subMarketId : this.exchangeDS.getDefaultSubMarket(exchange);
            var allowedSubMktsByExchange;

            if (_appConfig.default.customisation.allowedSubMarkets) {
                allowedSubMktsByExchange = _appConfig.default.customisation.allowedSubMarkets[exchange];
            }

            if (subMarket === -1) {
                symbolList = this.stockDS.getSymbolCollectionByExchange(exchange);
            } else {
                symbolList = this.stockDS.getStockCollectionBySubMarket(exchange, subMarket);
            }

            if (symbolList.length > 500) {
                this.symbolMultiSubscriptionMap[exchange] = true;

                _ember.default.$.each(symbolList, function (key, symbol) {
                    that.addSymbolRequest(exchange, symbol.sym, symbol.inst);
                });

                this.pendingFullMktSubscriptions[exchange] = false;
            } else if (symbolList.length > 0 && _utils.default.validators.isAvailable(exchange)) {
                this.symbolMultiSubscriptionMap[exchange] = false;

                if (allowedSubMktsByExchange && allowedSubMktsByExchange.length > 0) {
                    if (subMarketId && allowedSubMktsByExchange.contains(subMarketId)) {
                        this._sendAddFullMarketSymbolRequest(exchange, subMarketId);
                    } else if (!subMarketId) {
                        _ember.default.$.each(allowedSubMktsByExchange, function (key, subMktId) {
                            that._sendAddFullMarketSymbolRequest(exchange, subMktId);
                        });
                    }
                } else if (subMarketId) {
                    this._sendAddFullMarketSymbolRequest(exchange, subMarketId);
                } else {
                    this._sendAddFullMarketSymbolRequest(exchange);
                }

                this.pendingFullMktSubscriptions[exchange] = false;
            } else {
                this.pendingFullMktSubscriptions[exchange] = true;
            }
        },

        removeFullMarketSymbolRequest: function removeFullMarketSymbolRequest(exchange, subMarketId) {
            if (_utils.default.validators.isAvailable(exchange) && !this.symbolMultiSubscriptionMap[exchange]) {
                var allowedSubMktsByExchange;
                var that = this;

                if (_appConfig.default.customisation.allowedSubMarkets) {
                    allowedSubMktsByExchange = _appConfig.default.customisation.allowedSubMarkets[exchange];
                }

                if (allowedSubMktsByExchange && allowedSubMktsByExchange.length > 0) {
                    if (subMarketId && allowedSubMktsByExchange.contains(subMarketId)) {
                        this._sendRemoveFullMarketSymbolRequest(exchange, subMarketId);
                    } else if (!subMarketId) {
                        _ember.default.$.each(allowedSubMktsByExchange, function (key, subMktId) {
                            that._sendRemoveFullMarketSymbolRequest(exchange, subMktId);
                        });
                    }
                } else if (subMarketId) {
                    this._sendRemoveFullMarketSymbolRequest(exchange, subMarketId);
                } else {
                    this._sendRemoveFullMarketSymbolRequest(exchange);
                }
            }
        },

        /* *
         * Subscribe and Un-subscribe from full market index updates
         * @param exchange Exchange Code string
         */
        addFullMarketIndexRequest: function addFullMarketIndexRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateAddExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestIndex);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeFullMarketIndexRequest: function removeFullMarketIndexRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestIndex);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from custom list of symbols
         * @param exchange Exchange Code string
         * @param symbolList Symbol List array
         * @param insType Instrument type
         */
        addSymbolListRequest: function addSymbolListRequest(exchange, symbolList, insType) {
            var req = _priceSocketRequestHandler.default.generateAddSymbolBulkRequest(exchange, this._updateSymbolCodeArray(symbolList, insType).join('~'), this._getStockMessageType(insType));
            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        removeSymbolListRequest: function removeSymbolListRequest(exchange, symbolList, insType) {
            var req = _priceSocketRequestHandler.default.generateRemoveSymbolBulkRequest(exchange, this._updateSymbolCodeArray(symbolList, insType).join('~'), this._getStockMessageType(insType));
            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        /* *
         * Subscribe and Un-subscribe from market depth by price updates
         * @param exchange Exchange code string
         * @param symbol Symbol code string
         */
        addMarketDepthByPriceRequest: function addMarketDepthByPriceRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                if (this.isAuthenticated()) {
                    this._sendMarketDepthByPriceRequest(exchange, symbol);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendMarketDepthByPriceRequest,
                        args: [exchange, symbol] // Queue arguments as an array
                    });
                }
            }
        },

        removeMarketDepthByPriceRequest: function removeMarketDepthByPriceRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestMarketDepthByPrice);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from market depth by order updates
         * @param exchange Exchange code string
         * @param symbol Symbol code string
         */
        addMarketDepthByOrderRequest: function addMarketDepthByOrderRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                if (this.isAuthenticated()) {
                    this._sendMarketDepthByOrderRequest(exchange, symbol);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendMarketDepthByOrderRequest,
                        args: [exchange, symbol] // Queue arguments as an array
                    });
                }
            }
        },

        removeMarketDepthByOrderRequest: function removeMarketDepthByOrderRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestMarketDepthByOrder);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from Intraday chart (OHLC) updates
         * @param exchange Exchange code string
         * @param symbol Symbol code string
         */
        addIntradayChartRequest: function addIntradayChartRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                if (this.isPriceMetadataReady()) {
                    this._sendIntraDayChartRequest(exchange, symbol);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendIntraDayChartRequest,
                        args: [exchange, symbol] // Queue arguments as an array
                    });
                }
            }
        },

        removeIntradayChartRequest: function removeIntradayChartRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestOHLC);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from Intraday chart (TOPV) updates
         * @param exchange Exchange code string
         * @param symbol Symbol code string
         */
        addTOPVIntradayChartRequest: function addTOPVIntradayChartRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                if (this.isPriceMetadataReady()) {
                    this._sendTOPVIntraDayChartRequest(exchange, symbol);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendTOPVIntraDayChartRequest,
                        args: [exchange, symbol] // Queue arguments as an array
                    });
                }
            }
        },

        removeTOPVIntradayChartRequest: function removeTOPVIntradayChartRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestTOPVOHLC);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from Announcements updates
         * @param exchange Exchange code string
         * @param language Language code string
         */
        addFullMarketAnnouncementRequest: function addFullMarketAnnouncementRequest(exchange, language) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(language)) {
                var req = _priceSocketRequestHandler.default.generateAddExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestAnnouncement, language);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeFullMarketAnnouncementRequest: function removeFullMarketAnnouncementRequest(exchange, language) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(language)) {
                var req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestAnnouncement, language);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from News updates
         * @param newsProvider News provider string
         * @param language Language code string
         */
        addFullMarketNewsRequest: function addFullMarketNewsRequest(newsProvider, language) {
            if (_utils.default.validators.isAvailable(newsProvider) && _utils.default.validators.isAvailable(language) && this.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.News], 'SYS')) {
                var req = _priceSocketRequestHandler.default.generateAddExchangeRequest(newsProvider, _priceConstants.default.RequestType.Data.RequestNews, language);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeFullMarketNewsRequest: function removeFullMarketNewsRequest(newsProvider, language) {
            if (_utils.default.validators.isAvailable(newsProvider) && _utils.default.validators.isAvailable(language)) {
                var req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(newsProvider, _priceConstants.default.RequestType.Data.RequestNews, language);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from time and sales updates
         * @param exchange Exchange code string
         * @param symbol Symbol code string
         */
        addTimeAndSalesRequest: function addTimeAndSalesRequest(exchange, symbol, isShowBuyerSeller) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                    this._sendTimeAndSalesRequest(exchange, symbol, isShowBuyerSeller);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendTimeAndSalesRequest,
                        args: [exchange, symbol, isShowBuyerSeller] // Queue arguments as an array
                    });
                }
            }
        },

        addCalenderEventRequest: function addCalenderEventRequest(exchange, callbackFn) {
            if (_utils.default.validators.isAvailable(exchange)) {
                if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                    this._sendCalenderEventMixRequest(exchange, callbackFn);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendCalenderEventMixRequest,
                        args: [exchange] // Queue arguments as an array
                    });
                }
            }
        },

        addYoutubeEventRequest: function addYoutubeEventRequest(exchange, nextPageUrl, callbackFn) {
            if (_utils.default.validators.isAvailable(exchange)) {
                if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                    this._sendYoutubeEventMixRequest(nextPageUrl, callbackFn);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendInstagramEventMixRequest,
                        args: [exchange] // Queue arguments as an array
                    });
                }
            }
        },

        addInstagramEventRequest: function addInstagramEventRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                    this._sendInstagramEventMixRequest();
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendInstagramEventMixRequest,
                        args: [exchange] // Queue arguments as an array
                    });
                }
            }
        },

        addFacebookEventRequest: function addFacebookEventRequest(exchange, nextPageUrl, callbackFn) {
            if (_utils.default.validators.isAvailable(exchange)) {
                if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                    this._sendFacebookEventMixRequest(nextPageUrl, callbackFn);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendFacebookEventMixRequest,
                        args: [exchange] // Queue arguments as an array
                    });
                }
            }
        },

        addDownloadStatementRequest: function addDownloadStatementRequest(requestObj) {
            if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                this._sendDownloadStatementMixRequest(requestObj);
            }
        },

        addPressReleaseRequest: function addPressReleaseRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                    this._sendPressReleaseMixRequest();
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendPressReleaseMixRequest,
                        args: [exchange] // Queue arguments as an array
                    });
                }
            }
        },

        removeTimeAndSalesRequest: function removeTimeAndSalesRequest(exchange, symbol, isShowBuyerSeller) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var reqType = isShowBuyerSeller ? _priceConstants.default.RequestType.Data.RequestTimeAndSalesDetail : _priceConstants.default.RequestType.Data.RequestTimeAndSales;
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, symbol, reqType);

                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Subscribe and Un-subscribe from market time and sales updates
         * @param exchange Exchange code string
         */
        addMarketTimeAndSalesRequest: function addMarketTimeAndSalesRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                    this._sendMarketTimeAndSalesRequest(exchange);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendMarketTimeAndSalesRequest,
                        args: [exchange] // Queue arguments as an array
                    });
                }
            }
        },

        removeMarketTimeAndSalesRequest: function removeMarketTimeAndSalesRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestTimeAndSales);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Placing an Alert
         * @param exchange Exchange code string
         * @param symbol symbol code string
         * @param instrumentType instrument Type string
         * @param alertFilter alert Filter string
         * @param token alert token string
         * @param isEdit alert edit mode string
         */
        sendAlertPlaceRequest: function sendAlertPlaceRequest(exchange, symbol, instrumentType, alertFilter, token, isEdit) {
            var messageType = isEdit ? _priceConstants.default.RequestType.Data.RequestAlertUpdate : _priceConstants.default.RequestType.Data.RequestAlertPlace;
            var req = _priceSocketRequestHandler.default.generateAlertPlaceRequest(exchange, symbol, instrumentType, alertFilter, token, messageType);

            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        /* *
         * Alert History for client - WS
         *
         */
        sendAlertHistoryRequest: function sendAlertHistoryRequest() {
            var req = _priceSocketRequestHandler.default.generateAlertHistoryRequest();
            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        /* *
         * Alert UnSubscribe
         *
         * @param exchange Exchange code string
         * @param symbol symbol code string
         * @param instrumentType instrument Type string
         * @param token alert token string
         * */
        sendAlertUnsubscribeRequest: function sendAlertUnsubscribeRequest(exchange, symbol, instrumentType, token) {
            var req = _priceSocketRequestHandler.default.generateAlertUnsubscribeRequest(exchange, symbol, instrumentType, token);
            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        /* *
         * Query top stock data
         * @param exchange Exchange code string
         * @param topStockType Top stock type string
         * @param subMarketCode Sub market code string
         * @param language Language code string
         */
        sendTopStocksRequest: function sendTopStocksRequest(exchange, topStockType, subMarketCode, language) {
            var req = _priceSocketRequestHandler.default.generateTopStockRequest(exchange, topStockType, subMarketCode, language);
            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        changePassword: function changePassword(reqObj, callbackFn) {
            var oldPwd = _utils.default.crypto.encryptText(reqObj.oldPwd);
            reqObj.oldPwd = [';', _utils.default.formatters.convertBase64toHEX(oldPwd)].join('');

            var newPwd = _utils.default.crypto.encryptText(reqObj.newPwd);
            reqObj.newPwd = [';', _utils.default.formatters.convertBase64toHEX(newPwd)].join('');

            var req = _priceSocketRequestHandler.default.generateChangePasswordRequest(reqObj);

            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            this.set('changePasswordCallback', callbackFn);
        },

        // MIX Requests

        // TODO: [Amila] Check the usages, and re-factor below mix requests
        // Symbol Validation Request to Receive Meta Data for a symbol
        sendSymbolValidationRequest: function sendSymbolValidationRequest(exchange, symbol) {
            _mixRequestHandler.default.loadSymbolValidationData(exchange, symbol);
        },

        // Symbol Validation Request to Receive Meta Data for Symbol List
        sendSymbolValidationBulkRequest: function sendSymbolValidationBulkRequest(symbolObjArray) {
            _mixRequestHandler.default.loadSymbolValidationBulkData(symbolObjArray);
        },

        sendSymbolSearchRequest: function sendSymbolSearchRequest(searchKey, language, pageSize, notifyFn, params, searchNumber) {
            _mixRequestHandler.default.loadSymbolSearchData(searchKey, language, pageSize, notifyFn, params, searchNumber);
        },

        // Company Profile
        sendCompanyProfileRequest: function sendCompanyProfileRequest(exchange, symbol, language, postSuccess, Error) {
            _mixRequestHandler.default.loadCompanyProfileData(exchange, symbol, language, postSuccess, Error);
        },

        // Gms Summary
        sendGmsSummaryRequest: function sendGmsSummaryRequest() {
            if (this.isPriceMetadataReady()) {
                _mixRequestHandler.default.loadGmsSummary();
            } else {
                this.mixReqQueue.enqueue({
                    callbackFn: _mixRequestHandler.default.loadGmsSummary
                });
            }
        },

        // System Meta Data
        sendSystemMetaDataRequest: function sendSystemMetaDataRequest() {
            _mixRequestHandler.default.loadSystemMetaData();
        },

        // Financials and Ratios Data request(RT=131)
        sendFinancialRatioDataRequest: function sendFinancialRatioDataRequest(exchange, symbol, language, secondSymAdded, primarySymbol, secondarySymbol, periodType, callbackFn) {
            _mixRequestHandler.default.loadFinancialData(exchange, symbol, language, secondSymAdded, primarySymbol, secondarySymbol, periodType, callbackFn);
        },

        // Historical Closing Price Data
        sendClosingPriceRequest: function sendClosingPriceRequest(exchange, symbol, language, startDate, endDate, callbackFn) {
            _mixRequestHandler.default.loadClosingPriceData(exchange, symbol, language, startDate, endDate, callbackFn);
        },

        // Bookshelf Data
        sendBookShelfRequest: function sendBookShelfRequest(exchange) {
            _mixRequestHandler.default.loadBookShelfData(exchange);
        },

        // New User Registration Data
        sendUserRegistrationRequest: function sendUserRegistrationRequest(username, password, email) {
            _mixRequestHandler.default.sendUserRegistrationRequest(username, password, email);
        },

        // Investment ID
        sendInvestmentIdRequest: function sendInvestmentIdRequest(exchange, uname, callbackFn) {
            _mixRequestHandler.default.loadInvestmentId(exchange, uname, callbackFn);
        },

        // Investor Portfolio Data
        sendInvestorPortfolioRequest: function sendInvestorPortfolioRequest(investId, callbackFn) {
            _mixRequestHandler.default.loadInvestorPortfolioData(investId, callbackFn);
        },

        // Alert History
        sendAlertHistoryMetaRequest: function sendAlertHistoryMetaRequest() {
            _mixRequestHandler.default.loadAlertHistory();
        },

        // App Store Versions
        sendAppStoreVersionRequest: function sendAppStoreVersionRequest(callbackFn) {
            _mixRequestHandler.default.loadAppStoreVersion(callbackFn);
        },

        // Fundamental Score Data request(RT=131)
        sendFundamentalScoreRequest: function sendFundamentalScoreRequest(exchange, callbackFn) {
            _mixRequestHandler.default.loadFundamentalScoreData(exchange, callbackFn);
        },

        // Content Requests
        // RT = 306 (Composite Request)
        loadExchangeMetadata: function loadExchangeMetadata(exchanges, successFn, errorFn) {
            var that = this;

            _ember.default.$.each(exchanges, function (index, exg) {
                var metaSuccessFn = function metaSuccessFn() {
                    if (that.pendingFullMktSubscriptions[exg]) {
                        that.addFullMarketSymbolRequest(exg);
                    }

                    if (_ember.default.$.isFunction(successFn)) {
                        successFn();
                    }
                };

                _mixRequestHandler.default.loadExchangeMetadata(exg, _sharedService.default.userSettings.currentLanguage, metaSuccessFn, errorFn);
            });
        },

        processPriceMeta: function processPriceMeta(language) {
            var priceMetaObj = _priceMeta.default.get('metaData');

            _ember.default.$.each(priceMetaObj, function (exg, exgObj) {
                _mixResponseHandler.default.processExchangeMetadataResponse(exgObj, language, exg);
            });
        },

        processPriceExchangeMeta: function processPriceExchangeMeta(language) {
            var priceExgMetaObj = _priceExchangeMeta.default.get('exgMetaData');
            _mixResponseHandler.default.processExchangeSummaryResponse(priceExgMetaObj, language);
        },

        processPriceSymbolMeta: function processPriceSymbolMeta(language) {
            var symbolMetaObj = _priceSymbolMeta.default.get('metaData');

            _ember.default.$.each(symbolMetaObj, function (exg, exgObj) {
                _mixResponseHandler.default.processExchangeSymbolResponse(exgObj, exg, language);
            });
        },

        languageChanged: function languageChanged(language) {
            _ember.default.run.next(this, this._languageChanged, language);
        },

        _languageChanged: function _languageChanged(language) {
            this.exchangeDS.populatePriceExchangeMeta(language);
            this.exchangeDS.populatePriceMeta(language);
            this.exchangeDS.populatePriceSymbolMeta(language);
            this.exchangeDS.requestAllExchangeMetadata();
        },

        loadExchangeSymbolData: function loadExchangeSymbolData(exchanges) {
            _ember.default.$.each(exchanges, function (index, exg) {
                _mixRequestHandler.default.loadExchangeSymbolData(exg, _sharedService.default.userSettings.currentLanguage);
            });
        },

        downloadIntradayOHLCData: function downloadIntradayOHLCData(params) {
            var numberOfDays;
            _utils.default.logger.logTrace('Download Intraday is triggered from chart data provider');

            if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                _utils.default.logger.logTrace('Price Service: Auth success and Meta data ready for sending request');

                if (params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayCurrentDay || params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayFiveDay) {
                    numberOfDays = params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayCurrentDay ? _chartConstants.default.ChartDataLevel.IntradayCurrentDay : _chartConstants.default.ChartDataLevel.IntradayFiveDay;

                    _mixRequestHandler.default.loadIntradayData(params.exchange, params.symbol, numberOfDays, params.chartType, params.reqSuccessFn, params.reqFailureFn);
                } else {
                    _mixRequestHandler.default.loadChartData(params.exchange, params.symbol, _chartConstants.default.ChartCategory.Intraday, params.begin, params.chartType, params.reqSuccessFn, params.reqFailureFn);
                }
            } else {
                _utils.default.logger.logTrace('Price Service: Auth or Meta data ready fail sending request is queued');

                if (params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayCurrentDay || params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayFiveDay) {
                    numberOfDays = params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayCurrentDay ? _chartConstants.default.ChartDataLevel.IntradayCurrentDay : _chartConstants.default.ChartDataLevel.IntradayFiveDay;

                    this.mixReqQueue.enqueue({
                        callbackFn: _mixRequestHandler.default.loadIntradayData,
                        args: [params.exchange, params.symbol, numberOfDays, params.chartType, params.reqSuccessFn, params.reqFailureFn] // Queue arguments as an array
                    });
                } else {
                    this.mixReqQueue.enqueue({
                        callbackFn: _mixRequestHandler.default.loadChartData,
                        args: [params.exchange, params.symbol, _chartConstants.default.ChartCategory.Intraday, params.begin, params.chartType, params.reqSuccessFn, params.reqFailureFn] // Queue arguments as an array
                    });
                }
            }
        },

        downloadTOPVIntradayOHLCData: function downloadTOPVIntradayOHLCData(params) {
            var numberOfDays;

            if (this.isPriceMetadataReady()) {
                if (params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayCurrentDay || params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayFiveDay) {
                    _mixRequestHandler.default.loadTOPVIntradayData(params.exchange, params.symbol, params.reqSuccessFn, params.reqFailureFn);
                } else {
                    _mixRequestHandler.default.loadTOPVChartData(params.exchange, params.symbol, _chartConstants.default.ChartCategory.Intraday, params.begin, params.reqSuccessFn, params.reqFailureFn);
                }
            } else {
                if (params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayCurrentDay || params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayFiveDay) {
                    numberOfDays = params.chartDataLevel === _chartConstants.default.ChartDataLevel.IntradayCurrentDay ? _chartConstants.default.ChartDataLevel.IntradayCurrentDay : _chartConstants.default.ChartDataLevel.IntradayFiveDay;

                    this.mixReqQueue.enqueue({
                        callbackFn: _mixRequestHandler.default.loadTOPVIntradayData,
                        args: [params.exchange, params.symbol, numberOfDays, params.reqSuccessFn, params.reqFailureFn] // Queue arguments as an array
                    });
                } else {
                    this.mixReqQueue.enqueue({
                        callbackFn: _mixRequestHandler.default.loadTOPVChartData,
                        args: [params.exchange, params.symbol, _chartConstants.default.ChartCategory.Intraday, params.begin, params.reqSuccessFn, params.reqFailureFn] // Queue arguments as an array
                    });
                }
            }
        },

        downloadHistoryOHLCData: function downloadHistoryOHLCData(params) {
            _mixRequestHandler.default.loadChartData(params.exchange, params.symbol, _chartConstants.default.ChartCategory.History, params.begin, params.chartType, params.reqSuccessFn, params.reqFailureFn);
        },

        downloadTOPVHistoryData: function downloadTOPVHistoryData(params) {
            _mixRequestHandler.default.loadTOPVChartData(params.exchange, params.symbol, _chartConstants.default.ChartCategory.History, params.begin, params.reqSuccessFn, params.reqFailureFn);
        },

        sendNewsAnnBodyRequest: function sendNewsAnnBodyRequest(params) {
            if (params.type === _priceConstants.default.ResponseType.Data.ResponseAnnouncement) {
                _mixRequestHandler.default.loadAnnouncementBody(params.id, params.reqSuccessFn, params.reqFailureFn, params.lan);
            } else {
                _mixRequestHandler.default.loadNewsBody(params.id, params.reqSuccessFn, params.reqFailureFn, params.lan);
            }
        },

        sendAnnouncementSearchRequest: function sendAnnouncementSearchRequest(params, announcementCollection) {
            _mixRequestHandler.default.loadAnnouncementSearchData(params, announcementCollection);
        },

        sendNewsSearchRequest: function sendNewsSearchRequest(params, newsCollection) {
            if (this.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.News], 'SYS')) {
                _mixRequestHandler.default.loadNewsSearchData(params, newsCollection);
            }
        },

        sendTimeAndSalesBacklogRequest: function sendTimeAndSalesBacklogRequest(exchange, symbol, endSequence, pgs) {
            if (_utils.default.validators.isAvailable(exchange)) {
                if (this.isAuthenticated() && this.isPriceMetadataReady()) {
                    this._sendTimeAndSalesMixRequest(exchange, symbol, endSequence, pgs);
                } else {
                    this.mixReqQueue.enqueue({
                        callbackFn: this._sendTimeAndSalesMixRequest,
                        args: [exchange, symbol, endSequence, pgs] // Queue arguments as an array
                    });
                }
            }
        },

        sendExchangeSummaryRequest: function sendExchangeSummaryRequest() {
            var userExg = this.userDS.get('userExchg');

            _ember.default.$.each(_appConfig.default.customisation.supportedLanguages, function (key, lang) {
                _mixRequestHandler.default.sendExchangeSummaryRequest(userExg, lang.code);
            });
        },

        sendFairValueHistoricalPriceRequest: function sendFairValueHistoricalPriceRequest(exg, sym, date, fvCallbackFn) {
            _mixRequestHandler.default.loadFairValueHistoricalPriceData(exg, sym, date, fvCallbackFn);
        },

        sendFairValueReportRequest: function sendFairValueReportRequest(docId, showReportFn) {
            _mixRequestHandler.default.loadFairValueReport(docId, showReportFn);
        },

        sendFairValueReportDownloadRequest: function sendFairValueReportDownloadRequest(reportGuId) {
            _mixRequestHandler.default.downloadFairValueReport(reportGuId);
        },

        sendCorporateActionRequest: function sendCorporateActionRequest(exchange, symbol, callbackFn, startDate) {
            _mixRequestHandler.default.sendCorporateActionRequest(exchange, symbol, callbackFn, startDate);
        },

        sendVolumeWatcherRequest: function sendVolumeWatcherRequest(exchange) {
            _mixRequestHandler.default.sendVolumeWatcherRequest(exchange);
        },

        sendOptionChainRequest: function sendOptionChainRequest(params, callbackFn) {
            _mixRequestHandler.default.sendOptionChainRequest(params, callbackFn);
        },

        sendProductSubscriptionRequest: function sendProductSubscriptionRequest(productId, encryptedToken) {
            _mixRequestHandler.default.sendProductSubscriptionRequest(productId, encryptedToken);
        },

        sendCDVAndYTDPRequest: function sendCDVAndYTDPRequest(exchange, callbackFn) {
            _mixRequestHandler.default.loadCDVAndYTDPRequest(exchange, callbackFn);
        },

        sendBetaRequest: function sendBetaRequest(exchange, symbol, instrumentType, callbackFn) {
            _mixRequestHandler.default.loadBetaRequest(exchange, symbol, instrumentType, callbackFn);
        },

        sendTechnicalScoreRequest: function sendTechnicalScoreRequest(exchange, symbol, chartCategory, begin, callbackFn) {
            _mixRequestHandler.default.loadTechnicalScoreData(exchange, symbol, chartCategory, begin, callbackFn);
        },

        sendToEmail: function sendToEmail(content, recipients) {
            if (_appConfig.default.customisation.isEmbeddedMode) {
                if (window.opener) {
                    window.opener.globals.sendEmail(content, recipients);
                    _utils.default.logger.logDebug('sendToEmail: success');
                } else {
                    _utils.default.logger.logDebug('sendToEmail: window.opener not available');
                }
            } else {
                window.open(content);
            }
        },

        notifyAlertTrigger: function notifyAlertTrigger(alert) {
            _sharedService.default.getService('priceUI').notifyAlertTrigger(alert);
        },

        onPriceMetaReady: function onPriceMetaReady(isSuccess) {
            if (isSuccess) {
                this.set('isPriceMetaReady', true);

                if (this.isAuthenticated()) {
                    this._sendQueuedMixSocketRequest();
                }
            }

            this._sendPriceMetaReadySubscription(isSuccess);
        },

        addLoginIndexPanelRequest: function addLoginIndexPanelRequest(callBackFunc) {
            this._addLoginIndexPanelRequest(callBackFunc);
        },

        /* *
         * Subscribe and Un-subscribe from xstream  updates
         * @param exchange Exchange Code string
         * @param symbol Index Code string
         */
        addXStreamRequest: function addXStreamRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestXStream);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeXStreamRequest: function removeXStreamRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestXStream);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        addXStreamBulkRequest: function addXStreamBulkRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateAddExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestXStream);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeXStreamBulkRequest: function removeXStreamBulkRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestXStream);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        addFSBulkRequest: function addFSBulkRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateAddExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestFSBulk);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        removeFSBulkRequest: function removeFSBulkRequest(exchange) {
            if (_utils.default.validators.isAvailable(exchange)) {
                var req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestFSBulk);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        addIntradayTechScoreRequest: function addIntradayTechScoreRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                if (this.isPriceMetadataReady()) {
                    this._sendIntraDayTechScoreRequest(exchange, symbol);
                } else {
                    this.socketReqQueue.enqueue({
                        callbackFn: this._sendIntraDayTechScoreRequest,
                        args: [exchange, symbol]
                    });
                }
            }
        },

        removeIntradayTechScoreRequest: function removeIntradayTechScoreRequest(exchange, symbol) {
            if (_utils.default.validators.isAvailable(exchange) && _utils.default.validators.isAvailable(symbol)) {
                var req = _priceSocketRequestHandler.default.generateRemoveSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestTechnicalScore);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        /* *
         * Check whether user default exchange and current exchange available in authentication response
         * Update user exchanges according to subscription
         */
        _updateUserExchange: function _updateUserExchange(origAuthSuccessCb) {
            var that = this;
            var userExchgs = this.get('userDS.userExchg');

            if (userExchgs && userExchgs.length > 0) {
                var exg = userExchgs[0];

                if (userExchgs.contains(_sharedService.default.userSettings.get('price.currentExchange'))) {
                    this._exchangeMetaReady(origAuthSuccessCb, false);
                } else {
                    this.exchangeDS.getExchangeMetadata(exg, true, function () {
                        that._exchangeMetaReady(origAuthSuccessCb, true);
                    });

                    if (!userExchgs.contains(_sharedService.default.userSettings.get('price.userDefaultExg'))) {
                        _sharedService.default.userSettings.set('price.userDefaultExg', exg);
                    }

                    _utils.default.logger.logInfo('User current exchange updated to: ' + exg);
                }
            }
        },

        _exchangeMetaReady: function _exchangeMetaReady(origAuthSuccessCb, isRefreshWidgets) {
            var authSuccessSubscription = this.get('authSuccessSubscription');

            if (authSuccessSubscription) {
                _ember.default.$.each(authSuccessSubscription, function (id, subscriber) {
                    if (subscriber && _ember.default.$.isFunction(subscriber.onAuthSuccess)) {
                        subscriber.onAuthSuccess();
                    }
                });
            }

            if (isRefreshWidgets) {
                _sharedService.default.getService('sharedUI').refreshPanelWidgets({ exg: _sharedService.default.userSettings.get('price.currentExchange') });
            }

            if (_ember.default.$.isFunction(origAuthSuccessCb)) {
                origAuthSuccessCb();
            }

            this.set('isAuthResponse', true);
        },

        _getStockMessageType: function _getStockMessageType(assetType) {
            var messageType;

            switch (assetType) {
                case _utils.default.AssetTypes.Indices:
                    messageType = _priceConstants.default.RequestType.Data.RequestIndex;
                    break;

                case _utils.default.AssetTypes.Option:
                    messageType = _priceConstants.default.RequestType.Data.RequestOption;
                    break;

                default:
                    messageType = _priceConstants.default.RequestType.Data.RequestEquity;
                    break;
            }

            return messageType;
        },

        _updateSymbolCodeArray: function _updateSymbolCodeArray(symbolCodeArray, assetType) {
            var that = this;

            _ember.default.$.each(symbolCodeArray, function (index, val) {
                symbolCodeArray[index] = that._updateSymbolCode(val, assetType);
            });

            return symbolCodeArray;
        },

        _updateSymbolCode: function _updateSymbolCode(symbolCode, assetType) {
            return assetType === _utils.default.AssetTypes.Option ? symbolCode.replaceAll('\\', '\\\\') : symbolCode;
        },

        _sendPriceMetaReadySubscription: function _sendPriceMetaReadySubscription(isSuccess) {
            _ember.default.$.each(this.get('priceMetaReadySubscription'), function (key, subscriber) {
                if (subscriber && _ember.default.$.isFunction(subscriber.onPriceMetaReady)) {
                    subscriber.onPriceMetaReady(isSuccess);
                }
            });
        },

        _sendQueuedMixSocketRequest: function _sendQueuedMixSocketRequest() {
            while (this.mixReqQueue.getLength() > 0) {
                // Get queued request
                var mixReqObj = this.mixReqQueue.dequeue();

                // Call queued function
                // Pass-in queued arguments as an array, but use as properties inside callback function
                mixReqObj.callbackFn.apply(this, mixReqObj.args);
            }

            while (this.socketReqQueue.getLength() > 0) {
                // Get queued request
                var socketReqObj = this.socketReqQueue.dequeue();

                // Call queued function
                // Pass-in queued arguments as an array, but use as properties inside callback function
                socketReqObj.callbackFn.apply(this, socketReqObj.args);
            }
        },

        _sendMarketDepthByPriceRequest: function _sendMarketDepthByPriceRequest(exchange, symbol) {
            var mdpWindowTypes = [_priceConstants.default.WindowType.MarketDepthByPrice, _priceConstants.default.WindowType.MarketDepthByPriceAdvanced];

            if (!this.userDS.isExchangeDelayed(exchange) && this.userDS.isWindowTypeAvailable(mdpWindowTypes, exchange)) {
                var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestMarketDepthByPrice);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        _sendMarketDepthByOrderRequest: function _sendMarketDepthByOrderRequest(exchange, symbol) {
            var mdoWindowTypes = [_priceConstants.default.WindowType.MarketDepthByOrder, _priceConstants.default.WindowType.MarketDepthByOrderAdvanced];

            if (!this.userDS.isExchangeDelayed(exchange) && this.userDS.isWindowTypeAvailable(mdoWindowTypes, exchange)) {
                var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestMarketDepthByOrder);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        _sendTimeAndSalesRequest: function _sendTimeAndSalesRequest(exchange, symbol, isShowBuyerSeller) {
            if (!this.userDS.isExchangeDelayed(exchange)) {
                var reqType = isShowBuyerSeller ? _priceConstants.default.RequestType.Data.RequestTimeAndSalesDetail : _priceConstants.default.RequestType.Data.RequestTimeAndSales;
                var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, symbol, reqType);

                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        _sendMarketTimeAndSalesRequest: function _sendMarketTimeAndSalesRequest(exchange) {
            if (!this.userDS.isExchangeDelayed(exchange)) {
                var req = _priceSocketRequestHandler.default.generateAddExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestTimeAndSales);
                this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
            }
        },

        _sendIntraDayChartRequest: function _sendIntraDayChartRequest(exchange, symbol) {
            var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestOHLC);
            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        _sendTOPVIntraDayChartRequest: function _sendTOPVIntraDayChartRequest(exchange, symbol) {
            var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestTOPVOHLC);
            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        _sendTimeAndSalesMixRequest: function _sendTimeAndSalesMixRequest(exchange, symbol, endSequence, pgs) {
            if (!this.userDS.isExchangeDelayed(exchange)) {
                _mixRequestHandler.default.sendTimeAndSalesBackLogRequest(exchange, symbol, endSequence, pgs);
            }
        },

        _sendCalenderEventMixRequest: function _sendCalenderEventMixRequest(exchange, callbackFn) {
            _mixRequestHandler.default.sendCalenderEventsRequest(exchange, callbackFn);
        },

        _sendYoutubeEventMixRequest: function _sendYoutubeEventMixRequest(nextPageUrl, callbackFn) {
            _mixRequestHandler.default.sendYoutubeEventsRequest(nextPageUrl, callbackFn);
        },

        _sendInstagramEventMixRequest: function _sendInstagramEventMixRequest() {
            _mixRequestHandler.default.sendInstagramEventsRequest();
        },

        _sendFacebookEventMixRequest: function _sendFacebookEventMixRequest(nextPageUrl, callbackFn) {
            _mixRequestHandler.default.sendFacebookEventsRequest(nextPageUrl, callbackFn);
        },

        _sendDownloadStatementMixRequest: function _sendDownloadStatementMixRequest(requestObj) {
            _mixRequestHandler.default.sendDownloadStatementRequest(requestObj);
        },

        _sendPressReleaseMixRequest: function _sendPressReleaseMixRequest() {
            _mixRequestHandler.default.sendPressReleaseRequest();
        },

        _sendAddFullMarketSymbolRequest: function _sendAddFullMarketSymbolRequest(exchange, subMarketId) {
            var req;

            if (subMarketId) {
                req = _priceSocketRequestHandler.default.generateAddExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestEquity, '', subMarketId);
            } else {
                req = _priceSocketRequestHandler.default.generateAddExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestEquity);
            }

            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        _sendRemoveFullMarketSymbolRequest: function _sendRemoveFullMarketSymbolRequest(exchange, subMarketId) {
            var req;

            if (subMarketId) {
                req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestEquity, '', subMarketId);
            } else {
                req = _priceSocketRequestHandler.default.generateRemoveExchangeRequest(exchange, _priceConstants.default.RequestType.Data.RequestEquity);
            }

            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        },

        _addLoginIndexPanelRequest: function _addLoginIndexPanelRequest(callBackFunc) {
            _mixRequestHandler.default.sendLoginIndexPanelRequest(callBackFunc);
        },

        sendFileUploadRequest: function sendFileUploadRequest(data, callBackFunc) {
            _mixRequestHandler.default.uploadFile(data, callBackFunc);
        },

        _sendIntraDayTechScoreRequest: function _sendIntraDayTechScoreRequest(exchange, symbol) {
            var req = _priceSocketRequestHandler.default.generateAddSymbolRequest(exchange, symbol, _priceConstants.default.RequestType.Data.RequestTechnicalScore);
            this.webSocketManager.sendData(req, _priceConstants.default.SocketConnectionType.QuoteServer);
        }
    });
});
define('universal-app/models/price/price-subscription-manager', ['exports', '../../utils/utils'], function (exports, _utils) {
    'use strict';

    function Node(value) {
        this.value = value;
        this.paramArray = [];
        this.reqCount = 0;
        this.children = {};
        this.hasOwnChildren = false;
        this.parent = null;

        this.setParentNode = function (node) {
            this.parent = node;
        };

        this.addChild = function (node) {
            node.setParentNode(this);
            this.children[node.value] = node;

            // Fill the param array using the parent node values
            node.paramArray.push.apply(node.paramArray, this.paramArray);
            node.paramArray.push(node.value);
        };

        this.getChildren = function () {
            return this.children;
        };

        this.increaseRequestCount = function () {
            this.reqCount++;
        };

        this.decreaseRequestCount = function () {
            this.reqCount--;

            if (this.reqCount < 0) {
                _utils.default.logger.logDebug('ERROR : Invalid subscription handling for value : ' + this.value + ' req Count : ' + this.reqCount);
                this.reqCount = 0;
            }
        };
    }

    exports.default = function () {
        var root = new Node('root');

        var addSubscription = function addSubscription(type, exchange, symbol, subMkt) {
            var retVal;
            var reqArray = [];

            // If subMkt is available symbol can't be undefined
            if (subMkt !== undefined && symbol !== undefined) {
                retVal = _addSubscription(root, [type, exchange, symbol, subMkt], 0, true, reqArray);
            } else if (symbol !== undefined) {
                retVal = _addSubscription(root, [type, exchange, symbol], 0, true, reqArray);
            } else if (exchange !== undefined) {
                retVal = _addSubscription(root, [type, exchange], 0, true, reqArray);
            } else {
                // This cannot happen. So return error value
                retVal = { retVal: -1, reqArray: reqArray };
            }

            return retVal;
        };

        var removeSubscription = function removeSubscription(type, exchange, symbol, subMkt) {
            var retVal;
            var reqArray = [];

            if (subMkt !== undefined && symbol !== undefined) {
                retVal = _removeSubscription(root, [type, exchange, symbol, subMkt], 0, true, reqArray);
            } else if (symbol !== undefined) {
                retVal = _removeSubscription(root, [type, exchange, symbol], 0, true, reqArray);
            } else if (exchange !== undefined) {
                retVal = _removeSubscription(root, [type, exchange], 0, true, reqArray);
            } else {
                // This cannot happen. So return default value
                retVal = { retVal: -1, reqArray: reqArray };
            }

            return retVal;
        };

        var getCurrentSubscriptions = function getCurrentSubscriptions() {
            var reqArray = [];

            _getChildSubscriptions(root, reqArray);

            return reqArray;
        };

        var _getChildSubscriptions = function _getChildSubscriptions(currentNode, reqArray) {
            var children = currentNode.getChildren();

            for (var property in children) {
                if (children.hasOwnProperty(property)) {
                    var iterationNode = children[property];

                    if (iterationNode.reqCount > 0) {
                        _sendRequest(iterationNode.paramArray, reqArray);
                    } else {
                        _getChildSubscriptions(iterationNode, reqArray);
                    }
                }
            }
        };

        var _sendRequest = function _sendRequest(arrValues, reqArray) {
            var len = arrValues.length;
            var req;

            switch (len) {
                case 3:
                    var type = parseInt(arrValues[0], 10);

                    if (type === 77 || type === 27) {
                        req = ['{"40":"', arrValues[0], '","E":"', arrValues[1], '","L":"', arrValues[2], '"}\n'].join('');
                    } else {
                        // 80 type general requests
                        req = ['{"80":"', arrValues[0], '","E":"', arrValues[1], '","S":"', arrValues[2], '"}\n'].join('');
                    }
                    break;

                case 2:
                    // 40 type general requests
                    req = ['{"40":"', arrValues[0], '","E":"', arrValues[1], '"}\n'].join('');
                    break;

                default:
                    _utils.default.logger.logWarning('Un-known subscription tree state');
                    break;
            }

            if (req) {
                req = req.length + req;
                reqArray[reqArray.length] = req;
            }
        };

        var _addSubscription = function _addSubscription(currentNode, arrValues, indexToProcess, sendAddRequests, reqArray) {
            // Get the children list
            var children = currentNode.getChildren();

            if (arrValues.length === indexToProcess) {
                // Time to exit :)
                // Check if there are child nodes under current node
                if (currentNode.hasOwnChildren) {
                    // Send un - subscriptions to all children as they are masked by the parent node's subscription
                    for (var property in children) {
                        // All these must be 80 type requests
                        if (children.hasOwnProperty(property)) {
                            var iterationNode = children[property];

                            if (iterationNode.reqCount > 0) {
                                var req = ['{"81":"', arrValues[0], '","E":"', arrValues[1], '","S":"', iterationNode.value, '"}\n'].join('');
                                req = req.length + req;

                                reqArray[reqArray.length] = req;
                            }
                        }
                    }
                }

                currentNode.increaseRequestCount();

                if (sendAddRequests) {
                    return { retVal: currentNode.reqCount, reqArray: reqArray };
                } else {
                    return { retVal: -1, reqArray: reqArray };
                }
            }

            var newNode;
            var param = arrValues[indexToProcess];
            var _sendAddRequests = true;

            if (!children[param]) {
                newNode = new Node(param);
                currentNode.addChild(newNode);

                if (currentNode.reqCount > 0) {
                    // Add child but no need to send requests as there is already active subscription covering it
                    _sendAddRequests = false;
                }

                currentNode.hasOwnChildren = true;
            } else {
                newNode = children[param];
            }

            return _addSubscription(newNode, arrValues, indexToProcess + 1, _sendAddRequests, reqArray);
        };

        var _removeSubscription = function _removeSubscription(currentNode, arrValues, indexToProcess, sendRemoveRequests, reqArray) {
            // Get the children list
            var children = currentNode.getChildren();

            if (arrValues.length === indexToProcess) {
                // Time to exit :)

                // Check if there are child nodes under current node
                if (currentNode.hasOwnChildren) {
                    // Send un - subscriptions to all children as they are masked by the parent node's subscription
                    for (var property in children) {
                        // All these must be 80 type requests
                        if (children.hasOwnProperty(property)) {
                            var iterationNode = children[property];

                            if (iterationNode.reqCount > 0) {
                                var req = ['{"80":"', arrValues[0], '","E":"', arrValues[1], '","S":"', iterationNode.value, '"}\n'].join('');
                                req = req.length + req;

                                reqArray[reqArray.length] = req;
                            }
                        }
                    }
                }

                currentNode.decreaseRequestCount();

                if (sendRemoveRequests) {
                    return { retVal: currentNode.reqCount, reqArray: reqArray };
                } else {
                    return { retVal: -1, reqArray: reqArray };
                }
            }

            var newNode;
            var param = arrValues[indexToProcess];
            var _sendRemoveRequests = true;

            if (!children[param]) {
                // This is an error. Un-subscription cannot happen without a subscription
                // Return an error
                return { retVal: -1, reqArray: reqArray };
            } else {
                newNode = children[param];

                if (currentNode.reqCount > 0) {
                    _sendRemoveRequests = false;
                }
            }

            return _removeSubscription(newNode, arrValues, indexToProcess + 1, _sendRemoveRequests, reqArray);
        };

        return {
            addSubscription: addSubscription,
            removeSubscription: removeSubscription,
            getCurrentSubscriptions: getCurrentSubscriptions
        };
    }();
});
define('universal-app/models/price/protocols/mix-web/mix-request-generator', ['exports', 'ember', '../../price-constants', '../../../../models/shared/shared-service', '../../../chart/chart-constants', '../../../../utils/utils', '../../../../config/app-config'], function (exports, _ember, _priceConstants, _sharedService, _chartConstants, _utils, _appConfig) {
    'use strict';

    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }

        return obj;
    }

    exports.default = function () {
        var _ref;

        var generateExchangeMetadataUrl = function generateExchangeMetadataUrl(exchange, language) {
            var metaObj = _sharedService.default.getService('price').priceMeta.getExgMetaObj(exchange);
            var wlVer = metaObj.DAT.VRS.WL;
            var srcVer = metaObj.DAT.VRS.SRC;

            var queryParams = {
                RT: _priceConstants.default.MixRequest.ExchangeFullMeta.RT,
                SRC: exchange,
                MOD: _priceConstants.default.MetaVersionKeys.WatchList + ':' + (wlVer ? wlVer : '0') + ',' + _priceConstants.default.MetaVersionKeys.ExchangeDefinitions + ':' + (srcVer ? srcVer : '0'),
                L: language
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateSymbolSearchUrl = function generateSymbolSearchUrl(searchKey, language, pageSize, params) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.SymbolSearch.RT,
                ST: _priceConstants.default.MixRequest.SymbolSearch.ST,
                PGI: '0',
                PGS: pageSize,
                IFLD: _priceConstants.default.MixRequest.SymbolSearch.IFLD,
                XFLD: _priceConstants.default.MixRequest.SymbolSearch.XFLD,
                SK: searchKey,
                AE: _priceConstants.default.MixRequestParameters.AllExchange,
                L: language
            };

            // Only option symbols should be available in option symbol search, else other symbols except options
            queryParams.UE = params.isOptionMode ? 'OPRA' : _sharedService.default.getService('price').userDS.get('allExg').removeInClone('OPRA').join(_utils.default.Constants.StringConst.Comma);

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        var generateSymbolValidationUrl = function generateSymbolValidationUrl(exchange, symbol, instrumentType) {
            var validationSymbol = _getValidationSymbol(exchange, symbol, instrumentType);

            var queryParams = {
                RT: _priceConstants.default.MixRequest.SymbolValidation.RT,
                E: exchange,
                S: validationSymbol,
                AE: _priceConstants.default.MixRequestParameters.AllExchange,
                AS: _priceConstants.default.MixRequestParameters.None
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateSymbolValidationBulkUrl = function generateSymbolValidationBulkUrl(symbolObjArray) {
            var symArray = [];

            _ember.default.$.each(symbolObjArray, function (index, valueObj) {
                symArray[symArray.length] = _getValidationSymbol(valueObj.exg, valueObj.sym, valueObj.inst);
            });

            var queryParams = {
                RT: _priceConstants.default.MixRequest.SymbolValidation.RT,
                S: symArray.join(_utils.default.Constants.StringConst.Comma), // Symbol list
                AE: _priceConstants.default.MixRequestParameters.AllExchange,
                AS: _priceConstants.default.MixRequestParameters.None,
                UNC: '0'
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        //
        // News & announcement specific requests
        //
        var generateAnnouncementBodyUrl = function generateAnnouncementBodyUrl(annID, language) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.AnnouncementBody.RT,
                AI: annID, // Announcement Id
                L: language
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateNewsBodyUrl = function generateNewsBodyUrl(newsID, language) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.NewsBody.RT,
                NI: newsID, // News Id
                L: language
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateAnnouncementSearchUrl = function generateAnnouncementSearchUrl(params) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.AnnouncementSearch.RT,
                AE: _priceConstants.default.MixRequestParameters.None,
                UNC: _priceConstants.default.MixRequestParameters.None,
                PGS: params.pageSize
            };

            if (params.AllExchange) {
                queryParams.AE = params.AllExchange;
            }

            if (params.exgList) {
                queryParams.UE = params.exgList;
            }

            if (params.exchange) {
                queryParams.E = params.exchange;
            }

            if (params.searchKey) {
                queryParams.SK = encodeURI(params.searchKey);
            }

            if (params.symbol) {
                queryParams.S = params.symbol;
            }

            if (params.startDate) {
                queryParams.SD = params.startDate;
            }

            if (params.endDate) {
                queryParams.ED = params.endDate;
            }

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        var generateNewsSearchUrl = function generateNewsSearchUrl(params) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.NewsSearch.RT,
                AE: _priceConstants.default.MixRequestParameters.None,
                UNC: _priceConstants.default.MixRequestParameters.None,
                PGS: params.pageSize
            };

            if (params.AllExchange) {
                queryParams.AE = params.AllExchange;
            }

            if (params.exchange) {
                queryParams.E = params.exchange;
            }

            if (params.searchKey) {
                queryParams.SK = encodeURI(params.searchKey);
            }

            if (params.symbol) {
                queryParams.S = params.symbol;
            }

            if (params.provider) {
                queryParams.PRV = params.provider;
            }

            if (params.startDate) {
                queryParams.SD = params.startDate;
            }

            if (params.endDate) {
                queryParams.ED = params.endDate;
            }

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        //
        // Company Profile specific requests
        //
        var generateCompanyProfileUrl = function generateCompanyProfileUrl(exchange, symbol) {
            var symbolKey = _getValidationSymbol(exchange, symbol);
            var queryParams = {
                RT: _priceConstants.default.MixRequest.CompanyProfile.RT,
                S: symbolKey,
                CIT: _priceConstants.default.MixRequest.CompanyProfile.CIT,
                FC: '1',
                UNC: '0'
            };
            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        // Gms summary specific request
        var generateGmsSummaryUrl = function generateGmsSummaryUrl() {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.SymbolMetaDetails.RT,
                MOD: 'GMS'
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.gms, queryParams, _getGeneralQueryParams());
        };

        // System Meta Data specific request
        var generateSystemMetaDataUrl = function generateSystemMetaDataUrl() {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.SymbolMetaDetails.RT
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateTimeAndSalesBacklogUrl = function generateTimeAndSalesBacklogUrl(exchange, symbol, endSequence, pgs) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.TimeAndSalesBacklog.RT,
                E: exchange,
                S: symbol ? symbol : '',
                AS: symbol === undefined ? _priceConstants.default.MixRequestParameters.AllSymbol : _priceConstants.default.MixRequestParameters.None,
                CT: _priceConstants.default.MixRequest.TimeAndSalesBacklog.ChartType.TickCount,
                SO: 'DESC',
                SC: _priceConstants.default.MixRequestParameters.None
            };

            if (pgs) {
                queryParams = _ember.default.$.extend(queryParams, { PGS: pgs });
            }

            if (_appConfig.default.customisation.isShowBuyerSeller) {
                queryParams = _ember.default.$.extend(queryParams, { DT: 1 });
                queryParams = _ember.default.$.extend(queryParams, { IFLD: _priceConstants.default.MixRequest.TimeAndSalesBacklog.IFLD });
            }

            if (endSequence) {
                queryParams = _ember.default.$.extend(queryParams, { ENDTSI: endSequence });
            }

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        var generateCalenderEventsUrl = function generateCalenderEventsUrl() {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.CalenderEvents.RT,
                SNO: _priceConstants.default.MixRequest.CalenderEvents.SNO,
                ENO: _priceConstants.default.MixRequest.CalenderEvents.ENO
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.adx, queryParams);
        };

        var generatePressReleaseUrl = function generatePressReleaseUrl() {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.PressRelease.RT,
                SNO: _priceConstants.default.MixRequest.PressRelease.SNO,
                ENO: _priceConstants.default.MixRequest.PressRelease.ENO
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.adx, queryParams, _getGeneralQueryParams());
        };

        var generateYoutubeUrl = function generateYoutubeUrl(nextPageUrl) {
            if (nextPageUrl) {
                return 'https://www.googleapis.com/youtube/v3/search?pageToken=' + nextPageUrl + '&key=AIzaSyDBxywgpPXh6ajTPBPR9z8FfbwYmgituR0&channelId=UCTXDxQ1zAsRC1mX1zHzbEVw&part=snippet,id&order=date&maxResults=50';
            } else {
                return 'https://www.googleapis.com/youtube/v3/search?key=AIzaSyDBxywgpPXh6ajTPBPR9z8FfbwYmgituR0&channelId=UCTXDxQ1zAsRC1mX1zHzbEVw&part=snippet,id&order=date&maxResults=50';
            }
        };

        var generateInstagramUrl = function generateInstagramUrl() {
            return 'https://api.instagram.com/v1/users/self/media/recent/?access_token=2074123657.1c9d06e.bf76112736ac4554a76f34dc21d186f3';
        };

        var generateFacebookUrl = function generateFacebookUrl(nextPageUrl) {
            if (nextPageUrl) {
                return nextPageUrl;
            } else {
                return 'https://graph.facebook.com/v2.11/AbuDhabiSecuritiesExchange?fields=posts%7Bpicture%2Cmessage%2Cpermalink_url%2Ccreated_time%7D&access_token=1999959566697571|6gGd9wQVNSolZrwM2s-DC5vVrDw';
            }
        };

        var generateDownloadStatementUrl = function generateDownloadStatementUrl(queryParams) {
            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.fileServer, queryParams);
        };

        // Alert Specific Request
        var generateAlertHistoryUrl = function generateAlertHistoryUrl() {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.AlertSummary.RT,
                TA: 0,
                AC: 'PRC',
                UID: _sharedService.default.getService('price').userDS.username
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        //
        // Chart specific requests
        //
        var generateIntradayDataUrl = function generateIntradayDataUrl(exchange, symbol, numberOfDays, chartType) {
            _utils.default.logger.logTrace('Url generation of intraday chart request is triggered from Mix request generator');

            var queryParams = {
                RT: _priceConstants.default.MixRequest.Chart.RT,
                E: exchange,
                S: symbol,
                AE: _priceConstants.default.MixRequestParameters.AllExchange,
                CM: _chartConstants.default.ChartDataRequestMode.IntradayActiveStock,
                NOD: numberOfDays, // No of active days
                // CT: ChartConstants.ChartDataType.Ratio // Chart type
                CT: chartType
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.chart, queryParams, _getGeneralQueryParams());
        };

        var generateTOPVIntradayDataUrl = function generateTOPVIntradayDataUrl(exchange, symbol) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.TOPVChart.RT,
                E: exchange,
                S: symbol,
                AE: _priceConstants.default.MixRequestParameters.AllExchange,
                CM: _chartConstants.default.ChartDataRequestMode.IntradayActiveStock,
                CT: _chartConstants.default.ChartDataType.Basic // Chart type
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.chartTopv, queryParams, _getGeneralQueryParams());
        };

        var generateChartDataUrl = function generateChartDataUrl(exchange, symbol, charCategory, begin, chartType) {
            _utils.default.logger.logTrace('Url generation of chart request is triggered from Mix request generator');

            // Todo [Ravindu] CT value needs to be change for get more data in history mode [5] - Corporate action and News
            var beginDate;
            if (charCategory.ID === _chartConstants.default.ChartCategory.History.ID && begin !== undefined) {
                beginDate = _utils.default.formatters.generateHistoryBeginDateString(begin, 0);
            } else if (charCategory.ID === _chartConstants.default.ChartCategory.Intraday.ID && begin !== undefined) {
                beginDate = _utils.default.formatters.generateIntradayBeginDateString(begin);
            } else {
                beginDate = _utils.default.formatters.generateChartBeginDateString(charCategory);
            }

            var queryParams = {
                RT: _priceConstants.default.MixRequest.Chart.RT,
                E: exchange,
                S: symbol,
                AE: _priceConstants.default.MixRequestParameters.AllExchange,
                CM: charCategory.ID === _chartConstants.default.ChartCategory.History.ID ? _chartConstants.default.ChartDataRequestMode.HistoryData : _chartConstants.default.ChartDataRequestMode.IntradayActiveStock,
                // CT: ChartConstants.ChartDataType.Ratio, // Chart type
                CT: chartType,
                SD: beginDate,
                ED: _utils.default.formatters.generateChartEndDateString(charCategory)
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.chart, queryParams, _getGeneralQueryParams());
        };

        var generateExchangeSummaryUrl = function generateExchangeSummaryUrl(exchanges, language) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.ExchangeStockSubMktDetails.RT,
                SRC: exchanges.join(_utils.default.Constants.StringConst.Comma),
                L: language
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateCorporateActionUrl = function generateCorporateActionUrl(exchange, symbol, startDate) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.CorporateAction.RT,
                ITK: '4:' + exchange + ',3:' + symbol,
                SF: 472,
                SCDT: 'CPAC',
                SO: 'DESC',
                FC: 1
            };

            if (startDate && _utils.default.validators.isAvailable(startDate)) {
                queryParams.FDK = '472~3~' + startDate;
            }

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        var generateFairValueHistoricalPriceUrl = function generateFairValueHistoricalPriceUrl(exg, sym, date) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.FairValue.RT,
                IFC: _priceConstants.default.MixRequestParameters.None,
                FC: '1',
                SCDT: 'FRVL',
                SO: 'DESC',
                SF: '2230',
                ITK: '4:' + exg + ',3:' + sym,
                FDK: '2230~3~' + date
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        var generateFairValueReportUrl = function generateFairValueReportUrl(docId) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.FairValueReport.RT,
                SID: '40613373-EE21-11D9-E053-EEF011ACCABC', // Content is pointed to Saudi and since for report generation need to get the data from ldc
                UID: '156683', // so these particular session and user which are pointing to ldc is hard coded here.
                ITK: 'DOC_ID:' + docId,
                UNC: _priceConstants.default.MixRequestParameters.None,
                PGI: _priceConstants.default.MixRequestParameters.None,
                IFC: '1',
                FC: '1',
                PL: _sharedService.default.userSettings.currentLanguage
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.report, queryParams, _getGeneralQueryParams());
        };

        var generateFairValueReportLinkUrl = function generateFairValueReportLinkUrl(reportGuId) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.FairValueReportLink.RT,
                ID: reportGuId,
                SID: '40613373-EE21-11D9-E053-EEF011ACCABC', // Content is pointed to Saudi and since for report generation need to get the data from ldc
                UID: '156683' // so these particular session and user which are pointing to ldc is hard coded here.
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.reportLink, queryParams, {});
        };

        var generateTOPVChartDataUrl = function generateTOPVChartDataUrl(exchange, symbol, charCategory, begin) {
            var beginDate;

            if (charCategory.ID === _chartConstants.default.ChartCategory.History.ID) {
                beginDate = _utils.default.formatters.generateHistoryBeginDateString(0, 1);
            } else if (charCategory.ID === _chartConstants.default.ChartCategory.Intraday.ID && begin !== undefined) {
                beginDate = _utils.default.formatters.generateIntradayBeginDateString(begin);
            } else {
                beginDate = _utils.default.formatters.generateChartBeginDateString(charCategory);
            }

            var queryParams = {
                RT: _priceConstants.default.MixRequest.TOPVChart.RT,
                E: exchange,
                S: symbol,
                AE: _priceConstants.default.MixRequestParameters.AllExchange,
                CM: _chartConstants.default.ChartDataRequestMode.IntradayActiveStock,
                CT: _chartConstants.default.ChartDataType.Basic,
                SD: beginDate,
                ED: _utils.default.formatters.generateChartEndDateString(charCategory)
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.chartTopv, queryParams, _getGeneralQueryParams());
        };

        var generateVolumeWatcherURL = function generateVolumeWatcherURL(exchange) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.VolumeWatcher.RT,
                E: exchange,
                EC: _priceConstants.default.MixRequestParameters.None,
                AE: _priceConstants.default.MixRequestParameters.AllExchange
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateOptionChainURL = function generateOptionChainURL(params) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.OptionChain.RT,
                E: params.exg,
                S: params.sym,
                INS: params.inst,
                OPM: params.optPeriod,
                OPT: params.optListType,
                NMON: params.nearMon,
                IFLD: _priceConstants.default.MixRequest.OptionChain.IFLD,
                OT: params.optType,
                PGI: '0',
                PGS: '1000'
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateExchangeSymbolDataUrl = function generateExchangeSymbolDataUrl(exchange) {
            var metaObj = _sharedService.default.getService('price').priceSymbolMeta.getExgMetaObj(exchange);

            var queryParams = {
                RT: _priceConstants.default.MixRequest.FullSymbolDescription.RT,
                SRC: exchange,
                AS: 1,
                VRS: metaObj.DAT.VRS[0]
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        var generateProductSubscriptionUrl = function generateProductSubscriptionUrl(productId, encryptedToken) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.ProductSubscription.RT,
                UNM: encryptedToken,
                PRD: productId,
                APPID: 'MTBS'
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.prodSub, queryParams, _getGeneralQueryParams(), true);
        };

        var generateLoginIndexPanelUrl = function generateLoginIndexPanelUrl() {
            var symbolKey = _getValidationSymbol(_sharedService.default.userSettings.price.currentExchange, _sharedService.default.userSettings.price.currentIndex, _utils.default.AssetTypes.Indices);

            var queryParams = {
                RT: _priceConstants.default.MixRequest.IndexPanel.RT,
                LI: _priceConstants.default.MixRequest.IndexPanel.LI,
                EC: _priceConstants.default.MixRequest.IndexPanel.EC,
                E: _sharedService.default.userSettings.price.currentExchange,
                UE: _sharedService.default.userSettings.price.currentExchange,
                SS: symbolKey,
                AS: _priceConstants.default.MixRequestParameters.None
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams);
        };

        var generateFinancialUrl = function generateFinancialUrl(exchange, symbol, language, periodType) {
            var symbolKey = _getValidationSymbol(exchange, symbol);

            var queryParams = {
                RT: _priceConstants.default.MixRequest.FinancialRatios.RT,
                CFT: 'IS,CF,BS,FR,MR',
                S: symbolKey,
                L: language,
                DES: _priceConstants.default.MixRequest.FinancialRatios.DES,
                Q: periodType,
                ROW: _priceConstants.default.MixRequest.FinancialRatios.ROW,
                FC: _priceConstants.default.MixRequest.FinancialRatios.FC
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        // Closing Price request
        var generateClosingPriceUrl = function generateClosingPriceUrl(exchange, symbol, language, startDate, endDate) {
            var priceService = _sharedService.default.getService('price');

            var queryParams = {
                RT: _priceConstants.default.MixRequest.ClosingPrice.RT,
                SL: symbol,
                UID: priceService.userDS.userId,
                SID: priceService.userDS.sessionId,
                L: language,
                UNC: _priceConstants.default.MixRequestParameters.EnableUnicode,
                E: exchange,
                SO: 'ASC',
                SD: startDate,
                ED: endDate
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.content, queryParams, _getGeneralQueryParams());
        };

        // Book Shelf request
        var generateBookShelfUrl = function generateBookShelfUrl(exchange) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.BookShelf.RT,
                E: exchange,
                SNO: 1,
                ENO: 10
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.adx, queryParams, _getGeneralQueryParams());
        };

        // User Registration request
        var generateUserRegistrationUrl = function generateUserRegistrationUrl(username, password, email) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.UserCreation.RT,
                UID: username,
                PASS: password,
                EMAIL: email
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.adx, queryParams, _getGeneralQueryParams());
        };

        // Investor Profile Investment Id
        var generateInvestmentIdUrl = function generateInvestmentIdUrl(uname) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.InvestmentId.RT,
                UNM: uname
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.adx, queryParams);
        };

        // Investor Portfolio Investment Id
        var generateInvestorPortfolioUrl = function generateInvestorPortfolioUrl(investId) {
            var queryParams = {
                RT: _priceConstants.default.MixRequest.InvestorPortfolio.RT,
                INUM: investId
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.adx, queryParams);
        };

        // Current Daily Volume and YTDP
        var generateCDVAndYTDPUrl = function generateCDVAndYTDPUrl(exchange) {
            var priceService = _sharedService.default.getService('price');

            var queryParams = {
                RT: _priceConstants.default.MixRequest.IndexPanel.RT,
                LI: _priceConstants.default.MixRequest.IndexPanel.LI,
                E: exchange,
                UE: exchange,
                AS: _priceConstants.default.MixRequestParameters.AllExchange,
                EC: _priceConstants.default.MixRequestParameters.None,
                UNC: _priceConstants.default.MixRequestParameters.None,
                IFLD: 'YTDP'
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams);
        };

        // Beta
        var generateBetaUrl = function generateBetaUrl(exchange, symbol, instrumentType) {
            var priceService = _sharedService.default.getService('price');
            var symbolKey = _getValidationSymbol(exchange, symbol, instrumentType);

            var queryParams = {
                RT: _priceConstants.default.MixRequest.Beta.RT,
                E: exchange,
                UE: exchange,
                SS: symbolKey,
                EC: _priceConstants.default.MixRequestParameters.None
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams);
        };

        // Technical Score
        var generateTechnicalScoreUrl = function generateTechnicalScoreUrl(exchange, symbol, charCategory, begin) {
            var beginDate;

            if (charCategory.ID === _chartConstants.default.ChartCategory.History.ID && begin) {
                beginDate = _utils.default.formatters.generateHistoryBeginDateString(begin, 0);
            } else if (charCategory.ID === _chartConstants.default.ChartCategory.Intraday.ID && begin) {
                beginDate = _utils.default.formatters.generateIntradayBeginDateString(begin);
            } else {
                beginDate = _utils.default.formatters.generateChartBeginDateString(charCategory);
            }

            var queryParams = {
                RT: _priceConstants.default.MixRequest.TechnicalScore.RT,
                E: exchange,
                S: symbol,
                AE: _priceConstants.default.MixRequestParameters.AllExchange,
                SD: beginDate,
                ED: _utils.default.formatters.generateChartEndDateString(charCategory)
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.price, queryParams, _getGeneralQueryParams());
        };

        //
        // private functions
        //
        var _getGeneralQueryParams = function _getGeneralQueryParams() {
            var priceService = _sharedService.default.getService('price');

            return {
                UID: priceService.userDS.userId,
                SID: priceService.userDS.sessionId,
                L: _sharedService.default.userSettings.currentLanguage, // User current Language
                UNC: _priceConstants.default.MixRequestParameters.EnableUnicode,
                UE: _sharedService.default.userSettings.price.currentExchange,
                H: _priceConstants.default.MixRequestParameters.EnableHeaderTag,
                M: _priceConstants.default.MixRequestParameters.EnableMetaTag
            };
        };

        var _getValidationSymbol = function _getValidationSymbol(exchange, symbol, instrumentType) {
            if (_utils.default.validators.isAvailable(instrumentType)) {
                return [exchange, instrumentType, symbol].join(_utils.default.Constants.StringConst.Tilde);
            } else {
                return [exchange, symbol].join(_utils.default.Constants.StringConst.Tilde);
            }
        };

        var generateFundamentalScoreURL = function generateFundamentalScoreURL(exchange) {
            var priceService = _sharedService.default.getService('price');

            var queryParams = {
                RT: _priceConstants.default.MixRequest.TechnicalScore.RT,
                E: exchange,
                AS: _priceConstants.default.MixRequestParameters.AllSymbol,
                UID: priceService.userDS.userId,
                SID: priceService.userDS.sessionId,
                MOD: 'FS',
                NOD: 2 // No of active days
            };

            return _utils.default.requestHelper.generateQueryString(_sharedService.default.getService('price').settings.urlTypes.analysis, queryParams);
        };

        return _ref = {
            generateExchangeMetadataUrl: generateExchangeMetadataUrl,
            generateSymbolValidationUrl: generateSymbolValidationUrl,
            generateSymbolValidationBulkUrl: generateSymbolValidationBulkUrl,
            generateSymbolSearchUrl: generateSymbolSearchUrl,
            generateIntradayDataUrl: generateIntradayDataUrl,
            generateChartDataUrl: generateChartDataUrl,
            generateAnnouncementBodyUrl: generateAnnouncementBodyUrl,
            generateNewsBodyUrl: generateNewsBodyUrl,
            generateAnnouncementSearchUrl: generateAnnouncementSearchUrl,
            generateNewsSearchUrl: generateNewsSearchUrl,
            generateCompanyProfileUrl: generateCompanyProfileUrl,
            generateTimeAndSalesBacklogUrl: generateTimeAndSalesBacklogUrl,
            generateCalenderEventsUrl: generateCalenderEventsUrl,
            generatePressReleaseUrl: generatePressReleaseUrl,
            generateYoutubeUrl: generateYoutubeUrl,
            generateInstagramUrl: generateInstagramUrl,
            generateFacebookUrl: generateFacebookUrl,
            generateDownloadStatementUrl: generateDownloadStatementUrl }, _defineProperty(_ref, 'generateDownloadStatementUrl', generateDownloadStatementUrl), _defineProperty(_ref, 'generateExchangeSummaryUrl', generateExchangeSummaryUrl), _defineProperty(_ref, 'generateGmsSummaryUrl', generateGmsSummaryUrl), _defineProperty(_ref, 'generateSystemMetaDataUrl', generateSystemMetaDataUrl), _defineProperty(_ref, 'generateAlertHistoryUrl', generateAlertHistoryUrl), _defineProperty(_ref, 'generateFairValueHistoricalPriceUrl', generateFairValueHistoricalPriceUrl), _defineProperty(_ref, 'generateFairValueReportUrl', generateFairValueReportUrl), _defineProperty(_ref, 'generateFairValueReportLinkUrl', generateFairValueReportLinkUrl), _defineProperty(_ref, 'generateCorporateActionUrl', generateCorporateActionUrl), _defineProperty(_ref, 'generateTOPVChartDataUrl', generateTOPVChartDataUrl), _defineProperty(_ref, 'generateTOPVIntradayDataUrl', generateTOPVIntradayDataUrl), _defineProperty(_ref, 'generateVolumeWatcherURL', generateVolumeWatcherURL), _defineProperty(_ref, 'generateOptionChainURL', generateOptionChainURL), _defineProperty(_ref, 'generateExchangeSymbolDataUrl', generateExchangeSymbolDataUrl), _defineProperty(_ref, 'generateProductSubscriptionUrl', generateProductSubscriptionUrl), _defineProperty(_ref, 'generateLoginIndexPanelUrl', generateLoginIndexPanelUrl), _defineProperty(_ref, 'generateClosingPriceUrl', generateClosingPriceUrl), _defineProperty(_ref, 'generateBookShelfUrl', generateBookShelfUrl), _defineProperty(_ref, 'generateFinancialUrl', generateFinancialUrl), _defineProperty(_ref, 'generateUserRegistrationUrl', generateUserRegistrationUrl), _defineProperty(_ref, 'generateInvestmentIdUrl', generateInvestmentIdUrl), _defineProperty(_ref, 'generateInvestorPortfolioUrl', generateInvestorPortfolioUrl), _defineProperty(_ref, 'generateCDVAndYTDPUrl', generateCDVAndYTDPUrl), _defineProperty(_ref, 'generateBetaUrl', generateBetaUrl), _defineProperty(_ref, 'generateFundamentalScoreURL', generateFundamentalScoreURL), _defineProperty(_ref, 'generateTechnicalScoreUrl', generateTechnicalScoreUrl), _ref;
    }();
});
define('universal-app/models/price/protocols/mix-web/mix-request-handler', ['exports', 'ember', '../../../shared/communication-adapters/web-http-connection', './mix-response-handler', './mix-request-generator', '../../../shared/shared-service', '../../../chart/chart-constants', '../../../../utils/utils'], function (exports, _ember, _webHttpConnection, _mixResponseHandler, _mixRequestGenerator, _sharedService, _chartConstants, _utils) {
    'use strict';

    exports.default = function () {
        var loadExchangeMetadata = function loadExchangeMetadata(exchange, language, successFn, errorFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateExchangeMetadataUrl(exchange, language),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processExchangeMetadataResponse(dataObj, language, exchange);

                    if (_ember.default.$.isFunction(successFn)) {
                        successFn();
                    }
                },

                onError: function onError() {
                    var priceService = _sharedService.default.getService('price');

                    if (exchange === _sharedService.default.userSettings.price.defaultExchange) {
                        priceService.set('isDefaultMetaRequestFail', true);
                    }

                    if (_ember.default.$.isFunction(errorFn)) {
                        errorFn();
                    }

                    priceService.onPriceMetaReady(false); // Pass false when price meta fail
                    // TODO: Handle error on exchange data loading
                }
            });
        };

        var loadSymbolValidationData = function loadSymbolValidationData(exchange, symbol, instrumentType) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateSymbolValidationUrl(exchange, symbol, instrumentType),
                onSuccess: _mixResponseHandler.default.processSymbolValidationResponse,

                onError: function onError() {
                    // TODO: Handle error on symbol validation data loading
                }
            });
        };

        var loadSymbolValidationBulkData = function loadSymbolValidationBulkData(symbolObjArray) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateSymbolValidationBulkUrl(symbolObjArray),
                onSuccess: _mixResponseHandler.default.processSymbolValidationResponse,

                onError: function onError() {
                    // TODO: Handle error on symbols validation data loading
                }
            });
        };

        var loadSymbolSearchData = function loadSymbolSearchData(searchKey, language, pageSize, notifyFn, params, searchNumber) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateSymbolSearchUrl(searchKey, language, pageSize, params),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processSymbolSearchResponse(dataObj, searchKey, notifyFn, searchNumber);
                },

                onError: function onError() {
                    // TODO: Handle error on symbol search data loading
                }
            });
        };

        //
        // Chart specific requests
        //
        var loadIntradayData = function loadIntradayData(exchange, symbol, numberOfDays, chartType, reqSuccessFn, reqFailureFn) {
            _utils.default.logger.logTrace('Load Intraday Data is triggered from Mix request handler');

            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateIntradayDataUrl(exchange, symbol, numberOfDays, chartType),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processChartResponse(dataObj, _chartConstants.default.ChartCategory.Intraday, reqSuccessFn, reqFailureFn);
                },

                onError: function onError() {
                    // TODO: Handle error on chart data loading
                }
            });
        };

        var loadChartData = function loadChartData(exchange, symbol, chartCategory, begin, chartType, reqSuccessFn, reqFailureFn) {
            _utils.default.logger.logTrace('Load Chart Data is triggered from Mix request handler');

            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateChartDataUrl(exchange, symbol, chartCategory, begin, chartType),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processChartResponse(dataObj, chartCategory, reqSuccessFn, reqFailureFn);
                },

                onError: function onError() {
                    // TODO: Handle error on chart data loading
                }
            });
        };

        //
        // News & announcement specific requests
        //
        var loadAnnouncementBody = function loadAnnouncementBody(annID, reqSuccessFn, reqFailureFn, language) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateAnnouncementBodyUrl(annID, language),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processAnnouncementBodyResponse(dataObj, reqSuccessFn, reqFailureFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(reqFailureFn)) {
                        reqFailureFn();
                    }
                }
            });
        };

        var loadAnnouncementSearchData = function loadAnnouncementSearchData(params, annCollection) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateAnnouncementSearchUrl(params),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processAnnouncementSearchResponse(dataObj, annCollection, params.reqSuccessFn, params.reqFailureFn);
                },

                onError: function onError() {
                    // TODO: Handle error on data loading
                }
            });
        };

        var loadNewsBody = function loadNewsBody(newsID, reqSuccessFn, reqFailureFn, language) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateNewsBodyUrl(newsID, language),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processNewsBodyResponse(dataObj, reqSuccessFn, reqFailureFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(reqFailureFn)) {
                        reqFailureFn();
                    }
                }
            });
        };

        var loadNewsSearchData = function loadNewsSearchData(params, newsCollection) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateNewsSearchUrl(params),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processNewsSearchResponse(dataObj, newsCollection, params.reqSuccessFn, params.reqFailureFn);
                },

                onError: function onError() {
                    // TODO: Handle error on data loading
                }
            });
        };

        //
        // Company Profile specific requests
        //
        var loadCompanyProfileData = function loadCompanyProfileData(exchange, symbol, language, postSuccess, Error) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateCompanyProfileUrl(exchange, symbol),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processCompanyProfileResponse(dataObj, exchange, symbol, language);

                    if (_ember.default.$.isFunction(postSuccess)) {
                        postSuccess();
                    }
                },

                onError: function onError() {
                    // TODO: Handle error on symbol data loading
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        // Gms summary specific profile
        var loadGmsSummary = function loadGmsSummary() {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateGmsSummaryUrl(),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processGmsSummaryResponse(dataObj);
                },

                onError: function onError() {
                    // TODO: Handle error on symbol data loading
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        // System Meta Data specific Request
        var loadSystemMetaData = function loadSystemMetaData() {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateSystemMetaDataUrl(),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processSystemMetaDataResponse(dataObj);
                },

                onError: function onError() {
                    // TODO: Handle error on symbol data loading
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        //
        // Alert Specific Requests
        //
        var loadAlertHistory = function loadAlertHistory() {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateAlertHistoryUrl(),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processAlertHistoryResponse(dataObj);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        var loadFairValueHistoricalPriceData = function loadFairValueHistoricalPriceData(exg, sym, date, fvCallbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateFairValueHistoricalPriceUrl(exg, sym, date),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processFairValueHistoricalPriceResponse(dataObj);
                    fvCallbackFn();
                },

                onError: function onError(error) {
                    _mixResponseHandler.default.onError('Fair Value Data Request Error - ' + error);
                }
            });
        };

        var loadFairValueReport = function loadFairValueReport(docId, showReportFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateFairValueReportUrl(docId),

                onSuccess: function onSuccess(dataObj) {
                    var reportGuId = _mixResponseHandler.default.processFairValueReportResponse(dataObj);

                    showReportFn(reportGuId);
                },

                onError: function onError(error) {
                    _mixResponseHandler.default.onError('Fair Value Report Request Error - ' + error);
                }
            });
        };

        var downloadFairValueReport = function downloadFairValueReport(reportGuId) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateFairValueReportLinkUrl(reportGuId),

                onSuccess: function onSuccess() {
                    _utils.default.logger.logDebug('Download pdf response received');
                },

                onError: function onError(e) {
                    _mixResponseHandler.default.onError('Fair Value Report Download Error - ' + e);
                }
            });
        };

        var sendTimeAndSalesBackLogRequest = function sendTimeAndSalesBackLogRequest(exchange, symbol, endSequence, pgs) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateTimeAndSalesBacklogUrl(exchange, symbol, endSequence, pgs),
                onSuccess: _mixResponseHandler.default.processTimeAndSalesBacklogResponse,

                onError: function onError() {
                    // TODO: Handle error on symbol validation data loading
                }
            });
        };

        var sendCalenderEventsRequest = function sendCalenderEventsRequest(exg, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateCalenderEventsUrl(),
                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processCalenderEventsResponse(dataObj, callbackFn);
                    callbackFn();
                },

                onError: function onError() {
                    // TODO: Handle error on Calender Events validation data loading
                }
            });
        };

        var sendYoutubeEventsRequest = function sendYoutubeEventsRequest(nextPageUrl, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateYoutubeUrl(nextPageUrl),
                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processYoutubeEventsResponse(dataObj, callbackFn);
                },

                onError: function onError() {
                    // TODO: Handle error on Youtube validation data loading
                }
            });
        };

        var sendInstagramEventsRequest = function sendInstagramEventsRequest() {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateInstagramUrl(),
                async: true,
                contentType: 'text/plain; charset=us-ascii',
                headers: {},
                dataType: 'text',
                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processInstagramEventsResponse(dataObj);
                },

                onError: function onError() {
                    // TODO: Handle error on Instagram validation data loading
                }
            });
        };

        var sendFacebookEventsRequest = function sendFacebookEventsRequest(nextPageUrl, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateFacebookUrl(nextPageUrl),
                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processFacebookEventsResponse(dataObj, nextPageUrl, callbackFn);
                },
                onError: function onError() {
                    // TODO: Handle error on Facebook validation data loading
                }
            });
        };

        var sendDownloadStatementRequest = function sendDownloadStatementRequest(requestObj) {
            window.open(_mixRequestGenerator.default.generateDownloadStatementUrl(requestObj));
        };

        var sendPressReleaseRequest = function sendPressReleaseRequest() {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generatePressReleaseUrl(),
                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processPressReleaseResponse(dataObj);
                },

                onError: function onError() {
                    // TODO: Handle error on Press Releases validation data loading
                }
            });
        };

        var sendExchangeSummaryRequest = function sendExchangeSummaryRequest(exchanges, language) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateExchangeSummaryUrl(exchanges, language),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processExchangeSummaryResponse(dataObj, language);
                },

                onError: function onError() {
                    // TODO: Handle error on data loading
                }
            });
        };

        var sendCorporateActionRequest = function sendCorporateActionRequest(exchange, symbol, callbackFn, startDate) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateCorporateActionUrl(exchange, symbol, startDate),

                onSuccess: function onSuccess(dataObj) {
                    var corporateActionArray = _mixResponseHandler.default.processCorporateActionResponse(dataObj);
                    callbackFn(corporateActionArray);
                },

                onError: function onError() {
                    // TODO: Handle error on data loading
                }
            });
        };

        var loadTOPVIntradayData = function loadTOPVIntradayData(exchange, symbol, reqSuccessFn, reqFailureFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateTOPVIntradayDataUrl(exchange, symbol),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processTOPVChartResponse(dataObj, _chartConstants.default.ChartCategory.Intraday, reqSuccessFn, reqFailureFn);
                },

                onError: function onError() {
                    // TODO: Handle error on chart data loading
                }
            });
        };

        var loadTOPVChartData = function loadTOPVChartData(exchange, symbol, chartCategory, begin, reqSuccessFn, reqFailureFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateTOPVChartDataUrl(exchange, symbol, chartCategory, begin),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processTOPVChartResponse(dataObj, chartCategory, reqSuccessFn, reqFailureFn);
                },

                onError: function onError(error) {
                    _mixResponseHandler.default.onError('loadTOPVChartData - ' + error);
                }
            });
        };

        var sendVolumeWatcherRequest = function sendVolumeWatcherRequest(exchanges) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateVolumeWatcherURL(exchanges),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processVolumeWatcherResponse(dataObj);
                },

                onError: function onError(error) {
                    _mixResponseHandler.default.onError('sendVolumeWatcherRequest - ' + error);
                }
            });
        };

        var sendOptionChainRequest = function sendOptionChainRequest(params, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateOptionChainURL(params),

                onSuccess: function onSuccess(dataObj) {
                    if (params.optListType === 0) {
                        _mixResponseHandler.default.processOptionChainResponse(dataObj, params.exg, params.sym, callbackFn);
                    } else {
                        var responseTag = params.optType === 0 ? 'OL' : 'WOL';
                        _mixResponseHandler.default.processOptionListResponse(dataObj, params.exg, params.sym, callbackFn, responseTag);
                    }
                },

                onError: function onError(error) {
                    _mixResponseHandler.default.onError('sendOptionChainRequest - ' + error);
                }
            });
        };

        var loadExchangeSymbolData = function loadExchangeSymbolData(exchange, language) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateExchangeSymbolDataUrl(exchange),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processExchangeSymbolResponse(dataObj, exchange, language);
                },

                onError: function onError() {
                    // TODO: Handle error on symbol data loading
                }
            });
        };

        var sendProductSubscriptionRequest = function sendProductSubscriptionRequest(productId, encryptedToken) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateProductSubscriptionUrl(productId, encryptedToken),

                onSuccess: function onSuccess() {
                    // Response is not needed to be processed
                },

                onError: function onError() {
                    // Response is not needed to be processed
                }
            });
        };

        var sendLoginIndexPanelRequest = function sendLoginIndexPanelRequest(callBackFunc) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateLoginIndexPanelUrl(),
                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processLoginIndexPanelResponse(dataObj, callBackFunc);
                },

                onError: function onError() {
                    // TODO: Handle error on Login Index Panel
                }
            });
        };

        // Financial Data Request
        var loadFinancialData = function loadFinancialData(exchange, symbol, language, secondSymAdded, primarySymbol, secondarySymbol, periodType, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateFinancialUrl(exchange, symbol, language, periodType),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processFinancialResponse(dataObj, exchange, symbol, secondSymAdded, primarySymbol, secondarySymbol, periodType, callbackFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        // Historical Closing Price Data
        var loadClosingPriceData = function loadClosingPriceData(exchange, symbol, language, startDate, endDate, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateClosingPriceUrl(exchange, symbol, language, startDate, endDate),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processClosingPriceResponse(dataObj, callbackFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        // Book Shelf Data
        var loadBookShelfData = function loadBookShelfData(exchange) {

            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateBookShelfUrl(exchange),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processBookShelfResponse(dataObj);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        // New User Registration Data
        var sendUserRegistrationRequest = function sendUserRegistrationRequest(username, password, email) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateUserRegistrationUrl(username, password, email),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processUserRegistrationResponse(dataObj);
                },

                onError: function onError() {
                    // Response is not needed to be processed
                }
            });
        };

        // Investment ID Request
        var loadInvestmentId = function loadInvestmentId(exchange, uname, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateInvestmentIdUrl(uname),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processInvestmentIdResponse(dataObj, exchange, callbackFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        // Investor Portfolio Request
        var loadInvestorPortfolioData = function loadInvestorPortfolioData(investId, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateInvestorPortfolioUrl(investId),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processInvestorPortfolioResponse(dataObj, investId, callbackFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        // AppStore Version Request
        var loadAppStoreVersion = function loadAppStoreVersion(callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: 'version.json',

                onSuccess: function onSuccess(dataObj) {
                    if (_ember.default.$.isFunction(callbackFn)) {
                        callbackFn(dataObj);
                    }
                },

                onError: function onError(error) {
                    if (_ember.default.$.isFunction(callbackFn)) {
                        callbackFn(error);
                    }
                }
            });
        };

        var uploadFile = function uploadFile(file, callbackFn) {
            var formData = new FormData();
            formData.append('filename', file);

            _webHttpConnection.default.sendAjaxRequest({
                url: _sharedService.default.getService('price').settings.urlTypes.upload,
                type: 'POST',
                enctype: 'multipart/form-data',
                contentType: false,
                processData: false,
                dataType: false,
                headers: false,
                data: formData,

                onSuccess: function onSuccess(dataObj) {
                    if (_ember.default.$.isFunction(callbackFn)) {
                        callbackFn(dataObj);
                    }
                },

                onError: function onError(error) {
                    if (_ember.default.$.isFunction(callbackFn)) {
                        callbackFn(error);
                    }
                }
            });
        };

        // CDV and YTDP Request
        var loadCDVAndYTDPRequest = function loadCDVAndYTDPRequest(exchange, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateCDVAndYTDPUrl(exchange),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processCDVAndYTDPUrlResponse(dataObj, callbackFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        // Beta
        var loadBetaRequest = function loadBetaRequest(exchange, symbol, instrumentType, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateBetaUrl(exchange, symbol, instrumentType),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processBetaResponse(dataObj, callbackFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        var loadFundamentalScoreData = function loadFundamentalScoreData(exchange, callbackFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateFundamentalScoreURL(exchange),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processFundamentalScoreResponse(dataObj);

                    if (_ember.default.$.isFunction(callbackFn)) {
                        callbackFn();
                    }
                },

                onError: function onError(error) {
                    _mixResponseHandler.default.onError('sendFundamentalScoreRequest - ' + error);
                }
            });
        };

        var loadTechnicalScoreData = function loadTechnicalScoreData(exchange, symbol, chartCategory, begin, reqSuccessFn, reqFailureFn) {
            _webHttpConnection.default.sendAjaxRequest({
                url: _mixRequestGenerator.default.generateTechnicalScoreUrl(exchange, symbol, chartCategory, begin),

                onSuccess: function onSuccess(dataObj) {
                    _mixResponseHandler.default.processTechnicalScoreResponse(dataObj, chartCategory, reqSuccessFn, reqFailureFn);
                },

                onError: function onError() {
                    if (_ember.default.$.isFunction(Error)) {
                        Error();
                    }
                }
            });
        };

        return {
            loadExchangeMetadata: loadExchangeMetadata,
            loadSymbolValidationData: loadSymbolValidationData,
            loadSymbolValidationBulkData: loadSymbolValidationBulkData,
            loadSymbolSearchData: loadSymbolSearchData,
            loadIntradayData: loadIntradayData,
            loadChartData: loadChartData,
            loadAnnouncementBody: loadAnnouncementBody,
            loadNewsBody: loadNewsBody,
            loadAnnouncementSearchData: loadAnnouncementSearchData,
            loadNewsSearchData: loadNewsSearchData,
            loadCompanyProfileData: loadCompanyProfileData,
            loadGmsSummary: loadGmsSummary,
            loadSystemMetaData: loadSystemMetaData,
            loadAlertHistory: loadAlertHistory,
            loadFairValueHistoricalPriceData: loadFairValueHistoricalPriceData,
            loadFairValueReport: loadFairValueReport,
            downloadFairValueReport: downloadFairValueReport,
            sendTimeAndSalesBackLogRequest: sendTimeAndSalesBackLogRequest,
            sendCalenderEventsRequest: sendCalenderEventsRequest,
            sendYoutubeEventsRequest: sendYoutubeEventsRequest,
            sendInstagramEventsRequest: sendInstagramEventsRequest,
            sendFacebookEventsRequest: sendFacebookEventsRequest,
            sendDownloadStatementRequest: sendDownloadStatementRequest,
            sendPressReleaseRequest: sendPressReleaseRequest,
            sendExchangeSummaryRequest: sendExchangeSummaryRequest,
            sendCorporateActionRequest: sendCorporateActionRequest,
            loadTOPVChartData: loadTOPVChartData,
            loadTOPVIntradayData: loadTOPVIntradayData,
            sendVolumeWatcherRequest: sendVolumeWatcherRequest,
            sendOptionChainRequest: sendOptionChainRequest,
            loadExchangeSymbolData: loadExchangeSymbolData,
            sendProductSubscriptionRequest: sendProductSubscriptionRequest,
            sendLoginIndexPanelRequest: sendLoginIndexPanelRequest,
            loadClosingPriceData: loadClosingPriceData,
            loadBookShelfData: loadBookShelfData,
            loadFinancialData: loadFinancialData,
            sendUserRegistrationRequest: sendUserRegistrationRequest,
            loadInvestmentId: loadInvestmentId,
            loadAppStoreVersion: loadAppStoreVersion,
            loadInvestorPortfolioData: loadInvestorPortfolioData,
            uploadFile: uploadFile,
            loadCDVAndYTDPRequest: loadCDVAndYTDPRequest,
            loadBetaRequest: loadBetaRequest,
            loadFundamentalScoreData: loadFundamentalScoreData,
            loadTechnicalScoreData: loadTechnicalScoreData
        };
    }();
});
define('universal-app/models/price/protocols/mix-web/mix-response-handler', ['exports', 'ember', '../../price-constants', '../../../../models/price/business-entities/search-result-item', '../../../../utils/utils', '../../../shared/shared-service', '../../../../config/app-config', '../../../../config/price-widget-config'], function (exports, _ember, _priceConstants, _searchResultItem, _utils, _sharedService, _appConfig, _priceWidgetConfig) {
    'use strict';

    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }

        return obj;
    }

    exports.default = function () {
        var processExchangeMetadataResponse = function processExchangeMetadataResponse(dataObj, language, exchange) {
            var priceService = _sharedService.default.getService('price');

            try {
                var headerArr;
                var isMetaChanged = false;
                var metaData = priceService.priceMeta.get('metaData');
                var isSecondaryLan = _sharedService.default.userSettings.currentLanguage !== language;
                var isDelayed = priceService.userDS.isExchangeDelayed(exchange);

                var logPhrase = 'processExchangeMetadataResponse - ' + exchange;
                var delayedPhrase = isDelayed ? ' - delayed' : ' - real time';

                _utils.default.logger.logTrace(logPhrase + delayedPhrase);
                priceService.stockDS.beginBulkSymbolAddition();

                // Process the WL section
                if (dataObj.HED.WL && dataObj.DAT.WL && dataObj.HED.WL.TD && dataObj.DAT.WL.TD) {
                    headerArr = _getHeaderIndexList(dataObj.HED.WL.TD, ['EXCHANGE', 'SYMBOL', 'INSTRUMENT_TYPE', 'ISIN_CODE', 'SYMBOL_DESCRIPTION', 'SECTOR', 'CURRENCY', 'SHRT_DSC', 'DECIMAL_PLACES', 'CORRECTION_FACTOR', 'MARKET_ID', 'LOT_SIZE', 'COMPANY_CODE', 'EQUITY_SYMBOL', 'STRIKE_PRICE', 'EXP_DATE', 'AST', 'DS', 'TSZ']);

                    processExchangeWatchlist(headerArr, dataObj.DAT.WL.TD, isSecondaryLan, isDelayed);

                    metaData[exchange].DAT.WL = dataObj.DAT.WL;
                    metaData[exchange].HED.WL = dataObj.HED.WL;
                    metaData[exchange].DAT.VRS.WL = dataObj.DAT.VRS.WL;

                    isMetaChanged = true;
                }

                if (dataObj.HED.SRC && dataObj.DAT.SRC && dataObj.HED.SRC.SD && dataObj.DAT.SRC.SD) {
                    metaData[exchange].HED.SRC = metaData[exchange].HED.SRC || {};
                    metaData[exchange].DAT.SRC = metaData[exchange].DAT.SRC || {};

                    // Exchange Definition
                    headerArr = _getHeaderIndexList(dataObj.HED.SRC.SD, ['EXCHANGE', 'CURRENCY', 'LONG_DSC', 'CTRY_CODE', 'DECIMAL_PLACES', 'TZ_ID', 'DISP_CODE', 'DELAY_TIME', 'IS_VIR_EX', 'DCF', 'OPEN_TIME', 'CLOSE_TIME', 'OFFSET', 'TICK_SIZE']);

                    _updateExchangeMetadata('SD', dataObj, exchange, metaData);
                    var exchangeObj = processExchangeDefinition(headerArr, dataObj, isSecondaryLan, isDelayed);

                    // News providers
                    headerArr = _getHeaderIndexList(dataObj.HED.SRC.NWSP, ['ID', 'DES', 'PARNT']);
                    _updateExchangeMetadata('NWSP', dataObj, exchange, metaData);

                    if (exchangeObj && headerArr && dataObj.DAT.SRC.NWSP) {
                        processExchangeNewsProviders(exchangeObj, headerArr, dataObj.DAT.SRC.NWSP, isSecondaryLan);
                    }

                    // Broker Mapping
                    headerArr = _getHeaderIndexList(dataObj.HED.SRC.BROKERS, ['NAME', 'DESC']);
                    _updateExchangeMetadata('BROKERS', dataObj, exchange, metaData);

                    if (exchangeObj && headerArr && dataObj.DAT.SRC.BROKERS) {
                        processBrokerMapping(exchangeObj, headerArr, dataObj.DAT.SRC.BROKERS, isSecondaryLan);
                    }

                    // Sector Definition
                    headerArr = _getHeaderIndexList(dataObj.HED.SRC.SCTD, ['SECTOR', 'SECT_DSC']);
                    _updateExchangeMetadata('SCTD', dataObj, exchange, metaData);

                    if (exchangeObj && headerArr && dataObj.DAT.SRC.SCTD) {
                        processSectorDefinition(exchangeObj.get('exg'), headerArr, dataObj.DAT.SRC.SCTD, isSecondaryLan);
                    }

                    // Sub Markets
                    headerArr = _getHeaderIndexList(dataObj.HED.SRC.SMD, ['MARKET_ID', 'LONG_DSC', 'DEF', 'IS_MKT_SUMMARY']);
                    _updateExchangeMetadata('SMD', dataObj, exchange, metaData);

                    if (exchangeObj && headerArr && dataObj.DAT.SRC.SMD) {
                        processExchangeSubMarkets(exchangeObj, headerArr, dataObj.DAT.SRC.SMD, isSecondaryLan);
                    }

                    // Indices
                    if (dataObj.HED.SRC && dataObj.DAT.SRC && dataObj.HED.SRC.ID && dataObj.DAT.SRC.ID) {
                        // Process the Index list
                        headerArr = _getHeaderIndexList(dataObj.HED.SRC.ID, ['EXCHANGE', 'SYMBOL', 'INSTRUMENT_TYPE', 'INDEX_TYPE', 'SYMBOL_DESCRIPTION', 'SECTOR', 'CURRENCY', 'SHRT_DSC', 'DECIMAL_PLACES', 'CORRECTION_FACTOR', 'DS']);

                        _updateExchangeMetadata('ID', dataObj, exchange, metaData);
                        processExchangeIndices(headerArr, dataObj.DAT.SRC.ID, isSecondaryLan, isDelayed);
                    }

                    // Process the version info and persist
                    metaData[exchange].DAT.SRC = dataObj.DAT.SRC;
                    metaData[exchange].HED.SRC = dataObj.HED.SRC;
                    metaData[exchange].DAT.VRS.SRC = dataObj.DAT.VRS.SRC;

                    isMetaChanged = true;
                }

                if (isMetaChanged) {
                    priceService.priceMeta.save(language);
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing the exchange master data response : ' + e);
            }

            if (isMetaChanged) {
                var exgObj = priceService.exchangeDS.getExchange(exchange);
                var dlsObj = priceService.systemMetaDS.getSystemMetaDataByKey('DLS_TZ', exgObj.tzId);

                priceService.exchangeDS.setTimeZoneValue(exgObj, dlsObj);
            }

            priceService.stockDS.endBulkSymbolAddition();
            priceService.onPriceMetaReady(true); // Pass true when price meta success
        };

        var processDelayedPriceMasterInfo = function processDelayedPriceMasterInfo(loopArray, checkArray) {
            var language = _sharedService.default.userSettings.currentLanguage;

            loopArray.forEach(function (exg) {
                if (exg && checkArray.indexOf(exg) < 0) {
                    processExchangeMetadataResponse(_sharedService.default.getService('price').priceMeta.getExgMetaObj(exg), language, exg);
                }
            });
        };

        var processDelayedPriceMeta = function processDelayedPriceMeta() {
            var previousDelayedExchanges = _ember.default.appGlobal.priceUser.delayedExchanges;
            var currentDelayedExchanges = _sharedService.default.getService('price').userDS.delayedExchg;

            _utils.default.logger.logTrace('processDelayedPriceMeta - previous delayed exchanges - ' + previousDelayedExchanges.join(''));
            _utils.default.logger.logTrace('processDelayedPriceMeta - current delayed exchanges - ' + currentDelayedExchanges.join(''));

            processDelayedPriceMasterInfo(currentDelayedExchanges, previousDelayedExchanges); // If a delayed exchange newly added
            processDelayedPriceMasterInfo(previousDelayedExchanges, currentDelayedExchanges); // If a delayed exchange removed
        };

        var processExchangeWatchlist = function processExchangeWatchlist(headerArr, dataArr, isSecondaryLan, isDelayed) {
            try {
                if (!isSecondaryLan) {
                    var dtArray, stockObj, exchangeCode, symbolCode, instrumentType, subMarket, companyId;

                    _ember.default.$.each(dataArr, function (key, val) {
                        dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                        exchangeCode = dtArray[headerArr.EXCHANGE];
                        symbolCode = dtArray[headerArr.SYMBOL];
                        instrumentType = parseInt(dtArray[headerArr.INSTRUMENT_TYPE], 10);
                        subMarket = dtArray[headerArr.MARKET_ID];
                        companyId = dtArray[headerArr.COMPANY_CODE];
                        companyId = companyId ? parseInt(companyId, 10) : companyId;

                        stockObj = _sharedService.default.getService('price').stockDS.getStock(exchangeCode, symbolCode, instrumentType, subMarket);
                        _sharedService.default.getService('price').stockDS.removeFromValidationStockMap(exchangeCode, symbolCode);

                        stockObj.setData({
                            lDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[headerArr.SYMBOL_DESCRIPTION]),
                            sDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[headerArr.SHRT_DSC]),
                            sec: dtArray[headerArr.SECTOR],
                            cur: dtArray[headerArr.CURRENCY],
                            deci: dtArray[headerArr.DECIMAL_PLACES],
                            dcf: dtArray[headerArr.CORRECTION_FACTOR],
                            subMkt: dtArray[headerArr.MARKET_ID],
                            lot: dtArray[headerArr.LOT_SIZE],
                            cid: companyId,
                            uSym: dtArray[headerArr.EQUITY_SYMBOL],
                            stkP: dtArray[headerArr.STRIKE_PRICE],
                            expDt: dtArray[headerArr.EXP_DATE],
                            ast: dtArray[headerArr.AST],
                            isin: dtArray[headerArr.ISIN_CODE],
                            tick: dtArray[headerArr.TSZ]
                        });

                        var displaySym = dtArray[headerArr.DS] ? dtArray[headerArr.DS] : symbolCode;
                        displaySym = isDelayed ? [displaySym, _utils.default.Constants.Delayed].join(' ') : displaySym;
                        stockObj.set('dSym', displaySym);
                    });
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing the exchange master data response : ' + e);
            }
        };

        var processExchangeDefinition = function processExchangeDefinition(headerArr, dataObj, isSecondaryLan, isDelayed) {
            var exchangeObj;

            try {
                if (!isSecondaryLan) {
                    var dataArr,
                        dtArray,
                        exchangeCode = null;
                    dataArr = dataObj.DAT.SRC.SD;

                    _ember.default.$.each(dataArr, function (key, val) {
                        dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                        exchangeCode = dtArray[headerArr.EXCHANGE];
                        exchangeObj = _sharedService.default.getService('price').exchangeDS.getExchange(exchangeCode);

                        exchangeObj.setData({
                            cur: dtArray[headerArr.CURRENCY],
                            des: _utils.default.formatters.convertUnicodeToNativeString(isDelayed ? [dtArray[headerArr.LONG_DSC], _utils.default.Constants.Delayed].join(' ') : dtArray[headerArr.LONG_DSC]),
                            country: dtArray[headerArr.CTRY_CODE],
                            dep: parseInt(dtArray[headerArr.DECIMAL_PLACES], 10),
                            delTime: parseInt(dtArray[headerArr.DELAY_TIME], 10),
                            virtual: dtArray[headerArr.IS_VIR_EX] === '1',
                            dcf: parseInt(dtArray[headerArr.DCF], 10),
                            openTime: dtArray[headerArr.OPEN_TIME],
                            closeTime: dtArray[headerArr.CLOSE_TIME],
                            tzo: _formatTimeZoneOffset(dtArray[headerArr.OFFSET]),
                            tick: dtArray[headerArr.TICK_SIZE],
                            tzId: dtArray[headerArr.TZ_ID]
                        });

                        var displayExg = dtArray[headerArr.DISP_CODE] ? dtArray[headerArr.DISP_CODE] : exchangeCode;
                        displayExg = isDelayed ? [displayExg, _utils.default.Constants.Delayed].join(' ') : displayExg;
                        exchangeObj.set('de', displayExg);

                        _utils.default.logger.logTrace('processExchangeDefinition - ' + exchangeCode + ' - display exchange - ' + displayExg);

                        // Return the exchange object
                        // RT = 306 request protocol supports only single market, but received as an array
                        // Therefore this function process only the first index value of the iteration
                        // If multiple objects found, skip rest of the objects as it conflicts with other properties like-
                        // -news providers, sub market etc. as they does not support multi market by protocol itself
                        // If multi market support introduces to the RT = 306 request, this function should be changed accordingly
                        return false;
                    });
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing the exchange definition data response : ' + e);
            }

            return exchangeObj;
        };

        var processSectorDefinition = function processSectorDefinition(exchange, headerArr, dataArr, isSecondaryLan) {
            try {
                if (!isSecondaryLan) {
                    var sectorArray = [];

                    _ember.default.$.each(dataArr, function (key, val) {
                        var sectorFields = val.split(_utils.default.Constants.StringConst.Pipe);
                        sectorArray[key] = { sec: sectorFields[headerArr.SECTOR], desc: sectorFields[headerArr.SECT_DSC], exg: exchange };
                    });

                    _sharedService.default.getService('price').sectorDS.addSectors(sectorArray);
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing the sector definition data response : ' + e);
            }
        };

        var processExchangeIndices = function processExchangeIndices(headerArr, dataArr, isSecondaryLan, isDelayed) {
            try {
                if (!isSecondaryLan) {
                    var dtArray, stockObj, exchangeCode, symbolCode, instrumentType, isMainIndex, mainIndex;
                    var mainIndexCount = 0;

                    _ember.default.$.each(dataArr, function (key, val) {
                        dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                        exchangeCode = dtArray[headerArr.EXCHANGE];
                        symbolCode = dtArray[headerArr.SYMBOL];
                        instrumentType = parseInt(dtArray[headerArr.INSTRUMENT_TYPE], 10);
                        isMainIndex = dtArray[headerArr.INDEX_TYPE] === 'IM';

                        if (isMainIndex) {
                            mainIndex = symbolCode;
                            mainIndexCount++;
                        }

                        stockObj = _sharedService.default.getService('price').stockDS.getStock(exchangeCode, symbolCode, _utils.default.AssetTypes.Indices);
                        _sharedService.default.getService('price').stockDS.removeFromValidationStockMap(exchangeCode, symbolCode);

                        stockObj.setData({
                            isMainIdx: isMainIndex,
                            lDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[headerArr.SYMBOL_DESCRIPTION]),
                            inst: instrumentType,
                            sec: dtArray[headerArr.SECTOR],
                            cur: dtArray[headerArr.CURRENCY],
                            sDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[headerArr.SHRT_DSC]),
                            deci: dtArray[headerArr.DECIMAL_PLACES],
                            dcf: dtArray[headerArr.CORRECTION_FACTOR],
                            ast: 8
                        });

                        var displaySym = dtArray[headerArr.DS] ? dtArray[headerArr.DS] : symbolCode;
                        displaySym = isDelayed ? [displaySym, _utils.default.Constants.Delayed].join(' ') : displaySym;
                        stockObj.set('dSym', displaySym);
                    });

                    if (exchangeCode) {
                        var mainIdx = mainIndexCount > 1 ? _sharedService.default.userSettings.price.defaultIndex : mainIndex;

                        if (mainIdx) {
                            var exchangeObj = _sharedService.default.getService('price').exchangeDS.getExchange(exchangeCode);
                            exchangeObj.setData({ 'mainIdx': mainIdx });
                        }
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing the exchange indices data response : ' + e);
            }
        };

        var processExchangeNewsProviders = function processExchangeNewsProviders(exchangeObj, headerArr, dataArr, isSecondaryLan) {
            try {
                var newsProvider;

                if (!isSecondaryLan && dataArr.length > 0) {
                    _ember.default.$.each(dataArr, function (key, newsProv) {
                        var newsProvArray = newsProv.split(_utils.default.Constants.StringConst.Pipe);

                        if (newsProvArray[headerArr.PARNT] === 'MUBASHER') {
                            newsProvider = newsProvArray[headerArr.ID];
                            return false;
                        }
                    });

                    newsProvider = _utils.default.validators.isAvailable(newsProvider) ? newsProvider : dataArr[0].split(_utils.default.Constants.StringConst.Pipe)[headerArr.ID];

                    exchangeObj.setData({
                        newsProv: newsProvider
                    });
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing the exchange news provider response : ' + e);
            }
        };

        var processBrokerMapping = function processBrokerMapping(exchangeObj, headerArr, dataArr, isSecondaryLan) {
            try {
                if (!isSecondaryLan && dataArr.length > 0) {
                    var brokerMapping = {};

                    _ember.default.$.each(dataArr, function (key, val) {
                        var dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                        brokerMapping[dtArray[headerArr.NAME]] = dtArray[headerArr.DESC];
                    });

                    exchangeObj.setData({
                        brokerMapping: brokerMapping
                    });
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing the broker mapping response : ' + e);
            }
        };

        var processExchangeSubMarkets = function processExchangeSubMarkets(exchangeObj, headerArr, dataArr, isSecondaryLan) {
            try {
                if (!isSecondaryLan) {
                    // If only one sub market available, considers as sub markets not available
                    // Symbols are not tagged to the sub market in this scenario
                    // Therefore symbols are not loaded in application widgets

                    // Commented 'if' block to fixed issue occur in KSE setup
                    // Issue : Sending MKT code as "-1"

                    // if (dataArr.length > 1) {
                    var allowedSubMktsByExg = _getAllowedSubMktsByExchange(exchangeObj.exg);

                    _ember.default.$.each(dataArr, function (key, val) {
                        var dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                        var subMktCode = dtArray[headerArr.MARKET_ID];
                        var exchange = exchangeObj.exg;

                        var defaultSubMkt = _appConfig.default.customisation.defaultSubMarket[exchange];

                        if (allowedSubMktsByExg.length === 0 || allowedSubMktsByExg.contains(subMktCode)) {
                            var subMarketObj = _sharedService.default.getService('price').subMarketDS.getSubMarket(exchange, subMktCode);

                            // Gives priority to default sub market configured in application (price-constants)
                            // This is to avoid data issues from backend and gives correct output to users
                            // If default sub market is not configured in application, it will get from backend response
                            subMarketObj.setData({
                                marketId: subMktCode,
                                lDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[headerArr.LONG_DSC]),
                                def: defaultSubMkt ? subMktCode === defaultSubMkt ? '1' : '0' : dtArray[headerArr.DEF],
                                isMktSummary: dtArray[headerArr.IS_MKT_SUMMARY]
                            });
                        }
                    });
                    // }

                    // This will set sub market array with zero items if market does not have sub markets
                    // Market data subscription is being sent based on this logic
                    // Therefore it is required not to have sub market array undefined
                    if (!exchangeObj.get('subMarketArray')) {
                        exchangeObj.set('subMarketArray', _sharedService.default.getService('price').subMarketDS.getSubMarketCollectionByExchange(exchangeObj.exg));
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing the exchange sub market response : ' + e);
            }
        };

        //
        // SubMarket Symbol Response
        //
        var processExchangeSymbolResponse = function processExchangeSymbolResponse(dataObj, exchange, language) {
            _sharedService.default.getService('price').stockDS.beginBulkSymbolAddition();

            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dtArray, symbolCode, exchangeCode, instrumentType, stockObj, symHedIdxList, headerFields, subMarket, allowedSubMktsByExg, companyId;
                    var isDelayed = _sharedService.default.getService('price').userDS.isExchangeDelayed(exchange);

                    if (dataObj.DAT.TD) {
                        var symbolMeta = _sharedService.default.getService('price').priceSymbolMeta.get('metaData');
                        var defaultSubMkt = _sharedService.default.getService('price').exchangeDS.getDefaultSubMarket(exchange);

                        // Update symbol meta data
                        headerFields = ['EXCHANGE', 'SYMBOL', 'INSTRUMENT_TYPE', 'SYMBOL_DESCRIPTION', 'SHRT_DSC', 'DECIMAL_PLACES', 'CURRENCY', 'COMPANY_CODE', 'ISIN_CODE', 'SECTOR', 'MARKET_ID', 'TSZ', 'DS'];
                        symHedIdxList = _getHeaderIndexList(dataObj.HED.TD, headerFields);
                        allowedSubMktsByExg = _getAllowedSubMktsByExchange(exchange);

                        _ember.default.$.each(dataObj.DAT.TD, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            subMarket = dtArray[symHedIdxList.MARKET_ID];

                            exchangeCode = dtArray[symHedIdxList.EXCHANGE];

                            // If only few sub markets allowed this will filter symbols related to those sub markets
                            // Else this will accept all the symbols for all the sub markets
                            if (allowedSubMktsByExg.length === 0 || allowedSubMktsByExg.contains(subMarket)) {
                                // Process only symbols which are not in default sub market of the exchange
                                // Default sub market symbols are processed in RT = 306 response
                                // Skip those in this processing to avoid unnecessary overhead of duplicate symbol processing
                                // This response (RT = 303) and RT = 306 response receiving order does not affect the logic as-
                                // somehow both responses should be received at client level
                                // If any response fails, it considers as error situation and sends the request again when needed
                                if (subMarket !== defaultSubMkt) {
                                    symbolCode = dtArray[symHedIdxList.SYMBOL];
                                    exchangeCode = dtArray[symHedIdxList.EXCHANGE];
                                    instrumentType = parseInt(dtArray[symHedIdxList.INSTRUMENT_TYPE], 10);

                                    stockObj = _sharedService.default.getService('price').stockDS.getStock(exchangeCode, symbolCode, instrumentType, subMarket);

                                    companyId = dtArray[symHedIdxList.COMPANY_CODE];
                                    companyId = companyId ? parseInt(companyId, 10) : companyId;

                                    stockObj.setData({
                                        sym: symbolCode,
                                        exg: exchangeCode,
                                        inst: parseInt(dtArray[symHedIdxList.INSTRUMENT_TYPE], 10),
                                        deci: dtArray[symHedIdxList.DECIMAL_PLACES],
                                        lDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.SYMBOL_DESCRIPTION]),
                                        sDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.SHRT_DSC]),
                                        sec: dtArray[symHedIdxList.SECTOR],
                                        tick: dtArray[symHedIdxList.TSZ],
                                        cid: companyId
                                    });

                                    var displaySym = dtArray[symHedIdxList.DS] ? dtArray[symHedIdxList.DS] : symbolCode;
                                    displaySym = isDelayed ? [displaySym, _utils.default.Constants.Delayed].join(' ') : displaySym;
                                    stockObj.set('dSym', displaySym);
                                }
                            }
                        });

                        symbolMeta[exchange].DAT.TD = dataObj.DAT.TD;
                        symbolMeta[exchange].HED.TD = dataObj.HED.TD;
                        symbolMeta[exchange].DAT.VRS[0] = parseInt(dataObj.DAT.VRS[0], 10);

                        _sharedService.default.getService('price').priceSymbolMeta.save(language);
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing symbol response : ' + e);
            }

            _sharedService.default.getService('price').stockDS.endBulkSymbolAddition();
        };

        //
        // Alert Specific Requests
        //
        var processAlertHistoryResponse = function processAlertHistoryResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dtArray, alertTS, alertObj, alertHedIdxList, headerFields;

                    if (dataObj.DAT.HPALERT) {
                        headerFields = ['ATO', 'AST', 'TS', 'S', 'AP', 'ACR', 'AV', 'ATV', 'TTS', 'ACK', 'FACR', 'FATV'];
                        alertHedIdxList = _getHeaderIndexList(dataObj.HED.HPALERT, headerFields);

                        _ember.default.$.each(dataObj.DAT.HPALERT, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            alertTS = dtArray[alertHedIdxList.ATO];
                            alertObj = _sharedService.default.getService('price').alertDS.getAlert(alertTS);

                            alertObj.setData({
                                sym: dtArray[alertHedIdxList.S],
                                status: dtArray[alertHedIdxList.AST],
                                tval: dtArray[alertHedIdxList.ATV],
                                tts: dtArray[alertHedIdxList.TTS]
                            });
                        });
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing symbol response : ' + e);
            }
        };

        // Gms Summary response
        var processGmsSummaryResponse = function processGmsSummaryResponse(dataObj) {
            var reqStatus = _utils.default.Constants.ReqStatus;

            try {
                if (dataObj.DAT && dataObj.HED) {
                    var countryCode, exgCode, dtArray, instrumentType, gmsObj, symHedIdxList, headerFields, symbolDetail, symbolCode, assetType, deci;

                    if (dataObj.DAT.GMS) {
                        var userExg = _sharedService.default.getService('price').userDS.get('allExg');
                        var delayedExg = _sharedService.default.getService('price').userDS.get('delayedExchg');

                        headerFields = ['S', 'SYMT', 'R', 'PRI', 'ISG', 'CON', 'DFNS', 'CLF', 'DES', 'DEP', 'SDES', 'PRIS', 'ALTS', 'DT'];
                        symHedIdxList = _getHeaderIndexList(dataObj.HED.GMS, headerFields);

                        _ember.default.$.each(dataObj.DAT.GMS, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            assetType = parseInt(dtArray[symHedIdxList.SYMT], 10);
                            countryCode = dtArray[symHedIdxList.CON].toLowerCase();
                            symbolDetail = dtArray[symHedIdxList.S].split(_utils.default.Constants.StringConst.Tilde);
                            instrumentType = parseInt(symbolDetail[1], 10);
                            symbolCode = symbolDetail[2];
                            exgCode = symbolDetail[0];
                            deci = dtArray[symHedIdxList.DEP];

                            var exchange = 'GLOBAL';
                            var sDescription = dtArray[symHedIdxList.SDES];

                            if (userExg.length > 0) {
                                _ember.default.$.each(userExg, function (index, value) {
                                    if (symbolDetail.indexOf(value) === 0) {
                                        exchange = value;
                                    }
                                });
                            }

                            if (delayedExg.length > 0) {
                                if (delayedExg.indexOf(exgCode) > -1) {
                                    sDescription = [dtArray[symHedIdxList.SDES], _utils.default.Constants.Delayed].join(' ');
                                }
                            }

                            gmsObj = _sharedService.default.getService('price').gmsDS.getGms(exchange, symbolCode, assetType, instrumentType);

                            gmsObj.setData({
                                sym: symbolCode,
                                inst: instrumentType,
                                lDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.DES]),
                                sDes: _utils.default.formatters.convertUnicodeToNativeString(sDescription),
                                cCode: countryCode,
                                ast: assetType,
                                deci: deci
                            });
                        });

                        _sharedService.default.getService('price').gmsDS.set('status', reqStatus.Success);
                    }
                }
            } catch (e) {
                _sharedService.default.getService('price').gmsDS.status = reqStatus.Failed;
                _utils.default.logger.logError('Error in processing gms summary response : ' + e);
            }
        };

        // System Meta Data Response
        var processSystemMetaDataResponse = function processSystemMetaDataResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var tzId, sDate, eDate, dls, dlsTzObj, symHedIdxList, headerFields, dtArray;

                    if (dataObj.DAT.DLS_TZ) {
                        headerFields = ['TZ_ID', 'SDATE', 'EDATE', 'DLS_OS'];
                        symHedIdxList = _getHeaderIndexList(dataObj.HED.DLS_TZ, headerFields);

                        _ember.default.$.each(dataObj.DAT.DLS_TZ, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            tzId = dtArray[symHedIdxList.TZ_ID];
                            sDate = dtArray[symHedIdxList.SDATE];
                            eDate = dtArray[symHedIdxList.EDATE];
                            dls = symHedIdxList.DLS_OS ? parseInt(dtArray[symHedIdxList.DLS_OS]) : 0;

                            dlsTzObj = _sharedService.default.getService('price').systemMetaDS.getSystemMetaDataByKey('DLS_TZ', tzId);

                            dlsTzObj.setData({
                                tzId: tzId,
                                sDate: sDate,
                                eDate: eDate,
                                dls: dls
                            });
                        });

                        var dlsObj = _sharedService.default.getService('price').systemMetaDS.getSystemMetaDataByType('DLS_TZ');
                        _sharedService.default.getService('price').exchangeDS.updateOffsetTime(dlsObj);
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing system meta data response : ' + e);
            }
        };

        var processSymbolValidationResponse = function processSymbolValidationResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dtArray, symbolCode, exchangeCode, instrumentType, stockObj, symHedIdxList, headerFields;

                    if (dataObj.DAT.SYM) {
                        // Update symbol meta data
                        var userExg = _sharedService.default.getService('price').userDS.get('allExg');
                        var delayedExg = _sharedService.default.getService('price').userDS.get('delayedExchg');

                        headerFields = ['E', 'S', 'INS', 'SEC', 'SDES', 'DES', 'CUR', 'DEF', 'DS', 'DEP'];
                        symHedIdxList = _getHeaderIndexList(dataObj.HED.SYM, headerFields);

                        _ember.default.$.each(dataObj.DAT.SYM, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            symbolCode = dtArray[symHedIdxList.S];
                            exchangeCode = dtArray[symHedIdxList.E];
                            instrumentType = parseInt(dtArray[symHedIdxList.INS], 10);
                            stockObj = _sharedService.default.getService('price').stockDS.getStock(exchangeCode, symbolCode, instrumentType);

                            var exchange = 'GLOBAL';
                            var displaySymbol = dtArray[symHedIdxList.DS] ? dtArray[symHedIdxList.DS] : symbolCode;

                            if (userExg.length > 0) {
                                _ember.default.$.each(userExg, function (index, value) {
                                    if (exchangeCode === value) {
                                        exchange = value;
                                    }
                                });
                            }

                            if (delayedExg.length > 0) {
                                if (delayedExg.indexOf(exchangeCode) > -1) {
                                    displaySymbol = [displaySymbol, _utils.default.Constants.Delayed].join(' ');
                                }
                            }

                            stockObj.setData({
                                sym: symbolCode,
                                exg: exchange,
                                inst: instrumentType,
                                lDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.DES]),
                                sDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.SDES]),
                                sec: dtArray[symHedIdxList.SEC],
                                dcf: dtArray[symHedIdxList.DEF],
                                cur: dtArray[symHedIdxList.CUR],
                                dSym: displaySymbol,
                                deci: dtArray[symHedIdxList.DEP]
                            });
                        });
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing symbol validation response : ' + e);
            }
        };

        var processSymbolSearchResponse = function processSymbolSearchResponse(dataObj, searchKey, notifyFn, searchNumber) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dtArray, resultItem, symHedIdxList, headerFields, searchResultArray, resultArray, config;
                    resultArray = dataObj.DAT.SYMS;

                    if (resultArray) {
                        var delayedExg = _sharedService.default.getService('price').userDS.get('delayedExchg');

                        headerFields = ['E', 'S', 'INS', 'SDES', 'DES', 'DS', 'SYMT', 'MC', 'DEP', 'SYMC'];
                        symHedIdxList = _getHeaderIndexList(dataObj.HED.SYMS, headerFields);
                        searchResultArray = _ember.default.A();
                        config = _priceWidgetConfig.default.globalSearch.groups;

                        _ember.default.$.each(resultArray, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            resultItem = _searchResultItem.default.create();

                            var symbolCode = dtArray[symHedIdxList.S];
                            var exchangeCode = dtArray[symHedIdxList.E];
                            var displayExchange = dtArray[symHedIdxList.E];
                            var ast = dtArray[symHedIdxList.SYMT];
                            var exgObj = _sharedService.default.getService('price').exchangeDS.getExchange(exchangeCode);
                            var groupingObj = config[ast] ? config[ast] : config.other;
                            var displaySymbol = dtArray[symHedIdxList.DS] ? dtArray[symHedIdxList.DS] : symbolCode;

                            if (delayedExg.length > 0) {
                                if (delayedExg.indexOf(exchangeCode) > -1) {
                                    displaySymbol = [displaySymbol, _utils.default.Constants.Delayed].join(' ');
                                    displayExchange = [displayExchange, _utils.default.Constants.Delayed].join(' ');
                                }
                            }

                            resultItem.setData({
                                sym: symbolCode,
                                exg: exchangeCode,
                                dSym: _utils.default.validators.isAvailable(displaySymbol) ? displaySymbol : symbolCode,
                                de: _utils.default.validators.isAvailable(exgObj.de) ? exgObj.de : displayExchange,
                                inst: dtArray[symHedIdxList.INS],
                                ast: ast,
                                subMkt: dtArray[symHedIdxList.MC],
                                groupingObj: groupingObj,
                                lDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.DES]),
                                sDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.SDES]),
                                deci: dtArray[symHedIdxList.DEP],
                                cid: dtArray[symHedIdxList.SYMC]
                            });

                            searchResultArray.pushObject(resultItem);
                        });

                        if (_ember.default.$.isFunction(notifyFn)) {
                            var isSearchResultAvailable = searchResultArray.length > 0;
                            notifyFn(isSearchResultAvailable, searchKey, searchResultArray, searchNumber);
                        }
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing symbol search response : ' + e);

                if (_ember.default.$.isFunction(notifyFn)) {
                    notifyFn(false);
                }
            }
        };

        //
        // News & announcement specific response
        //
        var processAnnouncementBodyResponse = function processAnnouncementBodyResponse(dataObj, reqSuccessFn, reqFailureFn) {
            try {
                if (dataObj.DAT && dataObj.DAT.ANN) {
                    var dtIdxList = _getHeaderIndexList(dataObj.HED.ANN, ['ID', 'BOD']);
                    var record = dataObj.DAT.ANN.split(_utils.default.Constants.StringConst.Pipe);
                    var annId = record[dtIdxList.ID];
                    var body = record[dtIdxList.BOD];

                    if (annId && body) {
                        _sharedService.default.getService('price').announcementDS.getAnnouncement(annId, _priceConstants.default.ResponseType.Data.ResponseAnnouncement).set('bod', body);

                        if (_ember.default.$.isFunction(reqSuccessFn)) {
                            reqSuccessFn(annId);
                        }
                    }
                } else {
                    if (_ember.default.$.isFunction(reqFailureFn)) {
                        reqFailureFn();
                    }
                }
            } catch (e) {
                if (_ember.default.$.isFunction(reqFailureFn)) {
                    reqFailureFn();
                }

                _utils.default.logger.logError('Error in processing announcement body response : ' + e);
            }
        };

        var processNewsBodyResponse = function processNewsBodyResponse(dataObj, reqSuccessFn, reqFailureFn) {
            try {
                if (dataObj.DAT && dataObj.DAT.NWS) {
                    var dtIdxList = _getHeaderIndexList(dataObj.HED.NWS, ['ID', 'BOD']);
                    var record = dataObj.DAT.NWS.split(_utils.default.Constants.StringConst.Pipe);
                    var annId = record[dtIdxList.ID];
                    var body = record[dtIdxList.BOD];

                    if (annId && body) {
                        _sharedService.default.getService('price').announcementDS.getAnnouncement(annId, _priceConstants.default.ResponseType.Data.ResponseNews).set('bod', body);

                        if (_ember.default.$.isFunction(reqSuccessFn)) {
                            reqSuccessFn(annId);
                        }
                    }
                } else {
                    if (_ember.default.$.isFunction(reqFailureFn)) {
                        reqFailureFn();
                    }
                }
            } catch (e) {
                if (_ember.default.$.isFunction(reqFailureFn)) {
                    reqFailureFn();
                }

                _utils.default.logger.logError('Error in processing news body response : ' + e);
            }
        };

        var processAnnouncementSearchResponse = function processAnnouncementSearchResponse(dataObj, announcementCollection, reqSuccessFn, reqFailureFn) {
            try {
                var existingIdList = announcementCollection.mapBy('id');

                if (dataObj.DAT && dataObj.DAT.ANNL) {
                    var annHedIdxList = _getHeaderIndexList(dataObj.HED.ANNL, ['ID', 'E', 'S', 'HED', 'DT', 'L']);

                    _ember.default.$.each(dataObj.DAT.ANNL, function (key, val) {
                        var dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                        var annId = dtArray[annHedIdxList.ID];
                        var exg = dtArray[annHedIdxList.E];
                        var sym = dtArray[annHedIdxList.S];
                        var annObj = _sharedService.default.getService('price').announcementDS.getAnnouncement(annId, _priceConstants.default.ResponseType.Data.ResponseAnnouncement, sym, exg);

                        annObj.setData({
                            type: _priceConstants.default.ResponseType.Data.ResponseAnnouncement,
                            exg: exg,
                            sym: sym,
                            hed: dtArray[annHedIdxList.HED],
                            dt: dtArray[annHedIdxList.DT],
                            ln: dtArray[annHedIdxList.L],
                            id: annId
                        });

                        _addNewsAnnToCollection(existingIdList, annId, announcementCollection, annObj);
                    });

                    if (_ember.default.$.isFunction(reqSuccessFn)) {
                        if (dataObj.DAT.ANNL.length > 0) {
                            reqSuccessFn(true);
                        } else {
                            reqSuccessFn(false);
                        }
                    }
                }
            } catch (e) {
                if (_ember.default.$.isFunction(reqFailureFn)) {
                    reqFailureFn();
                }

                _utils.default.logger.logError('Error in processing announcement search response : ' + e);
            }
        };

        var processNewsSearchResponse = function processNewsSearchResponse(dataObj, newsCollection, reqSuccessFn, reqFailureFn) {
            try {
                var existingIdList = newsCollection.mapBy('id');

                if (dataObj.DAT && dataObj.DAT.NWSL) {
                    var annHedIdxList = _getHeaderIndexList(dataObj.HED.NWSL, ['ID', 'E', 'S', 'HED', 'DT', 'L']);

                    _ember.default.$.each(dataObj.DAT.NWSL, function (key, val) {
                        var dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                        var newsId = dtArray[annHedIdxList.ID];
                        var exg = dtArray[annHedIdxList.E];
                        var sym = dtArray[annHedIdxList.S];
                        var annObj = _sharedService.default.getService('price').announcementDS.getAnnouncement(newsId, _priceConstants.default.ResponseType.Data.ResponseNews, sym, exg);

                        annObj.setData({
                            type: _priceConstants.default.ResponseType.Data.ResponseNews,
                            exg: exg,
                            sym: sym,
                            hed: dtArray[annHedIdxList.HED],
                            dt: dtArray[annHedIdxList.DT],
                            ln: dtArray[annHedIdxList.L],
                            id: newsId
                        });

                        _addNewsAnnToCollection(existingIdList, newsId, newsCollection, annObj);
                    });

                    if (_ember.default.$.isFunction(reqSuccessFn)) {
                        if (dataObj.DAT.NWSL.length > 0) {
                            reqSuccessFn(true);
                        } else {
                            reqSuccessFn(false);
                        }
                    } else {
                        if (_ember.default.$.isFunction(reqFailureFn)) {
                            reqFailureFn();
                        }
                    }
                }
            } catch (e) {
                if (_ember.default.$.isFunction(reqFailureFn)) {
                    reqFailureFn();
                }

                _utils.default.logger.logError('Error in processing news search response : ' + e);
            }
        };

        //
        // Chart specific response
        //
        var processChartResponse = function processChartResponse(dtObj, chartCategory, reqSuccessFn, reqFailureFn) {
            try {
                if (dtObj.DAT && dtObj.HED) {
                    var sym, exg, symInfo, ohlcRecHedIdxList, pt, date, symHedIdxList, ohlcSeries;
                    symHedIdxList = dtObj.HED.S.split(_utils.default.Constants.StringConst.Comma).indicesOf(['E', 'S']);
                    symInfo = dtObj.DAT.S.split(_utils.default.Constants.StringConst.Comma);
                    sym = symInfo[symHedIdxList.S];
                    exg = symInfo[symHedIdxList.E];
                    ohlcRecHedIdxList = dtObj.HED.HIS.split(_utils.default.Constants.StringConst.Comma).indicesOf(['DT', 'OP', 'HIG', 'LOW', 'CLS', 'VOL', 'TOVR', 'PER', 'PBR']);
                    ohlcSeries = _sharedService.default.getService('price').ohlcDS.getOHLCSeries(exg, sym, chartCategory);

                    // If data is already available, flush them.
                    // Note: Flushing and re-generating the array is efficient than search and insertion the missing points
                    if (ohlcSeries.ohlcDataPoints) {
                        ohlcSeries.ohlcDataPoints.length = 0;
                    }

                    // Load exchange object for obtaining the timezone
                    var exgObj = _sharedService.default.getService('price').exchangeDS.getExchange(exg);

                    _ember.default.$.each(dtObj.DAT.HIS, function (key, val) {
                        pt = parseInt(val[ohlcRecHedIdxList.DT], 10) * _priceConstants.default.UnixTimestampByMilliSeconds;
                        date = _utils.default.formatters.convertToUTCDate(pt, exgObj.tzo);

                        ohlcSeries.setData({
                            dt: date,
                            open: val[ohlcRecHedIdxList.OP],
                            high: val[ohlcRecHedIdxList.HIG],
                            low: val[ohlcRecHedIdxList.LOW],
                            close: val[ohlcRecHedIdxList.CLS],
                            volume: val[ohlcRecHedIdxList.VOL],
                            turnover: val[ohlcRecHedIdxList.TOVR],
                            per: val[ohlcRecHedIdxList.PER],
                            pbr: val[ohlcRecHedIdxList.PBR]
                        }, false);
                    });

                    if (_ember.default.$.isFunction(reqSuccessFn) && ohlcSeries.ohlcDataPoints && ohlcSeries.ohlcDataPoints.length > 0) {
                        reqSuccessFn();
                    } else {
                        reqFailureFn();
                    }

                    _sharedService.default.getService('price').ohlcDS.onChartDataReady(_utils.default.keyGenerator.getKey(exg, sym));
                }
            } catch (e) {
                _utils.default.logger.logError('Error in Intraday chart data : ' + e);
            }
        };

        var processTOPVChartResponse = function processTOPVChartResponse(dtObj, chartCategory, reqSuccessFn, reqFailureFn) {
            try {
                if (dtObj.DAT && dtObj.HED) {
                    var sym, exg, symInfo, ohlcRecHedIdxList, pt, date, symHedIdxList, ohlcSeries;
                    symHedIdxList = dtObj.HED.S.split(_utils.default.Constants.StringConst.Comma).indicesOf(['E', 'S']);
                    symInfo = dtObj.DAT.S.split(_utils.default.Constants.StringConst.Comma);
                    sym = symInfo[symHedIdxList.S];
                    exg = symInfo[symHedIdxList.E];
                    ohlcRecHedIdxList = dtObj.HED.HIS.split(_utils.default.Constants.StringConst.Comma).indicesOf(['DT', 'OP', 'HIG', 'LOW', 'CLS', 'VOL', 'TOVR']);
                    ohlcSeries = _sharedService.default.getService('price').theoreticalChartDS.getOHLCSeries(exg, sym, chartCategory);

                    // If data is already available, flush them.
                    // Note: Flushing and re-generating the array is efficient than search and insertion the missing points
                    if (ohlcSeries.ohlcDataPoints) {
                        ohlcSeries.ohlcDataPoints.length = 0;
                    }

                    // Load exchange object for obtaining the timezone
                    var exgObj = _sharedService.default.getService('price').exchangeDS.getExchange(exg);

                    _ember.default.$.each(dtObj.DAT.HIS, function (key, val) {
                        pt = parseInt(val[ohlcRecHedIdxList.DT], 10) * _priceConstants.default.UnixTimestampByMilliSeconds;
                        date = _utils.default.formatters.convertToUTCDate(pt, exgObj.tzo);

                        ohlcSeries.setData({
                            dt: date,
                            open: val[ohlcRecHedIdxList.OP],
                            high: val[ohlcRecHedIdxList.HIG],
                            low: val[ohlcRecHedIdxList.LOW],
                            close: val[ohlcRecHedIdxList.CLS],
                            volume: val[ohlcRecHedIdxList.VOL],
                            turnover: val[ohlcRecHedIdxList.TOVR]
                        }, false);
                    });

                    if (_ember.default.$.isFunction(reqSuccessFn) && ohlcSeries.ohlcDataPoints && ohlcSeries.ohlcDataPoints.length > 0) {
                        reqSuccessFn();
                    } else {
                        reqFailureFn(dtObj.STAT ? dtObj.STAT.HIS : '');
                    }

                    _sharedService.default.getService('price').theoreticalChartDS.onChartDataReady(_utils.default.keyGenerator.getKey(exg, sym));
                }
            } catch (e) {
                _utils.default.logger.logError('Error in Intraday chart data : ' + e);
            }
        };

        //
        // Company Profile specific response
        //
        var processCompanyProfileResponse = function processCompanyProfileResponse(dataObj, exchange, symbol, language) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dtArray, cpObj, cpDataList;
                    cpObj = _sharedService.default.getService('price').companyProfileDS.getCompanyProfile(exchange, symbol, language);
                    var stock = _sharedService.default.getService('price').stockDS.getStock(exchange, symbol, language);

                    if (dataObj.DAT.COMPINF.CP) {
                        cpDataList = _getHeaderIndexList(dataObj.HED.COMPINF.CP, ['LOGO', 'COMP_NAME', 'ISIN_CODE', 'ADDR_1', 'PHN', 'FAX', 'EMAIL', 'WEB', 'TRD_NAME', 'COMP_CURRENCY', 'COUNTRY_DESC', 'MAIN_ACTIVITY', 'COMPANY_ID']);

                        _ember.default.$.each(dataObj.DAT.COMPINF.CP, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);

                            cpObj.setData({
                                logo: dtArray[cpDataList.LOGO],
                                compName: dtArray[cpDataList.COMP_NAME],
                                des: dtArray[cpDataList.MAIN_ACTIVITY],
                                isin: dtArray[cpDataList.ISIN_CODE],
                                addr: dtArray[cpDataList.ADDR_1],
                                phn: dtArray[cpDataList.PHN],
                                fax: dtArray[cpDataList.FAX],
                                email: dtArray[cpDataList.EMAIL],
                                web: dtArray[cpDataList.WEB],
                                trdName: dtArray[cpDataList.TRD_NAME],
                                currency: dtArray[cpDataList.COMP_CURRENCY],
                                country: dtArray[cpDataList.COUNTRY_DESC],
                                listedShr: stock.mktCap,
                                mktCap1: stock.lstShares,
                                compID: dtArray[cpDataList.COMPANY_ID]
                            });
                        });
                    }

                    if (dataObj.DAT.COMPINF.STK) {
                        cpDataList = _getHeaderIndexList(dataObj.HED.COMPINF.STK, ['ISIN_CODE', 'LISTING_DATE', 'MARKETCAP', 'FREE_FLOAT', 'PAR_VALUE', 'PAID_CAP', 'BBGID', 'SECTOR']);

                        _ember.default.$.each(dataObj.DAT.COMPINF.STK, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);

                            cpObj.setData({
                                isin: dtArray[cpDataList.ISIN_CODE],
                                stkLstOn: dtArray[cpDataList.LISTING_DATE],
                                mktCap: dtArray[cpDataList.MARKETCAP],
                                freeFltShr: dtArray[cpDataList.FREE_FLOAT],
                                parVal: dtArray[cpDataList.PAR_VALUE],
                                paidCap: dtArray[cpDataList.PAID_CAP],
                                bbgid: dtArray[cpDataList.BBGID],
                                sector: dtArray[cpDataList.SECTOR]
                            });
                        });
                    }

                    if (dataObj.DAT.COMPINF.INMGT) {
                        cpDataList = _getHeaderIndexList(dataObj.HED.COMPINF.INMGT, ['INDIVIDUAL_NAME', 'DESIGNATION', 'MGT_START_DATE', 'SORT_ORDER']);

                        var cpMObj;

                        _ember.default.$.each(dataObj.DAT.COMPINF.INMGT, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            cpMObj = _sharedService.default.getService('price').companyProfileDS.createCompanyManagement();

                            cpMObj.setData({
                                name: dtArray[cpDataList.INDIVIDUAL_NAME],
                                desig: dtArray[cpDataList.DESIGNATION],
                                date: dtArray[cpDataList.MGT_START_DATE],
                                sortOrder: dtArray[cpDataList.SORT_ORDER]
                            });

                            cpObj.compManagement.pushObject(cpMObj);
                        });
                    }

                    if (dataObj.DAT.COMPINF.OWN_IND) {
                        cpDataList = _getHeaderIndexList(dataObj.HED.COMPINF.OWN_IND, ['INDIVIDUAL_NAME', 'OWN_PCT_IND']);
                        var cposobj;

                        _ember.default.$.each(dataObj.DAT.COMPINF.OWN_IND, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            cposobj = _sharedService.default.getService('price').companyProfileDS.createCompanyOwners();

                            cposobj.setData({
                                ownerName: dtArray[cpDataList.INDIVIDUAL_NAME],
                                sherPrs: dtArray[cpDataList.OWN_PCT_IND]
                            });

                            cpObj.compOwners.pushObject(cposobj);
                        });
                    }

                    if (dataObj.DAT.COMPINF.CPCLS) {
                        cpDataList = _getHeaderIndexList(dataObj.HED.COMPINF.CPCLS, ['SHRT_DSC', 'CLASSIFICATION_ID']);

                        _ember.default.$.each(dataObj.DAT.COMPINF.CPCLS, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);

                            if (dtArray[cpDataList.CLASSIFICATION_ID] === 'GICSL3') {
                                cpObj.setData({
                                    indGrp: dtArray[cpDataList.SHRT_DSC]
                                });
                            } else if (dtArray[cpDataList.CLASSIFICATION_ID] === 'GICSL4') {

                                cpObj.setData({
                                    subInd: dtArray[cpDataList.SHRT_DSC]
                                });
                            }
                        });
                    }

                    if (dataObj.DAT.COMPINF.SUBS) {
                        cpDataList = _getHeaderIndexList(dataObj.HED.COMPINF.SUBS, ['SUBS_COMP_NAME', 'OWN_PCT']);
                        var cpsubobj;

                        _ember.default.$.each(dataObj.DAT.COMPINF.SUBS, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            cpsubobj = _sharedService.default.getService('price').companyProfileDS.createCompanySubsidiaries();

                            cpsubobj.setData({
                                subsiName: dtArray[cpDataList.SUBS_COMP_NAME],
                                subsiSherPrs: dtArray[cpDataList.OWN_PCT]
                            });

                            cpObj.compSubsidiaries.pushObject(cpsubobj);
                        });
                    }

                    if (dataObj.DAT.COMPINF.AUD) {
                        cpDataList = _getHeaderIndexList(dataObj.HED.COMPINF.AUD, ['AUD_COMP_NAME']);

                        _ember.default.$.each(dataObj.DAT.COMPINF.AUD, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);

                            cpObj.setData({
                                auditor: dtArray[cpDataList.AUD_COMP_NAME]
                            });
                        });
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in Company Profile Data : ' + e);
            }
        };

        // TODO : [Rasika] Need to add response status processing, Error Handling
        var processTimeAndSalesBacklogResponse = function processTimeAndSalesBacklogResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var noOfDuplicate = 0;
                    var dtArray, symbolCode, exchangeCode, symInfo, trdObj, symHedIdxList, tsHedIdxList, headerFields, backlogLastTrade, isFullMarket;

                    if (dataObj.HED.S && dataObj.DAT.S) {
                        symHedIdxList = dataObj.HED.S.split(_utils.default.Constants.StringConst.Pipe).indicesOf(['E', 'S']);
                        symInfo = dataObj.DAT.S.split(_utils.default.Constants.StringConst.Pipe);
                        symbolCode = symInfo[symHedIdxList.S];
                    } else if (dataObj.HED.E && dataObj.DAT.E) {
                        isFullMarket = true;
                        symHedIdxList = dataObj.HED.E.split(_utils.default.Constants.StringConst.Pipe).indicesOf(['E']);
                        symInfo = dataObj.DAT.E.split(_utils.default.Constants.StringConst.Pipe);
                    }

                    exchangeCode = symInfo[symHedIdxList.E];

                    if (dataObj.DAT.TS) {
                        headerFields = ['S', 'TT', 'INS', 'LTP', 'TQ', 'CHG', 'PCHG', 'TYPE', 'SPL', 'SNO', 'VWAP', 'BUYERCODE', 'SELLERCODE'];
                        tsHedIdxList = _getHeaderIndexList(dataObj.HED.TS, headerFields);

                        _ember.default.$.each(dataObj.DAT.TS, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);

                            var sym = isFullMarket ? dtArray[tsHedIdxList.S] : symbolCode;
                            var seq = parseInt(dtArray[tsHedIdxList.SNO], 10);

                            trdObj = _sharedService.default.getService('price').timeAndSalesDS.getBacklogTrade(exchangeCode, symbolCode, seq);

                            if (trdObj) {
                                // TODO : [Rasike] Need to use formatters after adding formatters for each type.
                                trdObj.setData({
                                    sym: sym,
                                    exg: exchangeCode,
                                    tts: dtArray[tsHedIdxList.TT],
                                    inst: dtArray[tsHedIdxList.INS],
                                    trp: parseFloat(dtArray[tsHedIdxList.LTP]),
                                    trq: parseInt(dtArray[tsHedIdxList.TQ], 10),
                                    nChg: parseFloat(dtArray[tsHedIdxList.CHG]),
                                    pctChg: parseFloat(dtArray[tsHedIdxList.PCHG]),
                                    seq: seq,
                                    trdType: dtArray[tsHedIdxList.TYPE],
                                    vwap: parseFloat(dtArray[tsHedIdxList.VWAP]),
                                    splits: parseInt(dtArray[tsHedIdxList.SPL], 10),
                                    isEmpty: false,
                                    buyCode: dtArray[tsHedIdxList.BUYERCODE],
                                    selCode: dtArray[tsHedIdxList.SELLERCODE]
                                });

                                if (backlogLastTrade) {
                                    backlogLastTrade.setTradeTick(trdObj.trp);
                                }

                                backlogLastTrade = _setLastTrade(backlogLastTrade, trdObj);
                            } else {
                                // 'trdObj' will be undefined if row was duplicated
                                noOfDuplicate++;
                            }
                        });
                    }

                    if (dataObj.ROW && dataObj.ROW.TS) {
                        _sharedService.default.getService('price').timeAndSalesDS.setBacklogLength(exchangeCode, symbolCode, parseInt(dataObj.ROW.TS, 10) - noOfDuplicate);
                    }

                    _sharedService.default.getService('price').timeAndSalesDS.onBacklogDataReady(exchangeCode, symbolCode);
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing symbol validation response : ' + e);
            }
        };

        var processCalenderEventsResponse = function processCalenderEventsResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dtArray, type, newsEventObj, newsHedIdxList, headerFields;

                    if (dataObj.DAT.CALENDER_EVENTS) {
                        headerFields = ['TITLE', 'ID', 'URL', 'DATE'];
                        newsHedIdxList = _getHeaderIndexList(dataObj.HED.CALENDER_EVENTS, headerFields);
                        type = 'CALENDER_EVENT';

                        _ember.default.$.each(dataObj.DAT.CALENDER_EVENTS, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            newsEventObj = _sharedService.default.getService('price').socialMediaDS.getNewsEvent(type);

                            newsEventObj.setData({
                                id: dtArray[newsHedIdxList.ID],
                                title: dtArray[newsHedIdxList.TITLE],
                                url: dtArray[newsHedIdxList.URL],
                                date: dtArray[newsHedIdxList.DATE]
                            });
                        });
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing calender events  response : ' + e);
            }
        };

        var processYoutubeEventsResponse = function processYoutubeEventsResponse(dataObj, callbackFn) {
            try {
                if (dataObj && dataObj.items) {
                    var postObj, rawDate, date, time;
                    var socialMediaDS = _sharedService.default.getService('price').socialMediaDS;

                    if (dataObj.nextPageToken) {
                        socialMediaDS.setYoutubeNextPageUrl(dataObj.nextPageToken);
                    }

                    _ember.default.$.each(dataObj.items, function (index) {
                        postObj = socialMediaDS.getYoutubePost();
                        rawDate = dataObj.items[index].snippet.publishedAt.split('T');
                        date = rawDate[0];
                        time = rawDate[1].split('.')[0];

                        postObj.setData({
                            videoId: dataObj.items[index].id.videoId,
                            imgUrl: dataObj.items[index].snippet.thumbnails.medium.url,
                            date: date + ' ' + time,
                            description: dataObj.items[index].snippet.title
                        });
                    });

                    if (callbackFn) {
                        callbackFn();
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing youtube events  response : ' + e);
            }
        };

        var processInstagramEventsResponse = function processInstagramEventsResponse(data) {
            try {
                var dataObj = JSON.parse(data);

                if (dataObj && dataObj.data) {
                    var postObj, date, showDate;

                    _ember.default.$.each(dataObj.data, function (index) {
                        postObj = _sharedService.default.getService('price').socialMediaDS.getInstagramPost();
                        date = new Date(parseInt(dataObj.data[index].caption.created_time, 10) * 1000);
                        showDate = _utils.default.formatters.formatDateToDisplayDate(date, false, '-', ':', ' ');

                        postObj.setData({
                            id: dataObj.data[index].id,
                            imgUrl: dataObj.data[index].images.standard_resolution.url,
                            postUrl: dataObj.data[index].link,
                            date: showDate,
                            description: dataObj.data[index].caption.text
                        });
                    });
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing Instagram response : ' + e);
            }
        };

        var processFacebookEventsResponse = function processFacebookEventsResponse(dataObj, nextPageUrl, callbackFn) {
            try {
                var dataContainer;

                if (nextPageUrl) {
                    dataContainer = dataObj;
                } else {
                    dataContainer = dataObj.posts;
                }

                if (dataObj && dataContainer) {
                    var postObj, rawDate, date, time;
                    var socialMediaDS = _sharedService.default.getService('price').socialMediaDS;

                    if (dataContainer.paging.next) {
                        socialMediaDS.setFacebookNextPageUrl(dataContainer.paging.next);
                    }

                    _ember.default.$.each(dataContainer.data, function (index) {
                        postObj = socialMediaDS.getFacebookPost();
                        rawDate = dataContainer.data[index].created_time.split('T');
                        date = rawDate[0];
                        time = rawDate[1].split('+')[0];

                        postObj.setData({
                            id: dataContainer.data[index].id,
                            imgUrl: dataContainer.data[index].picture,
                            postUrl: dataContainer.data[index].permalink_url,
                            date: date + ' ' + time,
                            description: dataContainer.data[index].message
                        });
                    });

                    if (callbackFn) {
                        callbackFn();
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing facebook events : ' + e);
            }
        };

        var processPressReleaseResponse = function processPressReleaseResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dtArray, type, pressEventObj, newsHedIdxList, headerFields;

                    if (dataObj.DAT.PRESS_RELEASE_DATA) {
                        headerFields = ['TITLE', 'ID', 'URL', 'DATE'];
                        newsHedIdxList = _getHeaderIndexList(dataObj.HED.PRESS_RELEASE_DATA, headerFields);
                        type = 'PRESS_RELEASE';

                        _ember.default.$.each(dataObj.DAT.PRESS_RELEASE_DATA, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            pressEventObj = _sharedService.default.getService('price').socialMediaDS.getPressRelease(type);

                            pressEventObj.setData({
                                id: dtArray[newsHedIdxList.ID],
                                title: dtArray[newsHedIdxList.TITLE],
                                url: dtArray[newsHedIdxList.URL],
                                date: dtArray[newsHedIdxList.DATE]
                            });
                        });
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing press releases response : ' + e);
            }
        };

        var processExchangeSummaryResponse = function processExchangeSummaryResponse(dataObj, language) {
            if (dataObj && dataObj.DAT && dataObj.HED && dataObj.DAT.SRC) {
                try {
                    var priceExgMeteData = language === _sharedService.default.userSettings.currentLanguage ? _sharedService.default.getService('price').priceExchangeMeta : _sharedService.default.getService('price').priceExchangeMeta.constructor.create();
                    var exgMetaData = priceExgMeteData.getExgSummaryObj();

                    exgMetaData.HED = dataObj.HED;
                    exgMetaData.DAT = dataObj.DAT;

                    var verHeader = ['EXCHANGE', 'VRS'];
                    var verHedIdxList = _getHeaderIndexList(dataObj.HED.VRS, verHeader);

                    _ember.default.$.each(dataObj.DAT.VRS, function (verIndex, verStr) {
                        var verArray = verStr.split(_utils.default.Constants.StringConst.Pipe);
                        var exchangeCode = verArray[verHedIdxList.EXCHANGE];

                        exgMetaData.VRS[exchangeCode] = verArray[verHedIdxList.VRS];
                    });

                    priceExgMeteData.save(language);

                    // Update data stores
                    if (language === _sharedService.default.userSettings.currentLanguage) {
                        var headerFields = ['EXCHANGE', 'DISP_CODE', 'SHRT_DSC', 'LONG_DSC', 'MAIN_IDX', 'MAIN_IDX_DSC', 'DEF_SUB_MKT', 'SUB_MKT_DSC'];
                        var symHedIdxList = _getHeaderIndexList(dataObj.HED.SRC, headerFields);

                        _ember.default.$.each(dataObj.DAT.SRC, function (exgIndex, exgStr) {
                            var dtArray = exgStr.split(_utils.default.Constants.StringConst.Pipe);

                            var exchangeCode = dtArray[symHedIdxList.EXCHANGE];
                            var mainIndex = dtArray[symHedIdxList.MAIN_IDX];
                            var isDelayed = _sharedService.default.getService('price').userDS.isExchangeDelayed(exchangeCode);

                            var exgObj = _sharedService.default.getService('price').exchangeDS.getExchange(exchangeCode);
                            var stockObj = _sharedService.default.getService('price').stockDS.getStock(exchangeCode, mainIndex, _utils.default.AssetTypes.Indices);

                            exgObj.setData({
                                exg: exchangeCode,
                                de: isDelayed ? [dtArray[symHedIdxList.DISP_CODE], _utils.default.Constants.Delayed].join(' ') : dtArray[symHedIdxList.DISP_CODE],
                                sDes: _utils.default.formatters.convertUnicodeToNativeString(isDelayed ? [dtArray[symHedIdxList.SHRT_DSC], _utils.default.Constants.Delayed].join(' ') : dtArray[symHedIdxList.SHRT_DSC]),
                                des: _utils.default.formatters.convertUnicodeToNativeString(isDelayed ? [dtArray[symHedIdxList.LONG_DSC], _utils.default.Constants.Delayed].join(' ') : dtArray[symHedIdxList.LONG_DSC])
                            });

                            if (!exgObj.get('mainIdx')) {
                                exgObj.setData({
                                    mainIdx: dtArray[symHedIdxList.MAIN_IDX]
                                });
                            }

                            stockObj.setData({
                                sym: mainIndex,
                                sDes: _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.MAIN_IDX_DSC])
                            });

                            // Gives priority to default sub market configured in application (price-constants)
                            // This is to avoid data issues from backend and gives correct output to users
                            // If default sub market is not configured in application, it will get from backend response
                            var defSubMkt = _appConfig.default.customisation.defaultSubMarket[exchangeCode];
                            defSubMkt = defSubMkt ? defSubMkt : dtArray[symHedIdxList.DEF_SUB_MKT];

                            var subMktData = _utils.default.formatters.convertUnicodeToNativeString(dtArray[symHedIdxList.SUB_MKT_DSC]); // B-Bonds,E-Equities,M-Mutual Funds

                            // Server returns only the separator if no sub markets available for the market
                            // Therefore checking the length to distinguish single sub market, multiple sub markets and no sub markets
                            if (subMktData.length > 1) {
                                var subMktItems = subMktData.split(_utils.default.Constants.StringConst.Comma);

                                var allowedSubMktsByExg = _getAllowedSubMktsByExchange(exchangeCode);

                                // If only one sub market available, considers as sub markets not available
                                // Symbols are not tagged to the sub market in this scenario
                                // Therefore symbols are not loaded in application widgets

                                // Commented 'if' block to fixed issue occur in KSE setup
                                // Issue : Sending MKT code as "-1"

                                // if (subMktItems.length > 1) {
                                try {
                                    _ember.default.$.each(subMktItems, function (key, val) {
                                        var subMktArray = val.split(/-(.+)?/); // Split by first occurrence of '-'; eg: 2-Nomu-Parallel Market

                                        if (allowedSubMktsByExg.length === 0 || allowedSubMktsByExg.contains(subMktArray[0])) {
                                            var subMktObj = _sharedService.default.getService('price').subMarketDS.getSubMarket(exchangeCode, subMktArray[0]);

                                            subMktObj.setData({
                                                marketId: subMktArray[0],
                                                lDes: subMktArray[1],
                                                def: subMktArray[0] === defSubMkt ? '1' : '0'
                                            });
                                        }
                                    });
                                } catch (e) {
                                    _utils.default.logger.logDebug('Sub market processing failed : ' + e);
                                }
                                // }
                            }

                            // This will set sub market array with zero items if market does not have sub markets
                            // Market data subscription is being sent based on this logic
                            // Therefore it is required not to have sub market array undefined
                            if (!exgObj.get('subMarketArray')) {
                                exgObj.set('subMarketArray', _sharedService.default.getService('price').subMarketDS.getSubMarketCollectionByExchange(exchangeCode));
                            }
                        });
                    }
                } catch (e) {
                    _utils.default.logger.logError('Error in processing exchange, stock and sub market response : ' + e);
                }

                _sharedService.default.getService('price').onPriceExchangeSummaryMetaReady();
            }
        };

        var processFairValueHistoricalPriceResponse = function processFairValueHistoricalPriceResponse(dataObj) {
            try {
                if (dataObj && dataObj.DAT && dataObj.HED) {
                    // Update data stores
                    var headerFields = ['SYMBOL', 'EXCHANGE', 'LANGUAGE_CODE', 'TICKER_SERIAL', 'COMPANY_ID', 'FAIR_VALUE', 'ACTUAL_VALUE', 'FV_DATE', 'FV_SOURCE_NAME', 'DOC_ID', 'FV_RATING_ID', 'FV_RATING_NAME', 'INDIVIDUAL_ID_LIST', 'FV_RATING_SCORE', 'REPORT_DATE', 'ADJUSTED_FAIR_VALUE'];
                    var fvHedIdxList = _getHeaderIndexList(dataObj.HED.CDS.FRVL, headerFields);

                    _ember.default.$.each(dataObj.DAT.CDS.FRVL, function (fvIndex, fvStr) {
                        var dtArray = fvStr.split(_utils.default.Constants.StringConst.Pipe);

                        var symbolCode = dtArray[fvHedIdxList.SYMBOL];
                        var exchangeCode = dtArray[fvHedIdxList.EXCHANGE];
                        var companyId = dtArray[fvHedIdxList.COMPANY_ID];

                        var fvObj = _sharedService.default.getService('price').fairValueDS.getFairValue(exchangeCode, symbolCode, companyId);

                        if (fvObj) {
                            fvObj.setData({
                                fv: parseFloat(dtArray[fvHedIdxList.FAIR_VALUE]),
                                av: parseFloat(dtArray[fvHedIdxList.ACTUAL_VALUE]),
                                date: dtArray[fvHedIdxList.FV_DATE],
                                source: _utils.default.formatters.convertUnicodeToNativeString(dtArray[fvHedIdxList.FV_SOURCE_NAME]),
                                docId: dtArray[fvHedIdxList.DOC_ID],
                                ratingId: dtArray[fvHedIdxList.FV_RATING_ID],
                                ratingName: _utils.default.formatters.convertUnicodeToNativeString(dtArray[fvHedIdxList.FV_RATING_NAME]),
                                individualIdList: dtArray[fvHedIdxList.INDIVIDUAL_ID_LIST],
                                ratingScore: parseInt(dtArray[fvHedIdxList.FV_RATING_SCORE], 10),
                                reportDate: dtArray[fvHedIdxList.REPORT_DATE],
                                adjustedFv: parseFloat(dtArray[fvHedIdxList.ADJUSTED_FAIR_VALUE]),
                                lnCode: dtArray[fvHedIdxList.LANGUAGE_CODE],
                                ticketSerial: dtArray[fvHedIdxList.TICKER_SERIAL]
                            });
                        }
                    });
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing fair value historical price response : ' + e);
            }
        };

        var processFairValueReportResponse = function processFairValueReportResponse(dataObj) {
            try {
                if (dataObj && dataObj.DAT && dataObj.HED) {
                    var headerField = ['FILE_GUID'];
                    var fvHedIdxList = _getHeaderIndexList(dataObj.HED.DS.FILE, headerField);
                    var dtArray = dataObj.DAT.DS.FILE[0].split(_utils.default.Constants.StringConst.Pipe);

                    return dtArray[fvHedIdxList.FILE_GUID];
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing fair value report response : ' + e);
            }
        };

        var processCorporateActionResponse = function processCorporateActionResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var corporateActionArray = [];

                    if (dataObj.DAT.CDS.CPAC) {
                        var headerFields = ['EXCHANGE', 'SYMBOL', 'CURRENCY', 'ANNOUNCE_DATE', 'EFFECTIVE_DATE', 'COMPLETION_DATE', 'DIVIDEND_AMOUNT', 'CORP_ACT_TYPE', 'ACTION_TYPE_NAME', 'SPLIT_FACTOR', 'ACTION_ID'];
                        var symHedIdxList = _getHeaderIndexList(dataObj.HED.CDS.CPAC, headerFields);

                        _ember.default.$.each(dataObj.DAT.CDS.CPAC, function (key, val) {
                            var dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            var actionId = dtArray[symHedIdxList.ACTION_ID];
                            var symbolCode = dtArray[symHedIdxList.SYMBOL];
                            var corporateActObj = _sharedService.default.getService('price').corporateActionDS.getCorporateAction(actionId);
                            var exDividendDateObj = _utils.default.formatters.convertStringToDate(dtArray[symHedIdxList.EFFECTIVE_DATE]);

                            corporateActObj.setData({
                                sym: symbolCode,
                                exDividendDateObj: exDividendDateObj,
                                chg: dtArray[symHedIdxList.EXCHANGE],
                                annDate: dtArray[symHedIdxList.ANNOUNCE_DATE],
                                exdvDate: dtArray[symHedIdxList.EFFECTIVE_DATE],
                                pmntDate: dtArray[symHedIdxList.COMPLETION_DATE],
                                curr: dtArray[symHedIdxList.CURRENCY],
                                dividendAmount: dtArray[symHedIdxList.DIVIDEND_AMOUNT],
                                actionType: dtArray[symHedIdxList.CORP_ACT_TYPE],
                                actionNameUni: dtArray[symHedIdxList.ACTION_TYPE_NAME],
                                spltFctr: dtArray[symHedIdxList.SPLIT_FACTOR]
                            });

                            corporateActionArray[corporateActionArray.length] = corporateActObj;
                        });
                    }

                    return corporateActionArray;
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing CorporateAction response : ' + e);
            }
        };

        var processVolumeWatcherResponse = function processVolumeWatcherResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dtArray, symbolCode, exchangeCode, instrumentType, stockObj, symHedIdxList, headerFields;

                    if (dataObj.DAT.VW) {

                        headerFields = ['E', 'INS', 'S', 'SDES', 'LTP', 'PCHG', 'VOL', 'AV5D', 'AV7D', 'AV30D', 'AV90D', 'PAV5D', 'PAV7D', 'PAV30D', 'PAV90D'];
                        symHedIdxList = _getHeaderIndexList(dataObj.HED.VW, headerFields);

                        _ember.default.$.each(dataObj.DAT.VW, function (key, val) {
                            dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            symbolCode = dtArray[symHedIdxList.S];
                            exchangeCode = dtArray[symHedIdxList.E];
                            instrumentType = parseInt(dtArray[symHedIdxList.INS], 10);
                            stockObj = _sharedService.default.getService('price').stockDS.getStock(exchangeCode, symbolCode, instrumentType);

                            stockObj.setData({
                                av5d: parseFloat(dtArray[symHedIdxList.AV5D])
                            });
                        });
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing Volume Watcher response : ' + e);
            }
        };

        var processOptionChainResponse = function processOptionChainResponse(dataObj, paramExg, paramSym, callbackFn) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    if (dataObj.DAT.OL && dataObj.HED.OL) {
                        var listHedFields = ['E', 'S', 'OPM', 'OPE', 'OW'];
                        var listHedIdxList = _getHeaderIndexList(dataObj.HED.WOL, listHedFields);
                        var periods = dataObj.DAT.WOL ? dataObj.DAT.OL.concat(dataObj.DAT.WOL) : dataObj.DAT.OL;

                        _ember.default.$.each(periods, function (key, val) {
                            var dataArray = val.split(_utils.default.Constants.StringConst.Pipe);

                            var trdExchange = dataArray[listHedIdxList.E];
                            var baseSymbol = dataArray[listHedIdxList.S];
                            var optPeriod = dataArray[listHedIdxList.OPM];

                            var optPeriodObj = _sharedService.default.getService('price').optionPeriodDS.getOptionPeriod(trdExchange, baseSymbol, optPeriod);

                            optPeriodObj.setData({
                                optExg: dataArray[listHedIdxList.OPE],
                                optWeek: dataArray[listHedIdxList.OW]
                            });
                        });
                    }

                    _processOptionSymbolList(dataObj, paramExg, paramSym, callbackFn, 'OS');
                    _processOptionSymbolList(dataObj, paramExg, paramSym, callbackFn, 'WOS');
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing option chain response : ' + e);
            }
        };

        var processOptionListResponse = function processOptionListResponse(dataObj, paramExg, paramSym, callbackFn, responseTag) {
            try {
                _processOptionSymbolList(dataObj, paramExg, paramSym, callbackFn, responseTag);
            } catch (e) {
                _utils.default.logger.logError('Error in processing option chain response : ' + e);
            }
        };

        var processFinancialResponse = function processFinancialResponse(dataObj, exg, sym, secondSymAdded, primarySymbol, secondarySymbol, periodType, callbackFn) {
            var financialType = ['FR', 'MR', 'IS', 'BS', 'CF'];

            try {
                if (dataObj.DAT && dataObj.HED && dataObj.STYLE) {
                    _ember.default.$.each(financialType, function (key, type) {
                        _addFinancialRatiosToCollection(dataObj, exg, sym, type, secondSymAdded, periodType);
                    });

                    if (secondSymAdded) {
                        _sharedService.default.getService('price').financialDS.getCompareSymbolCollection(exg, primarySymbol, secondarySymbol, periodType);
                    }

                    if (callbackFn) {
                        callbackFn();
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing financials and ratios response : ' + e);
            }
        };

        //
        // Symbol Closing Price Requests
        //
        // TODO: [Champaka] need to be refactored
        var processClosingPriceResponse = function processClosingPriceResponse(dataObj, callbackFn) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var headerArray, exg, sym, priceObj;

                    if (dataObj.DAT.SYM && dataObj.HED.SYM) {
                        _ember.default.$.each(dataObj.DAT.SYM, function (key, value) {
                            _ember.default.$.each(value.HIS, function (row, val) {
                                headerArray = value.S.split(_utils.default.Constants.StringConst.Comma);
                                exg = headerArray[0];
                                sym = headerArray[1];

                                var date = new Date(val[0] * 1000).toISOString().slice(0, 10);

                                if (sym === 'ADI') {
                                    if (value.HIS) {
                                        priceObj = _sharedService.default.getService('price').portfolioDS.getClosePrice(exg, sym);
                                        priceObj.setData(value.HIS);

                                        priceObj.dateArray.pushObject(date);
                                    }
                                } else {
                                    _sharedService.default.getService('price').portfolioDS.getSymClosePrice(exg, sym, date, val[1]);
                                }
                            });
                        });

                        if (callbackFn) {
                            callbackFn();
                        }
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing symbol close price response : ' + e);
            }
        };

        //
        // Book Shelf Requests
        //
        var processBookShelfResponse = function processBookShelfResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var bookShelfObj, bookHedIdxList, bookArray, headerFields, bookId, bookCategory;

                    if (dataObj.DAT.BOOK_SHELF_DATA) {
                        headerFields = ['TITLE', 'ID', 'URL', 'DATE', 'CATEGORY', 'IMG'];
                        bookHedIdxList = _getHeaderIndexList(dataObj.HED.BOOK_SHELF_DATA, headerFields);

                        _ember.default.$.each(dataObj.DAT.BOOK_SHELF_DATA, function (key, val) {
                            bookArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            bookId = bookArray[bookHedIdxList.ID];
                            bookCategory = bookArray[bookHedIdxList.CATEGORY];

                            bookShelfObj = _sharedService.default.getService('price').bookShelfDS.getBookShelf(bookId, bookCategory);

                            bookShelfObj.setData({
                                id: bookArray[bookHedIdxList.ID],
                                title: bookArray[bookHedIdxList.TITLE],
                                url: bookArray[bookHedIdxList.URL],
                                date: bookArray[bookHedIdxList.DATE],
                                category: bookArray[bookHedIdxList.CATEGORY],
                                img: bookArray[bookHedIdxList.IMG]
                            });
                        });
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing book shelf response : ' + e);
            }
        };

        //
        // User Registration Response
        //
        var processUserRegistrationResponse = function processUserRegistrationResponse(dataObj) {
            try {
                if (dataObj) {
                    var registrationObj = _sharedService.default.getService('price').registrationDS.getRegistration();

                    if (registrationObj) {
                        _ember.default.set(registrationObj, 'regDetailSts', dataObj.ERRORCODE);
                        _ember.default.set(registrationObj, 'regDetailStsMsg', dataObj.ERRORDES);
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in User Registration response : ' + e);
            }
        };

        var onError = function onError(error) {
            _utils.default.logger.logError('Error while MIX request/response handling: ' + error);
        };

        //
        // Private functions
        //
        var _processOptionSymbolList = function _processOptionSymbolList(dataObj, paramExg, paramSym, callbackFn, responseTag) {
            if (dataObj.DAT && dataObj.HED) {
                if (dataObj.DAT[responseTag] && dataObj.HED[responseTag]) {
                    var entityList = [];
                    var symHedFields = ['E', 'S', 'OPM', 'OPE', 'SP', 'CS', 'PS', 'NMON', 'OW'];
                    var symHedIdxList = _getHeaderIndexList(dataObj.HED[responseTag], symHedFields);

                    _ember.default.$.each(dataObj.DAT[responseTag], function (key, val) {
                        var dataArray = val.split(_utils.default.Constants.StringConst.Pipe);

                        entityList[entityList.length] = {
                            sym: dataArray[symHedIdxList.S],
                            exg: dataArray[symHedIdxList.E],
                            optPrd: dataArray[symHedIdxList.OPM],
                            strkPrc: dataArray[symHedIdxList.SP],
                            nearMon: dataArray[symHedIdxList.NMON],
                            optWeek: dataArray[symHedIdxList.OW],
                            cSym: dataArray[symHedIdxList.CS],
                            pSym: dataArray[symHedIdxList.PS],
                            optExg: dataArray[symHedIdxList.OPE]
                        };
                    });

                    _sharedService.default.getService('price').optionStockDS.setOptionStockEntityList(entityList);
                }

                var defaultPeriod = _sharedService.default.getService('price').optionStockDS.getDefaultOptionPeriod(paramExg, paramSym);
                callbackFn(defaultPeriod);
            }
        };

        var _getHeaderIndexList = function _getHeaderIndexList(headerObj, headerFields) {
            return headerObj ? headerObj.split(_utils.default.Constants.StringConst.Pipe).indicesOf(headerFields) : undefined;
        };

        var _setLastTrade = function _setLastTrade(lastTrade, tradeObj) {
            var lastTradeObj = lastTrade;

            if (!lastTradeObj) {
                lastTradeObj = tradeObj;
            }

            if (lastTradeObj.seq >= tradeObj.seq) {
                lastTradeObj = tradeObj;
            }

            return lastTradeObj;
        };

        var _updateExchangeMetadata = function _updateExchangeMetadata(property, dataObj, exchangeCode, metaData) {
            metaData[exchangeCode].DAT.SRC[property] = dataObj.DAT.SRC[property];
            metaData[exchangeCode].HED.SRC[property] = dataObj.HED.SRC[property];
        };

        var _formatTimeZoneOffset = function _formatTimeZoneOffset(offset) {
            // offset ex: 5, 5.0, 5.00, 5.5, 5.50, 5.3, 5.30
            var offsetFormatted = 0;

            if (_utils.default.validators.isAvailable(offset)) {
                if (offset.indexOf(_utils.default.Constants.StringConst.Dot) >= 0) {
                    var offsetArray = offset.split(_utils.default.Constants.StringConst.Dot);

                    if (offsetArray.length === 2) {
                        var hourPart = parseInt(offsetArray[0], 10);
                        var minuteString = offsetArray[1];
                        var divider = minuteString === '3' || minuteString === '30' ? 6 : 10; // ex: 30/60, 3/6, 50/100, 5/10, 0/10 or 00/100

                        divider = divider * Math.pow(10, minuteString.length - 1);
                        offsetFormatted = hourPart + parseInt(minuteString, 10) / divider;
                    }
                } else {
                    offsetFormatted = parseInt(offset, 10); // ex: 5
                }
            }

            return offsetFormatted;
        };

        var _addNewsAnnToCollection = function _addNewsAnnToCollection(idList, id, annCollection, annObj) {
            var currentIndex = idList.indexOf(id);

            if (currentIndex >= 0) {
                annCollection[currentIndex] = annObj;
            } else {
                annCollection.pushObject(annObj);
                idList[idList.length] = id;
            }
        };

        var _addFinancialRatiosToCollection = function _addFinancialRatiosToCollection(dataObj, exg, sym, statement, secondSymAdded, periodType) {
            var headerList, financialHeaders, finHedIdxList, dtArray, styleArray, styleList, styleHeader, financialObj, year, quater;

            if (dataObj.DAT.COMPFIN.QTR[statement]) {
                headerList = dataObj.HED.COMPFIN.QTR[statement];
                financialHeaders = headerList.split(_utils.default.Constants.StringConst.Pipe);
                styleArray = dataObj.STYLE.COMPFIN.QTR[statement].split(_utils.default.Constants.StringConst.Pipe);
                finHedIdxList = _getHeaderIndexList(headerList, financialHeaders);

                _ember.default.$.each(dataObj.DAT.COMPFIN.QTR[statement], function (key, val) {
                    dtArray = val.split(_utils.default.Constants.StringConst.Pipe);
                    year = dtArray[finHedIdxList.DUR_YEAR];
                    quater = dtArray[finHedIdxList.QUARTER_REQUESTED];

                    _ember.default.$.each(finHedIdxList, function (header, headerValue) {
                        var periodKey = [year, quater].join('-');
                        var styleKey = finHedIdxList[header];
                        var comma = _utils.default.Constants.StringConst.Comma;

                        styleHeader = styleArray[styleKey];

                        if (styleHeader && styleHeader.indexOf(comma)) {
                            var commaIndex = styleHeader.indexOf(comma);
                            styleList = [styleHeader.substring(0, commaIndex), styleHeader.substring(commaIndex + 1)];
                        }

                        if (styleList && styleList.length > 1 && styleList[0] !== '0') {
                            var _financialObj$setData;

                            if (statement === 'MR') {
                                financialObj = _sharedService.default.getService('price').financialDS.getFinancial(exg, sym, 'FR', header, secondSymAdded, periodType);
                            } else {
                                financialObj = _sharedService.default.getService('price').financialDS.getFinancial(exg, sym, statement, header, secondSymAdded, periodType);
                            }

                            financialObj.setData((_financialObj$setData = {
                                name: header
                            }, _defineProperty(_financialObj$setData, periodKey, dtArray[headerValue] || _sharedService.default.userSettings.displayFormat.noValue), _defineProperty(_financialObj$setData, 'indent', styleList[0]), _defineProperty(_financialObj$setData, 'description', styleList[1]), _financialObj$setData));

                            financialObj.keyArray.pushObject(periodKey);
                            financialObj.valueArray.pushObject(dtArray[headerValue]);
                        }
                    });
                });
            }
        };

        var _getAllowedSubMktsByExchange = function _getAllowedSubMktsByExchange(exchangeCode) {
            var allowedSubMarkets = _appConfig.default.customisation.allowedSubMarkets;
            var allowedSubMktsByExg = [];

            if (allowedSubMarkets && allowedSubMarkets[exchangeCode]) {
                allowedSubMktsByExg = allowedSubMarkets[exchangeCode];
            }

            return allowedSubMktsByExg;
        };

        var processLoginIndexPanelResponse = function processLoginIndexPanelResponse(dataObj, callBackFunc) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var dataArray, indexPanelHedIdxList, exchange, headerFields, symbol, lastTradePrice, change, pChange;

                    if (dataObj.DAT.SS) {
                        headerFields = ['E', 'S', 'LTP', 'CHG', 'PCHG'];
                        indexPanelHedIdxList = _getHeaderIndexList(dataObj.HED.SS, headerFields);
                        dataArray = dataObj.DAT.SS[0].split(_utils.default.Constants.StringConst.Pipe);

                        exchange = dataArray[indexPanelHedIdxList.E];
                        symbol = dataArray[indexPanelHedIdxList.S];
                        lastTradePrice = dataArray[indexPanelHedIdxList.LTP];
                        change = dataArray[indexPanelHedIdxList.CHG];
                        pChange = dataArray[indexPanelHedIdxList.PCHG];

                        var indexData = {
                            exg: exchange,
                            sym: symbol,
                            ltd: lastTradePrice,
                            chg: change,
                            pchg: pChange
                        };

                        var indexObj = _sharedService.default.getService('price').stockDS.getStock(indexData.exg, indexData.sym, _utils.default.AssetTypes.Indices);

                        if (indexObj !== null) {
                            indexObj.setData(indexData);
                        }

                        callBackFunc(indexData);
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing index panel data response : ' + e);
            }
        };

        var processInvestmentIdResponse = function processInvestmentIdResponse(dataObj, exchange, callbackFn) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var investorId, investorsObj, investorsHedIdxList, investorsArray, headerFields;

                    if (dataObj.DAT.INVESTORS && dataObj.DAT.INVESTORS.length > 0) {
                        headerFields = ['NIN', 'TYPE', 'ID'];
                        investorsHedIdxList = _getHeaderIndexList(dataObj.HED.INVESTORS, headerFields);

                        _ember.default.$.each(dataObj.DAT.INVESTORS, function (key, val) {
                            investorsArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            investorId = investorsArray[investorsHedIdxList.ID];
                            investorsObj = _sharedService.default.getService('price').investorsDS.getInvestors(exchange, investorId);

                            investorsObj.setData({
                                investId: investorsArray[investorsHedIdxList.ID],
                                investKey: investorsArray[investorsHedIdxList.NIN],
                                type: investorsArray[investorsHedIdxList.TYPE]
                            });
                        });
                    }

                    if (callbackFn) {
                        callbackFn();
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing investors response : ' + e);
            }
        };

        var processInvestorPortfolioResponse = function processInvestorPortfolioResponse(dataObj, investId, callbackFn) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var symbol, investorsObj, portfolioHedIdxList, portfolioArray, headerFields;

                    if (dataObj.DAT.INVESTORS_PORTFOLIO) {
                        headerFields = ['SYM', 'NOFS', 'MV', 'AC', 'CV', 'ENGNA', 'ARBNA', 'DSYM', 'BROENG', 'BROARB', 'BID', 'GLP', 'GL'];
                        portfolioHedIdxList = _getHeaderIndexList(dataObj.HED.INVESTORS_PORTFOLIO, headerFields);

                        _ember.default.$.each(dataObj.DAT.INVESTORS_PORTFOLIO, function (key, val) {
                            portfolioArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            symbol = portfolioArray[portfolioHedIdxList.SYM];
                            investorsObj = _sharedService.default.getService('price').investorsDS.getPortfolio(investId, symbol);

                            investorsObj.setData({
                                noOfShares: portfolioArray[portfolioHedIdxList.NOFS],
                                marketValue: portfolioArray[portfolioHedIdxList.MV],
                                avgCost: portfolioArray[portfolioHedIdxList.AC],
                                engName: portfolioArray[portfolioHedIdxList.ENGNA],
                                arName: portfolioArray[portfolioHedIdxList.ARBNA],
                                costValue: portfolioArray[portfolioHedIdxList.CV],
                                dSym: portfolioArray[portfolioHedIdxList.DSYM],
                                broker: portfolioArray[portfolioHedIdxList.BROENG],
                                company: portfolioArray[portfolioHedIdxList.BROENG],
                                brokerArb: portfolioArray[portfolioHedIdxList.BROARB],
                                brokerId: portfolioArray[portfolioHedIdxList.BID],
                                gainLossPerc: portfolioArray[portfolioHedIdxList.GLP],
                                gainLoss: portfolioArray[portfolioHedIdxList.GL]
                            });
                        });
                    }

                    if (callbackFn) {
                        callbackFn();
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing investor profile response : ' + e);
            }
        };

        var processCDVAndYTDPUrlResponse = function processCDVAndYTDPUrlResponse(dataObj, callbackFn) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var exchange, symbol, stockObj, CDVHedIdxList, CDVArray, headerFields;

                    if (dataObj.DAT.SS) {
                        headerFields = ['E', 'INS', 'S', 'LTP', 'PCP', 'CHG', 'PCHG', 'BBP', 'BBQ', 'BAP', 'BAQ', 'VOL', 'NOT', 'HIG', 'LOW', 'REFP', 'MIN', 'MAX', 'TDO', 'CIT', 'COT', 'TBQ', 'TAQ', 'MCAP', 'EPS', 'PS', 'AV5D', 'AV7D', 'LTQ', 'LTT', 'LTD', 'PER', 'TRT', 'TDC', 'VWAP', 'LTDP', 'OPI', 'SST', 'LSCT', 'SHRST', 'TOP', 'TOV', 'TCP', 'TCV', 'CVWAP', 'TWAP', 'ADJINVAL', 'YTDP'];
                        CDVHedIdxList = _getHeaderIndexList(dataObj.HED.SS, headerFields);

                        _ember.default.$.each(dataObj.DAT.SS, function (key, val) {
                            CDVArray = val.split(_utils.default.Constants.StringConst.Pipe);
                            exchange = CDVArray[CDVHedIdxList.E];
                            symbol = CDVArray[CDVHedIdxList.S];
                            stockObj = _sharedService.default.getService('price').stockDS.getStock(exchange, symbol);

                            stockObj.setData({
                                cdv: CDVArray[CDVHedIdxList.VOL],
                                ytdp: CDVArray[CDVHedIdxList.YTDP]
                            });
                        });
                    }
                }

                if (callbackFn) {
                    callbackFn();
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing Current Daily Volume and Beta response : ' + e);
            }
        };

        var processBetaResponse = function processBetaResponse(dataObj, callbackFn) {
            try {
                if (dataObj.DAT && dataObj.HED && dataObj.DAT.COMP) {
                    var exchange, symbol, stockObj, betaHedIdxList, betaArray, headerFields;

                    if (dataObj.DAT.COMP[0]) {
                        headerFields = ['E', 'INS', 'S', 'HD52', 'LD52', 'YTDP', 'AT7D', 'AT30D', 'AV7D', 'AV30D', 'H52', 'L52', 'MCAP', 'PER', 'EPS', 'OSS', 'BT', 'MA50D', 'MA200D', 'CFR7', 'LTP', 'AV5D', 'AT5D'];
                        betaHedIdxList = _getHeaderIndexList(dataObj.HED.COMP, headerFields);

                        betaArray = dataObj.DAT.COMP[0].split(_utils.default.Constants.StringConst.Pipe);
                        exchange = betaArray[betaHedIdxList.E];
                        symbol = betaArray[betaHedIdxList.S];
                        stockObj = _sharedService.default.getService('price').stockDS.getStock(exchange, symbol);

                        stockObj.setData({
                            beta: betaArray[betaHedIdxList.BT]
                        });
                    }
                }

                if (callbackFn) {
                    callbackFn();
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing Beta response : ' + e);
            }
        };

        var processFundamentalScoreResponse = function processFundamentalScoreResponse(dataObj) {
            try {
                if (dataObj.DAT && dataObj.HED) {
                    var exchangeCode = dataObj.DAT.E;

                    if (dataObj.DAT.SYM) {
                        _ember.default.$.each(dataObj.DAT.SYM, function (key, val) {
                            var scoreArray = val.HIS;
                            var symbolCode = val.S;
                            var stockObj = _sharedService.default.getService('price').stockDS.getStock(exchangeCode, symbolCode);

                            if (stockObj && scoreArray.length > 1) {
                                stockObj.setData({
                                    fs1d: scoreArray[0][1],
                                    fs2d: scoreArray[1][1]
                                });
                            }
                        });
                    }
                }
            } catch (e) {
                _utils.default.logger.logError('Error in processing Fundamental Score response : ' + e);
            }
        };

        var processTechnicalScoreResponse = function processTechnicalScoreResponse(dtObj, chartCategory, reqSuccessFn, reqFailureFn) {
            try {
                if (dtObj.DAT && dtObj.HED && dtObj.HED.HIS) {
                    var signalsList = _priceWidgetConfig.default.techScore.techScoreConfig.signals;
                    var symHedIdxList = dtObj.HED.S.split(_utils.default.Constants.StringConst.Comma).indicesOf(['E', 'S']);
                    var symInfo = dtObj.DAT.S.split(_utils.default.Constants.StringConst.Comma);
                    var priceService = _sharedService.default.getService('price');
                    var sym = symInfo[symHedIdxList.S];
                    var exg = symInfo[symHedIdxList.E];
                    var signalObj, dataIdxList, pt, date;

                    dataIdxList = dtObj.HED.HIS.split(_utils.default.Constants.StringConst.Comma).indicesOf(['DT', 'TECH_SCORE', 'SIG_BB', 'SIG_MACD', 'SIG_WILLR', 'SIG_CHKNMF', 'SIG_PXROC', 'SIG_PABSAR', 'SIG_CHKOSC', 'SIG_CHNOSC', 'SIG_CMDOCH', 'SIG_DEMA', 'SIG_RSI', 'SIG_FASTO', 'SIG_IMNTM', 'SIG_MOMNT', 'SIG_MF', 'SIG_MVAVG', 'SIG_PXOSC', 'SIG_QSTIC', 'SIG_RLTMNT', 'SIG_RLTSTR', 'SIG_RLTVOL', 'SIG_SLSTO', 'SIG_SMTNM', 'SIG_TEMA', 'SIG_TRIX', 'SIG_VOLOSC', 'TS_BB', 'TS_MACD', 'TS_WILLR', 'TS_CHKNMF', 'TS_PXROC', 'TS_PABSAR', 'TS_CHKOSC', 'TS_CHNOSC', 'TS_CMDOCH', 'TS_DEMA', 'TS_RSI', 'TS_FASTO', 'TS_IMNTM', 'TS_MOMNT', 'TS_MF', 'TS_MVAVG', 'TS_PXOSC', 'TS_QSTIC', 'TS_RLTMNT', 'TS_RLTSTR', 'TS_RLTVOL', 'TS_SLSTO', 'TS_SMTNM', 'TS_TEMA', 'TS_TRIX', 'TS_VOLOSC']);

                    var techScoreSeriesObj = priceService.technicalScoreDS.getTechnicalScoreSeries(exg, sym, chartCategory);
                    var techScoreObj = priceService.technicalScoreDS.getTechnicalScore(exg, sym);

                    // If data is already available, flush them.
                    // Note: Flushing and re-generating the array is efficient than search and insertion the missing points
                    if (techScoreSeriesObj.dataPoints.length > 0) {
                        techScoreSeriesObj.dataPoints.length = 0;
                    }

                    // Load exchange object for obtaining the timezone
                    var exgObj = priceService.exchangeDS.getExchange(exg);

                    _ember.default.$.each(dtObj.DAT.HIS, function (key, val) {
                        pt = parseInt(val[dataIdxList.DT], 10) * _priceConstants.default.UnixTimestampByMilliSeconds;
                        date = _utils.default.formatters.convertToUTCDate(pt, exgObj.tzo);

                        techScoreSeriesObj.dataPoints.pushObject({
                            DT: date,
                            techScore: val[dataIdxList.TECH_SCORE]
                        });

                        if (!techScoreObj.date || date > techScoreObj.date) {
                            _ember.default.set(techScoreObj, 'score', val[dataIdxList.TECH_SCORE]);
                            _ember.default.set(techScoreObj, 'date', date);
                        }

                        signalsList.forEach(function (signalValue) {
                            var signal = _priceConstants.default.TechnicalScoreConstants[signalValue];
                            var signalInd = val[dataIdxList['SIG_' + signal]];

                            if (signalInd === 'B' || signalInd === 'S') {
                                signalObj = priceService.technicalScoreDS.getSignal(exg, sym, signal);

                                if (!signalObj.date || date > signal.date) {
                                    _ember.default.set(signalObj, 'date', date.getTime());
                                    _ember.default.set(signalObj, 'signal', val[dataIdxList['SIG_' + signal]]);
                                    _ember.default.set(signalObj, 'score', parseFloat(val[dataIdxList['TS_' + signal]]));
                                }
                            }
                        });
                    });

                    if (_ember.default.$.isFunction(reqSuccessFn) && techScoreSeriesObj.dataPoints && techScoreSeriesObj.dataPoints.length > 0) {
                        reqSuccessFn();
                    } else if (_ember.default.$.isFunction(reqFailureFn)) {
                        reqFailureFn();
                    }

                    _sharedService.default.getService('price').technicalScoreDS.onChartDataReady(_utils.default.keyGenerator.getKey(exg, sym));
                }
            } catch (e) {
                _utils.default.logger.logError('Error in Technical score data response: ' + e);
            }
        };

        return {
            processExchangeMetadataResponse: processExchangeMetadataResponse, // RT = 306
            processSymbolValidationResponse: processSymbolValidationResponse,
            processSymbolSearchResponse: processSymbolSearchResponse,
            processChartResponse: processChartResponse,
            processAnnouncementBodyResponse: processAnnouncementBodyResponse,
            processAnnouncementSearchResponse: processAnnouncementSearchResponse,
            processNewsSearchResponse: processNewsSearchResponse,
            processNewsBodyResponse: processNewsBodyResponse,
            processCompanyProfileResponse: processCompanyProfileResponse,
            processTimeAndSalesBacklogResponse: processTimeAndSalesBacklogResponse,
            processCalenderEventsResponse: processCalenderEventsResponse,
            processYoutubeEventsResponse: processYoutubeEventsResponse,
            processInstagramEventsResponse: processInstagramEventsResponse,
            processFacebookEventsResponse: processFacebookEventsResponse,
            processPressReleaseResponse: processPressReleaseResponse,
            processDelayedPriceMeta: processDelayedPriceMeta,
            processExchangeSummaryResponse: processExchangeSummaryResponse, // RT = 308
            processGmsSummaryResponse: processGmsSummaryResponse,
            processSystemMetaDataResponse: processSystemMetaDataResponse, // RT = 301
            processAlertHistoryResponse: processAlertHistoryResponse,
            processFairValueHistoricalPriceResponse: processFairValueHistoricalPriceResponse,
            processFairValueReportResponse: processFairValueReportResponse,
            processCorporateActionResponse: processCorporateActionResponse,
            processVolumeWatcherResponse: processVolumeWatcherResponse,
            processTOPVChartResponse: processTOPVChartResponse,
            processOptionChainResponse: processOptionChainResponse,
            processOptionListResponse: processOptionListResponse,
            processExchangeSymbolResponse: processExchangeSymbolResponse, // RT = 303
            processLoginIndexPanelResponse: processLoginIndexPanelResponse,
            processFinancialResponse: processFinancialResponse,
            processClosingPriceResponse: processClosingPriceResponse,
            processBookShelfResponse: processBookShelfResponse,
            processUserRegistrationResponse: processUserRegistrationResponse,
            processInvestmentIdResponse: processInvestmentIdResponse,
            processInvestorPortfolioResponse: processInvestorPortfolioResponse,
            processCDVAndYTDPUrlResponse: processCDVAndYTDPUrlResponse,
            processBetaResponse: processBetaResponse,
            processFundamentalScoreResponse: processFundamentalScoreResponse,
            processTechnicalScoreResponse: processTechnicalScoreResponse,
            onError: onError
        };
    }();
});
define('universal-app/models/price/protocols/web-socket/price-socket-request-handler', ['exports', 'ember', './../../price-subscription-manager', '../../../../models/shared/shared-service', '../../../../utils/utils', '../../../../config/app-config'], function (exports, _ember, _priceSubscriptionManager, _sharedService, _utils, _appConfig) {
    'use strict';

    exports.default = function () {
        // Authentication related requests
        var generateRetailAuthRequest = function generateRetailAuthRequest(authParams) {
            var reqElements = _generateAuthRequest();

            reqElements[reqElements.length] = '"UNM":"';
            reqElements[reqElements.length] = authParams.username;
            reqElements[reqElements.length] = '","PWD":"';
            reqElements[reqElements.length] = authParams.password;
            reqElements[reqElements.length] = '"}\n';

            var req = reqElements.join('');
            req = req.length + req;

            _utils.default.logger.logInfo('Retail Auth Request : ' + req);

            return req;
        };

        var generateSsoAuthRequest = function generateSsoAuthRequest(authParams) {
            var reqElements = _generateAuthRequest();

            reqElements[reqElements.length] = '"SSOTOK":"';
            reqElements[reqElements.length] = authParams.ssoToken;
            reqElements[reqElements.length] = '","SSOTYPE":"';
            reqElements[reqElements.length] = authParams.ssoType;
            reqElements[reqElements.length] = '"}\n';

            var req = reqElements.join('');
            req = req.length + req;

            _ember.default.appGlobal.logger.priceAuthRequest = req;
            _utils.default.logger.logInfo('SSO Auth Request : ' + req);

            return req;
        };

        var generateReconnectionAuthRequest = function generateReconnectionAuthRequest() {
            var req;
            var priceService = _sharedService.default.getService('price');

            if (_utils.default.validators.isAvailable(priceService.userDS.username)) {
                var reqElements = ['{"AUTHVER":"10","UNM":"', priceService.userDS.username, '","SID":"', priceService.userDS.sessionId, '","PDM":"', _appConfig.default.customisation.productType, '","LAN":"', _sharedService.default.userSettings.currentLanguage, '","METAVER":"', priceService.userDS.metaVersion, '"}\n'];

                req = reqElements.join('');
                req = req.length + req;
            }

            return req;
        };

        // 40 type requests
        var generateAddExchangeRequest = function generateAddExchangeRequest(exchange, messagetype, language, subMarket) {
            var subStatus = _priceSubscriptionManager.default.addSubscription(messagetype, exchange, language, subMarket);

            if (subStatus.retVal === 1) {
                var reqElements = ['{"40":"', messagetype, '","E":"', exchange];

                if (language !== undefined) {
                    reqElements.push('","L":"', language);
                }

                if (subMarket !== undefined) {
                    reqElements.push('","MKT":"', subMarket);
                }

                reqElements.push('"}\n');

                var req = reqElements.join('');
                req = req.length + req;

                subStatus.reqArray[subStatus.reqArray.length] = req;
            }

            return subStatus.reqArray;
        };

        var generateRemoveExchangeRequest = function generateRemoveExchangeRequest(exchange, messagetype, language, subMarket) {
            var subStatus = _priceSubscriptionManager.default.removeSubscription(messagetype, exchange, language, subMarket);

            if (subStatus.retVal === 0) {
                var reqElements = ['{"41":"', messagetype, '","E":"', exchange];

                if (language !== undefined) {
                    reqElements.push('","L":"', language);
                }

                if (subMarket !== undefined) {
                    reqElements.push('","MKT":"', subMarket);
                }

                reqElements.push('"}\n');
                var req = reqElements.join('');
                req = req.length + req;

                subStatus.reqArray[subStatus.reqArray.length] = req;
            }

            return subStatus.reqArray;
        };

        // 80 type requests
        var generateAddSymbolRequest = function generateAddSymbolRequest(exchange, symbol, messagetype) {
            var subStatus = _priceSubscriptionManager.default.addSubscription(messagetype, exchange, symbol);

            if (subStatus.retVal === 1) {
                var reqElements = ['{"80":"', messagetype, '","E":"', exchange, '","S":"', symbol, '"}\n'];
                var req = reqElements.join('');
                req = req.length + req;

                subStatus.reqArray[subStatus.reqArray.length] = req;
            }

            return subStatus.reqArray;
        };

        var generateRemoveSymbolRequest = function generateRemoveSymbolRequest(exchange, symbol, messagetype) {
            var subStatus = _priceSubscriptionManager.default.removeSubscription(messagetype, exchange, symbol);

            if (subStatus.retVal === 0) {
                var reqElements = ['{"81":"', messagetype, '","E":"', exchange, '","S":"', symbol, '"}\n'];
                var req = reqElements.join('');
                req = req.length + req;

                subStatus.reqArray[subStatus.reqArray.length] = req;
            }

            return subStatus.reqArray;
        };

        // 160 type requests
        var generateAddSymbolBulkRequest = function generateAddSymbolBulkRequest(exchange, symbolList, messagetype) {
            var subStatus = _priceSubscriptionManager.default.addSubscription(messagetype, exchange, symbolList);

            if (subStatus.retVal === 1) {
                var reqElements = ['{"160":"', messagetype, '","E":"', exchange, '","S":"', symbolList, '"}\n'];
                var req = reqElements.join('');
                req = req.length + req;

                subStatus.reqArray[subStatus.reqArray.length] = req;
            }

            return subStatus.reqArray;
        };

        var generateRemoveSymbolBulkRequest = function generateRemoveSymbolBulkRequest(exchange, symbolList, messagetype) {
            var subStatus = _priceSubscriptionManager.default.removeSubscription(messagetype, exchange, symbolList);

            if (subStatus.retVal === 0) {
                var reqElements = ['{"161":"', messagetype, '","E":"', exchange, '","S":"', symbolList, '"}\n'];
                var req = reqElements.join('');
                req = req.length + req;

                subStatus.reqArray[subStatus.reqArray.length] = req;
            }

            return subStatus.reqArray;
        };

        // TopStock
        var generateTopStockRequest = function generateTopStockRequest(exchange, topStockType, subMarketCode, language) {
            var lan = language ? language : _sharedService.default.userSettings.currentLanguage;

            var reqElements = ['{"40":"64","E":"', exchange, '","TT":"', topStockType, '","MKT":"', subMarketCode, '","L":"', lan, '"}\n'];
            var req = reqElements.join('');
            req = req.length + req;

            return [req];
        };

        // Change Password
        var generateChangePasswordRequest = function generateChangePasswordRequest(authParams) {
            var priceService = _sharedService.default.getService('price');

            var reqElements = ['{"CHANGEPWD":"61", "PEM":"1", "SID":"', priceService.userDS.sessionId, '","UNM":"', priceService.userDS.username, '","OLDPWD":"', authParams.oldPwd, '","NEWPWD":"', authParams.newPwd, '"}\n'];

            var req = reqElements.join('');
            req = req.length + req;

            return [req];
        };

        // Alert Placement
        var generateAlertPlaceRequest = function generateAlertPlaceRequest(exchange, symbol, instrumentType, alertFilter, token, messageType) {
            var alertToken = token ? token : Date.now();
            var expPeriod = 30;
            var frequency = 30;
            var tradeService = _sharedService.default.getService('trade');
            var userName = tradeService && tradeService.userDS.unqPrcUsr ? tradeService.userDS.unqPrcUsr : _sharedService.default.getService('price').userDS.username;

            var reqElements = ['{"225":"', messageType, '","E":"', exchange, '","S":"', symbol, '","TOK":"', alertToken, '","FLT":"', alertFilter, '","INS":"', instrumentType ? instrumentType : 0, '","FR":"', frequency, '","EXP":"', expPeriod, '","UNM":"', userName, '"}\n'];

            var req = reqElements.join('');
            req = req.length + req;

            return [req];
        };

        // Alert History
        var generateAlertHistoryRequest = function generateAlertHistoryRequest() {
            // TODO [Arosha] Remove unnecessary symbol field after fixing it in Backend
            var tradeService = _sharedService.default.getService('trade');
            var userName = tradeService && tradeService.userDS.unqPrcUsr ? tradeService.userDS.unqPrcUsr : _sharedService.default.getService('price').userDS.username;

            var reqElements = ['{"225":"3", "UNM":"', userName, '","E":"', _sharedService.default.userSettings.price.currentExchange, '","S":"', '1010', '"}\n'];

            var req = reqElements.join('');
            req = req.length + req;

            return [req];
        };

        // Alert History
        var generateAlertUnsubscribeRequest = function generateAlertUnsubscribeRequest(exchange, symbol, instrumentType, token) {
            var tradeService = _sharedService.default.getService('trade');
            var userName = tradeService && tradeService.userDS.unqPrcUsr ? tradeService.userDS.unqPrcUsr : _sharedService.default.getService('price').userDS.username;

            var reqElements = ['{"225":"2", "UNM":"', userName, '","E":"', exchange, '","S":"', symbol, '","TOK":"', token, '","INS":"', instrumentType ? instrumentType : 0, '"}\n'];

            var req = reqElements.join('');
            req = req.length + req;

            return [req];
        };

        var generatePulseMessage = function generatePulseMessage(missedHeartbeats) {
            var req = ['{"0":', missedHeartbeats, '}\n'].join('');
            req = req.length + req;

            return [req];
        };

        var _generateAuthRequest = function _generateAuthRequest() {
            var configMetaVersion = _appConfig.default.customisation.metaVersion;
            var metaVersion = _utils.default.validators.isAvailable(configMetaVersion) ? configMetaVersion : _sharedService.default.getService('price').userDS.metaVersion;

            return ['{"AUTHVER":"10",', '"LOGINIP":"', '', '","CLVER":"', '1.0.0', '","PDM":"', _appConfig.default.customisation.productType, '","LAN":"', _sharedService.default.userSettings.currentLanguage, '","METAVER":"', metaVersion, '",'];
        };

        return {
            generateRetailAuthRequest: generateRetailAuthRequest,
            generateSsoAuthRequest: generateSsoAuthRequest,
            generateReconnectionAuthRequest: generateReconnectionAuthRequest,
            generateAddExchangeRequest: generateAddExchangeRequest,
            generateRemoveExchangeRequest: generateRemoveExchangeRequest,
            generateAddSymbolRequest: generateAddSymbolRequest,
            generateRemoveSymbolRequest: generateRemoveSymbolRequest,
            generateAddSymbolBulkRequest: generateAddSymbolBulkRequest,
            generateRemoveSymbolBulkRequest: generateRemoveSymbolBulkRequest,
            generateTopStockRequest: generateTopStockRequest,
            generateAlertPlaceRequest: generateAlertPlaceRequest,
            generateAlertHistoryRequest: generateAlertHistoryRequest,
            generateAlertUnsubscribeRequest: generateAlertUnsubscribeRequest,
            generateChangePasswordRequest: generateChangePasswordRequest,
            generatePulseMessage: generatePulseMessage
        };
    }();
});
define('universal-app/models/price/protocols/web-socket/price-socket-response-handler', ['exports', 'ember', '../../../shared/protocols/web-socket/socket-response-handler', '../../price-constants', '../../../shared/shared-service', '../../../chart/chart-constants', '../../../../utils/utils', '../../../../config/app-config', '../../../../models/shared/language/language-data-store'], function (exports, _ember, _socketResponseHandler, _priceConstants, _sharedService, _chartConstants, _utils, _appConfig, _languageDataStore) {
    'use strict';

    exports.default = _socketResponseHandler.default.extend({
        init: function init() {
            var that = this;

            this._super();
            this.inputQueue = new Queue();

            this.processTimer = setTimeout(function () {
                that.processResponse();
            }, _priceConstants.default.TimeIntervals.WebSocketInQueueProcessingInterval);
        },

        /* *
         * Processes message frames from the server
         */
        _processMessage: function _processMessage(message, onSocketReady) {
            // Fetch the response message type
            var type = message[_priceConstants.default.ResponseType.MessageType];

            switch (type) {
                case _priceConstants.default.ResponseType.Data.ResponseEquity:
                    this._processStockResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseIndex:
                    this._processIndexResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseExchange:
                    this._processExchangeResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseMarketDepthByPrice:
                    this._processMarketDepth(message, _priceConstants.default.MarketDepthType.DepthByPrice);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseMarketDepthByOrder:
                    this._processMarketDepth(message, _priceConstants.default.MarketDepthType.DepthByOrder);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseOHLC:
                    this._processOHLCResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseTOVPOHLC:
                    this._processTOPVOHLCResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseAnnouncement:
                case _priceConstants.default.ResponseType.Data.ResponseNews:
                    this._processNewsAnnouncementResponse(message, type);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseTopStocks:
                    this._processTopStockResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Authentication:
                    this._processAuthResponse(message, this.callbacks.auth, onSocketReady);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseTimeAndSales:
                    this._processTimeAndSalesResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseTimeAndSalesDetail:
                    this._processTimeAndSalesResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseFullMarketEnd:
                    this._processFullMarketEndResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseAlertHistory:
                case _priceConstants.default.ResponseType.Data.ResponseAlert:
                    this._processAlertResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseAlertTrigger:
                    this._processAlertTriggerResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseSubMarket:
                    this._processSubMarketResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseXStream:
                    this._processXStreamResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseFSBulk:
                    this._processFSBulkResponse(message);
                    break;

                case _priceConstants.default.ResponseType.Data.ResponseChangePassword:
                    this._processChangePassword(message);
                    break;

                case _priceConstants.default.ResponseType.Pulse:
                    break;

                default:
                    _utils.default.logger.logWarning('Unsupported message type : ' + type);
                    break;
            }
        },

        _processXStreamResponse: function _processXStreamResponse(message) {
            var stockObj = _sharedService.default.getService('price').stockDS.getStock(message.exg, message.sym, message.inst);

            if (stockObj !== null) {
                stockObj.setData(message);
            }
        },

        _processFSBulkResponse: function _processFSBulkResponse(message) {
            var stockObj = _sharedService.default.getService('price').stockDS.getStock(message.exg, message.sym, message.inst);

            if (stockObj !== null) {
                stockObj.setData(message);
            }
        },

        _processStockResponse: function _processStockResponse(message) {
            var stockObj = _sharedService.default.getService('price').stockDS.getStock(message.exg, message.sym, message.inst, undefined, message.symStat);

            if (stockObj !== null) {
                stockObj.setData(message);
            }
        },

        _processIndexResponse: function _processIndexResponse(message) {
            var indexObj = _sharedService.default.getService('price').stockDS.getStock(message.exg, message.sym, _utils.default.AssetTypes.Indices);

            if (indexObj !== null) {
                indexObj.setData(message);
            }
        },

        _processExchangeResponse: function _processExchangeResponse(message) {
            var exchangeObj = _sharedService.default.getService('price').exchangeDS.getExchange(message.exg);

            if (exchangeObj !== null) {
                exchangeObj.setData(message);
            }
        },

        _processSubMarketResponse: function _processSubMarketResponse(message) {
            var subMarketObj = _sharedService.default.getService('price').subMarketDS.getSubMarket(message.exg, message.sym);

            if (subMarketObj !== null) {
                subMarketObj.setData(message);
            }
        },

        _processMarketDepth: function _processMarketDepth(message, type) {
            var depthByPriceObj = _sharedService.default.getService('price').marketDepthDS.getDepthItem(message.exg, message.sym, type);

            if (depthByPriceObj !== null) {
                depthByPriceObj.setData(message.D, type);
            }
        },

        _processOHLCResponse: function _processOHLCResponse(message) {
            var ohlcSeries = _sharedService.default.getService('price').ohlcDS.getOHLCSeries(message.exg, message.sym, _chartConstants.default.ChartCategory.Intraday);

            // Load exchange object for obtaining the timezone
            var exgObj = _sharedService.default.getService('price').exchangeDS.getExchange(message.exg);

            var pt = _utils.default.formatters.convertToUTCTimestamp(parseInt(message.dt, 10) * _priceConstants.default.UnixTimestampByMinutes * _priceConstants.default.UnixTimestampByMilliSeconds);
            var date = _utils.default.formatters.convertToUTCDate(pt, exgObj.tzo);

            ohlcSeries.setData({
                dt: date,
                open: message.open,
                high: message.high,
                low: message.low,
                close: message.cls,
                volume: message.vol,
                turnover: message.tOvr
            }, true);
        },

        _processTOPVOHLCResponse: function _processTOPVOHLCResponse(message) {
            var ohlcSeries = _sharedService.default.getService('price').theoreticalChartDS.getOHLCSeries(message.exg, message.sym, _chartConstants.default.ChartCategory.Intraday);

            // Load exchange object for obtaining the timezone
            var exgObj = _sharedService.default.getService('price').exchangeDS.getExchange(message.exg);

            var pt = _utils.default.formatters.convertToUTCTimestamp(parseInt(message.dt, 10) * _priceConstants.default.UnixTimestampByMinutes * _priceConstants.default.UnixTimestampByMilliSeconds);
            var date = _utils.default.formatters.convertToUTCDate(pt, exgObj.tzo);

            ohlcSeries.setData({
                dt: date,
                open: message.open,
                high: message.high,
                low: message.low,
                close: message.cls,
                volume: message.vol,
                turnover: message.tOvr
            }, true);
        },

        _processTimeAndSalesResponse: function _processTimeAndSalesResponse(message) {
            var timeAndSalesInstance = _sharedService.default.getService('price').timeAndSalesDS;
            var exchange = message.exg;
            var symbol = message.sym;
            var seq = message.seq;
            var tradeObj = timeAndSalesInstance.getNewTrade(exchange, symbol, seq);
            var prevTradeObj = timeAndSalesInstance.getLastTrade(exchange, symbol);

            if (tradeObj) {
                if (prevTradeObj) {
                    message.trp = message.trp || prevTradeObj.trp;
                    message.trq = message.trq || prevTradeObj.trq;
                    message.splits = message.splits || prevTradeObj.splits;
                    message.trdType = message.trdType || prevTradeObj.trdType;
                    message.tts = message.tts || prevTradeObj.tts;
                    message.nChg = message.nChg || prevTradeObj.nChg;
                    message.pctChg = message.pctChg || prevTradeObj.pctChg;
                    message.buyCode = message.buyCode || prevTradeObj.buyCode;
                    message.selCode = message.selCode || prevTradeObj.selCode;
                }

                tradeObj.setData(message);

                if (prevTradeObj) {
                    tradeObj.setTradeTick(prevTradeObj.trp);
                }

                timeAndSalesInstance.setLastTrade(exchange, symbol, tradeObj);
            }
        },

        _processNewsAnnouncementResponse: function _processNewsAnnouncementResponse(message, type) {
            var annObj = _sharedService.default.getService('price').announcementDS.createAnnouncement(message.id, type, message.sym, message.exg);

            if (annObj !== null) {
                annObj.setData(message);
                annObj.set('type', type);
                _sharedService.default.getService('price').announcementDS.addToOtherCollections(annObj, type);
            }

            if (type === _priceConstants.default.ResponseType.Data.ResponseAnnouncement) {
                _sharedService.default.getService('price').stockDS.setAnnouncement(annObj);
            }
        },

        _processTopStockResponse: function _processTopStockResponse(message) {
            _sharedService.default.getService('price').topStockDS.createTopStocks(message.exg, message.tt, message.D, message.mkt);
        },

        _processAuthResponse: function _processAuthResponse(message, authCallbacks, onSocketReady) {
            var priceAuthResponse = _utils.default.jsonHelper.convertToJson(message);

            _ember.default.appGlobal.logger.priceAuthResponse = priceAuthResponse;
            _utils.default.logger.logTrace('Price auth response : ' + priceAuthResponse);

            var authSuccess = false;
            var priceService = _sharedService.default.getService('price');
            var isLoggedIn = priceService.isAuthenticated();

            _ember.default.appGlobal.logger.preAuthPriceUser = _utils.default.jsonHelper.convertToJson(priceService.get('userDS'));

            if (message.AUTHSTAT) {
                _utils.default.logger.logTrace('Price user authenticated successfully.');
                _utils.default.logger.logInfo('User authenticated successfully.');

                authSuccess = true;

                var savedPriceUserData = priceService.userDS;
                _ember.default.appGlobal.priceUser.delayedExchanges = savedPriceUserData ? savedPriceUserData.delayedExchg : [];

                var messageObj = this._setUserExchanges(message);
                messageObj = this._setWindowTypes(messageObj);

                priceService.userDS.setData(messageObj, true);
                priceService.userDS.save();

                _ember.default.appGlobal.logger.postAuthPriceUser = _utils.default.jsonHelper.convertToJson(priceService.get('userDS'));
            } else {
                _utils.default.logger.logInfo('User authentication failed.' + message.AUTHMSG);
                _utils.default.logger.logTrace('Pirce user authentication failed.' + message.AUTHMSG);
            }

            if (_ember.default.$.isFunction(onSocketReady)) {
                onSocketReady(authSuccess);
            }

            if (authSuccess) {
                if (_ember.default.$.isFunction(authCallbacks.successFn)) {
                    authCallbacks.successFn();
                }

                if (_ember.default.$.isFunction(authCallbacks.postSuccessFn)) {
                    authCallbacks.postSuccessFn();
                }
            } else {
                var authMsg = message.AUTHMSG;

                if (isLoggedIn) {
                    // Logout from the application with error message set in login page
                    _utils.default.webStorage.addString(_utils.default.webStorage.getKey(_utils.default.Constants.CacheKeys.LoginErrorMsg), authMsg, _utils.default.Constants.StorageType.Session);
                    _utils.default.applicationSessionHandler.logout(authMsg);
                } else if (_ember.default.$.isFunction(authCallbacks.errorFn)) {
                    // Simply set error message in login page
                    authCallbacks.errorFn(authMsg);
                }
            }
        },

        _setUserExchanges: function _setUserExchanges(message) {
            // Sample: TDWL,0,1|ADSM,0,1|DFM,1,1|NSDQ,0,0
            var authType = _priceConstants.default.ResponseType.Authentication;
            var configExchanges = _appConfig.default.responseConfig && _appConfig.default.responseConfig[authType] ? _appConfig.default.responseConfig[authType].UE : '';
            var userExchange = _utils.default.validators.isAvailable(configExchanges) ? configExchanges : message.UE;

            var userExchanges = [];
            var userDelayedExchanges = [];
            var nonDefaultExchanges = [];

            if (userExchange) {
                var tempArray;
                var userExgArray = userExchange.split(_utils.default.Constants.StringConst.Pipe);

                _ember.default.$.each(userExgArray, function (index, val) {
                    // TDWL,0,1
                    tempArray = val.split(_utils.default.Constants.StringConst.Comma);

                    // Checking non-existence indices in an array is safe as they return undefined
                    var exchange = tempArray[0];
                    var delayedFlag = tempArray[1];
                    var defaultFlag = tempArray[2];

                    if (_utils.default.validators.isAvailable(exchange)) {
                        // Exchange is delayed only if marked as an delayed exchange
                        // If flag is not set, consider exchange as real time
                        if (delayedFlag === _utils.default.Constants.Yes) {
                            userDelayedExchanges[userDelayedExchanges.length] = exchange;
                        }

                        // Exchange is non-default only if marked as non-default exchange
                        // If flag is not set, consider as a default exchange
                        if (defaultFlag === _utils.default.Constants.No) {
                            nonDefaultExchanges[nonDefaultExchanges.length] = exchange;
                        } else {
                            // Only default exchanges are available in user exchange array
                            // Non default exchanges are kept in a separate property
                            userExchanges[userExchanges.length] = exchange;
                        }
                    }
                });
            }

            message.UE = userExchanges;
            message.DE = userDelayedExchanges;
            message.NDE = nonDefaultExchanges;

            return message;
        },

        _setWindowTypes: function _setWindowTypes(message) {
            var windowTypes = message.WT;
            var userTypesMap = {};

            if (windowTypes) {
                var typesByExg = windowTypes.split('|');

                if (typesByExg.length > 0) {
                    _ember.default.$.each(typesByExg, function (index, typeString) {
                        if (typeString) {
                            var typeArray = typeString.split(',');

                            if (typeArray.length > 1) {
                                var exg = typeArray.splice(0, 1);
                                userTypesMap[exg[0]] = typeArray;
                            }
                        }
                    });

                    message.WT = this._processCustomWindowTypes(userTypesMap);
                }
            }

            return message;
        },

        _processCustomWindowTypes: function _processCustomWindowTypes(userTypesMap) {
            _ember.default.$.each(userTypesMap, function (exchange, windowTypes) {
                var customTypesByExg = _sharedService.default.getService('price').settings.configs.customWindowTypes[exchange];

                if (customTypesByExg) {
                    windowTypes.removeItems(customTypesByExg.exclude);
                    userTypesMap[exchange] = windowTypes.union(customTypesByExg.include);
                }
            });

            return userTypesMap;
        },

        _processFullMarketEndResponse: function _processFullMarketEndResponse(message) {
            _sharedService.default.getService('price').onFullMarketSnapshotReceived(message.exg);
        },

        _processChangePassword: function _processChangePassword(message) {
            var callbackFn = _sharedService.default.getService('price').changePasswordCallback;
            var rejectedReason = message.chgPwdMsg ? message.chgPwdMsg : 'passwordChangeFail';
            var currentLangObj = _languageDataStore.default.getLanguageObj().lang;

            if (currentLangObj) {
                rejectedReason = currentLangObj.messages[rejectedReason];
            }

            if (callbackFn && _ember.default.$.isFunction(callbackFn)) {
                callbackFn(message.AUTHSTAT, rejectedReason);
            }
        },

        _processAlertResponse: function _processAlertResponse(message) {
            if (message.rcpttype !== 'unsubscribe') {
                var alertObj = _sharedService.default.getService('price').alertDS.getAlert(message.TOK, message.exg);

                if (alertObj !== null) {
                    alertObj.setData({
                        status: message.stat,
                        exp: message.EXP,
                        fr: message.FR,
                        cr: message.cr,
                        flt: message.FLT,
                        sym: message.sym
                    });
                }
            } else {
                this._processAlertUnSubscribeResponse(message);
            }

            _sharedService.default.getService('price').alertDS.alertUpdateRecieved();
        },

        _processAlertTriggerResponse: function _processAlertTriggerResponse(message) {
            var alertObj = _sharedService.default.getService('price').alertDS.getAlert(message.TOK, message.exg, message.sym);

            if (alertObj !== null) {
                alertObj.setData({
                    status: message.stat,
                    fr: message.FR,
                    cr: message.cr,
                    ltr: message.ltr,
                    trv: message.trv,
                    flt: message.FLT
                });
            }

            _sharedService.default.getService('price').notifyAlertTrigger(alertObj);
            _sharedService.default.getService('price').alertDS.alertUpdateRecieved();
        },

        _processAlertUnSubscribeResponse: function _processAlertUnSubscribeResponse(message) {
            _sharedService.default.getService('price').alertDS.removeAlertFromCollections(message.TOK);
        }
    });
});
define("universal-app/templates/components/about-us-popup", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col ltr highlight-fore-color");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "class", "about-us-text");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element2 = dom.childAt(fragment, [1, 0]);
              var morph0 = dom.createMorphAt(element2, 0, 0);
              var attrMorph0 = dom.createAttrMorph(element2, 'href');
              attribute(env, attrMorph0, element2, "href", concat(env, ["tel: ", get(env, context, "field.value")]));
              content(env, morph0, context, "field.value");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col highlight-fore-color");
                var el2 = dom.createElement("a");
                dom.setAttribute(el2, "class", "about-us-text");
                dom.setAttribute(el2, "target", "_blank");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    concat = hooks.concat,
                    attribute = hooks.attribute,
                    content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element1 = dom.childAt(fragment, [1, 0]);
                var morph0 = dom.createMorphAt(element1, 0, 0);
                var attrMorph0 = dom.createAttrMorph(element1, 'href');
                attribute(env, attrMorph0, element1, "href", concat(env, ["mailto:", get(env, context, "field.value")]));
                content(env, morph0, context, "field.value");
                return fragment;
              }
            };
          }();
          var child1 = function () {
            var child0 = function () {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col highlight-fore-color");
                  var el2 = dom.createElement("a");
                  dom.setAttribute(el2, "class", "about-us-text");
                  dom.setAttribute(el2, "target", "_blank");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                        ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks,
                      get = hooks.get,
                      concat = hooks.concat,
                      attribute = hooks.attribute,
                      content = hooks.content;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var element0 = dom.childAt(fragment, [1, 0]);
                  var morph0 = dom.createMorphAt(element0, 0, 0);
                  var attrMorph0 = dom.createAttrMorph(element0, 'href');
                  attribute(env, attrMorph0, element0, "href", concat(env, ["http://", get(env, context, "field.value")]));
                  content(env, morph0, context, "field.value");
                  return fragment;
                }
              };
            }();
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, null);
                dom.insertBoundary(fragment, 0);
                block(env, morph0, context, "if", [get(env, context, "field.isUrl")], {}, child0, null);
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "field.isEmail")], {}, child0, child1);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container font-s pad-xs-b");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col fore-color");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element3 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            var morph1 = dom.createMorphAt(element3, 3, 3);
            content(env, morph0, context, "field.lanKey");
            block(env, morph1, context, "if", [get(env, context, "field.isTel")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "message-box-fog");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "about-us-box-frame");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-container full-width wdgttl");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col h-left wdgttl-header");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "pad-s-l");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col h-right pad-s-r wdgttl-header");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          dom.setAttribute(el5, "name", "btnClosePopup");
          dom.setAttribute(el5, "class", "pad-s-all");
          dom.setAttribute(el5, "data-toggle", "tab");
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("i");
          dom.setAttribute(el6, "class", "widget-title-fore-color icon-close-round");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-container full-width pad-l-tb");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col pad-l-b h-middle pad-widget-left pad-widget-right");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "about-us-logo theme-logo-properties");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-row h-middle fore-color font-l pad-widget-left pad-widget-right");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "pad-s-r");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "y-scroll about-us-container-height");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-container pad-m-tb h-left pad-l-l pad-widget-right");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-container fade-fore-color h-left font-m pad-s-b");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-container pad-s-t pad-l-b pad-l-l pad-widget-right h-left");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-container pad-l-t pad-s-b font-s h-left pad-l-l pad-widget-right");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-container pad-l-tb font-s h-left pad-l-l pad-widget-right");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              element = hooks.element,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              inline = hooks.inline,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1, 1]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element5, [3, 1]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element4, [3, 3]);
          var element9 = dom.childAt(element4, [5]);
          var element10 = dom.childAt(element9, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element5, [1, 1]), 0, 0);
          var attrMorph0 = dom.createAttrMorph(element7, 'title');
          var morph1 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
          var morph2 = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
          var morph3 = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
          var morph4 = dom.createMorphAt(element10, 3, 3);
          var morph5 = dom.createMorphAt(dom.childAt(element9, [3]), 1, 1);
          var morph6 = dom.createMorphAt(dom.childAt(element4, [7, 1]), 0, 0);
          var morph7 = dom.createMorphAt(dom.childAt(element4, [9]), 1, 1);
          content(env, morph0, context, "app.lang.labels.aboutUs");
          element(env, element6, context, "action", ["onCancel"], {});
          attribute(env, attrMorph0, element7, "title", concat(env, [get(env, context, "app.lang.labels.close")]));
          content(env, morph1, context, "app.lang.labels.version");
          content(env, morph2, context, "longVersion");
          content(env, morph3, context, "app.lang.labels.contactInformation");
          inline(env, morph4, context, "partial", ["price/widgets/about-us-contact-info"], {});
          block(env, morph5, context, "each", [get(env, context, "supportedContacts")], { "keyword": "field" }, child0, null);
          content(env, morph6, context, "replaceCopyrightText");
          content(env, morph7, context, "app.lang.messages.copyrightLaw");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isPopupEnabled")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/add-to-watchlist-item", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-caret-right");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "right-click-menu-item");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "v-middle font-l right-click-menu-rtl");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-checkmark-round");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "pad-l-l font-m");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "right font-s pad-s-t");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 2]), 0, 0);
          element(env, element0, context, "action", ["addStocksFromMenu", get(env, context, "item.id")], {});
          content(env, morph0, context, "item.name");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "right-click-menu-item dropdown-submenu");
        dom.setAttribute(el1, "id", "rightClickExpanded1");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline v-middle font-x-l right-click-menu-rtl");
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "icon-plus-large");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline pad-l-l font-m");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline right font-s");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "dropdown dropdown-menu");
        dom.setAttribute(el2, "role", "menu");
        dom.setAttribute(el2, "id", "popup");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("Add separating line");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            get = hooks.get,
            block = hooks.block,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        var morph2 = dom.createMorphAt(element3, 1, 1);
        var morph3 = dom.createMorphAt(element3, 5, 5);
        content(env, morph0, context, "app.lang.labels.addToWL");
        block(env, morph1, context, "if", [get(env, context, "isArabic")], {}, child0, child1);
        block(env, morph2, context, "each", [get(env, context, "customWatchListArray")], { "keyword": "item" }, child2, null);
        inline(env, morph3, context, "custom-watchlist-dialog", [], { "app": get(env, context, "app"), "actionType": "addNewWithStock", "symbol": get(env, context, "selectedSymbol"), "watchListName": get(env, context, "associatedController.newCustomWLName"), "customWLCallBack": "addNewWLWithStockCBAction" });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/connection-status", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-inline pad-s-lr");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "font-s icon-circle");
          dom.setAttribute(el3, "aria-hidden", "true");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          element(env, element0, context, "bind-attr", [], { "class": ":layout-inline :font-m :hint--rounded :hint--bottom :hint--bounce tradeHintStyle tradeConnectionStatusStyle", "data-hint": get(env, context, "tradeConnectionStatusTitle") });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-inline");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline pad-s-r");
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "font-s icon-circle");
        dom.setAttribute(el4, "aria-hidden", "true");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(element1, 1, 1);
        block(env, morph0, context, "if", [get(env, context, "isTradingEnabled")], {}, child0, null);
        element(env, element2, context, "bind-attr", [], { "class": ":layout-inline :font-m :pad-s-l :hint--rounded :hint--bottom :hint--bounce priceHintStyle priceConnectionStatusStyle", "data-hint": get(env, context, "priceConnectionStatusTitle") });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/custom-watchlist-dialog", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "font-m down-fore-color");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.messages.watchListNameExist");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "font-m down-fore-color");
            var el2 = dom.createTextNode("Watch List Name Cannot Be Empty");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container pad-m-all fade-fore-color add-new-watchlist-dialog");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "full-width colour-normal pad-m-t mgn-m-b");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "full-width");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "full-width pad-m-b");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "full-width layout-container");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col h-left");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "type", "button");
          dom.setAttribute(el4, "class", "btn btn-default btn-animation pad-l-lr btn-small bold font-l full-width");
          dom.setAttribute(el4, "data-toggle", "dropdown");
          dom.setAttribute(el4, "aria-expanded", "false");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col pad-l-l h-right");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "type", "button");
          dom.setAttribute(el4, "class", "btn bold confirm-btn btn-animation btn-txt-color font-l full-width");
          dom.setAttribute(el4, "data-toggle", "dropdown");
          dom.setAttribute(el4, "aria-expanded", "false");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              inline = hooks.inline,
              block = hooks.block,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [5]);
          var element4 = dom.childAt(element2, [7]);
          var element5 = dom.childAt(element4, [1, 1]);
          var element6 = dom.childAt(element4, [3, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
          var morph2 = dom.createMorphAt(element3, 1, 1);
          var morph3 = dom.createMorphAt(element3, 3, 3);
          var morph4 = dom.createMorphAt(element5, 0, 0);
          var morph5 = dom.createMorphAt(element6, 0, 0);
          content(env, morph0, context, "displayTitle");
          inline(env, morph1, context, "input", [], { "value": get(env, context, "watchListName"), "type": "text", "class": "search-query form-control colour-normal mgn-m-t mgn-m-b", "autofocus": "autofocus" });
          block(env, morph2, context, "if", [get(env, context, "isCustomWLExist")], {}, child0, null);
          block(env, morph3, context, "if", [get(env, context, "isEmptyName")], {}, child1, null);
          element(env, element5, context, "action", ["closePopup"], {});
          content(env, morph4, context, "app.lang.labels.cancel");
          element(env, element6, context, "action", ["saveWL", get(env, context, "watchListName")], {});
          content(env, morph5, context, "app.lang.labels.save");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "font-m down-fore-color");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.messages.watchListNameExist");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "pad-m-all");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "border-top");
          dom.setAttribute(el2, "style", "width: 200px; min-height:84px");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "fade-fore-color font-m pad-m-t mgn-m-b ellipsis");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "right");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "type", "button");
          dom.setAttribute(el4, "class", "btn btn-default");
          dom.setAttribute(el4, "data-toggle", "dropdown");
          dom.setAttribute(el4, "aria-expanded", "false");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "left");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              inline = hooks.inline,
              element = hooks.element,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [5, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element0, 3, 3);
          var morph2 = dom.createMorphAt(element1, 0, 0);
          var morph3 = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
          content(env, morph0, context, "displayTitle");
          inline(env, morph1, context, "input", [], { "value": get(env, context, "watchListName"), "type": "text", "class": "search-query form-control colour-normal mgn-m-t mgn-m-b", "autofocus": "autofocus" });
          element(env, element1, context, "bind-attr", [], { "disabled": get(env, context, "isSaveDisabled") });
          element(env, element1, context, "action", ["saveWL", get(env, context, "watchListName")], {});
          content(env, morph2, context, "app.lang.labels.save");
          block(env, morph3, context, "if", [get(env, context, "isCustomWLExist")], {}, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isMobile")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/global-search", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h2");
              dom.setAttribute(el1, "class", "search-title bold font-l pad-s-b");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "app.lang.labels.noResultFound");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          var child0 = function () {
            var child0 = function () {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col");
                  var el2 = dom.createElement("span");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks,
                      get = hooks.get,
                      subexpr = hooks.subexpr,
                      concat = hooks.concat,
                      attribute = hooks.attribute,
                      content = hooks.content;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var element12 = dom.childAt(fragment, [1, 0]);
                  var morph0 = dom.createMorphAt(element12, 0, 0);
                  var attrMorph0 = dom.createAttrMorph(element12, 'class');
                  attribute(env, attrMorph0, element12, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "showSubMarket"), "search-desc-1-responsive", "search-desc-1"], {}), " ellipsis left font-m fore-color"]));
                  content(env, morph0, context, "content.sDes");
                  return fragment;
                }
              };
            }();
            var child1 = function () {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col");
                  var el2 = dom.createTextNode("\n                                                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "search-sub-mkt ellipsis left font-m fore-color");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                                ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks,
                      get = hooks.get,
                      inline = hooks.inline;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
                  inline(env, morph0, context, "getSubMarketName", [get(env, context, "content.exg"), get(env, context, "content.subMkt"), false], {});
                  return fragment;
                }
              };
            }();
            var child2 = function () {
              var child0 = function () {
                var child0 = function () {
                  return {
                    isHTMLBars: true,
                    revision: "Ember@1.11.1",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    build: function build(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                                                    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("div");
                      dom.setAttribute(el1, "class", "layout-col font-xx-l fade-fore-color v-top right");
                      var el2 = dom.createTextNode("\n                                                    ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createElement("span");
                      dom.setAttribute(el2, "class", "sidebar-nav-icon-color");
                      var el3 = dom.createTextNode("\n                                                        ");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createElement("i");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createTextNode("\n                                                    ");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                                                    ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    render: function render(context, env, contextualElement) {
                      var dom = env.dom;
                      var hooks = env.hooks,
                          get = hooks.get,
                          element = hooks.element;
                      dom.detectNamespace(contextualElement);
                      var fragment;
                      if (env.useFragmentCache && dom.canClone) {
                        if (this.cachedFragment === null) {
                          fragment = this.build(dom);
                          if (this.hasRendered) {
                            this.cachedFragment = fragment;
                          } else {
                            this.hasRendered = true;
                          }
                        }
                        if (this.cachedFragment) {
                          fragment = dom.cloneNode(this.cachedFragment, true);
                        }
                      } else {
                        fragment = this.build(dom);
                      }
                      var element10 = dom.childAt(fragment, [1]);
                      var element11 = dom.childAt(element10, [1, 1]);
                      element(env, element10, context, "action", ["addStocksToCustomWL", get(env, context, "content")], {});
                      element(env, element11, context, "bind-attr", [], { "class": ":glyphicon-star-empty :glyphicon :pad-m-lr :font-xxx-l content.isAddedToCustomWatchList:symbol-fore-color" });
                      return fragment;
                    }
                  };
                }();
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks,
                        get = hooks.get,
                        subexpr = hooks.subexpr,
                        block = hooks.block;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, null);
                    dom.insertBoundary(fragment, 0);
                    block(env, morph0, context, "if", [subexpr(env, context, "isAvailableWidgets", [get(env, context, "content.inst")], {})], {}, child0, null);
                    return fragment;
                  }
                };
              }();
              var child1 = function () {
                var child0 = function () {
                  return {
                    isHTMLBars: true,
                    revision: "Ember@1.11.1",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    build: function build(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                                                ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1, "class", "pad-s-l");
                      var el2 = dom.createElement("a");
                      dom.setAttribute(el2, "class", "cursor-pointer hint--rounded hint--bottom hint--bounce");
                      var el3 = dom.createElement("i");
                      dom.setAttribute(el3, "class", "icon-clock");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                                                ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1, "class", "pad-l-l");
                      var el2 = dom.createElement("a");
                      dom.setAttribute(el2, "class", "cursor-pointer hint--rounded hint--bottom hint--bounce");
                      var el3 = dom.createElement("i");
                      dom.setAttribute(el3, "class", "icon-add-fav");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                                                ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1, "class", "pad-l-l");
                      var el2 = dom.createElement("a");
                      dom.setAttribute(el2, "class", "cursor-pointer hint--rounded hint--bottom hint--bounce");
                      var el3 = dom.createElement("i");
                      dom.setAttribute(el3, "class", "icon-sitemap");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    render: function render(context, env, contextualElement) {
                      var dom = env.dom;
                      var hooks = env.hooks,
                          get = hooks.get,
                          element = hooks.element,
                          concat = hooks.concat,
                          attribute = hooks.attribute;
                      dom.detectNamespace(contextualElement);
                      var fragment;
                      if (env.useFragmentCache && dom.canClone) {
                        if (this.cachedFragment === null) {
                          fragment = this.build(dom);
                          if (this.hasRendered) {
                            this.cachedFragment = fragment;
                          } else {
                            this.hasRendered = true;
                          }
                        }
                        if (this.cachedFragment) {
                          fragment = dom.cloneNode(this.cachedFragment, true);
                        }
                      } else {
                        fragment = this.build(dom);
                      }
                      var element1 = dom.childAt(fragment, [1]);
                      var element2 = dom.childAt(element1, [0]);
                      var element3 = dom.childAt(fragment, [3]);
                      var element4 = dom.childAt(element3, [0]);
                      var element5 = dom.childAt(fragment, [5]);
                      var element6 = dom.childAt(element5, [0]);
                      var attrMorph0 = dom.createAttrMorph(element2, 'data-hint');
                      var attrMorph1 = dom.createAttrMorph(element4, 'data-hint');
                      var attrMorph2 = dom.createAttrMorph(element6, 'data-hint');
                      element(env, element1, context, "action", ["onWidgetSelected", get(env, context, "content"), 1], {});
                      attribute(env, attrMorph0, element2, "data-hint", concat(env, [get(env, context, "app.lang.labels.timeAndSales")]));
                      element(env, element3, context, "action", ["onWidgetSelected", get(env, context, "content"), 2], {});
                      attribute(env, attrMorph1, element4, "data-hint", get(env, context, "app.lang.labels.depthByPrice"));
                      element(env, element5, context, "action", ["onWidgetSelected", get(env, context, "content"), 3], {});
                      attribute(env, attrMorph2, element6, "data-hint", concat(env, [get(env, context, "app.lang.labels.depthByOrder")]));
                      return fragment;
                    }
                  };
                }();
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                       ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "layout-col font-xx-l fade-fore-color v-top right");
                    var el2 = dom.createTextNode("\n                                        ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("ul");
                    var el3 = dom.createTextNode("\n");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("                                            ");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createElement("li");
                    dom.setAttribute(el3, "class", "pad-l-l");
                    var el4 = dom.createElement("a");
                    dom.setAttribute(el4, "class", "cursor-pointer hint--rounded hint--bottom hint--bounce");
                    var el5 = dom.createElement("i");
                    dom.setAttribute(el5, "class", "icon-chart-bar");
                    dom.appendChild(el4, el5);
                    dom.appendChild(el3, el4);
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("\n                                        ");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                                       ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks,
                        get = hooks.get,
                        subexpr = hooks.subexpr,
                        block = hooks.block,
                        element = hooks.element,
                        attribute = hooks.attribute;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var element7 = dom.childAt(fragment, [1, 1]);
                    var element8 = dom.childAt(element7, [3]);
                    var element9 = dom.childAt(element8, [0]);
                    var morph0 = dom.createMorphAt(element7, 1, 1);
                    var attrMorph0 = dom.createAttrMorph(element9, 'data-hint');
                    block(env, morph0, context, "if", [subexpr(env, context, "isAvailableWidgets", [get(env, context, "content.inst")], {})], {}, child0, null);
                    element(env, element8, context, "action", ["onWidgetSelected", get(env, context, "content"), 4], {});
                    attribute(env, attrMorph0, element9, "data-hint", get(env, context, "app.lang.labels.chart"));
                    return fragment;
                  }
                };
              }();
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks,
                      get = hooks.get,
                      block = hooks.block;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, null);
                  dom.insertBoundary(fragment, 0);
                  block(env, morph0, context, "if", [get(env, context, "isMobile")], {}, child0, child1);
                  return fragment;
                }
              };
            }();
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 2,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-container search-row full-width");
                var el2 = dom.createTextNode("\n                                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                var el3 = dom.createTextNode("\n                                        ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                var el4 = dom.createTextNode("\n                                            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "layout-col");
                var el5 = dom.createElement("span");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("                                            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "layout-col");
                var el5 = dom.createTextNode("\n                                                ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                                            ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("                                        ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                        ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                var el4 = dom.createElement("p");
                dom.setAttribute(el4, "class", "search-desc-2 ellipsis font-s fade-fore-color");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("                                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement, blockArguments) {
                var dom = env.dom;
                var hooks = env.hooks,
                    set = hooks.set,
                    get = hooks.get,
                    attribute = hooks.attribute,
                    concat = hooks.concat,
                    element = hooks.element,
                    subexpr = hooks.subexpr,
                    content = hooks.content,
                    block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element13 = dom.childAt(fragment, [1]);
                var element14 = dom.childAt(element13, [1]);
                var element15 = dom.childAt(element14, [1]);
                var element16 = dom.childAt(element15, [1, 0]);
                var element17 = dom.childAt(element15, [5, 1]);
                var attrMorph0 = dom.createAttrMorph(element13, 'index');
                var attrMorph1 = dom.createAttrMorph(element14, 'class');
                var attrMorph2 = dom.createAttrMorph(element15, 'class');
                var morph0 = dom.createMorphAt(element16, 0, 0);
                var attrMorph3 = dom.createAttrMorph(element16, 'class');
                var morph1 = dom.createMorphAt(element15, 3, 3);
                var morph2 = dom.createMorphAt(element17, 0, 0);
                var attrMorph4 = dom.createAttrMorph(element17, 'class');
                var morph3 = dom.createMorphAt(element15, 7, 7);
                var morph4 = dom.createMorphAt(dom.childAt(element14, [3, 0]), 0, 0);
                var morph5 = dom.createMorphAt(element13, 3, 3);
                set(env, context, "content", blockArguments[0]);
                set(env, context, "index", blockArguments[1]);
                attribute(env, attrMorph0, element13, "index", get(env, context, "index"));
                attribute(env, attrMorph1, element14, "class", concat(env, [get(env, context, "symbolSearchContainerCss")]));
                element(env, element14, context, "action", ["onItemSelected", get(env, context, "content"), get(env, context, "defaultLink")], {});
                attribute(env, attrMorph2, element15, "class", concat(env, [get(env, context, "symbolSearchCellCss")]));
                attribute(env, attrMorph3, element16, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "showSubMarket"), "search-symbol-responsive", "search-symbol"], {}), " ellipsis pad-m-r left font-m bold symbol-fore-color"]));
                content(env, morph0, context, "content.dispProp1");
                block(env, morph1, context, "unless", [get(env, context, "isMobile")], {}, child0, null);
                attribute(env, attrMorph4, element17, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "showSubMarket"), "search-mkt-responsive", "search-mkt"], {}), " ellipsis left font-m fore-color ltr"]));
                content(env, morph2, context, "content.de");
                block(env, morph3, context, "if", [get(env, context, "showSubMarket")], {}, child1, null);
                content(env, morph4, context, "content.lDes");
                block(env, morph5, context, "if", [get(env, context, "showWidgetButtons")], {}, child2, null);
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h2");
              dom.setAttribute(el1, "class", "search-title bold font-l pad-s-b");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content,
                  get = hooks.get,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              var morph1 = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              content(env, morph0, context, "result.name");
              block(env, morph1, context, "each", [get(env, context, "result.contents")], {}, child0, null);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "result.isDataUnavailable")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "display-table-row full-width");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2, "class", "horizontal-list-left pad-s-b");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("\n                            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                        ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "font-l header-colour");
            var el5 = dom.createTextNode("Announcement");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("\n                            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                        ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "font-l header-colour");
            var el5 = dom.createTextNode("News");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1, 1]);
            var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
            var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
            inline(env, morph0, context, "input", [], { "checked": get(env, context, "isEnabledAnnSearch"), "type": "checkbox", "name": "cc" });
            inline(env, morph1, context, "input", [], { "checked": get(env, context, "isEnabledNewsSearch"), "type": "checkbox", "name": "cc" });
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "search-col-2 display-table pad-s-l");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            inline(env, morph0, context, "partial", ["price/announcement"], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "nano");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "search-wrapper nano-content");
          var el3 = dom.createTextNode("\n\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("search-wrapper start");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "search-col-1 full-width");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element18 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element18, [3]), 1, 1);
          var morph1 = dom.createMorphAt(element18, 5, 5);
          var morph2 = dom.createMorphAt(element18, 6, 6);
          block(env, morph0, context, "each", [get(env, context, "content")], { "keyword": "result" }, child0, null);
          block(env, morph1, context, "if", [get(env, context, "enableContentSettings")], {}, child1, null);
          block(env, morph2, context, "if", [get(env, context, "isEnabledContentSearch")], {}, child2, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" TODO [Dasun] Add separate hbs for mobile ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 3, 3);
        block(env, morph0, context, "if", [get(env, context, "showSearchResultContainer")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/gms-tab-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "role", "presentation");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "wdgttl-tab-link hint--top hint--bounce hint--rounded");
          dom.setAttribute(el2, "href", "#");
          dom.setAttribute(el2, "aria-controls", "");
          dom.setAttribute(el2, "role", "tab");
          dom.setAttribute(el2, "data-toggle", "tab");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          attribute(env, attrMorph0, element0, "class", concat(env, ["pad-s-tb wdgttl-tab-item ellipsis ", get(env, context, "tabItem.css")]));
          element(env, element0, context, "action", ["onGmsTabItemSelected", get(env, context, "tabItem")], {});
          content(env, morph0, context, "tabItem.displayName");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "style", "height:30px;");
        dom.setAttribute(el1, "class", "layout-container full-width separator separator-shadow pad-widget-left pad-widget-right");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "wdgttl-tab-panel title-container-width");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        block(env, morph0, context, "each", [get(env, context, "gmsTabs")], { "keyword": "tabItem" }, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/mobile/global-search", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col appttl-mobile");
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "appttl-mobile pad-l-lr pad-s-b pad-s-t");
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "simple-switch");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "font-m pad-s-tb pad-l-r appttl-mobile btn-txt-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element29 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element29, [1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(element29, [3]), 0, 0);
          inline(env, morph0, context, "input", [], { "type": "checkbox", "checked": get(env, context, "isEnableOptionSearch"), "class": "simple-switch-input" });
          content(env, morph1, context, "app.lang.labels.optionSymbolSearch");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "selectedSymbolDes");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width appttl-mobile option-menu-height");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 bold font-l pad-m-tb pad-l-l appttl-mobile btn-txt-color");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-l-lr");
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "pad-s-l h-middle");
          var el4 = dom.createTextNode("\n                                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "type", "button");
          var el5 = dom.createTextNode("\n                                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element27 = dom.childAt(fragment, [1]);
          var element28 = dom.childAt(element27, [3, 1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element27, [1]), 1, 1);
          var morph1 = dom.createMorphAt(element28, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element28, 'class');
          block(env, morph0, context, "if", [get(env, context, "selectedSymbol")], {}, child0, null);
          attribute(env, attrMorph0, element28, "class", concat(env, ["btn btn-animation bold btn-option-small btn-txt-color ", subexpr(env, context, "if", [get(env, context, "isDisableBtn"), "disabled", ""], {})]));
          element(env, element28, context, "action", ["onSelect"], {});
          content(env, morph1, context, "app.lang.labels.done");
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 2,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container search-row pad-s-tb full-width option-box-shadow");
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col-24");
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-container full-width pad-s-b mgn-m-l");
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-col h-left v-bottom pad-m-t pad-l-r mgn-m-l font-x-l bold symbol-fore-color ltr");
            var el5 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                                ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-col v-bottom pad-m-t pad-s-lr font-m fade-fore-color search-row-bottom");
            var el5 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                                ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-col-24");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ellipsis font-l fade-fore-color pad-m-b mgn-m-l");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement, blockArguments) {
            var dom = env.dom;
            var hooks = env.hooks,
                set = hooks.set,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                element = hooks.element,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element13 = dom.childAt(fragment, [1]);
            var element14 = dom.childAt(element13, [1]);
            var element15 = dom.childAt(element14, [1]);
            var attrMorph0 = dom.createAttrMorph(element13, 'data-id');
            var morph0 = dom.createMorphAt(dom.childAt(element15, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element15, [3]), 1, 1);
            var morph2 = dom.createMorphAt(dom.childAt(element14, [3]), 0, 0);
            set(env, context, "content", blockArguments[0]);
            set(env, context, "index", blockArguments[1]);
            attribute(env, attrMorph0, element13, "data-id", concat(env, ["symbol-", get(env, context, "index")]));
            element(env, element14, context, "action", ["onOptionSymbolSelect", get(env, context, "content"), get(env, context, "index")], {});
            content(env, morph0, context, "content.sym");
            content(env, morph1, context, "content.exg");
            content(env, morph2, context, "content.lDes");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container search-row full-width");
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col h-middle v-top pad-m-t pad-l-r mgn-m-l font-s fade-fore-color");
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
            content(env, morph0, context, "app.lang.messages.dataNotAvailable");
            return fragment;
          }
        };
      }();
      var child2 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              inline(env, morph0, context, "formatToMonth", [get(env, context, "content.optPrd")], {});
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              inline(env, morph0, context, "formatToDateMonth", [get(env, context, "content.optPrd")], {});
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 2,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container search-row pad-s-tb full-width option-box-shadow");
            var el2 = dom.createTextNode("\n                                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col-24");
            var el3 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-container full-width pad-s-b");
            var el4 = dom.createTextNode("\n                                                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-col-24");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-col h-right v-bottom pad-m-t pad-s-r font-m symbol-fore-color");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("                                                        ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement, blockArguments) {
            var dom = env.dom;
            var hooks = env.hooks,
                set = hooks.set,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                element = hooks.element,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element11 = dom.childAt(fragment, [1]);
            var element12 = dom.childAt(element11, [1]);
            var attrMorph0 = dom.createAttrMorph(element11, 'data-id');
            var morph0 = dom.createMorphAt(dom.childAt(element12, [1, 3]), 1, 1);
            set(env, context, "content", blockArguments[0]);
            set(env, context, "index", blockArguments[1]);
            attribute(env, attrMorph0, element11, "data-id", concat(env, ["date-", get(env, context, "index")]));
            element(env, element12, context, "action", ["onOptionDateSelect", get(env, context, "content"), get(env, context, "index")], {});
            block(env, morph0, context, "if", [get(env, context, "content.isMonthOption")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child3 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 2,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container search-row pad-s-tb full-width");
            var el2 = dom.createTextNode("\n                                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col-24");
            var el3 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-container full-width pad-s-b");
            var el4 = dom.createTextNode("\n                                                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-col h-middle v-bottom pad-m-t mgn-m-l font-m symbol-fore-color");
            var el5 = dom.createTextNode("\n                                                            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                                        ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement, blockArguments) {
            var dom = env.dom;
            var hooks = env.hooks,
                set = hooks.set,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                element = hooks.element,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element9 = dom.childAt(fragment, [1]);
            var element10 = dom.childAt(element9, [1]);
            var attrMorph0 = dom.createAttrMorph(element9, 'data-id');
            var morph0 = dom.createMorphAt(dom.childAt(element10, [1, 1, 1]), 0, 0);
            set(env, context, "content", blockArguments[0]);
            set(env, context, "index", blockArguments[1]);
            attribute(env, attrMorph0, element9, "data-id", concat(env, ["price-", get(env, context, "index")]));
            element(env, element10, context, "action", ["onOptionPriceSelect", get(env, context, "content"), get(env, context, "index")], {});
            inline(env, morph0, context, "formatNumber", [get(env, context, "content.strkPrc"), 2], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-6 option-box-shadow v-top");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "y-scroll");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-6 pos-rel");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-container full-width option-menu-height call-row-border");
          var el5 = dom.createTextNode("\n                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-col-12 h-left full-width pad-m-l");
          var el6 = dom.createTextNode("\n                                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-inline toggle option-toggle");
          var el7 = dom.createTextNode("\n                                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("label");
          dom.setAttribute(el7, "class", "toggle-label ltr");
          dom.setAttribute(el7, "for", "call-put-switch");
          var el8 = dom.createTextNode("\n                                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                                        ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                    ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-col-24");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-container full-width");
          var el5 = dom.createTextNode("\n                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          var el6 = dom.createTextNode("\n                                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "y-scroll");
          var el7 = dom.createTextNode("\n");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("                                    ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-col-6");
          var el6 = dom.createTextNode("\n                                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "y-scroll pos-rel");
          var el7 = dom.createTextNode("\n                                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("                                    ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              block = hooks.block,
              inline = hooks.inline,
              subexpr = hooks.subexpr;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element16 = dom.childAt(fragment, [1, 1]);
          var element17 = dom.childAt(element16, [1, 1]);
          var element18 = dom.childAt(element16, [3]);
          var element19 = dom.childAt(element18, [3, 1, 1]);
          var element20 = dom.childAt(element19, [3]);
          var element21 = dom.childAt(element20, [1]);
          var element22 = dom.childAt(element20, [3]);
          var element23 = dom.childAt(element18, [7]);
          var element24 = dom.childAt(element23, [1]);
          var element25 = dom.childAt(element24, [1]);
          var element26 = dom.childAt(element23, [3, 1]);
          var morph0 = dom.createMorphAt(element17, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element17, 'style');
          var morph1 = dom.createMorphAt(element18, 1, 1);
          var attrMorph1 = dom.createAttrMorph(element18, 'style');
          var morph2 = dom.createMorphAt(element19, 1, 1);
          var attrMorph2 = dom.createAttrMorph(element21, 'class');
          var attrMorph3 = dom.createAttrMorph(element22, 'class');
          var morph3 = dom.createMorphAt(element18, 5, 5);
          var attrMorph4 = dom.createAttrMorph(element24, 'class');
          var morph4 = dom.createMorphAt(element25, 1, 1);
          var attrMorph5 = dom.createAttrMorph(element25, 'style');
          var morph5 = dom.createMorphAt(element26, 1, 1);
          var morph6 = dom.createMorphAt(element26, 3, 3);
          var attrMorph6 = dom.createAttrMorph(element26, 'style');
          attribute(env, attrMorph0, element17, "style", concat(env, ["height: ", get(env, context, "searchPopUpHeightOption")]));
          block(env, morph0, context, "each", [get(env, context, "optionSymbolContent")], {}, child0, null);
          attribute(env, attrMorph1, element18, "style", concat(env, ["height: ", get(env, context, "searchPopUpHeightOption")]));
          inline(env, morph1, context, "loading-indicator", [], { "isLoading": get(env, context, "isDateLoading") });
          inline(env, morph2, context, "input", [], { "type": "checkbox", "name": "buy-sell-switch", "class": "toggle-checkbox", "id": "call-put-switch", "checked": get(env, context, "isCall"), "disabled": get(env, context, "isDisableBtn") });
          attribute(env, attrMorph2, element21, "class", concat(env, ["toggle-inner call-put-style ", subexpr(env, context, "if", [get(env, context, "isDisableBtn"), "call-put-disable-style"], {})]));
          attribute(env, attrMorph3, element22, "class", concat(env, ["toggle-switch call-put-switch ", subexpr(env, context, "if", [get(env, context, "isDisableBtn"), "call-put-switch-disable"], {})]));
          block(env, morph3, context, "if", [get(env, context, "isShowNotAvailable")], {}, child1, null);
          attribute(env, attrMorph4, element24, "class", concat(env, ["layout-col-6 ", subexpr(env, context, "if", [get(env, context, "optionDates"), "option-box-shadow"], {})]));
          attribute(env, attrMorph5, element25, "style", concat(env, ["height: ", get(env, context, "dateColumnHeight")]));
          block(env, morph4, context, "each", [get(env, context, "optionDates")], {}, child2, null);
          attribute(env, attrMorph6, element26, "style", concat(env, ["height: ", get(env, context, "dateColumnHeight")]));
          inline(env, morph5, context, "loading-indicator", [], { "isLoading": get(env, context, "isPriceLoading") });
          block(env, morph6, context, "each", [get(env, context, "optionPrices")], {}, child3, null);
          return fragment;
        }
      };
    }();
    var child3 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h2");
              dom.setAttribute(el1, "class", "bold font-l pad-s-tb pad-l-l appttl-mobile btn-txt-color");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "app.lang.labels.noResultFound");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          var child0 = function () {
            var child0 = function () {
              var child0 = function () {
                var child0 = function () {
                  return {
                    isHTMLBars: true,
                    revision: "Ember@1.11.1",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    build: function build(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                                                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("div");
                      dom.setAttribute(el1, "class", "layout-col v-bottom fade-fore-color pad-s-r pad-m-t search-row-bottom");
                      var el2 = dom.createTextNode("\n                                                                ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createElement("span");
                      dom.setAttribute(el2, "class", "pad-s-l");
                      var el3 = dom.createTextNode("|");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    render: function render(context, env, contextualElement) {
                      var dom = env.dom;
                      dom.detectNamespace(contextualElement);
                      var fragment;
                      if (env.useFragmentCache && dom.canClone) {
                        if (this.cachedFragment === null) {
                          fragment = this.build(dom);
                          if (this.hasRendered) {
                            this.cachedFragment = fragment;
                          } else {
                            this.hasRendered = true;
                          }
                        }
                        if (this.cachedFragment) {
                          fragment = dom.cloneNode(this.cachedFragment, true);
                        }
                      } else {
                        fragment = this.build(dom);
                      }
                      return fragment;
                    }
                  };
                }();
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "layout-col v-bottom font-m fade-fore-color pad-s-r pad-m-t");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks,
                        content = hooks.content,
                        get = hooks.get,
                        block = hooks.block;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                    var morph1 = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    dom.insertBoundary(fragment, null);
                    content(env, morph0, context, "content.de");
                    block(env, morph1, context, "if", [get(env, context, "content.subMkt")], {}, child0, null);
                    return fragment;
                  }
                };
              }();
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col-24 h-left v-bottom pad-m-t pad-l-r mgn-m-l font-xx-l font-thick bold symbol-fore-color ltr");
                  var el2 = dom.createTextNode("\n                                                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("                                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col v-bottom pad-m-t pad-s-lr font-m fade-fore-color search-row-bottom");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks,
                      get = hooks.get,
                      concat = hooks.concat,
                      attribute = hooks.attribute,
                      content = hooks.content,
                      block = hooks.block,
                      inline = hooks.inline;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var element3 = dom.childAt(fragment, [1]);
                  var element4 = dom.childAt(fragment, [7]);
                  var attrMorph0 = dom.createAttrMorph(element3, 'data-id');
                  var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
                  var morph1 = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  var morph2 = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
                  var attrMorph1 = dom.createAttrMorph(element4, 'data-id');
                  attribute(env, attrMorph0, element3, "data-id", concat(env, ["row-", get(env, context, "key"), get(env, context, "index")]));
                  content(env, morph0, context, "content.dispProp1");
                  block(env, morph1, context, "if", [get(env, context, "isMultipleExgAvailable")], {}, child0, null);
                  inline(env, morph2, context, "getSubMarketName", [get(env, context, "content.exg"), get(env, context, "content.subMkt"), false], {});
                  attribute(env, attrMorph1, element4, "data-id", concat(env, [get(env, context, "key"), get(env, context, "index")]));
                  return fragment;
                }
              };
            }();
            var child1 = function () {
              var child0 = function () {
                var child0 = function () {
                  return {
                    isHTMLBars: true,
                    revision: "Ember@1.11.1",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    build: function build(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                                                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("div");
                      dom.setAttribute(el1, "class", "layout-col v-bottom fade-fore-color pad-s-r pad-m-t");
                      var el2 = dom.createTextNode("\n                                                                ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createElement("span");
                      dom.setAttribute(el2, "class", "pad-s-l");
                      var el3 = dom.createTextNode("|");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    render: function render(context, env, contextualElement) {
                      var dom = env.dom;
                      dom.detectNamespace(contextualElement);
                      var fragment;
                      if (env.useFragmentCache && dom.canClone) {
                        if (this.cachedFragment === null) {
                          fragment = this.build(dom);
                          if (this.hasRendered) {
                            this.cachedFragment = fragment;
                          } else {
                            this.hasRendered = true;
                          }
                        }
                        if (this.cachedFragment) {
                          fragment = dom.cloneNode(this.cachedFragment, true);
                        }
                      } else {
                        fragment = this.build(dom);
                      }
                      return fragment;
                    }
                  };
                }();
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "layout-col v-bottom font-m fade-fore-color pad-s-r pad-m-t search-row-bottom");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks,
                        content = hooks.content,
                        get = hooks.get,
                        block = hooks.block;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                    var morph1 = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    dom.insertBoundary(fragment, null);
                    content(env, morph0, context, "content.de");
                    block(env, morph1, context, "if", [get(env, context, "content.subMkt")], {}, child0, null);
                    return fragment;
                  }
                };
              }();
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col h-left v-bottom pad-m-t pad-l-r mgn-m-l font-xx-l font-thick bold symbol-fore-color ltr");
                  var el2 = dom.createTextNode("\n                                                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("                                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col v-bottom pad-m-t pad-s-lr font-m fade-fore-color search-row-bottom");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                                                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout-col-24");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks,
                      get = hooks.get,
                      concat = hooks.concat,
                      attribute = hooks.attribute,
                      content = hooks.content,
                      block = hooks.block,
                      inline = hooks.inline;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var element1 = dom.childAt(fragment, [1]);
                  var element2 = dom.childAt(fragment, [7]);
                  var attrMorph0 = dom.createAttrMorph(element1, 'data-id');
                  var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
                  var morph1 = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  var morph2 = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
                  var attrMorph1 = dom.createAttrMorph(element2, 'data-id');
                  attribute(env, attrMorph0, element1, "data-id", concat(env, ["row-", get(env, context, "key"), get(env, context, "index")]));
                  content(env, morph0, context, "content.dispProp1");
                  block(env, morph1, context, "if", [get(env, context, "isMultipleExgAvailable")], {}, child0, null);
                  inline(env, morph2, context, "getSubMarketName", [get(env, context, "content.exg"), get(env, context, "content.subMkt"), false], {});
                  attribute(env, attrMorph1, element2, "data-id", concat(env, [get(env, context, "key"), get(env, context, "index")]));
                  return fragment;
                }
              };
            }();
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 2,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-container search-row pad-s-tb full-width");
                var el2 = dom.createTextNode("\n                                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout-col-24");
                var el3 = dom.createTextNode("\n                                            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "layout-container full-width pad-s-b mgn-m-l");
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("                                            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ellipsis font-l fade-fore-color pad-m-b mgn-m-l");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout-col pad-s-l");
                var el3 = dom.createTextNode("\n                                            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement, blockArguments) {
                var dom = env.dom;
                var hooks = env.hooks,
                    set = hooks.set,
                    get = hooks.get,
                    attribute = hooks.attribute,
                    element = hooks.element,
                    subexpr = hooks.subexpr,
                    block = hooks.block,
                    content = hooks.content,
                    concat = hooks.concat;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element5 = dom.childAt(fragment, [1]);
                var element6 = dom.childAt(element5, [1]);
                var element7 = dom.childAt(element5, [3, 1]);
                var attrMorph0 = dom.createAttrMorph(element5, 'index');
                var morph0 = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
                var morph1 = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
                var morph2 = dom.createMorphAt(element7, 0, 0);
                var attrMorph1 = dom.createAttrMorph(element7, 'class');
                set(env, context, "content", blockArguments[0]);
                set(env, context, "index", blockArguments[1]);
                attribute(env, attrMorph0, element5, "index", get(env, context, "index"));
                element(env, element6, context, "action", ["onItemSelected", get(env, context, "content"), get(env, context, "defaultLink")], {});
                block(env, morph0, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), get(env, context, "content.responsiveID"), 1], {})], {}, child0, child1);
                content(env, morph1, context, "content.lDes");
                attribute(env, attrMorph1, element7, "class", concat(env, ["layout-inline ltr mgn-m-r font-l btn-txt-color pad-s-tb pad-l-b pad-l-lr xs-border-radius ", get(env, context, "content.groupingObj.colorCss")]));
                content(env, morph2, context, "content.groupingObj.groupName");
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h2");
              dom.setAttribute(el1, "class", "bold font-l pad-s-tb pad-l-l appttl-mobile btn-txt-color");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content,
                  get = hooks.get,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              var morph1 = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              content(env, morph0, context, "result.name");
              block(env, morph1, context, "each", [get(env, context, "result.contents")], {}, child0, null);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 2,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement, blockArguments) {
            var dom = env.dom;
            var hooks = env.hooks,
                set = hooks.set,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            set(env, context, "result", blockArguments[0]);
            set(env, context, "key", blockArguments[1]);
            block(env, morph0, context, "if", [get(env, context, "result.isDataUnavailable")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("search-wrapper start");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "display-table-cell");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "y-scroll");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element8 = dom.childAt(fragment, [3, 1]);
          var morph0 = dom.createMorphAt(element8, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element8, 'style');
          attribute(env, attrMorph0, element8, "style", concat(env, ["height: ", get(env, context, "searchPopUpHeight")]));
          block(env, morph0, context, "each", [get(env, context, "content")], {}, child0, null);
          return fragment;
        }
      };
    }();
    var child4 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "display-table-row full-width");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2, "class", "horizontal-list-left pad-s-b");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "font-l header-colour");
          var el5 = dom.createTextNode("Announcement");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "font-l header-colour");
          var el5 = dom.createTextNode("News");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
          inline(env, morph0, context, "input", [], { "checked": get(env, context, "isEnabledAnnSearch"), "type": "checkbox", "name": "cc" });
          inline(env, morph1, context, "input", [], { "checked": get(env, context, "isEnabledNewsSearch"), "type": "checkbox", "name": "cc" });
          return fragment;
        }
      };
    }();
    var child5 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "search-col-2 display-table pad-s-l");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "partial", ["price/announcement"], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "globalSearch");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "search-pop-up overflow-hidden");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "search-wrapper");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "display-table-row full-width appttl-mobile");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container full-width appttl-mobile");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col-24 appttl-mobile");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element30 = dom.childAt(fragment, [0, 1, 1]);
        var element31 = dom.childAt(element30, [1]);
        var morph0 = dom.createMorphAt(dom.childAt(element31, [1]), 1, 1);
        var morph1 = dom.createMorphAt(element31, 3, 3);
        var morph2 = dom.createMorphAt(element30, 3, 3);
        var morph3 = dom.createMorphAt(element30, 4, 4);
        var morph4 = dom.createMorphAt(element30, 5, 5);
        block(env, morph0, context, "if", [get(env, context, "isOptionSymbolSearchEnabled")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "isEnableOptionSearch")], {}, child1, null);
        block(env, morph2, context, "if", [get(env, context, "isEnableOptionSearch")], {}, child2, child3);
        block(env, morph3, context, "if", [get(env, context, "enableContentSettings")], {}, child4, null);
        block(env, morph4, context, "if", [get(env, context, "isEnabledContentSearch")], {}, child5, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/mobile/watchlist-menu-popup", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "full-width ltr toggle");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "toggle-label watchlist-toggle-label");
            dom.setAttribute(el2, "for", "sortByTrades");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "toggle-inner watchlist-toggle-style");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "toggle-animation");
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "toggle-switch watchlist-toggle-switch");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            inline(env, morph0, context, "input", [], { "type": "checkbox", "name": "sortByTrades", "class": "toggle-checkbox", "id": "sortByTrades", "checked": get(env, context, "sortByTrades") });
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "for", "sortByTrades");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "simple-switch dark");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            inline(env, morph0, context, "input", [], { "type": "checkbox", "name": "sortByTrades", "checked": get(env, context, "sortByTrades"), "class": "simple-switch-input", "id": "sortByTrades" });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width pad-widget-bottom");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-15 h-left");
          var el3 = dom.createElement("span");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-6 h-middle");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width widget-hline pad-widget-left pad-widget-right pad-widget-bottom");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [0]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          var morph2 = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
          content(env, morph0, context, "app.lang.labels.sortBy");
          content(env, morph1, context, "app.lang.labels.trades");
          block(env, morph2, context, "if", [get(env, context, "Ember.isIos")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "full-width ltr toggle");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "toggle-label watchlist-toggle-label");
          dom.setAttribute(el2, "for", "detailedView");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "toggle-inner watchlist-toggle-style");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "toggle-animation");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "toggle-switch watchlist-toggle-switch");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "input", [], { "type": "checkbox", "name": "detailedView", "class": "toggle-checkbox", "id": "detailedView", "checked": get(env, context, "detailedView") });
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "detailedView");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "simple-switch dark");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "input", [], { "type": "checkbox", "name": "detailedView", "checked": get(env, context, "detailedView"), "class": "simple-switch-input", "id": "detailedView" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container fade-fore-color watchlist-menu-popup");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container full-width");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-15 h-left");
        var el4 = dom.createElement("span");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-6 h-middle");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [3]);
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element3, [1, 0]), 0, 0);
        var morph2 = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        block(env, morph0, context, "unless", [get(env, context, "isCustomWLMode")], {}, child0, null);
        content(env, morph1, context, "app.lang.labels.detailedView");
        block(env, morph2, context, "if", [get(env, context, "Ember.isIos")], {}, child1, child2);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/more-columns-dropdown", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "dropdown-menu more-column-align display-block");
        dom.setAttribute(el1, "role", "menu");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        inline(env, morph0, context, "column-context-menu", [], { "columns": get(env, context, "defaultColumnDeclarations"), "app": get(env, context, "app"), "saveAction": "changeColumns", "cancelAction": "cancelMoreColumns" });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/more-markets-dropdown", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "exchanges"), "defaultSelect": get(env, context, "defaultExchangeForDropdown"), "value": get(env, context, "value"), "isDropdownDisabled": get(env, context, "disableMoreMarkets"), "valueKey": get(env, context, "valueKey"), "labelKey": "des", "selectedLabelKey": "displayDesc", "lblClass": get(env, context, "lblClass"), "buttonClass": get(env, context, "buttonClass"), "selectAction": "setExchange", "responsiveIcon": get(env, context, "responsiveIcon"), "iconClass": "glyphicon icon-analytics-chart-graph" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "unless", [get(env, context, "disableMoreMarkets")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/password-change", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "message-box-title h-left");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.labels.changePassword");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "font-m pad-s-b pad-m-lr overflow-auto");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            inline(env, morph0, context, "password-rules-check", [], { "password": get(env, context, "newPassword"), "retypePwd": get(env, context, "confirmPassword"), "userName": get(env, context, "username"), "isOnlyPwdCheck": true, "isPwdRulesMatch": get(env, context, "isPwdRulesMatch") });
            return fragment;
          }
        };
      }();
      var child2 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "font-m pad-s-b pad-m-lr overflow-auto");
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              inline(env, morph0, context, "password-rules-check", [], { "password": get(env, context, "newTxPassword"), "retypePwd": get(env, context, "confirmTxPassword"), "isOnlyPwdCheck": true, "isPwdRulesMatch": get(env, context, "isTxPwdRulesMatch") });
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container pad-m-tb pad-s-l");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col font-l bold");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width pad-m-tb pad-l-lr");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "down-fore-color");
            var el5 = dom.createTextNode("*");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "pad-xs-r");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width pad-m-b pad-l-lr");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "down-fore-color");
            var el5 = dom.createTextNode("*");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "pad-xs-r");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width pad-m-b pad-l-lr");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "down-fore-color");
            var el5 = dom.createTextNode("*");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "pad-xs-r");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content,
                inline = hooks.inline,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element7 = dom.childAt(fragment, [1]);
            var element8 = dom.childAt(fragment, [3]);
            var element9 = dom.childAt(element8, [3]);
            var element10 = dom.childAt(element9, [1]);
            var element11 = dom.childAt(element8, [5]);
            var element12 = dom.childAt(element11, [1]);
            var element13 = dom.childAt(element8, [7]);
            var element14 = dom.childAt(element13, [1]);
            var attrMorph0 = dom.createAttrMorph(element7, 'class');
            var attrMorph1 = dom.createAttrMorph(element8, 'class');
            var morph0 = dom.createMorphAt(dom.childAt(element8, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(element10, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element10, 'class');
            var morph2 = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
            var morph3 = dom.createMorphAt(element12, 0, 0);
            var attrMorph3 = dom.createAttrMorph(element12, 'class');
            var morph4 = dom.createMorphAt(dom.childAt(element11, [3]), 0, 0);
            var morph5 = dom.createMorphAt(element14, 0, 0);
            var attrMorph4 = dom.createAttrMorph(element14, 'class');
            var morph6 = dom.createMorphAt(dom.childAt(element13, [3]), 0, 0);
            var morph7 = dom.createMorphAt(element8, 9, 9);
            attribute(env, attrMorph0, element7, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isMobile"), "widget-hline pad-l-b mgn-l-t", "layout-col widget-vline"], {})]));
            attribute(env, attrMorph1, element8, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isMobile"), "", "layout-col-13"], {})]));
            content(env, morph0, context, "app.lang.labels.transactionPassword");
            attribute(env, attrMorph2, element10, "class", concat(env, ["layout-col-14 font-m h-left ", get(env, context, "txCrntPwdLblCss")]));
            content(env, morph1, context, "app.lang.labels.currentTransactionPassword");
            inline(env, morph2, context, "input", [], { "value": get(env, context, "currentTxPassword"), "type": "password", "class": "form-control search-query mgn-m-r " });
            attribute(env, attrMorph3, element12, "class", concat(env, ["layout-col-14 font-m h-left ", get(env, context, "txNewPwdLblCss")]));
            content(env, morph3, context, "app.lang.labels.newTransactionPassword");
            inline(env, morph4, context, "input", [], { "value": get(env, context, "newTxPassword"), "type": "password", "class": "form-control search-query mgn-m-r" });
            attribute(env, attrMorph4, element14, "class", concat(env, ["layout-col-14 font-m h-left ", get(env, context, "txCfmPwdLblCss")]));
            content(env, morph5, context, "app.lang.labels.confirmNewTransactionPassword");
            inline(env, morph6, context, "input", [], { "value": get(env, context, "confirmTxPassword"), "type": "password", "class": "form-control search-query mgn-m-r" });
            block(env, morph7, context, "if", [get(env, context, "isEnabledPwRules")], {}, child0, null);
            return fragment;
          }
        };
      }();
      var child3 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-inline pad-s-l");
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "btn btn-dropdown btn-txt-color btn-animation confirm-btn pad-l-lr btn-small bold font-l");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element4 = dom.childAt(fragment, [1, 1]);
              var morph0 = dom.createMorphAt(element4, 0, 0);
              element(env, element4, context, "action", ["onCancel"], {});
              content(env, morph0, context, "app.lang.labels.cancel");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container pad-m-tb pad-l-lr");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col h-left white-space-normal font-m down-fore-color");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container pad-m-tb pad-l-lr full-width h-right");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col pad-l-l h-right");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-inline");
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "type", "submit");
            dom.setAttribute(el4, "autofocus", "");
            dom.setAttribute(el4, "class", "btn btn-dropdown btn-txt-color confirm-btn btn-animation pad-l-lr btn-small bold font-l");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                element = hooks.element,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element5 = dom.childAt(fragment, [3, 1]);
            var element6 = dom.childAt(element5, [1, 1]);
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(element6, 0, 0);
            var morph2 = dom.createMorphAt(element5, 3, 3);
            content(env, morph0, context, "message");
            element(env, element6, context, "action", ["onSave"], {});
            content(env, morph1, context, "app.lang.labels.save");
            block(env, morph2, context, "if", [get(env, context, "isCancelEnabled")], {}, child0, null);
            return fragment;
          }
        };
      }();
      var child4 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-inline pad-s-l");
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "btn btn-dropdown btn-default btn-animation pad-m-lr");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element0 = dom.childAt(fragment, [1, 1]);
              var morph0 = dom.createMorphAt(element0, 0, 0);
              element(env, element0, context, "action", ["onCancel"], {});
              content(env, morph0, context, "app.lang.labels.cancel");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container h-left full-width pad-l-lr font-m down-fore-color pad-m-tb");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width pad-m-b pad-l-lr h-right");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col");
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-inline");
            var el5 = dom.createTextNode("\n                                    ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("button");
            dom.setAttribute(el5, "type", "submit");
            dom.setAttribute(el5, "autofocus", "");
            dom.setAttribute(el5, "class", "btn btn-dropdown btn-default btn-animation pad-l-lr");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                element = hooks.element,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3, 1]);
            var element3 = dom.childAt(element2, [1, 1]);
            var morph0 = dom.createUnsafeMorphAt(dom.childAt(element1, [1]), 0, 0);
            var morph1 = dom.createMorphAt(element3, 0, 0);
            var morph2 = dom.createMorphAt(element2, 3, 3);
            content(env, morph0, context, "message");
            element(env, element3, context, "action", ["onSave"], {});
            content(env, morph1, context, "app.lang.labels.save");
            block(env, morph2, context, "if", [get(env, context, "isCancelEnabled")], {}, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "message-box-fog change-password-box");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("<div class=\"layout-container pad-m-b pad-s-l\">");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("<div class=\"layout-col  font-l bold\"></div>");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("</div>");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-container pad-m-tb pad-l-lr");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-col-12 font-m h-left");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "font-m pad-xs-r");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "widget-hline");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-container full-width");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container pad-m-tb pad-s-l");
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          dom.setAttribute(el7, "class", "layout-col font-l bold");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container full-width pad-m-tb pad-l-lr");
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode(" ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "down-fore-color");
          var el9 = dom.createTextNode("*");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          dom.setAttribute(el7, "class", "pad-xs-r");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container full-width pad-m-b pad-l-lr");
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode(" ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "down-fore-color");
          var el9 = dom.createTextNode("*");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          dom.setAttribute(el7, "class", "pad-xs-r");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container full-width pad-m-b pad-l-lr");
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode(" ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "down-fore-color");
          var el9 = dom.createTextNode("*");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          dom.setAttribute(el7, "class", "pad-xs-r");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n\n");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("                    ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              block = hooks.block,
              subexpr = hooks.subexpr,
              content = hooks.content,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element15 = dom.childAt(fragment, [1, 1]);
          var element16 = dom.childAt(element15, [3]);
          var element17 = dom.childAt(element16, [7]);
          var element18 = dom.childAt(element16, [11]);
          var element19 = dom.childAt(element18, [1]);
          var element20 = dom.childAt(element19, [3]);
          var element21 = dom.childAt(element20, [1]);
          var element22 = dom.childAt(element19, [5]);
          var element23 = dom.childAt(element22, [1]);
          var element24 = dom.childAt(element19, [7]);
          var element25 = dom.childAt(element24, [1]);
          var morph0 = dom.createMorphAt(element15, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element15, 'class');
          var attrMorph1 = dom.createAttrMorph(element16, 'class');
          var morph1 = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
          var morph2 = dom.createMorphAt(dom.childAt(element17, [3]), 0, 0);
          var attrMorph2 = dom.createAttrMorph(element19, 'class');
          var morph3 = dom.createMorphAt(dom.childAt(element19, [1, 1]), 0, 0);
          var morph4 = dom.createMorphAt(element21, 0, 0);
          var attrMorph3 = dom.createAttrMorph(element21, 'class');
          var morph5 = dom.createMorphAt(dom.childAt(element20, [3]), 0, 0);
          var morph6 = dom.createMorphAt(element23, 0, 0);
          var attrMorph4 = dom.createAttrMorph(element23, 'class');
          var morph7 = dom.createMorphAt(dom.childAt(element22, [3]), 0, 0);
          var morph8 = dom.createMorphAt(element25, 0, 0);
          var attrMorph5 = dom.createAttrMorph(element25, 'class');
          var morph9 = dom.createMorphAt(dom.childAt(element24, [3]), 0, 0);
          var morph10 = dom.createMorphAt(element19, 9, 9);
          var morph11 = dom.createMorphAt(element18, 3, 3);
          var morph12 = dom.createMorphAt(element16, 13, 13);
          attribute(env, attrMorph0, element15, "class", concat(env, ["message-box-frame change-password-container ", get(env, context, "popupCss")]));
          block(env, morph0, context, "unless", [get(env, context, "isMobile")], {}, child0, null);
          attribute(env, attrMorph1, element16, "class", concat(env, ["pad-widget-left pad-widget-right change-password-container-height ", subexpr(env, context, "if", [get(env, context, "isEnabledPwRules"), "y-scroll", ""], {})]));
          content(env, morph1, context, "app.lang.labels.username");
          inline(env, morph2, context, "input", [], { "value": get(env, context, "username"), "disabled": "true", "class": "form-control search-query mgn-m-r" });
          attribute(env, attrMorph2, element19, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isMobile"), "", "layout-col-11"], {})]));
          content(env, morph3, context, "app.lang.labels.loginPassword");
          attribute(env, attrMorph3, element21, "class", concat(env, ["layout-col-12 font-m h-left ", get(env, context, "crntPwdLblCss")]));
          content(env, morph4, context, "app.lang.labels.currentPassword");
          inline(env, morph5, context, "input", [], { "value": get(env, context, "currentPassword"), "type": "password", "class": "form-control search-query mgn-m-r " });
          attribute(env, attrMorph4, element23, "class", concat(env, ["layout-col-12 font-m h-left ", get(env, context, "newPwdLblCss")]));
          content(env, morph6, context, "app.lang.labels.newPassword");
          inline(env, morph7, context, "input", [], { "value": get(env, context, "newPassword"), "type": "password", "class": "form-control search-query mgn-m-r" });
          attribute(env, attrMorph5, element25, "class", concat(env, ["layout-col-12 font-m h-left ", get(env, context, "cfmPwdLblCss")]));
          content(env, morph8, context, "app.lang.labels.confirmNewPassword");
          inline(env, morph9, context, "input", [], { "value": get(env, context, "confirmPassword"), "type": "password", "class": "form-control search-query mgn-m-r" });
          block(env, morph10, context, "if", [get(env, context, "isEnabledPwRules")], {}, child1, null);
          block(env, morph11, context, "if", [get(env, context, "isEnabledTransactionPw")], {}, child2, null);
          block(env, morph12, context, "if", [get(env, context, "isMobile")], {}, child3, child4);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isPopupEnabled")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/password-rules-check", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "display-block pad-xs-tb white-space-normal");
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [1]);
              var attrMorph0 = dom.createAttrMorph(element3, 'class');
              var morph0 = dom.createMorphAt(element2, 3, 3);
              attribute(env, attrMorph0, element3, "class", get(env, context, "unameRule.satisfiedIcon"));
              content(env, morph0, context, "unameRule.ruleName");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "unameRule.isEnabled")], {}, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "h-left");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "bold display-block pad-xs-b");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
          var morph1 = dom.createMorphAt(element4, 3, 3);
          content(env, morph0, context, "app.lang.labels.userNameRules");
          block(env, morph1, context, "each", [get(env, context, "userNameRulesCollection")], { "keyword": "unameRule" }, child0, null);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "display-block pad-xs-tb white-space-normal");
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var attrMorph0 = dom.createAttrMorph(element1, 'class');
            var morph0 = dom.createMorphAt(element0, 3, 3);
            attribute(env, attrMorph0, element1, "class", get(env, context, "pwdRule.satisfiedIcon"));
            content(env, morph0, context, "pwdRule.ruleName");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "pwdRule.isEnabled")], {}, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "mgn-l-t h-left");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "bold display-block pad-xs-tb");
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element5 = dom.childAt(fragment, [1]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
        var morph2 = dom.createMorphAt(element5, 3, 3);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "unless", [get(env, context, "isOnlyPwdCheck")], {}, child0, null);
        content(env, morph1, context, "app.lang.labels.passwordRules");
        block(env, morph2, context, "each", [get(env, context, "passwordRulesCollection")], { "keyword": "pwdRule" }, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/rename-custom-workspace", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "message-box-fog");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "message-box-frame");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "message-box-title padding-zero");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-height full-width");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col pad-s-lr");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget-new");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-width pad-s-t");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col v-top");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-container full-width pad-m-b pad-l-l");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col pad-m-r");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-container pad-m-b pad-l-l");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col-24");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col pad-l-l pad-m-r");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-inline pad-s-l");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("button");
        dom.setAttribute(el9, "type", "submit");
        dom.setAttribute(el9, "autofocus", "");
        dom.setAttribute(el9, "class", "btn btn-dropdown btn-default");
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-inline pad-s-l");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("button");
        dom.setAttribute(el9, "class", "btn btn-dropdown btn-default");
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            get = hooks.get,
            inline = hooks.inline,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [3, 1, 1]);
        var element2 = dom.childAt(element1, [3, 3]);
        var element3 = dom.childAt(element2, [1, 1]);
        var element4 = dom.childAt(element2, [3, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1, 1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [1, 1]), 0, 0);
        var morph2 = dom.createMorphAt(element3, 1, 1);
        var morph3 = dom.createMorphAt(element4, 1, 1);
        content(env, morph0, context, "app.lang.labels.renameWorkspace");
        inline(env, morph1, context, "input", [], { "value": get(env, context, "customWorkspaceName"), "type": "text", "class": "form-control search-query" });
        element(env, element3, context, "action", ["saveRename"], {});
        content(env, morph2, context, "app.lang.labels.save");
        element(env, element4, context, "action", ["cancelRename"], {});
        content(env, morph3, context, "app.lang.labels.cancel");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/renew-subscription", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-inline");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "btn btn-default bold highlight-back-color-1");
        dom.setAttribute(el2, "type", "button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        element(env, element0, context, "action", ["renewSubscription"], {});
        content(env, morph0, context, "app.lang.labels.renewSubscription");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/session-timeout", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "message-box-title h-left");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.labels.changeSessionTime");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-inline pad-s-l");
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "btn btn-dropdown btn-txt-color btn-animation confirm-btn pad-l-lr btn-small bold font-l");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element4 = dom.childAt(fragment, [1, 1]);
              var morph0 = dom.createMorphAt(element4, 0, 0);
              element(env, element4, context, "action", ["onCancel"], {});
              content(env, morph0, context, "app.lang.labels.cancel");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container pad-m-tb pad-l-lr");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col h-left white-space-normal font-m down-fore-color");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container pad-m-tb pad-l-lr full-width h-right");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col pad-l-l h-right");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-inline");
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "type", "submit");
            dom.setAttribute(el4, "autofocus", "");
            dom.setAttribute(el4, "class", "btn btn-dropdown btn-txt-color confirm-btn btn-animation pad-l-lr btn-small bold font-l");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                element = hooks.element,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element5 = dom.childAt(fragment, [3, 1]);
            var element6 = dom.childAt(element5, [1, 1]);
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(element6, 0, 0);
            var morph2 = dom.createMorphAt(element5, 3, 3);
            content(env, morph0, context, "message");
            element(env, element6, context, "action", ["onSave"], {});
            content(env, morph1, context, "app.lang.labels.save");
            block(env, morph2, context, "if", [get(env, context, "isCancelEnabled")], {}, child0, null);
            return fragment;
          }
        };
      }();
      var child2 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-inline pad-s-l");
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "btn btn-dropdown btn-default btn-animation pad-m-lr");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element0 = dom.childAt(fragment, [1, 1]);
              var morph0 = dom.createMorphAt(element0, 0, 0);
              element(env, element0, context, "action", ["onCancel"], {});
              content(env, morph0, context, "app.lang.labels.cancel");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container h-left full-width pad-l-lr font-m down-fore-color pad-m-tb");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width pad-m-b pad-l-lr h-right");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col");
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-inline");
            var el5 = dom.createTextNode("\n                                    ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("button");
            dom.setAttribute(el5, "type", "submit");
            dom.setAttribute(el5, "autofocus", "");
            dom.setAttribute(el5, "class", "btn btn-dropdown btn-default btn-animation pad-l-lr");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                element = hooks.element,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3, 1]);
            var element3 = dom.childAt(element2, [1, 1]);
            var morph0 = dom.createUnsafeMorphAt(dom.childAt(element1, [1]), 0, 0);
            var morph1 = dom.createMorphAt(element3, 0, 0);
            var morph2 = dom.createMorphAt(element2, 3, 3);
            content(env, morph0, context, "message");
            element(env, element3, context, "action", ["onSave"], {});
            content(env, morph1, context, "app.lang.labels.save");
            block(env, morph2, context, "if", [get(env, context, "isCancelEnabled")], {}, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "message-box-fog change-password-box");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-container full-width");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container full-width pad-m-tb pad-l-lr");
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode(" ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "down-fore-color");
          var el9 = dom.createTextNode("*");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          dom.setAttribute(el7, "class", "font-m h-left");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container full-width pad-m-b pad-l-lr");
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode(" ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "down-fore-color");
          var el9 = dom.createTextNode("*");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          dom.setAttribute(el7, "class", "layout-container full-width");
          var el8 = dom.createTextNode("\n                                ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("div");
          dom.setAttribute(el8, "class", "layout-col-3");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                                ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("div");
          dom.setAttribute(el8, "class", "layout-col-6 font-m h-left pad-s-l");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container full-width pad-m-b pad-l-lr");
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode(" ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "down-fore-color");
          var el9 = dom.createTextNode("*");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          dom.setAttribute(el7, "class", "font-m h-left");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              block = hooks.block,
              subexpr = hooks.subexpr,
              content = hooks.content,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element7 = dom.childAt(fragment, [1, 1]);
          var element8 = dom.childAt(element7, [3]);
          var element9 = dom.childAt(element8, [1, 1]);
          var element10 = dom.childAt(element9, [1]);
          var element11 = dom.childAt(element10, [1]);
          var element12 = dom.childAt(element9, [3]);
          var element13 = dom.childAt(element12, [1]);
          var element14 = dom.childAt(element12, [3]);
          var element15 = dom.childAt(element9, [5]);
          var element16 = dom.childAt(element15, [1]);
          var morph0 = dom.createMorphAt(element7, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element7, 'class');
          var attrMorph1 = dom.createAttrMorph(element8, 'class');
          var attrMorph2 = dom.createAttrMorph(element9, 'class');
          var morph1 = dom.createMorphAt(element11, 0, 0);
          var attrMorph3 = dom.createAttrMorph(element11, 'class');
          var morph2 = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
          var morph3 = dom.createMorphAt(element13, 0, 0);
          var attrMorph4 = dom.createAttrMorph(element13, 'class');
          var morph4 = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
          var morph5 = dom.createMorphAt(dom.childAt(element14, [3]), 0, 0);
          var morph6 = dom.createMorphAt(element16, 0, 0);
          var attrMorph5 = dom.createAttrMorph(element16, 'class');
          var morph7 = dom.createMorphAt(dom.childAt(element15, [3]), 0, 0);
          var morph8 = dom.createMorphAt(element8, 3, 3);
          attribute(env, attrMorph0, element7, "class", concat(env, ["message-box-frame change-password-container ", get(env, context, "popupCss")]));
          block(env, morph0, context, "unless", [get(env, context, "isMobile")], {}, child0, null);
          attribute(env, attrMorph1, element8, "class", concat(env, ["pad-widget-left pad-widget-right change-password-container-height ", subexpr(env, context, "if", [get(env, context, "isEnabledPwRules"), "y-scroll", ""], {})]));
          attribute(env, attrMorph2, element9, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isMobile"), "", "layout-col-11"], {})]));
          attribute(env, attrMorph3, element11, "class", concat(env, ["layout-col-12 font-m h-left ", get(env, context, "crntPwdLblCss")]));
          content(env, morph1, context, "app.lang.labels.currentSession");
          content(env, morph2, context, "currentSessionTime");
          attribute(env, attrMorph4, element13, "class", concat(env, ["layout-col-12 font-m h-left ", get(env, context, "newPwdLblCss")]));
          content(env, morph3, context, "app.lang.labels.setSession");
          inline(env, morph4, context, "input", [], { "value": get(env, context, "newSession"), "type": "number", "min": 2, "max": 120, "class": "form-control search-query mgn-m-r" });
          content(env, morph5, context, "app.lang.labels.minutes");
          attribute(env, attrMorph5, element16, "class", concat(env, ["layout-col-12 font-m h-left ", get(env, context, "cfmPwdLblCss")]));
          content(env, morph6, context, "app.lang.labels.minMax");
          content(env, morph7, context, "minMaxRangeLabel");
          block(env, morph8, context, "if", [get(env, context, "isMobile")], {}, child1, child2);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isPopupEnabled")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/stk-specific-components/cash-map", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element2, 0, 0);
            var attrMorph0 = dom.createAttrMorph(element2, 'class');
            attribute(env, attrMorph0, element2, "class", concat(env, ["font-m pad-s-t ", get(env, context, "valueStyle")]));
            content(env, morph0, context, "showValue");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-inline progress cash-map-progress-bar");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element3, 'style');
          var morph0 = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          attribute(env, attrMorph0, element3, "style", get(env, context, "progressWidth"));
          element(env, element3, context, "bind-attr", [], { "class": ":progress-bar :display-table-row progressBackStyle" });
          block(env, morph0, context, "unless", [get(env, context, "isValueHidden")], {}, child0, null);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-inline font-x-l bold pad-m-r");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1, 1]);
            var morph0 = dom.createMorphAt(element0, 0, 0);
            element(env, element0, context, "bind-attr", [], { "class": "valueStyle" });
            content(env, morph0, context, "showValue");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-inline progress cash-map-progress-bar");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block,
              attribute = hooks.attribute,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [2, 1]);
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          var attrMorph0 = dom.createAttrMorph(element1, 'style');
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "unless", [get(env, context, "isValueHidden")], {}, child0, null);
          attribute(env, attrMorph0, element1, "style", get(env, context, "progressWidth"));
          element(env, element1, context, "bind-attr", [], { "class": ":progress-bar :display-table-row progressBackStyle" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        block(env, morph0, context, "if", [get(env, context, "isVertical")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/stk-specific-components/days-range", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "progress progress-bar-back-color");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [0, 1]);
          var attrMorph0 = dom.createAttrMorph(element1, 'class');
          var attrMorph1 = dom.createUnsafeAttrMorph(element1, 'style');
          attribute(env, attrMorph0, element1, "class", concat(env, ["progress-bar ", get(env, context, "progressBarClass")]));
          attribute(env, attrMorph1, element1, "style", get(env, context, "styles"));
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pad-xs-t");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "pad-s-all");
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n         ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          content(env, morph0, context, "lowValue");
          content(env, morph1, context, "highValue");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isBarAvailable")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/stk-specific-components/fifty-two-wk-hl", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "progress progress-bar-back-color");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element1, 'class');
          var attrMorph1 = dom.createUnsafeAttrMorph(element1, 'style');
          attribute(env, attrMorph0, element1, "class", concat(env, ["progress-bar ", get(env, context, "progressBarClass")]));
          attribute(env, attrMorph1, element1, "style", get(env, context, "styles"));
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pad-xs-t");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "pad-s-all");
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n             ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          content(env, morph0, context, "lowValue");
          content(env, morph1, context, "highValue");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isBarAvailable")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/sub-markets-dropdown", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "subMarkets"), "isDropdownDisabled": get(env, context, "isDisableSubMarkets"), "defaultSelect": get(env, context, "currentSubMarket"), "value": get(env, context, "currentMarketId"), "valueKey": "marketId", "labelKey": "lDes", "buttonClass": get(env, context, "buttonClass"), "lblClass": get(env, context, "lblClass"), "selectAction": "setSubMarket", "responsiveIcon": get(env, context, "responsiveIcon"), "iconClass": "icon-sitemap" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isSubMarketsAvailable")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/symbol-click-menu-popup", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("hr");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("Seperator");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element,
                  get = hooks.get,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element4 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element4, 1, 1);
              element(env, element4, context, "action", ["position"], { "on": "mouseEnter" });
              inline(env, morph0, context, "partial", [get(env, context, "item.path")], {});
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("a");
              var el3 = dom.createTextNode("\n                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "layout-inline v-middle font-x-l right-click-menu-rtl");
              var el4 = dom.createElement("i");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "layout-inline right icon-fore-color font-s pad-s-t");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  element = hooks.element,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element1, [1, 0]);
              var element3 = dom.childAt(element1, [3]);
              var attrMorph0 = dom.createAttrMorph(element0, 'class');
              var attrMorph1 = dom.createAttrMorph(element2, 'class');
              var morph0 = dom.createMorphAt(element3, 0, 0);
              var attrMorph2 = dom.createAttrMorph(element3, 'class');
              var morph1 = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
              attribute(env, attrMorph0, element0, "class", concat(env, ["right-click-menu-item ", get(env, context, "item.view.displayStyle")]));
              element(env, element0, context, "action", ["rightClickItem", get(env, context, "item.config"), get(env, context, "item.args")], {});
              attribute(env, attrMorph1, element2, "class", concat(env, ["pad-xs-r ", get(env, context, "item.view.iconClass")]));
              attribute(env, attrMorph2, element3, "class", concat(env, ["layout-inline pad-l-l font-m ", get(env, context, "item.view.menuClass")]));
              content(env, morph0, context, "item.view.name");
              content(env, morph1, context, "item.view.shortcut");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "item.isExtended")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          var morph1 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "_view.contentIndex")], {}, child0, null);
          block(env, morph1, context, "each", [get(env, context, "group")], { "keyword": "item" }, child1, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "right-click-menu");
        dom.setAttribute(el1, "data-toggle", "dropdown");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "pad-l-all right-click-menu-header mgn-s-b watchlist-right-click-symbol");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline bold font-x-l");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline pad-xs-t font-m pad-s-l");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element5 = dom.childAt(fragment, [0]);
        var element6 = dom.childAt(element5, [1]);
        var morph0 = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
        var morph2 = dom.createMorphAt(element5, 3, 3);
        content(env, morph0, context, "selectedSymbol.dispProp1");
        content(env, morph1, context, "selectedSymbol.exg");
        block(env, morph2, context, "each", [get(env, context, "fullContextMenu")], { "keyword": "group" }, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/symbol-summary", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-m-l font-xl bold fore-color");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "formatNumber", [get(env, context, "stockObj.ltp"), get(env, context, "stockObj.deci")], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container ");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-m-l font-xxl bold symbol-fore-color");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container pad-m-t");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-m-l");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-m-l");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-m-l");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            get = hooks.get,
            block = hooks.block,
            element = hooks.element,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var element2 = dom.childAt(element1, [1, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element1, [3, 1]);
        var element5 = dom.childAt(element1, [5, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        var morph1 = dom.createMorphAt(element0, 3, 3);
        var morph2 = dom.createMorphAt(element4, 0, 0);
        var morph3 = dom.createMorphAt(element5, 0, 0);
        content(env, morph0, context, "stockObj.sDes");
        block(env, morph1, context, "if", [get(env, context, "isShowLtp")], {}, child0, null);
        element(env, element2, context, "bind-attr", [], { "class": ":font-xl perChgCss" });
        element(env, element3, context, "bind-attr", [], { "class": "changeSign" });
        element(env, element4, context, "bind-attr", [], { "class": ":font-l :bold changeCss" });
        inline(env, morph2, context, "formatNumber", [get(env, context, "stockObj.chg"), get(env, context, "stockObj.deci")], {});
        element(env, element5, context, "bind-attr", [], { "class": ":font-l :bold perChgCss" });
        inline(env, morph3, context, "formatNumberPercentage", [get(env, context, "stockObj.pctChg"), 1], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/tell-a-friend", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-inline h-left pad-l-l");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-inline pad-m-l h-left");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-inline h-left pad-l-l");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "btn btn-default");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [5, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          var morph2 = dom.createMorphAt(element0, 1, 1);
          inline(env, morph0, context, "input-field-text", [], { "type": "text", "value": get(env, context, "recipient1"), "placeholder": get(env, context, "app.lang.labels.enterFriendEmail"), "class": "ember-view ember-text-field search-query form-control pad-l-r" });
          inline(env, morph1, context, "input-field-text", [], { "type": "text", "value": get(env, context, "recipient2"), "placeholder": get(env, context, "app.lang.labels.enterFriendEmail"), "class": "ember-view ember-text-field search-query form-control pad-l-r" });
          element(env, element0, context, "action", ["onLoadToCanvas"], {});
          content(env, morph2, context, "app.lang.labels.send");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col h-left");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline h-left");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "btn btn-default");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container full-width");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col h-right pad-s-l");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "glyphicon glyphicon-triangle-right");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1, 1]);
        var attrMorph0 = dom.createAttrMorph(element1, 'class');
        var morph0 = dom.createMorphAt(dom.childAt(element3, [1, 1]), 0, 0);
        var morph1 = dom.createMorphAt(element2, 3, 3);
        attribute(env, attrMorph0, element1, "class", concat(env, ["layout-container full-width pad-s-l ", get(env, context, "displayCss")]));
        element(env, element3, context, "action", ["onEnableTellAFried"], {});
        content(env, morph0, context, "app.lang.labels.tellFriend");
        block(env, morph1, context, "if", [get(env, context, "isSendEnabled")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/top-panel/exchange-status-1", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-dropdown btn-default bold ltr");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "id", "appDropdown");
          dom.setAttribute(el1, "data-toggle", "dropdown");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          content(env, morph0, context, "exchange.des");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "exchanges"), "valueKey": "code", "labelKey": "desc", "selectedLabelKey": "desc", "defaultSelect": get(env, context, "selectedExg"), "selectAction": "setExchange", "buttonClass": "bold dropdown-text-only", "lblClass": "ms-top-bar-exchange-btn", "wkey": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-l fade-fore-color ms-top-bar-showTime-1 pos-rel");
          var el2 = dom.createElement("span");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 1, 1);
          content(env, morph0, context, "showTimeText");
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-m fade-fore-color ms-top-bar-showTime-1 pos-rel");
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
          content(env, morph0, context, "marketTime");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "v-top");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ms-top-bar-exchange-1");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "h-middle");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container ms-top-bar-alert-height-1");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "font-l ms-top-bar-alert-style-1");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "style", "position: relative");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "pos-abs full-width");
        dom.setAttribute(el7, "style", "z-index: 1");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "id", "marketSummaryExchangeStatusContainer");
        dom.setAttribute(el7, "class", "pos-abs full-width");
        dom.setAttribute(el7, "style", "z-index: 3");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            element = hooks.element,
            content = hooks.content,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element1, [1, 1, 1]);
        var element3 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
        var morph3 = dom.createMorphAt(element3, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element3, 'class');
        block(env, morph0, context, "if", [get(env, context, "disableMoreMarkets")], {}, child0, child1);
        element(env, element2, context, "bind-attr", [], { "class": "marketStatusCSS" });
        content(env, morph1, context, "exchange.statStr");
        content(env, morph2, context, "exchange.statStr");
        attribute(env, attrMorph0, element3, "class", concat(env, ["layout-col ", subexpr(env, context, "if", [get(env, context, "isTablet"), ""], {})]));
        block(env, morph3, context, "if", [get(env, context, "showTime")], {}, child2, child3);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/top-panel/exchange-status-2", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-m fade-fore-color ms-top-bar-show-time-2 pos-rel ms-top-bar-market-status-area");
          var el2 = dom.createElement("span");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 1, 1);
          content(env, morph0, context, "showTimeText");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-m fade-fore-color ms-top-bar-show-time-2 pos-rel ms-top-bar-market-status-area");
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
          content(env, morph0, context, "marketTime");
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ms-top-bar-progress-time-2");
          dom.setAttribute(el1, "style", "width: auto");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "role", "progressbar");
          dom.setAttribute(el2, "aria-valuenow", "70");
          dom.setAttribute(el2, "aria-valuemin", "0");
          dom.setAttribute(el2, "aria-valuemax", "100");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createUnsafeAttrMorph(element0, 'style');
          attribute(env, attrMorph0, element0, "style", get(env, context, "bar"));
          element(env, element0, context, "bind-attr", [], { "class": "progressStyle" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "market-status-area");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "font-m pad-m-t pos-abs ms-top-bar-alert-style-2 full-width");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pos-abs full-width ellipsis ms-top-bar-market-status");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "id", "marketSummaryExchangeStatusContainer");
        dom.setAttribute(el4, "class", "full-width ellipsis ms-top-bar-market-status");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element,
            content = hooks.content,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
        var morph2 = dom.createMorphAt(element1, 3, 3);
        var morph3 = dom.createMorphAt(element1, 4, 4);
        element(env, element2, context, "bind-attr", [], { "class": "marketStatusCSS" });
        content(env, morph0, context, "exchange.statStr");
        content(env, morph1, context, "exchange.statStr");
        block(env, morph2, context, "if", [get(env, context, "showTime")], {}, child0, child1);
        block(env, morph3, context, "unless", [get(env, context, "isTablet")], {}, child2, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/top-panel/exchange-status", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-dropdown btn-default bold ltr");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "id", "appDropdown");
          dom.setAttribute(el1, "data-toggle", "dropdown");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          content(env, morph0, context, "exchange.de");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "exchanges"), "valueKey": "code", "labelKey": "desc", "selectedLabelKey": "de", "defaultSelect": get(env, context, "selectedExg"), "selectAction": "setExchange", "lblClass": "font-l", "buttonClass": "bold dropdown-text-only", "wkey": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-l h-middle ms-top-bar-mkt-status");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "style", "position: relative");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "pos-abs full-width");
          dom.setAttribute(el3, "style", "z-index: 1; width:70px;");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "id", "marketSummaryExchangeStatusContainer");
          dom.setAttribute(el3, "class", "pos-abs full-width");
          dom.setAttribute(el3, "style", "z-index: 3; width:70px;");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          element(env, element3, context, "bind-attr", [], { "class": "marketStatusCSS pos-rel" });
          content(env, morph0, context, "exchange.statStr");
          content(env, morph1, context, "exchange.statStr");
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "height:22px");
          dom.setAttribute(el1, "class", "font-l pad-s-all ms-top-bar-alert-style full-width");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "style", "position: relative");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "pos-abs full-width");
          dom.setAttribute(el3, "style", "z-index: 1");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "id", "marketSummaryExchangeStatusContainer");
          dom.setAttribute(el3, "class", "full-width hint--bottom-left hint--bounce hint--rounded cursor-default");
          dom.setAttribute(el3, "style", "z-index: 3;");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1, 1]);
          var element2 = dom.childAt(element1, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element2, 0, 0);
          var attrMorph0 = dom.createAttrMorph(element2, 'data-hint');
          element(env, element1, context, "bind-attr", [], { "class": "marketStatusCSS" });
          content(env, morph0, context, "exchange.statStr");
          attribute(env, attrMorph0, element2, "data-hint", concat(env, [get(env, context, "exchange.statStrLong")]));
          content(env, morph1, context, "exchange.statStr");
          return fragment;
        }
      };
    }();
    var child4 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-l fade-fore-color ms-top-bar-showTime");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "pad-s-l");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 1, 1);
          content(env, morph0, context, "showTimeText");
          return fragment;
        }
      };
    }();
    var child5 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-m fade-fore-color ms-top-bar-showTime");
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
          content(env, morph0, context, "marketTime");
          return fragment;
        }
      };
    }();
    var child6 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ms-top-bar-progress-time");
          dom.setAttribute(el1, "style", "width: auto");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "role", "progressbar");
          dom.setAttribute(el2, "aria-valuenow", "70");
          dom.setAttribute(el2, "aria-valuemin", "0");
          dom.setAttribute(el2, "aria-valuemax", "100");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createUnsafeAttrMorph(element0, 'style');
          attribute(env, attrMorph0, element0, "style", get(env, context, "bar"));
          element(env, element0, context, "bind-attr", [], { "class": "progressStyle" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "style", "height:21px");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ms-top-bar-vertical-separator ms-top-bar-vline-long");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ms-top-bar-vertical-separator ms-top-bar-vline-long");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element5, [3]);
        var attrMorph0 = dom.createAttrMorph(element4, 'class');
        var attrMorph1 = dom.createAttrMorph(element5, 'class');
        var attrMorph2 = dom.createAttrMorph(element6, 'class');
        var morph0 = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
        var morph1 = dom.createMorphAt(element7, 1, 1);
        var morph2 = dom.createMorphAt(element7, 3, 3);
        var morph3 = dom.createMorphAt(element7, 5, 5);
        var attrMorph3 = dom.createAttrMorph(element7, 'class');
        attribute(env, attrMorph0, element4, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "v-top"], {})]));
        attribute(env, attrMorph1, element5, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "layout-container toppanel-height ms-top-bar-exchange-width", "ms-top-bar-exchange pad-s-t"], {})]));
        attribute(env, attrMorph2, element6, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "layout-col pad-m-l pad-s-t v-top"], {})]));
        block(env, morph0, context, "if", [get(env, context, "disableMoreMarkets")], {}, child0, child1);
        attribute(env, attrMorph3, element7, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "layout-col full-height v-top"], {})]));
        block(env, morph1, context, "if", [get(env, context, "isTablet")], {}, child2, child3);
        block(env, morph2, context, "if", [get(env, context, "showTime")], {}, child4, child5);
        block(env, morph3, context, "unless", [get(env, context, "isTablet")], {}, child6, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/top-panel/main-index-chart-2", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "w-full border-b");
        dom.setAttribute(el1, "cellspacing", "0");
        dom.setAttribute(el1, "cellpadding", "0");
        dom.setAttribute(el1, "border", "0");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tr");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("td");
        dom.setAttribute(el3, "class", "pad-m-l pad-l-r");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "style", "width: 110px;");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "mgn-m-l ms-top-bar-index-dropdown-2 pad-m-t");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "ms-top-bar-index-percentage-2 pad-m-l hint--bottom-left hint--bounce hint--rounded font-l pos-rel");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("td");
        dom.setAttribute(el3, "class", "pad-l-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ms-top-bar-index-value-2 pad-l-l");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "h-left ltr pad-s-b");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "index-Arrow");
        var el8 = dom.createTextNode("  ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("i");
        var el9 = dom.createTextNode(" ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(" ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "hint--bottom-left hint--bounce hint--rounded font-x-l bold");
        var el9 = dom.createTextNode(" ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "pad-s-t");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        var el7 = dom.createTextNode(" ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("td");
        dom.setAttribute(el3, "class", "pad-m-r");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ms-top-bar-chart-2 ltr");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "ms-top-bar-index-chart-position-2");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            element = hooks.element,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element0, [3, 1]);
        var element5 = dom.childAt(element4, [1, 1]);
        var element6 = dom.childAt(element5, [1, 1]);
        var element7 = dom.childAt(element5, [3]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element4, [3, 1]);
        var element10 = dom.childAt(element0, [5, 1]);
        var element11 = dom.childAt(element10, [0]);
        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        var morph1 = dom.createMorphAt(element3, 0, 0);
        var morph2 = dom.createMorphAt(element3, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element3, 'data-hint');
        var morph3 = dom.createMorphAt(element8, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element8, 'data-hint');
        var morph4 = dom.createMorphAt(element9, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element9, 'data-hint');
        var attrMorph3 = dom.createAttrMorph(element10, 'id');
        var attrMorph4 = dom.createAttrMorph(element11, 'id');
        inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "indexCollectionArray"), "defaultSelect": get(env, context, "defaultIndexForDropdown"), "valueKey": "dSym", "labelKey": "sDes", "selectedLabelKey": "dSym", "value": get(env, context, "currentIndex.dSym"), "selectAction": "setIndexData", "buttonClass": "bold ltr", "lblClass": "ms-top-bar-index-dropdown-width", "wkey": get(env, context, "wkey") });
        element(env, element2, context, "bind-attr", [], { "class": "indexPercentageCss" });
        attribute(env, attrMorph0, element3, "data-hint", concat(env, [get(env, context, "app.lang.labels.perChange")]));
        content(env, morph1, context, "indexChangeSign");
        inline(env, morph2, context, "formatNumberPercentage", [get(env, context, "currentIndex.pctChg")], {});
        element(env, element5, context, "bind-attr", [], { "class": "indexValCss" });
        element(env, element6, context, "bind-attr", [], { "class": "indexArrowCss :v-bottom" });
        element(env, element7, context, "bind-attr", [], { "class": "indexCss" });
        attribute(env, attrMorph1, element8, "data-hint", concat(env, [get(env, context, "app.lang.labels.indexValue")]));
        inline(env, morph3, context, "formatNumber", [get(env, context, "currentIndex.ltp")], {});
        attribute(env, attrMorph2, element9, "data-hint", concat(env, [get(env, context, "app.lang.labels.change")]));
        element(env, element9, context, "bind-attr", [], { "class": "indexBackgroundCss :hint--bottom-left :hint--bounce :hint--rounded :font-s :ms-top-bar-index-change-position-2 :ltr" });
        inline(env, morph4, context, "formatNumber", [get(env, context, "currentIndex.chg")], {});
        attribute(env, attrMorph3, element10, "id", concat(env, ["mainIndexChart-", get(env, context, "id")]));
        element(env, element10, context, "action", ["popUpChartOptionWidget"], {});
        attribute(env, attrMorph4, element11, "id", concat(env, [get(env, context, "chartId")]));
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/top-panel/main-index-chart-3", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "w-full border-b");
        dom.setAttribute(el1, "cellspacing", "0");
        dom.setAttribute(el1, "cellpadding", "0");
        dom.setAttribute(el1, "border", "0");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tr");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("td");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ms-top-bar-chart-1 ltr mgn-m-l");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("td");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ms-top-bar-index-value-1 pad-s-lr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ms-top-bar-index-dropdown-3");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container mgn-s-b ms-top-bar-change");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "ltr pad-s-t");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9, "class", "index-Arrow");
        var el10 = dom.createTextNode("  ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("i");
        var el11 = dom.createTextNode(" ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9, "class", "bold font-x-l hint--bottom-left hint--bounce hint--rounded");
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col pad-s-l");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "ltr pad-s-t");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        var el10 = dom.createElement("span");
        dom.setAttribute(el10, "class", "bold font-x-l pad-s-l hint--bottom-left hint--bounce hint--rounded");
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            inline = hooks.inline,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element0, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element4, [1, 1, 1]);
        var element6 = dom.childAt(element5, [1, 1]);
        var element7 = dom.childAt(element5, [3]);
        var element8 = dom.childAt(element4, [3, 1, 1]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element8, [3]);
        var element11 = dom.childAt(element10, [0]);
        var attrMorph0 = dom.createAttrMorph(element1, 'id');
        var attrMorph1 = dom.createAttrMorph(element2, 'id');
        var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        var morph1 = dom.createMorphAt(element7, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element7, 'data-hint');
        var morph2 = dom.createMorphAt(element9, 1, 1);
        var attrMorph3 = dom.createAttrMorph(element9, 'data-hint');
        var morph3 = dom.createMorphAt(element11, 0, 0);
        var morph4 = dom.createMorphAt(element11, 1, 1);
        var attrMorph4 = dom.createAttrMorph(element11, 'data-hint');
        attribute(env, attrMorph0, element1, "id", concat(env, ["mainIndexChart-", get(env, context, "id")]));
        element(env, element1, context, "action", ["popUpChartOptionWidget"], {});
        attribute(env, attrMorph1, element2, "id", concat(env, [get(env, context, "chartId")]));
        inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "indexCollectionArray"), "valueKey": "dSym", "labelKey": "indexDispProp", "selectedLabelKey": "indexDispProp", "defaultSelect": get(env, context, "defaultIndexForDropdown"), "selectAction": "setIndexData", "buttonClass": "bold ltr dropdown-text-only", "lblClass": "ms-top-bar-index-dropdown-btn", "value": get(env, context, "currentIndex.dSym"), "wkey": get(env, context, "wkey") });
        element(env, element5, context, "bind-attr", [], { "class": "indexValCss" });
        element(env, element6, context, "bind-attr", [], { "class": "indexArrowCss :v-bottom" });
        attribute(env, attrMorph2, element7, "data-hint", concat(env, [get(env, context, "app.lang.labels.indexValue")]));
        inline(env, morph1, context, "formatNumber", [get(env, context, "currentIndex.ltp")], {});
        element(env, element8, context, "bind-attr", [], { "class": "indexCss" });
        attribute(env, attrMorph3, element9, "data-hint", concat(env, [get(env, context, "app.lang.labels.change")]));
        element(env, element9, context, "bind-attr", [], { "class": "indexBackgroundCss :hint--bottom-left :hint--bounce :hint--rounded" });
        inline(env, morph2, context, "formatNumber", [get(env, context, "currentIndex.chg")], {});
        element(env, element10, context, "bind-attr", [], { "class": "indexPercentageCss" });
        attribute(env, attrMorph4, element11, "data-hint", concat(env, [get(env, context, "app.lang.labels.perChange")]));
        content(env, morph3, context, "indexChangeSign");
        inline(env, morph4, context, "formatNumberPercentage", [get(env, context, "currentIndex.pctChg")], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/top-panel/main-index-chart", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ms-top-bar-chart ltr");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "ms-top-bar-index-chart-position mgn-m-l");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [0]);
          var attrMorph0 = dom.createAttrMorph(element0, 'id');
          var attrMorph1 = dom.createAttrMorph(element1, 'id');
          attribute(env, attrMorph0, element0, "id", concat(env, ["mainIndexChart-", get(env, context, "id")]));
          element(env, element0, context, "action", ["popUpChartOptionWidget"], {});
          attribute(env, attrMorph1, element1, "id", concat(env, [get(env, context, "chartId")]));
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ms-top-bar-chart ltr");
          dom.setAttribute(el2, "id", "mainIndexChart");
          dom.setAttribute(el2, "style", "margin-left: 50px;");
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "id", "chart");
          dom.setAttribute(el3, "class", "ms-top-bar-index-chart-position");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "w-full border-b");
        dom.setAttribute(el1, "cellspacing", "0");
        dom.setAttribute(el1, "cellpadding", "0");
        dom.setAttribute(el1, "border", "0");
        dom.setAttribute(el1, "style", "width: 190px");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tr");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("td");
        dom.setAttribute(el3, "class", "full-width pos-rel");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        dom.setAttribute(el4, "class", "full-width");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "mgn-m-l ms-top-bar-index-dropdown pad-s-t");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9, "class", "index-Arrow");
        var el10 = dom.createTextNode("  ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("i");
        var el11 = dom.createTextNode(" ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9, "class", "index-Value v-bottom ellipsis hint--bottom-left hint--bounce hint--rounded");
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tr");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("td");
        dom.setAttribute(el3, "class", "pos-rel");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("table");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("td");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        dom.setAttribute(el9, "class", "pad-s-b");
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("div");
        var el11 = dom.createTextNode(" ");
        dom.appendChild(el10, el11);
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                            ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        dom.setAttribute(el10, "class", "ms-top-bar-index-percentage pad-s-l hint--bottom-left hint--bounce hint--rounded");
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                            ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                        ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            block = hooks.block,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1, 1, 1, 1]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [1, 1]);
        var element7 = dom.childAt(element5, [3]);
        var element8 = dom.childAt(element2, [3, 1, 1, 1]);
        var element9 = dom.childAt(element8, [4, 1]);
        var element10 = dom.childAt(element9, [1]);
        var element11 = dom.childAt(element10, [1, 1]);
        var element12 = dom.childAt(element10, [3]);
        var element13 = dom.childAt(element12, [1]);
        var morph0 = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        var attrMorph0 = dom.createAttrMorph(element4, 'class');
        var morph1 = dom.createMorphAt(element7, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element7, 'data-hint');
        var morph2 = dom.createMorphAt(element8, 1, 1);
        var morph3 = dom.createMorphAt(element8, 2, 2);
        var attrMorph2 = dom.createAttrMorph(element9, 'class');
        var attrMorph3 = dom.createAttrMorph(element9, 'style');
        var morph4 = dom.createMorphAt(element11, 1, 1);
        var attrMorph4 = dom.createAttrMorph(element11, 'data-hint');
        var morph5 = dom.createMorphAt(element13, 0, 0);
        var morph6 = dom.createMorphAt(element13, 1, 1);
        var attrMorph5 = dom.createAttrMorph(element13, 'data-hint');
        inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "indexCollectionArray"), "defaultSelect": get(env, context, "defaultIndexForDropdown"), "valueKey": "dSym", "labelKey": "sDes", "selectedLabelKey": "dSym", "value": get(env, context, "currentIndex.dSym"), "selectAction": "setIndexData", "lblClass": "font-l", "buttonClass": "bold ltr dropdown-text-only", "wkey": get(env, context, "wkey") });
        attribute(env, attrMorph0, element4, "class", concat(env, ["ltr h-right ms-top-bar-index-value pad-s-t ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-s-t", "pad-l-r"], {})]));
        element(env, element5, context, "bind-attr", [], { "class": "indexValCss" });
        element(env, element6, context, "bind-attr", [], { "class": "indexArrowCss :v-bottom" });
        attribute(env, attrMorph1, element7, "data-hint", concat(env, [get(env, context, "app.lang.labels.indexValue")]));
        inline(env, morph1, context, "formatNumber", [get(env, context, "currentIndex.ltp")], {});
        block(env, morph2, context, "unless", [get(env, context, "isTablet")], {}, child0, null);
        block(env, morph3, context, "if", [get(env, context, "isTablet")], {}, child1, null);
        attribute(env, attrMorph2, element9, "class", concat(env, ["ltr h-right ms-top-bar-percentage-position ", subexpr(env, context, "if", [get(env, context, "isTablet"), "", "pad-l-r"], {})]));
        attribute(env, attrMorph3, element9, "style", concat(env, ["padding-top:", subexpr(env, context, "if", [get(env, context, "isTablet"), "5px", "11px"], {})]));
        element(env, element10, context, "bind-attr", [], { "class": "indexCss" });
        attribute(env, attrMorph4, element11, "data-hint", concat(env, [get(env, context, "app.lang.labels.change")]));
        element(env, element11, context, "bind-attr", [], { "class": "indexBackgroundCss :hint--bottom-left :hint--bounce :hint--rounded" });
        inline(env, morph4, context, "formatNumber", [get(env, context, "currentIndex.chg")], {});
        element(env, element12, context, "bind-attr", [], { "class": "indexPercentageCss" });
        attribute(env, attrMorph5, element13, "data-hint", concat(env, [get(env, context, "app.lang.labels.perChange")]));
        content(env, morph5, context, "indexChangeSign");
        inline(env, morph6, context, "formatNumberPercentage", [get(env, context, "currentIndex.pctChg")], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/components/upgrade-subscription", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "full-width pad-l-lr pad-l-tb font-l h-middle white-space-normal wdgttl-header");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          content(env, morph0, context, "app.lang.messages.delayedUserNoData");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "display-table h-middle full-width");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "btn btn-default bold highlight-back-color-1");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          element(env, element0, context, "action", ["upgradeSubscription"], {});
          content(env, morph0, context, "app.lang.labels.upgradeSubscription");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isDelayedUserLogged")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/custom-workspace/classic", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height col-xs-12");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 widget-outlet");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/custom-workspace/custom-layout", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height col-xs-12");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 widget-outlet");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-height full-width y-scroll");
        dom.setAttribute(el3, "id", "custom-workspace-layout");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 1, 1);
        inline(env, morph0, context, "outlet", ["custom-outlet"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/custom-workspace/investor", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-6 full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width col-xs-12 widget-outlet");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-6 full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width col-xs-12 netplus-investor-row-1");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width col-xs-12 netplus-investor-row-2");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        inline(env, morph1, context, "outlet", ["w2"], {});
        inline(env, morph2, context, "outlet", ["w3"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/custom-workspace/layout-selection", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("td");
              var el2 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element0 = dom.childAt(fragment, [1]);
              var attrMorph0 = dom.createAttrMorph(element0, 'style');
              attribute(env, attrMorph0, element0, "style", concat(env, ["height: ", get(env, context, "layoutItem.h"), "; width: ", get(env, context, "layoutItem.w"), "; background-color: rgba(0, 0, 0, 0.56)"]));
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                                                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            block(env, morph0, context, "each", [get(env, context, "layoutItem.c")], { "keyword": "colCount" }, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-inline pad-l-lr pad-l-tb layout-select");
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("\n                                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("table");
          dom.setAttribute(el4, "style", "border-collapse: separate; border-spacing: 5px;");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1, 1]), 1, 1);
          element(env, element1, context, "action", ["selectLayout", get(env, context, "layoutItem")], {});
          block(env, morph0, context, "each", [get(env, context, "layoutItem.r")], { "keyword": "rowCount" }, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height col-xs-12");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 widget-outlet");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget_new full-width full-height");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "widget-container-new");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container full-width");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col v-top text-center pad-l-tb");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment(" TODO [Atheesan]: Render layouts dynamically");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container full-width");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col v-top1 text-center pad-l-tb");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment(" Item 1 ");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-inline pad-l-lr pad-l-tb layout-select");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("a");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("table");
        dom.setAttribute(el10, "style", "border-collapse: separate; border-spacing: 5px;");
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 100px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 100px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "colspan", "2");
        dom.setAttribute(el12, "style", "height: 80px; width: 200px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                    ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment(" Item 2 ");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-inline pad-l-lr pad-l-tb layout-select");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("a");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("table");
        dom.setAttribute(el10, "style", "border-collapse: separate; border-spacing: 5px;");
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 120px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "rowspan", "2");
        dom.setAttribute(el12, "style", "height: 160px; width: 80px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 120px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                    ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment(" Item 3 ");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-inline pad-l-lr pad-l-tb layout-select");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("a");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("table");
        dom.setAttribute(el10, "style", "border-collapse: separate; border-spacing: 5px;");
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "colspan", "2");
        dom.setAttribute(el12, "style", "height: 80px; width: 200px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 100px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 100px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                    ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment(" Item 4 ");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-inline pad-l-lr pad-l-tb layout-select");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("a");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("table");
        dom.setAttribute(el10, "style", "border-collapse: separate; border-spacing: 5px;");
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 67px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 67px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 67px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "colspan", "3");
        dom.setAttribute(el12, "style", "height: 80px; width: 200px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                    ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment(" Item 5 ");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-inline pad-l-lr pad-l-tb layout-select");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("a");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("table");
        dom.setAttribute(el10, "style", "border-collapse: separate; border-spacing: 5px;");
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "rowspan", "2");
        dom.setAttribute(el12, "style", "height: 160px; width: 67px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 67px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "style", "height: 80px; width: 67px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("tr");
        var el12 = dom.createTextNode("\n                                            ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("td");
        dom.setAttribute(el12, "colspan", "2");
        dom.setAttribute(el12, "style", "height: 80px; width: 134px; background-color: rgba(0, 0, 0, 0.56)");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                    ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            block = hooks.block,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0, 1, 1]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element3, [5, 1]);
        var element5 = dom.childAt(element4, [3, 1]);
        var element6 = dom.childAt(element4, [7, 1]);
        var element7 = dom.childAt(element4, [11, 1]);
        var element8 = dom.childAt(element4, [15, 1]);
        var element9 = dom.childAt(element4, [19, 1]);
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.selectLayout"), "hideWidgetLink": true, "hideSymbol": true });
        block(env, morph1, context, "each", [get(env, context, "layoutContent")], { "keyword": "layoutItem" }, child0, null);
        element(env, element5, context, "action", ["selectComplexLayout", get(env, context, "complexLayoutContent1")], {});
        element(env, element6, context, "action", ["selectComplexLayout", get(env, context, "complexLayoutContent2")], {});
        element(env, element7, context, "action", ["selectComplexLayout", get(env, context, "complexLayoutContent3")], {});
        element(env, element8, context, "action", ["selectComplexLayout", get(env, context, "complexLayoutContent4")], {});
        element(env, element9, context, "action", ["selectComplexLayout", get(env, context, "complexLayoutContent5")], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/custom-workspace/standard", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height col-xs-12");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 netplus-standard-row-1");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 netplus-standard-row-2");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-6 widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-6 widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        inline(env, morph1, context, "outlet", ["w2"], {});
        inline(env, morph2, context, "outlet", ["w3"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/custom-workspace/widget-list", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "full-width btn blue-back-color mgn-s-b font-l colour-normal left h-left pad-s-all");
            var el2 = dom.createTextNode("\n                                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "dark-bg-fore-color");
            var el3 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createElement("i");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "pad-m-l");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element22 = dom.childAt(fragment, [1]);
            var element23 = dom.childAt(element22, [1]);
            var element24 = dom.childAt(element23, [1, 0]);
            var attrMorph0 = dom.createAttrMorph(element24, 'class');
            var morph0 = dom.createMorphAt(dom.childAt(element23, [3]), 0, 0);
            element(env, element22, context, "action", ["selectWidget", get(env, context, "listItem")], {});
            attribute(env, attrMorph0, element24, "class", concat(env, [get(env, context, "listItem.icon")]));
            content(env, morph0, context, "listItem.des");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width mgn-m-lr mgn-s-tb pad-s-all");
          var el2 = dom.createTextNode("\n                                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "font-l bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container mgn-l-lr custom-button");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          content(env, morph0, context, "app.lang.labels.quote");
          block(env, morph1, context, "each", [get(env, context, "quoteContent")], { "keyword": "listItem" }, child0, null);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "full-width btn blue-back-color-2 mgn-s-b font-l colour-normal left h-left pad-s-all");
            var el2 = dom.createTextNode("\n                                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "dark-bg-fore-color");
            var el3 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createElement("i");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "pad-m-l");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element19 = dom.childAt(fragment, [1]);
            var element20 = dom.childAt(element19, [1]);
            var element21 = dom.childAt(element20, [1, 0]);
            var attrMorph0 = dom.createAttrMorph(element21, 'class');
            var morph0 = dom.createMorphAt(dom.childAt(element20, [3]), 0, 0);
            element(env, element19, context, "action", ["selectWidget", get(env, context, "listItem")], {});
            attribute(env, attrMorph0, element21, "class", concat(env, [get(env, context, "listItem.icon")]));
            content(env, morph0, context, "listItem.des");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width mgn-m-lr mgn-s-tb pad-s-all");
          var el2 = dom.createTextNode("\n                                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "font-l bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container mgn-l-lr custom-button");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          content(env, morph0, context, "app.lang.labels.companyProf");
          block(env, morph1, context, "each", [get(env, context, "companyContent")], { "keyword": "listItem" }, child0, null);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "full-width btn purple-back-color mgn-s-b font-l colour-normal left h-left pad-s-all");
            var el2 = dom.createTextNode("\n                                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "dark-bg-fore-color");
            var el3 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createElement("i");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "pad-m-l");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element16 = dom.childAt(fragment, [1]);
            var element17 = dom.childAt(element16, [1]);
            var element18 = dom.childAt(element17, [1, 0]);
            var attrMorph0 = dom.createAttrMorph(element18, 'class');
            var morph0 = dom.createMorphAt(dom.childAt(element17, [3]), 0, 0);
            element(env, element16, context, "action", ["selectWidget", get(env, context, "listItem")], {});
            attribute(env, attrMorph0, element18, "class", concat(env, [get(env, context, "listItem.icon")]));
            content(env, morph0, context, "listItem.des");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width mgn-m-lr mgn-s-tb pad-s-all");
          var el2 = dom.createTextNode("\n                                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "font-l bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container mgn-l-lr custom-button");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          content(env, morph0, context, "app.lang.labels.market");
          block(env, morph1, context, "each", [get(env, context, "marketContent")], { "keyword": "listItem" }, child0, null);
          return fragment;
        }
      };
    }();
    var child3 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "full-width btn green-back-color mgn-s-b font-l colour-normal left h-left pad-s-all");
              var el2 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "dark-bg-fore-color");
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createElement("i");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "pad-m-l");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  element = hooks.element,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element13 = dom.childAt(fragment, [1]);
              var element14 = dom.childAt(element13, [1]);
              var element15 = dom.childAt(element14, [1, 0]);
              var attrMorph0 = dom.createAttrMorph(element15, 'class');
              var morph0 = dom.createMorphAt(dom.childAt(element14, [3]), 0, 0);
              element(env, element13, context, "action", ["selectWidget", get(env, context, "listItem")], {});
              attribute(env, attrMorph0, element15, "class", concat(env, [get(env, context, "listItem.icon")]));
              content(env, morph0, context, "listItem.des");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width mgn-m-lr mgn-s-tb pad-s-all");
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "font-l bold");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container mgn-l-lr custom-button");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            content(env, morph0, context, "app.lang.labels.mutualFund");
            block(env, morph1, context, "each", [get(env, context, "mutualFundContent")], { "keyword": "listItem" }, child0, null);
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "full-width btn pink-back-color mgn-s-b font-l colour-normal left h-left pad-s-all");
              var el2 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "dark-bg-fore-color");
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createElement("i");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "pad-m-l");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  element = hooks.element,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element10 = dom.childAt(fragment, [1]);
              var element11 = dom.childAt(element10, [1]);
              var element12 = dom.childAt(element11, [1, 0]);
              var attrMorph0 = dom.createAttrMorph(element12, 'class');
              var morph0 = dom.createMorphAt(dom.childAt(element11, [3]), 0, 0);
              element(env, element10, context, "action", ["selectWidget", get(env, context, "listItem")], {});
              attribute(env, attrMorph0, element12, "class", concat(env, [get(env, context, "listItem.icon")]));
              content(env, morph0, context, "listItem.des");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width mgn-m-lr mgn-s-tb pad-s-all");
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "font-l bold");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container mgn-l-lr custom-button");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            content(env, morph0, context, "app.lang.labels.optionChain");
            block(env, morph1, context, "each", [get(env, context, "optionChainContent")], { "keyword": "listItem" }, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          var morph1 = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [subexpr(env, context, "isWidgetAvailable", [get(env, context, "mutualFundContent")], {})], {}, child0, null);
          block(env, morph1, context, "if", [subexpr(env, context, "isWidgetAvailable", [get(env, context, "optionChainContent")], {})], {}, child1, null);
          return fragment;
        }
      };
    }();
    var child4 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "full-width btn orange-back-color mgn-s-b font-l colour-normal left h-left pad-s-all");
              var el2 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "dark-bg-fore-color");
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createElement("i");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "pad-m-l");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  element = hooks.element,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element6 = dom.childAt(fragment, [1]);
              var element7 = dom.childAt(element6, [1]);
              var element8 = dom.childAt(element7, [1, 0]);
              var attrMorph0 = dom.createAttrMorph(element8, 'class');
              var morph0 = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
              element(env, element6, context, "action", ["selectWidget", get(env, context, "listItem")], {});
              attribute(env, attrMorph0, element8, "class", concat(env, [get(env, context, "listItem.icon")]));
              content(env, morph0, context, "listItem.des");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width mgn-m-lr mgn-s-tb pad-s-all");
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "font-l bold");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container mgn-l-lr custom-button");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            content(env, morph0, context, "app.lang.labels.trading");
            block(env, morph1, context, "each", [get(env, context, "tradeContent")], { "keyword": "listItem" }, child0, null);
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "full-width btn yellow-back-color mgn-s-b font-l colour-normal left h-left pad-s-all");
              var el2 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "dark-bg-fore-color");
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createElement("i");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "pad-m-l");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  element = hooks.element,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element3 = dom.childAt(fragment, [1]);
              var element4 = dom.childAt(element3, [1]);
              var element5 = dom.childAt(element4, [1, 0]);
              var attrMorph0 = dom.createAttrMorph(element5, 'class');
              var morph0 = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
              element(env, element3, context, "action", ["selectWidget", get(env, context, "listItem")], {});
              attribute(env, attrMorph0, element5, "class", concat(env, [get(env, context, "listItem.icon")]));
              content(env, morph0, context, "listItem.des");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width mgn-m-lr mgn-s-tb pad-s-all");
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "font-l bold");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container mgn-l-lr custom-button");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            content(env, morph0, context, "app.lang.labels.transfers");
            block(env, morph1, context, "each", [get(env, context, "transferContent")], { "keyword": "listItem" }, child0, null);
            return fragment;
          }
        };
      }();
      var child2 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "full-width btn btn-info green-back-color-2 mgn-s-b font-l colour-normal left h-left pad-s-all");
              var el2 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "dark-bg-fore-color");
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createElement("i");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "pad-m-l");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  element = hooks.element,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element1, [1, 0]);
              var attrMorph0 = dom.createAttrMorph(element2, 'class');
              var morph0 = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
              element(env, element0, context, "action", ["selectWidget", get(env, context, "listItem")], {});
              attribute(env, attrMorph0, element2, "class", concat(env, [get(env, context, "listItem.icon")]));
              content(env, morph0, context, "listItem.des");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width mgn-m-lr mgn-s-tb pad-s-all");
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "font-l bold");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container mgn-l-lr custom-button");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            content(env, morph0, context, "app.lang.labels.userProfile");
            block(env, morph1, context, "each", [get(env, context, "userProfileContent")], { "keyword": "listItem" }, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-8 v-top");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element9 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element9, 1, 1);
          var morph1 = dom.createMorphAt(element9, 3, 3);
          var morph2 = dom.createMorphAt(element9, 5, 5);
          block(env, morph0, context, "if", [subexpr(env, context, "isWidgetAvailable", [get(env, context, "tradeContent")], {})], {}, child0, null);
          block(env, morph1, context, "if", [subexpr(env, context, "isWidgetAvailable", [get(env, context, "transferContent")], {})], {}, child1, null);
          block(env, morph2, context, "if", [subexpr(env, context, "isWidgetAvailable", [get(env, context, "userProfileContent")], {})], {}, child2, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment(" TODO: [Atheesan] Refactor after loading widget list dynamically ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "message-box-fog");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container full-height full-width v-middle");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "widget_new widget-list widget-list-popup");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "wdgttl font-l cursor-move");
        dom.setAttribute(el6, "id", "custom-widget-list");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-container full-height full-width");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col pad-s-lr");
        var el9 = dom.createTextNode(" ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode(" ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col-24");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col pad-s-lr");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("a");
        var el10 = dom.createElement("i");
        dom.setAttribute(el10, "class", "widget-title-fore-color icon-close-round");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "widget-container-new");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-container full-height full-width");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col pad-s-all");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-container full-height full-width y-scroll");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col-8 v-top");
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col-8 v-top");
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            element = hooks.element,
            get = hooks.get,
            inline = hooks.inline,
            subexpr = hooks.subexpr,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element25 = dom.childAt(fragment, [2, 1, 1, 1, 1]);
        var element26 = dom.childAt(element25, [1, 1]);
        var element27 = dom.childAt(element26, [5, 1]);
        var element28 = dom.childAt(element25, [3]);
        var element29 = dom.childAt(element28, [3]);
        var element30 = dom.childAt(element29, [1]);
        var element31 = dom.childAt(element29, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element26, [1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element28, [1, 1]), 1, 1);
        var morph2 = dom.createMorphAt(element30, 1, 1);
        var morph3 = dom.createMorphAt(element30, 3, 3);
        var morph4 = dom.createMorphAt(element31, 1, 1);
        var morph5 = dom.createMorphAt(element31, 3, 3);
        var morph6 = dom.createMorphAt(element29, 5, 5);
        content(env, morph0, context, "app.lang.labels.selectWidget");
        element(env, element27, context, "action", ["closeWidgetList"], {});
        inline(env, morph1, context, "input", [], { "type": "text", "value": get(env, context, "widgetSearchKey"), "class": "search-query mgn-m-l mgn-s-t", "placeholder": get(env, context, "app.lang.labels.searchWidget") });
        block(env, morph2, context, "if", [subexpr(env, context, "isWidgetAvailable", [get(env, context, "quoteContent")], {})], {}, child0, null);
        block(env, morph3, context, "if", [subexpr(env, context, "isWidgetAvailable", [get(env, context, "companyContent")], {})], {}, child1, null);
        block(env, morph4, context, "if", [subexpr(env, context, "isWidgetAvailable", [get(env, context, "marketContent")], {})], {}, child2, null);
        block(env, morph5, context, "if", [get(env, context, "isTradingEnabled")], {}, child3, null);
        block(env, morph6, context, "if", [get(env, context, "isTradingEnabled")], {}, child4, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/custom-workspace/widget-selection", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-container-new full-width custom-workspace-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container mgn-l-t mgn-l-l btn btn-warning");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col full-width");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-plus font-xx-l");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "font-xx-l");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3, 1]);
        var morph0 = dom.createMorphAt(element0, 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [1, 3]), 0, 0);
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.selectWidget"), "hideWidgetLink": true, "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        element(env, element1, context, "action", ["showWidgetList"], {});
        content(env, morph1, context, "app.lang.labels.addWidget");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/company-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "full-width full-height");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-8 full-height");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "widget-outlet");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-4 full-height");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "widget-outlet company-prof-row-responsive-1");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "widget-outlet company-prof-row-responsive");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "widget-outlet company-prof-row-responsive");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
          var morph2 = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
          var morph3 = dom.createMorphAt(dom.childAt(element3, [5]), 1, 1);
          inline(env, morph0, context, "outlet", ["w2"], {});
          inline(env, morph1, context, "outlet", ["w3"], {});
          inline(env, morph2, context, "outlet", ["w4"], {});
          inline(env, morph3, context, "outlet", ["w5"], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "full-width full-height");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-6 widget-outlet");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-3 widget-outlet");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-3 full-height");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "widget-outlet quote-row-2-with-gap");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "widget-outlet quote-row-3");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [5]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
          var morph2 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          var morph3 = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          inline(env, morph0, context, "outlet", ["w2"], {});
          inline(env, morph1, context, "outlet", ["w3"], {});
          inline(env, morph2, context, "outlet", ["w4"], {});
          inline(env, morph3, context, "outlet", ["w5"], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-12 full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 full-width quote-advanced-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-12 widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "companyProfile");
        dom.setAttribute(el2, "class", "full-width");
        dom.setAttribute(el2, "style", "height: calc(100% - 117px)");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "data-id", "company-profile");
        dom.setAttribute(el3, "class", "full-width full-height");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline,
            get = hooks.get,
            subexpr = hooks.subexpr,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element4 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(dom.childAt(element4, [1, 1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element4, [3, 1]), 1, 1);
        inline(env, morph0, context, "outlet", ["w8"], {});
        block(env, morph1, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "company-profile", 1], {})], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/heatmap-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width widget-outlet");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/market-overview-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width col-xs-12");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-md-4 col-sm-12 col-xs-12 widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-md-5 col-sm-6 col-xs-12 widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-md-3 col-sm-6 col-xs-12 widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width col-xs-12 mkt-ovw-row-2");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
        attribute(env, attrMorph0, element0, "class", concat(env, ["full-width full-height ", get(env, context, "marketRows")]));
        inline(env, morph0, context, "outlet", ["w1"], {});
        inline(env, morph1, context, "outlet", ["w2"], {});
        inline(env, morph2, context, "outlet", ["w3"], {});
        inline(env, morph3, context, "outlet", ["w4"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/market-summary-overview-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width col-xs-12 full-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/market-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/alert-price-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/gms-commodities-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-s-b full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/gms-currencies-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-s-b full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/gms-indices-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-s-b full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/gms-summary-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-s-b full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/gms-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-s-tb page-container page-height-with-navigators");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/heatmap-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "market-status-panel", [], { "isShowSubMarketDropdown": true });
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/market-depth-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "page-container");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element0, 1, 1);
        var morph2 = dom.createMorphAt(element0, 3, 3);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        inline(env, morph2, context, "outlet", ["w2"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/market-indices-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/market-summary-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "page-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col row-height-header mobile-new");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element0, 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        inline(env, morph2, context, "outlet", ["w2"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/market-time-and-sales-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/market-top-stock-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "page-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        var morph3 = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
        var morph4 = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
        var morph5 = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "market-status-panel", [], { "isShowSubMarketDropdown": true });
        inline(env, morph1, context, "outlet", ["w1"], {});
        inline(env, morph2, context, "outlet", ["w2"], {});
        inline(env, morph3, context, "outlet", ["w3"], {});
        inline(env, morph4, context, "outlet", ["w4"], {});
        inline(env, morph5, context, "outlet", ["w5"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/option-chain-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-s-t full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "outlet", ["w2"], {});
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/quote-market-depth-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "mgn-m-b");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          inline(env, morph0, context, "outlet", ["w1"], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "mgn-m-b");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          inline(env, morph0, context, "outlet", ["w2"], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "page-container");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element0, 1, 1);
        var morph2 = dom.createMorphAt(element0, 3, 3);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "outlet", ["w3"], {});
        block(env, morph1, context, "if", [get(env, context, "isDepthByPriceAvailable")], {}, child0, null);
        block(env, morph2, context, "if", [get(env, context, "isDepthByOrderAvailable")], {}, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/quote-summary-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "page-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col row-height-header container-back-color");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element1, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element1, 'class');
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "outlet", ["w3"], {});
        attribute(env, attrMorph0, element1, "class", concat(env, ["pad-widget-left pad-widget-right ", get(env, context, "containerPaddingCss")]));
        inline(env, morph1, context, "outlet", ["w1"], {});
        inline(env, morph2, context, "outlet", ["w2"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/quote-time-and-sales-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-s-t full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "outlet", ["w2"], {});
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/summary-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "page-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element0, 1, 1);
        var morph2 = dom.createMorphAt(element0, 3, 3);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        inline(env, morph2, context, "outlet", ["w2"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/time-and-sales-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "page-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element0, 1, 1);
        var morph2 = dom.createMorphAt(element0, 3, 3);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        inline(env, morph2, context, "outlet", ["w2"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/mobile/watchlist-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/news-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width widget-outlet");
        var el2 = dom.createTextNode("\n     ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget_new full-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n     ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/option-chain-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "option-trade-col-1 full-height display-block left");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("Option Chain");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-12 option-trade-row-1");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-12 widget-outlet");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-12 widget-outlet option-trade-row-2");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-12 option-trade-row-3");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("Detail Quote");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "option-trade-row-2-col-1 full-height display-block left");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-xs-12 widget-outlet");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("Regular Chart");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "option-trade-row-2-col-2 full-height display-block left");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-xs-12 widget-outlet");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("Portrait Order Ticket");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "option-trade-col-2 full-height display-block left");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-12 widget-outlet");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [7]);
        var morph0 = dom.createMorphAt(dom.childAt(element1, [3, 1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element2, [3, 1]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element2, [7, 1]), 1, 1);
        var morph4 = dom.createMorphAt(dom.childAt(element0, [5, 1]), 1, 1);
        inline(env, morph0, context, "outlet", ["w1"], {});
        inline(env, morph1, context, "outlet", ["w5"], {});
        inline(env, morph2, context, "outlet", ["w2"], {});
        inline(env, morph3, context, "outlet", ["w3"], {});
        inline(env, morph4, context, "outlet", ["w4"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/quote-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-12 full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 full-width quote-advanced-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-12 widget-outlet");
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width col-xs-12");
        dom.setAttribute(el2, "style", "height: calc(100% - 117px)");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-9 full-height");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-12");
        dom.setAttribute(el4, "style", "height: 202px");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-12");
        dom.setAttribute(el4, "style", "height: calc(100% - 202px)");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-3 full-height");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var element6 = dom.childAt(element2, [3]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element6, [3]);
        var element9 = dom.childAt(element1, [3, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        var morph1 = dom.createMorphAt(element4, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element4, 'class');
        var morph2 = dom.createMorphAt(element5, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element5, 'class');
        var morph3 = dom.createMorphAt(element7, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element7, 'class');
        var morph4 = dom.createMorphAt(element8, 1, 1);
        var attrMorph3 = dom.createAttrMorph(element8, 'class');
        var morph5 = dom.createMorphAt(element9, 1, 1);
        var attrMorph4 = dom.createAttrMorph(element9, 'class');
        inline(env, morph0, context, "outlet", ["w8"], {});
        attribute(env, attrMorph0, element4, "class", concat(env, ["col-lg-6 col-md-8 col-sm-12 col-xs-12 widget-outlet ", get(env, context, "quoteWidget")]));
        inline(env, morph1, context, "outlet", ["w2"], {});
        attribute(env, attrMorph1, element5, "class", concat(env, ["col-lg-6 col-md-4 col-sm-12 col-xs-12 widget-outlet ", get(env, context, "quoteWidget")]));
        inline(env, morph2, context, "outlet", ["w5"], {});
        attribute(env, attrMorph2, element7, "class", concat(env, ["col-lg-6 col-md-4 col-sm-12 col-xs-12 widget-outlet ", get(env, context, "quoteWidget")]));
        inline(env, morph3, context, "outlet", ["w4"], {});
        attribute(env, attrMorph3, element8, "class", concat(env, ["col-lg-6 col-md-4 col-sm-12 col-xs-12 widget-outlet ", get(env, context, "quoteWidget")]));
        inline(env, morph4, context, "outlet", ["w6"], {});
        attribute(env, attrMorph4, element9, "class", concat(env, ["col-lg-12 col-md-12 col-sm-12 col-xs-12 widget-outlet ", get(env, context, "quoteWidget")]));
        inline(env, morph5, context, "outlet", ["w7"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/sub-market-overview-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "page-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col row-height-header mobile-new");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element0, 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        inline(env, morph2, context, "outlet", ["w2"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/top-panel-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(fragment, 2, 2, contextualElement);
        var morph2 = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "outlet", ["w1"], {});
        inline(env, morph1, context, "outlet", ["w2"], {});
        inline(env, morph2, context, "outlet", ["w3"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/containers/top-stocks-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element0, [3]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element4, [5]);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        var attrMorph1 = dom.createAttrMorph(element1, 'class');
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element2, 'class');
        var morph1 = dom.createMorphAt(element3, 1, 1);
        var attrMorph3 = dom.createAttrMorph(element3, 'class');
        var attrMorph4 = dom.createAttrMorph(element4, 'class');
        var morph2 = dom.createMorphAt(element5, 1, 1);
        var attrMorph5 = dom.createAttrMorph(element5, 'class');
        var morph3 = dom.createMorphAt(element6, 1, 1);
        var attrMorph6 = dom.createAttrMorph(element6, 'class');
        var morph4 = dom.createMorphAt(element7, 1, 1);
        var attrMorph7 = dom.createAttrMorph(element7, 'class');
        attribute(env, attrMorph0, element0, "class", concat(env, ["full-width full-height ", get(env, context, "topStocksRows")]));
        attribute(env, attrMorph1, element1, "class", concat(env, ["full-width col-xs-12 ", get(env, context, "topStockRow")]));
        attribute(env, attrMorph2, element2, "class", concat(env, ["col-xs-12 col-sm-12 col-md-6 widget-outlet ", get(env, context, "topStock")]));
        inline(env, morph0, context, "outlet", ["w1"], {});
        attribute(env, attrMorph3, element3, "class", concat(env, ["col-xs-12 col-sm-12 col-md-6 widget-outlet ", get(env, context, "topStock")]));
        inline(env, morph1, context, "outlet", ["w2"], {});
        attribute(env, attrMorph4, element4, "class", concat(env, ["full-width col-xs-12 ", get(env, context, "topStockRow")]));
        attribute(env, attrMorph5, element5, "class", concat(env, ["col-xs-12 col-sm-12 col-md-4 widget-outlet ", get(env, context, "topStock")]));
        inline(env, morph2, context, "outlet", ["w3"], {});
        attribute(env, attrMorph6, element6, "class", concat(env, ["col-xs-12 col-sm-12 col-md-4 widget-outlet ", get(env, context, "topStock")]));
        inline(env, morph3, context, "outlet", ["w4"], {});
        attribute(env, attrMorph7, element7, "class", concat(env, ["col-xs-12 col-sm-12 col-md-4 widget-outlet ", get(env, context, "topStock")]));
        inline(env, morph4, context, "outlet", ["w5"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/top-panel/cash-maps", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          content(env, morph0, context, "cashInPerValue");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          content(env, morph0, context, "netCashPerValue");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "mgn-m-l ltr ms-top-bar-cash-map-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ms-top-bar-cash-map-content");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "id", "cash_map_chart");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "font-m fade-fore-color");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("%");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ms-top-bar-cash-map-content");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "id", "net_cash_chart");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "font-m fade-fore-color");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("%");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element0, [3]);
        var element4 = dom.childAt(element3, [1]);
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element2, 'class');
        var morph1 = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        var morph2 = dom.createMorphAt(element4, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element4, 'class');
        var morph3 = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
        attribute(env, attrMorph0, element2, "class", concat(env, ["ms-top-bar-align-cash-map ", subexpr(env, context, "if", [get(env, context, "isTablet"), "font-l bold down-fore-color pad-s-t"], {})]));
        block(env, morph0, context, "if", [get(env, context, "isTablet")], {}, child0, null);
        content(env, morph1, context, "app.lang.labels.cashMap");
        attribute(env, attrMorph1, element4, "class", concat(env, ["ms-top-bar-align-cash-map ", subexpr(env, context, "if", [get(env, context, "isTablet"), "font-l bold down-fore-color pad-s-t"], {})]));
        block(env, morph2, context, "if", [get(env, context, "isTablet")], {}, child1, null);
        content(env, morph3, context, "app.lang.labels.netCash");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/top-panel/mobile/announcement-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element1, 0, 0);
            var attrMorph0 = dom.createAttrMorph(element1, 'class');
            attribute(env, attrMorph0, element1, "class", concat(env, ["pad-m-lr ", get(env, context, "newAnn.textCss"), " font-l"]));
            content(env, morph0, context, "newAnn.dSym");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element0, 0, 0);
            var attrMorph0 = dom.createAttrMorph(element0, 'class');
            attribute(env, attrMorph0, element0, "class", concat(env, ["pad-m-lr ", get(env, context, "newAnn.textCss"), " font-l"]));
            content(env, morph0, context, "newAnn.exg");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ans-container full-width dark-bg-announcement-fore-color");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-24 full-width h-left ltr pad-m-r");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              block = hooks.block,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          element(env, element2, context, "action", ["itemClicked", get(env, context, "newAnn.id"), get(env, context, "newAnn.type")], {});
          block(env, morph0, context, "if", [get(env, context, "newAnn.sym")], {}, child0, child1);
          content(env, morph1, context, "newAnn.dHed");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ans-panel");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ans-news-bar full-width info-back-color");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ans-news-animation font-m");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            attribute = hooks.attribute,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element4 = dom.childAt(fragment, [0]);
        var attrMorph0 = dom.createAttrMorph(element4, 'id');
        var morph0 = dom.createMorphAt(dom.childAt(element4, [1, 1]), 1, 1);
        attribute(env, attrMorph0, element4, "id", get(env, context, "wkey"));
        block(env, morph0, context, "each", [get(env, context, "topAnn")], { "keyword": "newAnn" }, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/top-panel/mobile/hnav-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        var child0 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "font-l ellipsis h-middle full-width");
                var el3 = dom.createTextNode("\n                                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    concat = hooks.concat,
                    attribute = hooks.attribute,
                    element = hooks.element,
                    content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element3 = dom.childAt(fragment, [1]);
                var attrMorph0 = dom.createAttrMorph(element3, 'name');
                var attrMorph1 = dom.createAttrMorph(element3, 'class');
                var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
                attribute(env, attrMorph0, element3, "name", concat(env, [get(env, context, "subMenuItem.title")]));
                attribute(env, attrMorph1, element3, "class", concat(env, ["hsub-tab-item btn-ani layout-col bottom-menu-fore-color1  border-bottom ", get(env, context, "subMenuItem.css")]));
                element(env, element3, context, "action", ["renderSubMenuItems", get(env, context, "subMenuItem"), get(env, context, "menuItem.title")], {});
                content(env, morph0, context, "subMenuItem.displayTitle");
                return fragment;
              }
            };
          }();
          var child1 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "font-l ellipsis h-middle full-width");
                var el3 = dom.createTextNode("\n                                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    concat = hooks.concat,
                    attribute = hooks.attribute,
                    element = hooks.element,
                    content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element2 = dom.childAt(fragment, [1]);
                var attrMorph0 = dom.createAttrMorph(element2, 'name');
                var attrMorph1 = dom.createAttrMorph(element2, 'class');
                var morph0 = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
                attribute(env, attrMorph0, element2, "name", concat(env, [get(env, context, "subMenuItem.title"), get(env, context, "subMenuItem.id")]));
                attribute(env, attrMorph1, element2, "class", concat(env, ["hsub-tab-item btn-ani layout-inline bottom-menu-fore-color1  border-bottom ", get(env, context, "subMenuItem.css")]));
                element(env, element2, context, "action", ["renderSubMenuItems", get(env, context, "subMenuItem"), get(env, context, "menuItem.title")], {});
                content(env, morph0, context, "subMenuItem.displayTitle");
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "isFullWidthMenu")], {}, child0, child1);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "unless", [get(env, context, "subMenuItem.expandId")], {}, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element4, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element4, 'name');
          attribute(env, attrMorph0, element4, "name", concat(env, [get(env, context, "menuItem.title")]));
          element(env, element4, context, "bind-attr", [], { "class": ":layout-container :hsub-menu-container :fade-fore-color menuItem.subMenuCss" });
          block(env, morph0, context, "each", [get(env, context, "menuItem.tab")], { "keyword": "subMenuItem" }, child0, null);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "pos-abs top-zero h-middle full-width hnav-cell-padding-top");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "h-middle");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "pos-abs bottom-zero font-m ellipsis h-middle full-width hnav-cell-padding-bottom");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "h-middle pad-s-r");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
          element(env, element0, context, "action", ["renderMenuItems", get(env, context, "menuItem")], {});
          element(env, element0, context, "bind-attr", [], { "class": ":layout-col :hnav-default-width :pos-rel :h-middle :cell-collapse :hnav-outline :hnav-cell-height :bottom-menu-fore-color menuItem.mainMenuCss" });
          element(env, element1, context, "bind-attr", [], { "class": ":hnav-icon-font-size menuItem.icon" });
          content(env, morph0, context, "menuItem.displayMainTitle");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "mgn-s-lr");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "hnav-panel-mobile");
        dom.setAttribute(el1, "class", "layout-container hnav-z-index pos-abs bottom-zero full-width navigation-back-color border-top hnav-panel-height");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        block(env, morph0, context, "each", [get(env, context, "appLayout.layout.mainPanel.content")], { "keyword": "menuItem" }, child0, null);
        block(env, morph1, context, "each", [get(env, context, "appLayout.layout.mainPanel.content")], { "keyword": "menuItem" }, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/top-panel/mobile/price-ticker-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col ticker-item left btn-txt-color pad-s-tb mgn-l-r");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container h-right full-width font-l ltr");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createElement("i");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container h-right full-width font-m ltr");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createTextNode("(");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(")");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute,
                content = hooks.content,
                concat = hooks.concat,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element7 = dom.childAt(fragment, [1]);
            var element8 = dom.childAt(element7, [1]);
            var element9 = dom.childAt(element8, [3, 0]);
            var element10 = dom.childAt(element8, [5]);
            var element11 = dom.childAt(element7, [3]);
            var element12 = dom.childAt(element11, [1]);
            var element13 = dom.childAt(element11, [3]);
            var attrMorph0 = dom.createUnsafeAttrMorph(element7, 'style');
            var morph0 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
            var attrMorph1 = dom.createAttrMorph(element9, 'class');
            var morph1 = dom.createMorphAt(element10, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element10, 'class');
            var morph2 = dom.createMorphAt(element12, 0, 0);
            var attrMorph3 = dom.createAttrMorph(element12, 'class');
            var morph3 = dom.createMorphAt(element13, 1, 1);
            var attrMorph4 = dom.createAttrMorph(element13, 'class');
            attribute(env, attrMorph0, element7, "style", get(env, context, "settings.itemWidthStyle"));
            content(env, morph0, context, "item.des");
            attribute(env, attrMorph1, element9, "class", concat(env, [" pad-s-lr ", get(env, context, "item.iconClass")]));
            attribute(env, attrMorph2, element10, "class", concat(env, ["ltr ", get(env, context, "item.chgCssClass")]));
            inline(env, morph1, context, "formatNumber", [get(env, context, "item.ltp")], {});
            attribute(env, attrMorph3, element12, "class", concat(env, ["pad-s-r ", get(env, context, "item.chgCssClass")]));
            inline(env, morph2, context, "formatNumber", [get(env, context, "item.chg")], {});
            attribute(env, attrMorph4, element13, "class", concat(env, ["ltr ", get(env, context, "item.pctChgCssClass")]));
            inline(env, morph3, context, "formatNumberPercentage", [get(env, context, "item.pctChg")], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "item.des")], {}, child0, null);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col ticker-item left btn-txt-color pad-s-tb mgn-l-r ltr");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container h-right full-width font-l ltr");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createElement("i");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container h-right full-width font-m ltr");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createTextNode("(");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(")");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute,
                content = hooks.content,
                concat = hooks.concat,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element1, [3, 0]);
            var element3 = dom.childAt(element1, [5]);
            var element4 = dom.childAt(element0, [3]);
            var element5 = dom.childAt(element4, [1]);
            var element6 = dom.childAt(element4, [3]);
            var attrMorph0 = dom.createUnsafeAttrMorph(element0, 'style');
            var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
            var attrMorph1 = dom.createAttrMorph(element2, 'class');
            var morph1 = dom.createMorphAt(element3, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element3, 'class');
            var morph2 = dom.createMorphAt(element5, 0, 0);
            var attrMorph3 = dom.createAttrMorph(element5, 'class');
            var morph3 = dom.createMorphAt(element6, 1, 1);
            var attrMorph4 = dom.createAttrMorph(element6, 'class');
            attribute(env, attrMorph0, element0, "style", get(env, context, "settings.itemWidthStyle"));
            content(env, morph0, context, "item.des");
            attribute(env, attrMorph1, element2, "class", concat(env, ["pad-s-lr ", get(env, context, "item.iconClass")]));
            attribute(env, attrMorph2, element3, "class", concat(env, ["ltr ", get(env, context, "item.chgCssClass")]));
            inline(env, morph1, context, "formatNumber", [get(env, context, "item.ltp")], {});
            attribute(env, attrMorph3, element5, "class", concat(env, ["pad-s-r ", get(env, context, "item.chgCssClass")]));
            inline(env, morph2, context, "formatNumber", [get(env, context, "item.chg")], {});
            attribute(env, attrMorph4, element6, "class", concat(env, ["ltr ", get(env, context, "item.pctChgCssClass")]));
            inline(env, morph3, context, "formatNumberPercentage", [get(env, context, "item.pctChg")], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "item.des")], {}, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "tickerDiv");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "tickerTwo");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "tickerOne");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element14 = dom.childAt(fragment, [0]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element14, [3]);
        var morph0 = dom.createMorphAt(element15, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element15, 'class');
        var attrMorph1 = dom.createUnsafeAttrMorph(element15, 'style');
        var morph1 = dom.createMorphAt(element16, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element16, 'class');
        var attrMorph3 = dom.createUnsafeAttrMorph(element16, 'style');
        attribute(env, attrMorph0, element15, "class", concat(env, ["ticker ", subexpr(env, context, "if", [get(env, context, "isHorizontalTickerAnimation"), "tickerTwo-horizontal ticker-animation-horizontal", "ticker-animation tickerTwo"], {}), " transform ", subexpr(env, context, "if", [get(env, context, "isTickerRunning"), "anim-play", "anim-paused"], {})]));
        attribute(env, attrMorph1, element15, "style", get(env, context, "settings.tickerDelay"));
        block(env, morph0, context, "each", [get(env, context, "tickerTwoItems")], { "keyword": "item" }, child0, null);
        attribute(env, attrMorph2, element16, "class", concat(env, ["ticker ", subexpr(env, context, "if", [get(env, context, "isHorizontalTickerAnimation"), "ticker-animation-horizontal", "ticker-animation"], {}), "  transform ", subexpr(env, context, "if", [get(env, context, "isTickerRunning"), "anim-play", "anim-paused"], {})]));
        attribute(env, attrMorph3, element16, "style", get(env, context, "settings.tickerSpeed"));
        block(env, morph1, context, "each", [get(env, context, "tickerOneItems")], { "keyword": "item" }, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/top-panel/mobile/title-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-m-l");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "icon-chevron-left font-6x-l btn-txt-color");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          element(env, element2, context, "action", ["toggleDisplay"], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "icon-chevron-right font-6x-l btn-txt-color");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "icon-chevron-left font-6x-l btn-txt-color");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-3");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "layout-inline pad-s-l pad-s-tb cursor-pointer");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
            element(env, element1, context, "action", ["widgetBackAction"], {});
            block(env, morph0, context, "if", [get(env, context, "isArabic")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-3");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            dom.setAttribute(el2, "class", "navbar-toggle margin-zero");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "icon-bar");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "icon-bar");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "icon-bar");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            element(env, element0, context, "action", ["toggleMainMenuView"], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isBackEnable")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "global-search-mobile", [], { "enableContentSettings": false, "searchKey": get(env, context, "searchKey"), "defaultLink": get(env, context, "defaultLink"), "showWidgetButtons": true, "clickAction": "onSearchSymbolSelected", "closePopup": "closeSearchPopup", "openPopup": "showSearchPopup", "analyticsKey": get(env, context, "gaKey") });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "nav-mid");
        dom.setAttribute(el1, "class", "layout-container full-width navbar-inverse  search-panel-state-zero pos-abs appttl-mobile");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "titlePanelSearchArea");
        dom.setAttribute(el2, "class", "layout-col-21");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "class", "navbar-brand full-width padding-zero");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "pos-abs top-zero btn-txt-color search-icon");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-search");
        dom.setAttribute(el6, "aria-hidden", "true");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-inline pos-abs top-zero cancel-btn");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "glyphicon icon-close-round");
        dom.setAttribute(el6, "aria-hidden", "true");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("<span class=\"cancel-btn v-middle pad-s-lr\"  >Cancel</span>");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-height full-width");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-20");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-container full-width");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col input-group h-left pad-s-t");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "title-logo");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "data-id", "gain-loss-free");
        dom.setAttribute(el7, "class", "layout-col-24");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-4 h-middle");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "pad-l-lr pad-m-tb btn-txt-color");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "glyphicon glyphicon-search");
        dom.setAttribute(el7, "aria-hidden", "true");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "search-popup-mobile");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            element = hooks.element,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [5]);
        var element7 = dom.childAt(element4, [5]);
        var element8 = dom.childAt(element7, [3, 0]);
        var morph0 = dom.createMorphAt(element3, 1, 1);
        var morph1 = dom.createMorphAt(element5, 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element7, [1, 1, 5]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element3, [5]), 1, 1);
        block(env, morph0, context, "if", [get(env, context, "isSearchEnable")], {}, child0, child1);
        element(env, element5, context, "bind-attr", [], { "class": "inputContainerCss :layout-inline :search-box-height :search-box-panel :transform :padding-zero" });
        inline(env, morph1, context, "input", [], { "id": "titlePanelSeach", "class": "pos-rel search-bar mgn-s-l search-bar-outline mgn-xs-t pad-xs-b bold symbol-fore-color", "type": "text", "value": get(env, context, "searchKey"), "action": "showSearchPopup" });
        element(env, element6, context, "action", ["toggleDisplay"], {});
        inline(env, morph2, context, "outlet", ["titlePanelGLOutlet"], {});
        element(env, element8, context, "action", ["toggleDisplay"], {});
        block(env, morph3, context, "modal-popup", [], { "isEnabled": false, "id": "topBarSymbolSearch", "isOverlayEnabled": true, "isContainerAvailable": true, "containerAction": "toggleDisplay" }, child2, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/top-panel/price-ticker", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ticker-shadow");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "item left");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "layout-inline symbol-fore-color bold font-l");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element,
              content = hooks.content,
              concat = hooks.concat;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [3]);
          var element5 = dom.childAt(element3, [5]);
          var attrMorph0 = dom.createUnsafeAttrMorph(element3, 'style');
          var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
          var attrMorph1 = dom.createAttrMorph(element4, 'class');
          var morph1 = dom.createMorphAt(element5, 1, 1);
          var attrMorph2 = dom.createAttrMorph(element5, 'class');
          attribute(env, attrMorph0, element3, "style", get(env, context, "settings.itemWidthStyle"));
          element(env, element3, context, "action", ["openPopup", get(env, context, "item")], {});
          content(env, morph0, context, "item.des");
          attribute(env, attrMorph1, element4, "class", concat(env, ["layout-inline pad-xs-b ", get(env, context, "item.iconClass")]));
          attribute(env, attrMorph2, element5, "class", concat(env, ["layout-inline fore-color bold ltr ", get(env, context, "item.chgCssClass")]));
          content(env, morph1, context, "item.chg");
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "item left");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "layout-inline symbol-fore-color bold font-l");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element,
              content = hooks.content,
              concat = hooks.concat;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element0, [5]);
          var attrMorph0 = dom.createUnsafeAttrMorph(element0, 'style');
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          var attrMorph1 = dom.createAttrMorph(element1, 'class');
          var morph1 = dom.createMorphAt(element2, 1, 1);
          var attrMorph2 = dom.createAttrMorph(element2, 'class');
          attribute(env, attrMorph0, element0, "style", get(env, context, "settings.itemWidthStyle"));
          element(env, element0, context, "action", ["openPopup", get(env, context, "item")], {});
          content(env, morph0, context, "item.des");
          attribute(env, attrMorph1, element1, "class", concat(env, ["layout-inline pad-xs-b ", get(env, context, "item.iconClass")]));
          attribute(env, attrMorph2, element2, "class", concat(env, ["layout-inline fore-color bold ltr ", get(env, context, "item.chgCssClass")]));
          content(env, morph1, context, "item.chg");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "tickerDiv");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "tickerTwo");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "tickerOne");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element6 = dom.childAt(fragment, [2]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element6, [3]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element7, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element7, 'class');
        var attrMorph1 = dom.createUnsafeAttrMorph(element7, 'style');
        var morph2 = dom.createMorphAt(element8, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element8, 'class');
        var attrMorph3 = dom.createUnsafeAttrMorph(element8, 'style');
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "unless", [get(env, context, "isTablet")], {}, child0, null);
        attribute(env, attrMorph0, element7, "class", concat(env, ["ticker ", subexpr(env, context, "if", [get(env, context, "isHorizontalTickerAnimation"), "tickerTwo-horizontal ticker-animation-horizontal", "ticker-animation tickerTwo"], {}), " transform ", subexpr(env, context, "if", [get(env, context, "isTickerRunning"), "anim-play", "anim-paused"], {})]));
        attribute(env, attrMorph1, element7, "style", get(env, context, "settings.tickerDelay"));
        block(env, morph1, context, "each", [get(env, context, "tickerOneItems")], { "keyword": "item" }, child1, null);
        attribute(env, attrMorph2, element8, "class", concat(env, ["ticker ", subexpr(env, context, "if", [get(env, context, "isHorizontalTickerAnimation"), "ticker-animation-horizontal", "ticker-animation"], {}), "  transform ", subexpr(env, context, "if", [get(env, context, "isTickerRunning"), "anim-play", "anim-paused"], {})]));
        attribute(env, attrMorph3, element8, "style", get(env, context, "settings.tickerSpeed"));
        block(env, morph2, context, "each", [get(env, context, "tickerTwoItems")], { "keyword": "item" }, child2, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/top-panel/top-panel-2", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "theme-logo-properties pos-rel ms-top-bar-logo-top");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                       ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                       ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          inline(env, morph0, context, "price-ticker", [], { "dataStatus": get(env, context, "dataStatus"), "exchange": get(env, context, "exchange"), "id": "price-top-panel-price-ticker" });
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                   ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-dropdown btn-default bold ltr");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "id", "appDropdown");
          dom.setAttribute(el1, "data-toggle", "dropdown");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          content(env, morph0, context, "exchange.de");
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                   ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "exchanges"), "valueKey": "code", "labelKey": "desc", "selectedLabelKey": "de", "defaultSelect": get(env, context, "selectedExg"), "selectAction": "setExchange", "buttonClass": "bold", "wkey": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    var child4 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                                       ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "data-id", "topPanel-volume");
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m fade-fore-color toppanel-back pad-s-b ms-top-bar-row-gap");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m fade-fore-color toppanel-back pad-s-b");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                       ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element6 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element6, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
          attribute(env, attrMorph0, element6, "class", concat(env, ["layout-col ", subexpr(env, context, "if", [get(env, context, "isTablet"), "", "pad-l-r"], {})]));
          content(env, morph0, context, "app.lang.labels.volume");
          content(env, morph1, context, "app.lang.labels.turnover");
          return fragment;
        }
      };
    }();
    var child5 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                                       ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "data-id", "topPanel-volume");
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m fade-fore-color toppanel-back pad-s-b ms-top-bar-row-gap");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m fade-fore-color toppanel-back pad-s-b");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                       ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element5 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element5, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
          attribute(env, attrMorph0, element5, "class", concat(env, ["layout-col ", subexpr(env, context, "if", [get(env, context, "isTablet"), "", "pad-l-r"], {})]));
          content(env, morph0, context, "app.lang.labels.volume");
          content(env, morph1, context, "app.lang.labels.turnover");
          return fragment;
        }
      };
    }();
    var child6 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                                       ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "data-id", "topPanel-turnover");
          dom.setAttribute(el1, "class", "layout-col pad-l-r");
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m bold fore-color pad-s-b ms-top-bar-row-gap");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m bold fore-color  pad-s-b");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                       ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
          inline(env, morph0, context, "divideNumber", [get(env, context, "exchange.vol"), 1], {});
          inline(env, morph1, context, "divideNumber", [get(env, context, "exchange.tovr"), 1], {});
          return fragment;
        }
      };
    }();
    var child7 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                                       ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "data-id", "topPanel-turnover");
          dom.setAttribute(el1, "class", "layout-col pad-l-r");
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m bold fore-color pad-s-b ms-top-bar-row-gap");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m bold fore-color pad-s-b");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                       ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          inline(env, morph0, context, "formatNumber", [get(env, context, "exchange.vol"), 0], {});
          inline(env, morph1, context, "formatNumber", [get(env, context, "exchange.tovr"), 0], {});
          return fragment;
        }
      };
    }();
    var child8 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                                       ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("Hide element");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child9 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                                       ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "data-id", "topPanel-ytd");
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m bold fore-color pad-s-b ms-top-bar-row-gap");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m bold up-fore-color pad-s-b ltr");
          var el3 = dom.createTextNode("\n                                                                                               ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                                                                           ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                                                       ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [3, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element2, 0, 0);
          inline(env, morph0, context, "formatNumber", [get(env, context, "exchange.trades"), 0], {});
          element(env, element2, context, "bind-attr", [], { "class": "ytdCss" });
          inline(env, morph1, context, "formatNumberPercentage", [get(env, context, "index.pctYtd")], {});
          return fragment;
        }
      };
    }();
    var child10 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                                                       ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("Hide element");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child11 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                                                                           ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "data-id", "topPanel-symbol");
            dom.setAttribute(el1, "class", "layout-col mgn-l-r pad-l-r");
            var el2 = dom.createTextNode("\n                                                                                               ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "font-m h-left fade-fore-color pad-s-b ms-top-bar-row-gap");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                                                                               ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "font-m h-left fade-fore-color pad-s-b");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                                                                           ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            content(env, morph0, context, "app.lang.labels.symTraded");
            content(env, morph1, context, "app.lang.labels.unchanged");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "unless", [get(env, context, "isTablet")], {}, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "class", "w-full full-width border-b");
        dom.setAttribute(el2, "cellspacing", "0");
        dom.setAttribute(el2, "cellpadding", "0");
        dom.setAttribute(el2, "border", "0");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ms-top-bar-vertical-separator ms-top-bar-vline-long-2");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("\n               ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("table");
        dom.setAttribute(el5, "width", "100%");
        dom.setAttribute(el5, "border", "0");
        dom.setAttribute(el5, "cellspacing", "0");
        dom.setAttribute(el5, "cellpadding", "0");
        var el6 = dom.createTextNode("\n                   ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                       ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("td");
        dom.setAttribute(el7, "class", "ms-top-bar-ticker-area-2");
        var el8 = dom.createTextNode("\n                           ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "ms-top-bar-ticker-area full-width");
        var el9 = dom.createTextNode("\n                               ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("table");
        dom.setAttribute(el9, "width", "100%");
        dom.setAttribute(el9, "border", "0");
        dom.setAttribute(el9, "cellspacing", "0");
        dom.setAttribute(el9, "cellpadding", "0");
        var el10 = dom.createTextNode("\n");
        dom.appendChild(el9, el10);
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("                               ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                           ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                       ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                   ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                   ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tr");
        var el7 = dom.createTextNode("\n                       ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "ms-top-bar-market-row");
        var el8 = dom.createTextNode("\n                           ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("table");
        dom.setAttribute(el8, "class", "w-full full-width border-b");
        dom.setAttribute(el8, "cellspacing", "0");
        dom.setAttribute(el8, "cellpadding", "0");
        dom.setAttribute(el8, "border", "0");
        var el9 = dom.createTextNode("\n                               ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("tr");
        var el10 = dom.createTextNode("\n                                   ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("td");
        dom.setAttribute(el10, "class", "pad-l-lr");
        var el11 = dom.createTextNode("\n                                       ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("div");
        var el12 = dom.createTextNode("\n                                           ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("table");
        dom.setAttribute(el12, "width", "100%");
        dom.setAttribute(el12, "border", "0");
        dom.setAttribute(el12, "cellspacing", "0");
        dom.setAttribute(el12, "cellpadding", "0");
        var el13 = dom.createTextNode("\n                                               ");
        dom.appendChild(el12, el13);
        var el13 = dom.createElement("tr");
        dom.setAttribute(el13, "class", "full-width");
        var el14 = dom.createTextNode("\n                                                   ");
        dom.appendChild(el13, el14);
        var el14 = dom.createElement("td");
        dom.setAttribute(el14, "class", "pad-l-r");
        var el15 = dom.createTextNode("\n                                                       ");
        dom.appendChild(el14, el15);
        var el15 = dom.createElement("div");
        var el16 = dom.createTextNode("\n                                                           ");
        dom.appendChild(el15, el16);
        var el16 = dom.createElement("div");
        dom.setAttribute(el16, "class", "ms-top-bar-market-data-area pos-rel");
        var el17 = dom.createTextNode("\n");
        dom.appendChild(el16, el17);
        var el17 = dom.createComment("");
        dom.appendChild(el16, el17);
        var el17 = dom.createTextNode("                                                           ");
        dom.appendChild(el16, el17);
        dom.appendChild(el15, el16);
        var el16 = dom.createTextNode("\n                                                       ");
        dom.appendChild(el15, el16);
        dom.appendChild(el14, el15);
        var el15 = dom.createTextNode("\n                                                   ");
        dom.appendChild(el14, el15);
        dom.appendChild(el13, el14);
        var el14 = dom.createTextNode("\n                                                   ");
        dom.appendChild(el13, el14);
        var el14 = dom.createElement("td");
        var el15 = dom.createComment("");
        dom.appendChild(el14, el15);
        dom.appendChild(el13, el14);
        var el14 = dom.createTextNode("\n                                               ");
        dom.appendChild(el13, el14);
        dom.appendChild(el12, el13);
        var el13 = dom.createTextNode("\n                                           ");
        dom.appendChild(el12, el13);
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                       ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                   ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                   ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("td");
        var el11 = dom.createTextNode("\n                                       ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("div");
        dom.setAttribute(el11, "class", "ms-top-bar-border ms-top-bar-vline-short-2");
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                   ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n\n                                   ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("td");
        dom.setAttribute(el10, "class", "pos-rel");
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n\n                                   ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("td");
        var el11 = dom.createTextNode("\n                                       ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("div");
        dom.setAttribute(el11, "class", "ms-top-bar-border ms-top-bar-vline-short-2");
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                   ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                   ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("td");
        dom.setAttribute(el10, "class", "full-width");
        var el11 = dom.createTextNode("\n                                       ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("div");
        dom.setAttribute(el11, "class", "ms-top-bar-ticker-area full-width");
        var el12 = dom.createTextNode("\n                                           ");
        dom.appendChild(el11, el12);
        var el12 = dom.createElement("table");
        dom.setAttribute(el12, "width", "100%");
        dom.setAttribute(el12, "border", "0");
        dom.setAttribute(el12, "cellspacing", "0");
        dom.setAttribute(el12, "cellpadding", "0");
        var el13 = dom.createTextNode("\n                                               ");
        dom.appendChild(el12, el13);
        var el13 = dom.createElement("tr");
        var el14 = dom.createTextNode("\n                                                   ");
        dom.appendChild(el13, el14);
        var el14 = dom.createElement("td");
        var el15 = dom.createTextNode("\n                                                       ");
        dom.appendChild(el14, el15);
        var el15 = dom.createElement("div");
        dom.setAttribute(el15, "class", "left full-width");
        var el16 = dom.createTextNode("\n                                                           ");
        dom.appendChild(el15, el16);
        var el16 = dom.createElement("table");
        dom.setAttribute(el16, "width", "100%");
        dom.setAttribute(el16, "border", "0");
        dom.setAttribute(el16, "cellpadding", "0");
        dom.setAttribute(el16, "cellspacing", "0");
        dom.setAttribute(el16, "class", "ms-top-bar-nav-horizontal-list mgn-s-t");
        var el17 = dom.createTextNode("\n                                                               ");
        dom.appendChild(el16, el17);
        var el17 = dom.createElement("tr");
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        var el19 = dom.createTextNode("\n                                                                       ");
        dom.appendChild(el18, el19);
        var el19 = dom.createElement("div");
        dom.setAttribute(el19, "class", "layout-row");
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "data-id", "topPanel-left");
        dom.setAttribute(el20, "class", "layout-col-12");
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "data-id", "topPanel-left");
        dom.setAttribute(el20, "class", "layout-col mgn-s-t mgn-s-lr pos-rel");
        var el21 = dom.createTextNode("\n                                                                               ");
        dom.appendChild(el20, el21);
        var el21 = dom.createElement("div");
        dom.setAttribute(el21, "class", "layout-row");
        var el22 = dom.createTextNode("\n");
        dom.appendChild(el21, el22);
        var el22 = dom.createComment("");
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("\n");
        dom.appendChild(el21, el22);
        var el22 = dom.createComment("");
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el21, el22);
        var el22 = dom.createElement("div");
        dom.setAttribute(el22, "class", "layout-col ms-top-bar-padding-x-large-left pad-l-r");
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m fade-fore-color toppanel-back pad-s-b ms-top-bar-row-gap");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m fade-fore-color toppanel-back pad-s-b");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el22, el23);
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("\n\n");
        dom.appendChild(el21, el22);
        var el22 = dom.createComment("");
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("                                                                               ");
        dom.appendChild(el21, el22);
        dom.appendChild(el20, el21);
        var el21 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el20, el21);
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "class", "layout-col-12");
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                       ");
        dom.appendChild(el19, el20);
        dom.appendChild(el18, el19);
        var el19 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el18, el19);
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.setAttribute(el18, "class", "ms-top-bar-border");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        var el19 = dom.createTextNode("\n                                                                       ");
        dom.appendChild(el18, el19);
        var el19 = dom.createElement("div");
        dom.setAttribute(el19, "class", "layout-row");
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "class", "layout-col-12");
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "class", "layout-col  mgn-s-t mgn-s-l mgn-s-r pos-rel display-table");
        var el21 = dom.createTextNode("\n                                                                               ");
        dom.appendChild(el20, el21);
        var el21 = dom.createElement("div");
        dom.setAttribute(el21, "class", "layout-row");
        var el22 = dom.createTextNode("\n");
        dom.appendChild(el21, el22);
        var el22 = dom.createComment("");
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("                                                                                   ");
        dom.appendChild(el21, el22);
        var el22 = dom.createElement("div");
        dom.setAttribute(el22, "data-id", "topPanel-unchanged");
        dom.setAttribute(el22, "class", "layout-col pad-l-r");
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m bold h-left fore-color pad-s-b ms-top-bar-row-gap");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m bold h-left highlight-fore-color pad-s-b");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el22, el23);
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el21, el22);
        var el22 = dom.createElement("div");
        dom.setAttribute(el22, "data-id", "topPanel-ups");
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m h-left fade-fore-color pad-s-b ms-top-bar-row-gap");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m h-left fade-fore-color pad-s-b");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el22, el23);
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el21, el22);
        var el22 = dom.createElement("div");
        dom.setAttribute(el22, "data-id", "topPanel-down");
        dom.setAttribute(el22, "class", "layout-col");
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m bold h-left up-fore-color pad-s-b ms-top-bar-row-gap");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m bold h-left down-fore-color pad-s-b");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el22, el23);
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("\n                                                                               ");
        dom.appendChild(el21, el22);
        dom.appendChild(el20, el21);
        var el21 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el20, el21);
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "class", "layout-col-12");
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                       ");
        dom.appendChild(el19, el20);
        dom.appendChild(el18, el19);
        var el19 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el18, el19);
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.setAttribute(el18, "class", "ms-top-bar-border");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        var el19 = dom.createTextNode("\n                                                                       ");
        dom.appendChild(el18, el19);
        var el19 = dom.createElement("div");
        dom.setAttribute(el19, "class", "layout-row");
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "class", "layout-col-12");
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "class", "layout-col  mgn-s-t mgn-s-l mgn-s-r display-table pos-rel");
        var el21 = dom.createTextNode("\n                                                                               ");
        dom.appendChild(el20, el21);
        var el21 = dom.createElement("div");
        dom.setAttribute(el21, "class", "layout-row");
        var el22 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el21, el22);
        var el22 = dom.createElement("div");
        dom.setAttribute(el22, "data-id", "topPanel-ups");
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m h-left fade-fore-color pad-s-b ms-top-bar-row-gap");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        var el24 = dom.createTextNode("%");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        dom.setAttribute(el23, "class", "font-m h-left fade-fore-color pad-s-b");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        var el24 = dom.createTextNode("%");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el22, el23);
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el21, el22);
        var el22 = dom.createElement("div");
        dom.setAttribute(el22, "data-id", "topPanel-down");
        dom.setAttribute(el22, "class", "layout-col");
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                       ");
        dom.appendChild(el22, el23);
        var el23 = dom.createElement("div");
        var el24 = dom.createComment("");
        dom.appendChild(el23, el24);
        dom.appendChild(el22, el23);
        var el23 = dom.createTextNode("\n                                                                                   ");
        dom.appendChild(el22, el23);
        dom.appendChild(el21, el22);
        var el22 = dom.createTextNode("\n                                                                               ");
        dom.appendChild(el21, el22);
        dom.appendChild(el20, el21);
        var el21 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el20, el21);
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                           ");
        dom.appendChild(el19, el20);
        var el20 = dom.createElement("div");
        dom.setAttribute(el20, "class", "layout-col-12");
        dom.appendChild(el19, el20);
        var el20 = dom.createTextNode("\n                                                                       ");
        dom.appendChild(el19, el20);
        dom.appendChild(el18, el19);
        var el19 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el18, el19);
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                                   ");
        dom.appendChild(el17, el18);
        var el18 = dom.createElement("td");
        dom.appendChild(el17, el18);
        var el18 = dom.createTextNode("\n                                                               ");
        dom.appendChild(el17, el18);
        dom.appendChild(el16, el17);
        var el17 = dom.createTextNode("\n                                                           ");
        dom.appendChild(el16, el17);
        dom.appendChild(el15, el16);
        var el16 = dom.createTextNode("\n                                                       ");
        dom.appendChild(el15, el16);
        dom.appendChild(el14, el15);
        var el15 = dom.createTextNode("\n                                                   ");
        dom.appendChild(el14, el15);
        dom.appendChild(el13, el14);
        var el14 = dom.createTextNode("\n                                               ");
        dom.appendChild(el13, el14);
        dom.appendChild(el12, el13);
        var el13 = dom.createTextNode("\n                                           ");
        dom.appendChild(el12, el13);
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("\n                                       ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                   ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                               ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                           ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                       ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                   ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n               ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("/.nav-collapse ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "clr-both");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block,
            subexpr = hooks.subexpr,
            inline = hooks.inline,
            content = hooks.content,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [1, 1]);
        var element9 = dom.childAt(element8, [5, 1]);
        var element10 = dom.childAt(element9, [3, 1, 1, 1]);
        var element11 = dom.childAt(element10, [1, 1]);
        var element12 = dom.childAt(element11, [1, 1]);
        var element13 = dom.childAt(element12, [1, 1]);
        var element14 = dom.childAt(element10, [9, 1, 1, 1, 1, 1, 1, 1]);
        var element15 = dom.childAt(element14, [3, 1, 3, 1]);
        var element16 = dom.childAt(element15, [5]);
        var element17 = dom.childAt(element14, [13, 1, 3, 1]);
        var element18 = dom.childAt(element17, [3]);
        var element19 = dom.childAt(element17, [5]);
        var element20 = dom.childAt(element17, [7]);
        var element21 = dom.childAt(element14, [21, 1, 3, 1]);
        var element22 = dom.childAt(element21, [1]);
        var element23 = dom.childAt(element21, [3]);
        var element24 = dom.childAt(element23, [1]);
        var element25 = dom.childAt(element23, [3]);
        var attrMorph0 = dom.createAttrMorph(element7, 'id');
        var morph0 = dom.createMorphAt(element8, 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element9, [1, 1, 1, 1]), 1, 1);
        var attrMorph1 = dom.createAttrMorph(element11, 'class');
        var attrMorph2 = dom.createAttrMorph(element13, 'class');
        var morph2 = dom.createMorphAt(dom.childAt(element13, [1]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element12, [3]), 0, 0);
        var morph4 = dom.createMorphAt(dom.childAt(element10, [5]), 0, 0);
        var morph5 = dom.createMorphAt(element15, 1, 1);
        var morph6 = dom.createMorphAt(element15, 3, 3);
        var morph7 = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        var morph8 = dom.createMorphAt(dom.childAt(element16, [3]), 0, 0);
        var morph9 = dom.createMorphAt(element15, 7, 7);
        var morph10 = dom.createMorphAt(element17, 1, 1);
        var morph11 = dom.createMorphAt(dom.childAt(element18, [1]), 0, 0);
        var morph12 = dom.createMorphAt(dom.childAt(element18, [3]), 0, 0);
        var attrMorph3 = dom.createAttrMorph(element19, 'class');
        var morph13 = dom.createMorphAt(dom.childAt(element19, [1]), 0, 0);
        var morph14 = dom.createMorphAt(dom.childAt(element19, [3]), 0, 0);
        var morph15 = dom.createMorphAt(dom.childAt(element20, [1]), 0, 0);
        var morph16 = dom.createMorphAt(dom.childAt(element20, [3]), 0, 0);
        var attrMorph4 = dom.createAttrMorph(element22, 'class');
        var morph17 = dom.createMorphAt(dom.childAt(element22, [1]), 0, 0);
        var morph18 = dom.createMorphAt(dom.childAt(element22, [3]), 0, 0);
        var morph19 = dom.createMorphAt(element24, 0, 0);
        var morph20 = dom.createMorphAt(element25, 0, 0);
        attribute(env, attrMorph0, element7, "id", concat(env, ["topPanel-", get(env, context, "wkey")]));
        block(env, morph0, context, "unless", [get(env, context, "isTablet")], {}, child0, null);
        block(env, morph1, context, "unless", [get(env, context, "isTablet")], {}, child1, null);
        attribute(env, attrMorph1, element11, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "layout-container toppanel-height ms-top-bar-exchange-width", "ms-top-bar-exchange-2 pos-rel"], {})]));
        attribute(env, attrMorph2, element13, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "layout-col pad-m-l pad-s-t v-top"], {})]));
        block(env, morph2, context, "if", [get(env, context, "disableMoreMarkets")], {}, child2, child3);
        inline(env, morph3, context, "component", [get(env, context, "exgStatusArea")], { "dataStatus": get(env, context, "dataStatus"), "exchange": get(env, context, "exchange"), "exchanges": get(env, context, "exchanges"), "id": "price-top-panel-exchange-status-2", "onExchangeChanged": "setExchange", "app": get(env, context, "app"), "disableMoreMarkets": get(env, context, "disableMoreMarkets"), "selectedExg": get(env, context, "selectedExg") });
        inline(env, morph4, context, "main-index-chart-2", [], { "dataStatus": get(env, context, "dataStatus"), "exchange": get(env, context, "exchange"), "id": "price-top-panel-main-index-chart-2", "app": get(env, context, "app") });
        block(env, morph5, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "topPanel-left", 4], {})], {}, child4, child5);
        block(env, morph6, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "topPanel-left", 5], {})], {}, child6, child7);
        content(env, morph7, context, "app.lang.labels.trades");
        content(env, morph8, context, "app.lang.labels.ytd");
        block(env, morph9, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "topPanel-left", 2], {})], {}, child8, child9);
        block(env, morph10, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "topPanel-left", 6], {})], {}, child10, child11);
        inline(env, morph11, context, "formatNumber", [get(env, context, "exchange.symt"), 0], {});
        inline(env, morph12, context, "formatNumber", [get(env, context, "exchange.nChg"), 0], {});
        attribute(env, attrMorph3, element19, "class", concat(env, ["layout-col ", subexpr(env, context, "if", [get(env, context, "isTablet"), "", "ms-top-bar-padding-x-large-left pad-l-r"], {})]));
        content(env, morph13, context, "app.lang.labels.ups");
        content(env, morph14, context, "app.lang.labels.down");
        inline(env, morph15, context, "formatNumber", [get(env, context, "exchange.ups"), 0], {});
        inline(env, morph16, context, "formatNumber", [get(env, context, "exchange.dwns"), 0], {});
        attribute(env, attrMorph4, element22, "class", concat(env, ["layout-col ", subexpr(env, context, "if", [get(env, context, "isTablet"), "", "pad-l-r"], {})]));
        content(env, morph17, context, "app.lang.labels.netCash");
        content(env, morph18, context, "app.lang.labels.cashMap");
        element(env, element24, context, "bind-attr", [], { "class": "netCashPerCss :font-m :bold :h-left :pad-s-b :ltr :ms-top-bar-row-gap" });
        inline(env, morph19, context, "formatNumber", [get(env, context, "exchange.netCashPer"), 2], {});
        element(env, element25, context, "bind-attr", [], { "class": "cashInPerCss :font-m :bold :h-left :pad-s-b" });
        inline(env, morph20, context, "formatNumber", [get(env, context, "exchange.cashInPer"), 2], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/top-panel/top-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("no top panel for Mobile for now");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/about-us-contact-info", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "fore-color font-x-l");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createUnsafeMorphAt(dom.childAt(fragment, [0]), 0, 0);
        content(env, morph0, context, "address");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/alert-price", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "app.lang.labels.alert"), "symbol": get(env, context, "stockDetails.dispProp1"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "stockDetails.dispProp1"), "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" Default value of this boolean value is true ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 3, 3, contextualElement);
          inline(env, morph0, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "arrangedContent"), "rowHeight": 45, "hasFooter": false, "isActiveOnSymbolChange": false, "minHeaderHeight": 25, "isRefreshed": get(env, context, "isRefreshed"), "headerNames": get(env, context, "headerNames"), "contextPath": get(env, context, "contextPath"), "isContextPanel": get(env, context, "isContextPanel"), "id": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width font-m pad-m-tb pad-l-lr");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-5");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-0 pad-s-lr");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-8");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-0 pad-s-lr");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-5 font-xx-l");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-1");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-6 pad-s-r");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "font-x-l bold btn-txt-color");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6, "type", "button");
        dom.setAttribute(el6, "class", "btn bold btn-default btn-animation add-alert-btn font-l");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-container full-width");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "layout-col-24");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width alert-container-height pos-rel");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [2]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [13]);
        var element4 = dom.childAt(element3, [1, 1]);
        var element5 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(element0, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element1, 'class');
        var morph1 = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element2, [9]), 1, 1);
        var attrMorph1 = dom.createAttrMorph(element4, 'disabled');
        var morph4 = dom.createMorphAt(dom.childAt(element4, [1, 1]), 0, 0);
        var morph5 = dom.createMorphAt(element5, 1, 1);
        var morph6 = dom.createMorphAt(element5, 3, 3);
        var morph7 = dom.createMorphAt(element5, 5, 5);
        block(env, morph0, context, "if", [get(env, context, "isTablet")], {}, child0, null);
        attribute(env, attrMorph0, element1, "class", concat(env, ["full-width full-height overflow-hidden ", subexpr(env, context, "if", [get(env, context, "isTablet"), "widget-container-new", ""], {})]));
        inline(env, morph1, context, "bootstrap-dropdown-select", [], { "value": get(env, context, "selectedParameter"), "options": get(env, context, "parameters"), "defaultSelect": get(env, context, "defaultParameter"), "valueKey": "value", "labelKey": "caption", "selectAction": "setParameter", "buttonClass": "full-width dropdown-solid-back-color", "lblClass": "layout-col-24" });
        inline(env, morph2, context, "bootstrap-dropdown-select", [], { "value": get(env, context, "selectedCriteria"), "options": get(env, context, "criteria"), "defaultSelect": get(env, context, "defaultCriteria"), "valueKey": "value", "labelKey": "caption", "selectAction": "setCriteria", "buttonClass": "full-width dropdown-solid-back-color", "lblClass": "layout-col-24" });
        inline(env, morph3, context, "input-field-number", [], { "class": "form-control search-query h-right fore-color font-xx-l full-width alert-text-box", "decimalPlaces": get(env, context, "valueDecimalPlaces"), "maxlength": 15, "numValue": get(env, context, "value"), "placeholder": get(env, context, "alertValuePlaceHolder") });
        element(env, element3, context, "action", ["addAlert"], {});
        attribute(env, attrMorph1, element4, "disabled", get(env, context, "isAddAlertDisabled"));
        content(env, morph4, context, "alertButtonText");
        inline(env, morph5, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        block(env, morph6, context, "if", [get(env, context, "isWidgetRefreshed")], {}, child1, null);
        inline(env, morph7, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color mgn-l-t", "backgroundCss": "h-middle mgn-l-t" });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/alert", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "tabpanel");
        dom.setAttribute(el1, "class", "right-panel-tabpanel");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h6");
        dom.setAttribute(el2, "style", "margin-top: 15px; font-size: 14px");
        var el3 = dom.createTextNode("Under Construction");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/announcement/announcement-list", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "style", "width:1px; height:23px");
            dom.setAttribute(el1, "class", "pad-m-l layout-col border-right");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "data-id", "newsCheckBox");
            dom.setAttribute(el1, "class", "layout-col overflow-visible pad-m-lr");
            var el2 = dom.createTextNode("\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col overflow-visible");
            var el4 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-inline pad-s-r");
            var el5 = dom.createTextNode("\n                                                        ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "layout-inline font-m header-colour");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col dropdown overflow-visible");
            var el4 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "type", "button");
            dom.setAttribute(el4, "class", "layout-inline mgn-s-l btn btn-dropdown btn-default dropdown-solid-back-color");
            dom.setAttribute(el4, "data-toggle", "dropdown");
            dom.setAttribute(el4, "aria-expanded", "false");
            var el5 = dom.createTextNode("\n                                                        ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "layout-container full-width");
            var el6 = dom.createTextNode("\n                                                            ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("div");
            dom.setAttribute(el6, "class", "layout-col");
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                                                            ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("i");
            dom.setAttribute(el6, "class", "layout-col h-right pad-m-l icon-angle-down");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                                                        ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "dropdown-menu");
            dom.setAttribute(el4, "role", "menu");
            var el5 = dom.createTextNode("\n                                                        ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                                                    ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                inline = hooks.inline,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element13 = dom.childAt(fragment, [1]);
            var element14 = dom.childAt(element13, [1]);
            var element15 = dom.childAt(element14, [1]);
            var element16 = dom.childAt(element14, [3]);
            var element17 = dom.childAt(element16, [1]);
            var attrMorph0 = dom.createAttrMorph(element13, 'id');
            var attrMorph1 = dom.createAttrMorph(element14, 'id');
            var morph0 = dom.createMorphAt(dom.childAt(element15, [1]), 1, 1);
            var morph1 = dom.createMorphAt(dom.childAt(element15, [3]), 0, 0);
            var attrMorph2 = dom.createAttrMorph(element17, 'disabled');
            var morph2 = dom.createMorphAt(dom.childAt(element17, [1, 1]), 0, 0);
            var morph3 = dom.createMorphAt(dom.childAt(element16, [3]), 1, 1);
            attribute(env, attrMorph0, element13, "id", concat(env, ["newsCheckContainer-", get(env, context, "wkey")]));
            attribute(env, attrMorph1, element14, "id", concat(env, ["newsCheck-", get(env, context, "wkey")]));
            inline(env, morph0, context, "input", [], { "checked": get(env, context, "isEnabledNewsSearch"), "type": "checkbox", "name": "cc" });
            content(env, morph1, context, "app.lang.labels.showNews");
            attribute(env, attrMorph2, element17, "disabled", get(env, context, "isProviderSelectionDisabled"));
            content(env, morph2, context, "app.lang.labels.newsProviders");
            inline(env, morph3, context, "announcement-context-menu", [], { "columns": get(env, context, "providerOptionForSearch"), "app": get(env, context, "app"), "saveAction": "onProviderSettingsChanged", "showActionButton": true });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container");
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col");
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "layout-inline font-m header-colour pad-s-all");
          dom.setAttribute(el3, "style", "margin-top:2px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "layout-inline input-group");
          dom.setAttribute(el3, "style", "width: 100px;");
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-m-l");
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "layout-inline font-m header-colour");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "layout-inline input-group pad-s-l");
          dom.setAttribute(el3, "style", "width: 225px;");
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "layout-inline pad-s-l");
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default");
          var el5 = dom.createTextNode("\n                                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "header-colour pad-m-l pad-m-r bold");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "style", "width:1px; height:23px");
          dom.setAttribute(el2, "class", "layout-col pad-m-l border-right");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "data-id", "dateSelection");
          dom.setAttribute(el2, "class", "layout-col pad-m-l");
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "layout-inline font-m header-colour");
          var el5 = dom.createTextNode(" ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "layout-inline");
          dom.setAttribute(el4, "style", "width:80px");
          var el5 = dom.createTextNode("\n                                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "layout-inline font-m header-colour pad-s-all pad-m-l");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "layout-inline");
          dom.setAttribute(el4, "style", "width:80px");
          var el5 = dom.createTextNode("\n                                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "data-id", "announcementCheckBox");
          dom.setAttribute(el2, "class", "layout-col pad-m-l overflow-visible");
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col");
          var el5 = dom.createTextNode("\n                                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-inline pad-s-r");
          var el6 = dom.createTextNode("\n                                                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "layout-inline font-m header-colour");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col dropdown pad-s-l pad-l-r overflow-visible");
          var el5 = dom.createTextNode("\n                                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5, "type", "button");
          dom.setAttribute(el5, "class", "btn btn-dropdown btn-default dropdown-solid-back-color");
          dom.setAttribute(el5, "data-toggle", "dropdown");
          dom.setAttribute(el5, "aria-expanded", "false");
          var el6 = dom.createTextNode("\n                                                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container full-width");
          var el7 = dom.createTextNode("\n                                                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          dom.setAttribute(el7, "class", "layout-col");
          var el8 = dom.createTextNode("\n                                                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                                                        ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("i");
          dom.setAttribute(el7, "class", "layout-col h-right pad-m-l icon-angle-down");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                                    ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "dropdown-menu");
          dom.setAttribute(el5, "role", "menu");
          var el6 = dom.createTextNode("\n                                                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "data-id", "newsAnnouncement-free");
          dom.setAttribute(el2, "class", "layout-col-24");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n                                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col overflow-visible");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col overflow-visible");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              inline = hooks.inline,
              element = hooks.element,
              concat = hooks.concat,
              attribute = hooks.attribute,
              block = hooks.block,
              subexpr = hooks.subexpr;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element18 = dom.childAt(fragment, [1]);
          var element19 = dom.childAt(element18, [1]);
          var element20 = dom.childAt(element18, [3]);
          var element21 = dom.childAt(element20, [5, 1]);
          var element22 = dom.childAt(element18, [7]);
          var element23 = dom.childAt(element22, [1]);
          var element24 = dom.childAt(element18, [11]);
          var element25 = dom.childAt(element24, [1]);
          var element26 = dom.childAt(element25, [1]);
          var element27 = dom.childAt(element25, [3]);
          var element28 = dom.childAt(element27, [1]);
          var element29 = dom.childAt(fragment, [3]);
          var element30 = dom.childAt(element29, [1]);
          var element31 = dom.childAt(element29, [3]);
          var element32 = dom.childAt(element29, [5]);
          var morph0 = dom.createMorphAt(dom.childAt(element19, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element19, [3]), 1, 1);
          var morph2 = dom.createMorphAt(dom.childAt(element20, [1]), 0, 0);
          var morph3 = dom.createMorphAt(dom.childAt(element20, [3]), 1, 1);
          var morph4 = dom.createMorphAt(dom.childAt(element21, [1]), 0, 0);
          var attrMorph0 = dom.createAttrMorph(element22, 'id');
          var attrMorph1 = dom.createAttrMorph(element23, 'id');
          var morph5 = dom.createMorphAt(dom.childAt(element23, [1]), 1, 1);
          var morph6 = dom.createMorphAt(dom.childAt(element23, [3]), 1, 1);
          var morph7 = dom.createMorphAt(dom.childAt(element23, [5]), 0, 0);
          var morph8 = dom.createMorphAt(dom.childAt(element23, [7]), 1, 1);
          var morph9 = dom.createMorphAt(element18, 9, 9);
          var attrMorph2 = dom.createAttrMorph(element24, 'id');
          var attrMorph3 = dom.createAttrMorph(element25, 'id');
          var morph10 = dom.createMorphAt(dom.childAt(element26, [1]), 1, 1);
          var morph11 = dom.createMorphAt(dom.childAt(element26, [3]), 0, 0);
          var attrMorph4 = dom.createAttrMorph(element28, 'disabled');
          var morph12 = dom.createMorphAt(dom.childAt(element28, [1, 1]), 1, 1);
          var morph13 = dom.createMorphAt(dom.childAt(element27, [3]), 1, 1);
          var morph14 = dom.createMorphAt(element18, 13, 13);
          var attrMorph5 = dom.createAttrMorph(element29, 'class');
          var attrMorph6 = dom.createAttrMorph(element30, 'id');
          var attrMorph7 = dom.createAttrMorph(element31, 'id');
          var attrMorph8 = dom.createAttrMorph(element32, 'id');
          content(env, morph0, context, "app.lang.labels.symbol");
          inline(env, morph1, context, "input-field-text", [], { "type": "text", "id": get(env, context, "symbolSearchId"), "value": get(env, context, "searchSymbol"), "onKeyPress": "showSearchPopup", "class": "layout-inline search-query form-control mousetrap" });
          content(env, morph2, context, "app.lang.labels.title");
          inline(env, morph3, context, "input-field-text", [], { "type": "text", "value": get(env, context, "searchTitle"), "class": "search-query form-control" });
          element(env, element21, context, "action", ["onClickAdvancedSearch"], {});
          content(env, morph4, context, "app.lang.labels.search");
          attribute(env, attrMorph0, element22, "id", concat(env, ["dateSectionContainer-", get(env, context, "wkey")]));
          attribute(env, attrMorph1, element23, "id", concat(env, ["dateSection-", get(env, context, "wkey")]));
          content(env, morph5, context, "app.lang.labels.from");
          inline(env, morph6, context, "bootstrap-datepicker", [], { "readonly": get(env, context, "isTablet"), "orientation": "bottom", "language": get(env, context, "lan"), "placeholder": get(env, context, "app.lang.labels.startDate"), "format": get(env, context, "datePickerFormat"), "class": "search-query form-control", "value": get(env, context, "startDate"), "autoclose": true, "endDate": get(env, context, "toEndDate") });
          content(env, morph7, context, "app.lang.labels.to");
          inline(env, morph8, context, "bootstrap-datepicker", [], { "readonly": get(env, context, "isTablet"), "orientation": "bottom", "language": get(env, context, "lan"), "placeholder": get(env, context, "app.lang.labels.endDate"), "format": get(env, context, "datePickerFormat"), "class": "search-query form-control", "value": get(env, context, "endDate"), "autoclose": true, "startDate": get(env, context, "startDate"), "endDate": get(env, context, "toEndDate") });
          block(env, morph9, context, "unless", [get(env, context, "disableSeparater")], {}, child0, null);
          attribute(env, attrMorph2, element24, "id", concat(env, ["announcementCheckContainer-", get(env, context, "wkey")]));
          attribute(env, attrMorph3, element25, "id", concat(env, ["announcementCheck-", get(env, context, "wkey")]));
          inline(env, morph10, context, "input", [], { "checked": get(env, context, "isEnabledAnnSearch"), "type": "checkbox", "name": "cc" });
          content(env, morph11, context, "app.lang.labels.showAnnouncement");
          attribute(env, attrMorph4, element28, "disabled", get(env, context, "isExchangeSelectionDisabled"));
          content(env, morph12, context, "app.lang.labels.exchanges");
          inline(env, morph13, context, "announcement-context-menu", [], { "columns": get(env, context, "exchangeOptionForSearch"), "app": get(env, context, "app"), "saveAction": "onExchangeSettingsChanged", "showActionButton": true });
          block(env, morph14, context, "if", [get(env, context, "isNewsEnabled")], {}, child1, null);
          attribute(env, attrMorph5, element29, "class", concat(env, ["layout-container full-width ", subexpr(env, context, "if", [get(env, context, "isNewsResponsive"), "pad-widget-top", "padding-zero"], {})]));
          attribute(env, attrMorph6, element30, "id", concat(env, ["dateSectionRes-", get(env, context, "wkey")]));
          attribute(env, attrMorph7, element31, "id", concat(env, ["announcementCheckRes-", get(env, context, "wkey")]));
          attribute(env, attrMorph8, element32, "id", concat(env, ["newsCheckRes-", get(env, context, "wkey")]));
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col dropdown overflow-visible");
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "type", "button");
            dom.setAttribute(el2, "class", "layout-inline mgn-s-l btn btn-dropdown btn-default dropdown-solid-back-color");
            dom.setAttribute(el2, "data-toggle", "dropdown");
            dom.setAttribute(el2, "aria-expanded", "false");
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-container full-width");
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-col");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "layout-col h-right pad-m-l icon-angle-down");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "dropdown-menu");
            dom.setAttribute(el2, "role", "menu");
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element11 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element11, [1, 1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
            content(env, morph0, context, "app.lang.labels.exchanges");
            inline(env, morph1, context, "announcement-context-menu", [], { "columns": get(env, context, "exchangeOption"), "app": get(env, context, "app"), "saveAction": "onExchangeSettingsChanged", "showActionButton": true });
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col dropdown overflow-visible");
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "type", "button");
            dom.setAttribute(el2, "class", "layout-inline mgn-s-l btn btn-dropdown btn-default dropdown-solid-back-color");
            dom.setAttribute(el2, "data-toggle", "dropdown");
            dom.setAttribute(el2, "aria-expanded", "false");
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-conatiner full-width");
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-col");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "layout-col h-right pad-m-l icon-angle-down");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "dropdown-menu");
            dom.setAttribute(el2, "role", "menu");
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element10 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element10, [1, 1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element10, [3]), 1, 1);
            content(env, morph0, context, "app.lang.labels.newsProviders");
            inline(env, morph1, context, "announcement-context-menu", [], { "columns": get(env, context, "providerOption"), "app": get(env, context, "app"), "saveAction": "onProviderSettingsChanged", "showActionButton": true });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "layout-inline font-m header-colour pad-s-all");
          dom.setAttribute(el2, "style", "margin-top: 2px;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "layout-inline");
          dom.setAttribute(el2, "style", "width: 150px;");
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "layout-inline font-m header-colour pad-s-all");
          dom.setAttribute(el2, "style", "margin-top: 2px;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "layout-inline");
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "layout-inline");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              inline = hooks.inline,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element12 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element12, [3]), 1, 1);
          var morph2 = dom.createMorphAt(dom.childAt(element12, [5]), 0, 0);
          var morph3 = dom.createMorphAt(dom.childAt(element12, [7, 1]), 0, 0);
          var morph4 = dom.createMorphAt(fragment, 3, 3, contextualElement);
          var morph5 = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, null);
          content(env, morph0, context, "app.lang.labels.symbol");
          inline(env, morph1, context, "input-field-text", [], { "type": "text", "value": get(env, context, "symbolFilter"), "class": "search-query form-control" });
          content(env, morph2, context, "app.lang.labels.title");
          inline(env, morph3, context, "input-field-text", [], { "type": "text", "value": get(env, context, "titleFilter"), "class": "search-query form-control" });
          block(env, morph4, context, "if", [get(env, context, "showExgFilter")], {}, child0, null);
          block(env, morph5, context, "if", [get(env, context, "showProviderFilter")], {}, child1, null);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "global-search", [], { "enableContentSettings": false, "searchKey": get(env, context, "searchSymbol"), "showWidgetButtons": false, "closePopup": "closeSearchPopup", "openPopup": "showSearchPopup", "stopGlobalNotification": true, "clickAction": "onSymbolSelected", "analyticsKey": get(env, context, "gaKey"), "wkey": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    var child3 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-megaphone-1 ann-icon-color");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-tv news-icon-color");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n\n                                                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "class", "font-m text-justify pad-m-b fore-color");
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                                                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width");
            var el3 = dom.createTextNode("\n                                                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-24 bold font-m highlight-fore-color");
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "ltr left");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col font-m pad-xs-b fade-fore-color");
            var el4 = dom.createElement("span");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                                                                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(element4, [1, 0]);
            var element6 = dom.childAt(element4, [3]);
            var element7 = dom.childAt(element6, [3, 0]);
            var attrMorph0 = dom.createAttrMorph(element4, 'class');
            var morph0 = dom.createMorphAt(element5, 0, 0);
            var attrMorph1 = dom.createAttrMorph(element5, 'class');
            var morph1 = dom.createMorphAt(dom.childAt(element6, [1, 1]), 0, 0);
            var attrMorph2 = dom.createAttrMorph(element7, 'class');
            attribute(env, attrMorph0, element4, "class", concat(env, ["layout-col full-width v-top white-space-normal pad-m-l ", subexpr(env, context, "if", [get(env, context, "announcement.isAnnouncement"), "announcement-vertical-seperator", "news-vertical-seperator"], {})]));
            attribute(env, attrMorph1, element5, "class", get(env, context, "announcement.annNewsHeadCss"));
            content(env, morph0, context, "announcement.dHed");
            content(env, morph1, context, "announcement.dispProp1");
            attribute(env, attrMorph2, element7, "class", concat(env, ["pad-xs-b ", get(env, context, "announcement.annNewsTimeCss"), ">", get(env, context, "announcement.dDTt")]));
            return fragment;
          }
        };
      }();
      var child3 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n\n                                                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "class", "font-m text-justify pad-m-b fore-color");
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                                                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width");
            var el3 = dom.createTextNode("\n                                                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-24 bold font-m highlight-fore-color");
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "ltr left");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col font-m pad-xs-b  fade-fore-color");
            var el4 = dom.createElement("span");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                                                                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1, 0]);
            var element2 = dom.childAt(element0, [3]);
            var element3 = dom.childAt(element2, [3, 0]);
            var attrMorph0 = dom.createAttrMorph(element0, 'class');
            var morph0 = dom.createMorphAt(element1, 0, 0);
            var attrMorph1 = dom.createAttrMorph(element1, 'class');
            var morph1 = dom.createMorphAt(dom.childAt(element2, [1, 1]), 0, 0);
            var morph2 = dom.createMorphAt(element3, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element3, 'class');
            attribute(env, attrMorph0, element0, "class", concat(env, ["layout-col full-width v-top white-space-normal pad-m-l ", subexpr(env, context, "if", [get(env, context, "announcement.isAnnouncement"), "announcement-vertical-seperator", "news-vertical-seperator"], {})]));
            attribute(env, attrMorph1, element1, "class", get(env, context, "announcement.annNewsHeadCss"));
            content(env, morph0, context, "announcement.dHed");
            content(env, morph1, context, "announcement.dispProp1");
            attribute(env, attrMorph2, element3, "class", get(env, context, "announcement.annNewsTimeCss"));
            content(env, morph2, context, "announcement.dDTt");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n\n                                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width overflow-visible news-list-item border-bottom pad-m-tb");
          var el3 = dom.createTextNode("\n\n                                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          var el4 = dom.createTextNode("\n\n                                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col v-top pad-m-r");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                                                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element8, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
          var morph1 = dom.createMorphAt(element9, 3, 3);
          attribute(env, attrMorph0, element8, "class", concat(env, ["table-row-hover-back-color ", subexpr(env, context, "isEqual", [get(env, context, "announcement.id"), get(env, context, "selectedNewAnn"), "table-row-selected-back-color"], {}), " "]));
          element(env, element9, context, "action", ["itemClicked", get(env, context, "announcement.id"), get(env, context, "announcement.type")], {});
          block(env, morph0, context, "if", [get(env, context, "announcement.isAnnouncement")], {}, child0, child1);
          block(env, morph1, context, "if", [get(env, context, "announcement.isArabic")], {}, child2, child3);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-width col-xs-12 full-height");
        dom.setAttribute(el1, "xmlns", "http://www.w3.org/1999/html");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 full-height widget-container-new full-height-without-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-height pad-s-b");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "container-fluid full-height");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "row full-height");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "col-lg-12 full-height");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "pad-widget-left pad-widget-right pad-widget-top pad-m-b");
        dom.setAttribute(el7, "role", "tabpanel");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "tool-bar");
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "modal-symbol announcement-list-popup");
        dom.setAttribute(el7, "style", "left: 52px;");
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "col-lg-12 pad-widget-left full-height pad-widget-top");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "col-xs-5 border-right news-list-widget-height");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        dom.setAttribute(el9, "class", "nano has-scrollbar");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("div");
        dom.setAttribute(el10, "class", "nano-content tab-content pad-s-r full-height");
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("div");
        dom.setAttribute(el11, "role", "tabpanel");
        dom.setAttribute(el11, "class", "tab-pane active");
        dom.setAttribute(el11, "id", "location1");
        var el12 = dom.createTextNode("\n");
        dom.appendChild(el11, el12);
        var el12 = dom.createComment("");
        dom.appendChild(el11, el12);
        var el12 = dom.createTextNode("                                        ");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                    ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "col-xs-7 full-height");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        dom.setAttribute(el9, "id", "announcementListUpdateContainer");
        dom.setAttribute(el9, "class", "full-height pad-m-l pad-s-b");
        dom.setAttribute(el9, "style", "height:calc(100% - 96px);");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("div");
        dom.setAttribute(el10, "class", "news-heading");
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("div");
        dom.setAttribute(el10, "class", "news-date-time-bar full-width left");
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("span");
        dom.setAttribute(el11, "class", "left font-m bold highlight-fore-color");
        var el12 = dom.createComment("");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("span");
        dom.setAttribute(el11, "class", "ltr right font-m pad-m-r fade-fore-color");
        var el12 = dom.createComment("");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                    ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("div");
        dom.setAttribute(el10, "class", "nano has-scrollbar pos-rel");
        dom.setAttribute(el10, "style", "height:calc(100% - 82px);");
        var el11 = dom.createTextNode("\n                                        ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("div");
        dom.setAttribute(el11, "class", "news-body news-link nano-content full-height");
        var el12 = dom.createComment("");
        dom.appendChild(el11, el12);
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode("\n                                    ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline,
            block = hooks.block,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element33 = dom.childAt(fragment, [0]);
        var element34 = dom.childAt(element33, [3, 1, 1, 1, 1]);
        var element35 = dom.childAt(element34, [7]);
        var element36 = dom.childAt(element35, [1]);
        var element37 = dom.childAt(element35, [3, 1]);
        var element38 = dom.childAt(element37, [3]);
        var morph0 = dom.createMorphAt(element33, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element33, 'id');
        var morph1 = dom.createMorphAt(dom.childAt(element34, [1]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element34, [3]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element34, [5]), 1, 1);
        var morph4 = dom.createMorphAt(element36, 1, 1);
        var morph5 = dom.createMorphAt(element36, 3, 3);
        var morph6 = dom.createMorphAt(dom.childAt(element36, [5, 1, 1]), 1, 1);
        var morph7 = dom.createUnsafeMorphAt(dom.childAt(element37, [1]), 0, 0);
        var morph8 = dom.createMorphAt(dom.childAt(element38, [1]), 0, 0);
        var morph9 = dom.createMorphAt(dom.childAt(element38, [3]), 0, 0);
        var morph10 = dom.createUnsafeMorphAt(dom.childAt(element37, [5, 1]), 0, 0);
        attribute(env, attrMorph0, element33, "id", concat(env, ["newsAnnouncement-", get(env, context, "wkey")]));
        inline(env, morph0, context, "widget-header", [], { "hideWidgetLink": true, "widgetTitle": get(env, context, "app.lang.labels.newsAnn"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        inline(env, morph1, context, "tab-dropdown", [], { "isDropdown": get(env, context, "isDropdown"), "displayList": get(env, context, "announcementTabs"), "newActive": get(env, context, "announcementTabsActive"), "isDisplayListChanged": get(env, context, "isAnntabsChanged"), "labelKey": "displayDesc", "actionName": "onTabSelected", "tabPanelClass": "widget-tab-panel", "tabItemClass": "layout-inline widget-tab-item mgn-s-r", "tabLinkClass": "layout-inline" });
        block(env, morph2, context, "if", [get(env, context, "isAdvancedSearch")], {}, child0, child1);
        block(env, morph3, context, "modal-popup", [], { "isEnabled": false, "id": "annSymbolSearch" }, child2, null);
        inline(env, morph4, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph5, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph6, context, "each", [get(env, context, "filteredContent")], { "keyword": "announcement" }, child3, null);
        content(env, morph7, context, "annObj.dHed");
        content(env, morph8, context, "annObj.dispProp1");
        content(env, morph9, context, "annObj.dDt");
        content(env, morph10, context, "annObj.dBody");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/announcement/announcement", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "tab-dropdown", [], { "isDropdown": get(env, context, "isDropdown"), "displayList": get(env, context, "announcementTabs"), "newActive": get(env, context, "announcementTabsActive"), "isDisplayListChanged": get(env, context, "isAnntabsChanged"), "labelKey": "displayDesc", "actionName": "onTabSelected", "tabPanelClass": get(env, context, "tabCss.tabPanelClass"), "tabItemClass": get(env, context, "tabCss.tabItemClass"), "tabLinkClass": get(env, context, "tabCss.tabLinkClass") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            inline(env, morph0, context, "widget-header", [], { "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "title"), "hideSymbol": get(env, context, "hideSymbol"), "hideWidgetLink": true, "app": get(env, context, "app"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems" });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "unless", [get(env, context, "showAnnTabs")], {}, child0, null);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width font-m pad-m-lr pad-m-tb");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-s-l");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline pad-s-l pad-s-b  ");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              inline = hooks.inline,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element13 = dom.childAt(fragment, [1]);
          var element14 = dom.childAt(element13, [1]);
          var element15 = dom.childAt(element13, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element14, 3, 3);
          var attrMorph0 = dom.createAttrMorph(element15, 'class');
          content(env, morph0, context, "app.lang.labels.filter");
          inline(env, morph1, context, "bootstrap-dropdown-select", [], { "defaultSelect": get(env, context, "defaultFilter"), "value": get(env, context, "currSubAnnItem"), "options": get(env, context, "subAnnList"), "valueKey": "displayName", "labelKey": "displayName", "selectAction": "selectSubAnnItem", "buttonClass": "full-width dropdown-solid-back-color", "lblClass": "dropdown-item-container" });
          attribute(env, attrMorph0, element15, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "layout-col-24", "layout-col-12"], {})]));
          return fragment;
        }
      };
    }();
    var child3 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-megaphone-1 ann-icon-color");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-tv news-icon-color");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width fade-fore-color");
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-24 bold highlight-fore-color font-m");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col font-m fade-fore-color");
            var el4 = dom.createElement("span");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element5 = dom.childAt(fragment, [1]);
            var element6 = dom.childAt(element5, [1]);
            var element7 = dom.childAt(element6, [0]);
            var element8 = dom.childAt(element5, [3]);
            var element9 = dom.childAt(element8, [3, 0]);
            var attrMorph0 = dom.createAttrMorph(element5, 'class');
            var attrMorph1 = dom.createAttrMorph(element6, 'class');
            var morph0 = dom.createMorphAt(element7, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element7, 'class');
            var morph1 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
            var morph2 = dom.createMorphAt(element9, 0, 0);
            var attrMorph3 = dom.createAttrMorph(element9, 'class');
            attribute(env, attrMorph0, element5, "class", concat(env, ["layout-col full-width v-top white-space-normal pad-m-l ", subexpr(env, context, "if", [get(env, context, "announcement.isAnnouncement"), "announcement-vertical-seperator", "news-vertical-seperator"], {})]));
            attribute(env, attrMorph1, element6, "class", concat(env, ["news-title fore-color ", subexpr(env, context, "if", [get(env, context, "isMobile"), "pad-l-b", "pad-m-b"], {})]));
            attribute(env, attrMorph2, element7, "class", get(env, context, "announcement.annNewsHeadCss"));
            content(env, morph0, context, "announcement.dHed");
            content(env, morph1, context, "announcement.dispProp1");
            attribute(env, attrMorph3, element9, "class", get(env, context, "announcement.annNewsTimeCss"));
            content(env, morph2, context, "announcement.dDTt");
            return fragment;
          }
        };
      }();
      var child3 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width fade-fore-color");
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-24 bold highlight-fore-color font-m");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col font-m fade-fore-color");
            var el4 = dom.createElement("span");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element1, [0]);
            var element3 = dom.childAt(element0, [3]);
            var element4 = dom.childAt(element3, [3, 0]);
            var attrMorph0 = dom.createAttrMorph(element0, 'class');
            var attrMorph1 = dom.createAttrMorph(element1, 'class');
            var morph0 = dom.createMorphAt(element2, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element2, 'class');
            var morph1 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            var morph2 = dom.createMorphAt(element4, 0, 0);
            var attrMorph3 = dom.createAttrMorph(element4, 'class');
            attribute(env, attrMorph0, element0, "class", concat(env, ["layout-col full-width v-top white-space-normal pad-m-l ", subexpr(env, context, "if", [get(env, context, "announcement.isAnnouncement"), "announcement-vertical-seperator", "news-vertical-seperator"], {})]));
            attribute(env, attrMorph1, element1, "class", concat(env, ["news-title fore-color ", subexpr(env, context, "if", [get(env, context, "isMobile"), "pad-l-b", "pad-m-b"], {})]));
            attribute(env, attrMorph2, element2, "class", get(env, context, "announcement.annNewsHeadCss"));
            content(env, morph0, context, "announcement.dHed");
            content(env, morph1, context, "announcement.dispProp1");
            attribute(env, attrMorph3, element4, "class", get(env, context, "announcement.annNewsTimeCss"));
            content(env, morph2, context, "announcement.dDTt");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col v-top pad-m-r");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element10 = dom.childAt(fragment, [1]);
          var element11 = dom.childAt(element10, [1]);
          var element12 = dom.childAt(element11, [1]);
          var attrMorph0 = dom.createAttrMorph(element10, 'class');
          var attrMorph1 = dom.createAttrMorph(element11, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element12, [1]), 1, 1);
          var morph1 = dom.createMorphAt(element12, 3, 3);
          attribute(env, attrMorph0, element10, "class", concat(env, ["pad-widget-left pad-widget-right table-row-hover-back-color ", subexpr(env, context, "isEqual", [get(env, context, "announcement.id"), get(env, context, "selectedNewAnn"), "table-row-selected-back-color"], {}), " "]));
          attribute(env, attrMorph1, element11, "class", concat(env, ["layout-container full-width news-list-item-right-panel border-bottom ", subexpr(env, context, "if", [get(env, context, "isMobile"), "pad-l-tb", "pad-m-tb"], {})]));
          element(env, element12, context, "action", ["itemClicked", get(env, context, "announcement.id"), get(env, context, "announcement.type")], {});
          block(env, morph0, context, "if", [get(env, context, "announcement.isAnnouncement")], {}, child0, child1);
          block(env, morph1, context, "if", [get(env, context, "announcement.isArabic")], {}, child2, child3);
          return fragment;
        }
      };
    }();
    var child4 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "app.lang.messages.dataNotAvailable");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "isAnnUnavailable")], {}, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isInvokedBySearch")], {}, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "tabpanel");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "id", "location1");
        dom.setAttribute(el3, "class", "nano-content full-height");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element16 = dom.childAt(fragment, [0]);
        var element17 = dom.childAt(element16, [1]);
        var element18 = dom.childAt(element16, [6]);
        var attrMorph0 = dom.createAttrMorph(element16, 'class');
        var attrMorph1 = dom.createAttrMorph(element16, 'id');
        var morph0 = dom.createMorphAt(element17, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element17, 'class');
        var morph1 = dom.createMorphAt(element16, 3, 3);
        var morph2 = dom.createMorphAt(element16, 4, 4);
        var morph3 = dom.createMorphAt(element18, 1, 1);
        var morph4 = dom.createMorphAt(element18, 3, 3);
        var attrMorph3 = dom.createAttrMorph(element18, 'class');
        var morph5 = dom.createMorphAt(dom.childAt(element18, [5]), 1, 1);
        attribute(env, attrMorph0, element16, "class", concat(env, ["full-height ", get(env, context, "tabCss.tabContainer"), " ", subexpr(env, context, "if", [get(env, context, "isTablet"), "widget-container-new", ""], {})]));
        attribute(env, attrMorph1, element16, "id", get(env, context, "wkey"));
        attribute(env, attrMorph2, element17, "class", concat(env, [get(env, context, "tabCss.tabPanelContainer")]));
        block(env, morph0, context, "if", [get(env, context, "showAnnTabs")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "isShowWidgetHeader")], {}, child1, null);
        block(env, morph2, context, "if", [get(env, context, "isAnnFilterEnabled")], {}, child2, null);
        attribute(env, attrMorph3, element18, "class", concat(env, ["nano ", subexpr(env, context, "if", [get(env, context, "isTablet"), "full-height-without-header", "right-panel-height"], {}), " pos-rel mgn-s-t ", get(env, context, "tabCss.tabScroll")]));
        inline(env, morph3, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph4, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph5, context, "each", [get(env, context, "filteredContent")], { "keyword": "announcement" }, child3, child4);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/announcement/components/announcement-context-menu", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 2,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "fade-fore-color mgn-xs-t");
          dom.setAttribute(el2, "role", "menuitem");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "fade-fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement, blockArguments) {
          var dom = env.dom;
          var hooks = env.hooks,
              set = hooks.set,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              inline = hooks.inline,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element3, 'class');
          var morph0 = dom.createMorphAt(element4, 0, 0);
          var morph1 = dom.createMorphAt(element4, 2, 2);
          set(env, context, "column", blockArguments[0]);
          set(env, context, "index", blockArguments[1]);
          attribute(env, attrMorph0, element3, "class", concat(env, ["layout-container mgn-s-b full-width rtl ", get(env, context, "column.disableClass")]));
          inline(env, morph0, context, "input", [], { "checked": get(env, context, "column.isSelected"), "type": "checkbox", "name": get(env, context, "column.code") });
          content(env, morph1, context, "column.displayName");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "right pad-m-t pad-m-r pad-m-l layout-container announcement-context-button-container");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "pad-s-l layout-col");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn btn-default bold");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "pad-s-l layout-col");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn btn-default bold");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var element2 = dom.childAt(element0, [3, 1]);
          var morph0 = dom.createMorphAt(element1, 0, 0);
          var morph1 = dom.createMorphAt(element2, 0, 0);
          element(env, element1, context, "action", ["cancel", get(env, context, "item")], {});
          content(env, morph0, context, "app.lang.labels.cancel");
          element(env, element2, context, "action", ["save", get(env, context, "item")], {});
          content(env, morph1, context, "app.lang.labels.save");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "left pad-m-t pad-m-r pad-m-l full-width border-bottom y-scroll");
        dom.setAttribute(el1, "style", "max-height: 150px");
        dom.setAttribute(el1, "id", "container");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        var morph1 = dom.createMorphAt(fragment, 2, 2, contextualElement);
        block(env, morph0, context, "each", [get(env, context, "columns")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "showActionButton")], {}, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/announcement/components/announcement-news-popup", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "news-icon-bar display-block h-right");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-inline");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "non-ar-left pad-l-l pad-l-tb");
          dom.setAttribute(el3, "id", "annPrevious");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-arrow-left font-xx-l");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "non-ar-right mgn-l-lr pad-l-l pad-l-tb");
          dom.setAttribute(el3, "id", "annNext");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-arrow-right font-xx-l");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-inline");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-l-l pad-l-tb");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-close-round font-x-l");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element4, [3]);
          var element7 = dom.childAt(element3, [3, 1]);
          var element8 = dom.childAt(element7, [0]);
          var attrMorph0 = dom.createAttrMorph(element8, 'title');
          element(env, element5, context, "action", ["loadNextPreItem", get(env, context, "annObj"), true], {});
          element(env, element6, context, "action", ["loadNextPreItem", get(env, context, "annObj")], {});
          element(env, element7, context, "action", ["closePopup"], {});
          attribute(env, attrMorph0, element8, "title", concat(env, [get(env, context, "app.lang.labels.close")]));
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width pad-s-t pad-m-b news-pop-up-transparent-box");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width news-pop-up-transparent-panel ltr pad-m-l pad-l-tb pos-abs bottom-zero");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col h-left rtl");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col font-xxx-l pad-s-b pad-m-lr");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "id", "annPrevious");
          dom.setAttribute(el4, "class", " pad-l-r pad-l-tb");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5, "class", "glyphicon-triangle-left glyphicon sidebar-nav-icon-color font-xx-l");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col font-xxx-l pad-s-b pad-l-l");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "id", "annNext");
          dom.setAttribute(el4, "class", "pad-l-lr pad-l-tb");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5, "class", "glyphicon-triangle-right glyphicon sidebar-nav-icon-color font-xx-l");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col h-right");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [3, 1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var element2 = dom.childAt(element0, [5, 1]);
          element(env, element1, context, "action", ["loadNextPreItem", get(env, context, "annObj"), true], {});
          element(env, element2, context, "action", ["loadNextPreItem", get(env, context, "annObj")], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "news-popup news-popup-container font-x-l popup-content-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "font-x-l an-resizable popup-line-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "news-heading-right-panel pad-l-all news-popup-header cursor-move");
        dom.setAttribute(el3, "id", "annNewsDrag");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "");
        dom.setAttribute(el3, "class", "news-date-time-bar-right-panel full-width left");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "right fade-fore-color");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "font-x-l pad-l-lr pad-m-tb y-scroll fore-color news-popup-body news-link");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-width pad-s-t pad-m-b news-pop-up-transparent-box");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element9 = dom.childAt(fragment, [0, 1]);
        var element10 = dom.childAt(element9, [1]);
        var element11 = dom.childAt(element10, [3]);
        var element12 = dom.childAt(element9, [3]);
        var element13 = dom.childAt(element12, [1]);
        var element14 = dom.childAt(element12, [3]);
        var morph0 = dom.createMorphAt(element10, 1, 1);
        var morph1 = dom.createUnsafeMorphAt(element11, 0, 0);
        var attrMorph0 = dom.createAttrMorph(element11, 'class');
        var morph2 = dom.createMorphAt(element13, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element13, 'class');
        var attrMorph2 = dom.createAttrMorph(element14, 'class');
        var morph3 = dom.createMorphAt(dom.childAt(element12, [5]), 0, 0);
        var morph4 = dom.createUnsafeMorphAt(dom.childAt(element9, [5]), 0, 0);
        var morph5 = dom.createMorphAt(element9, 7, 7);
        block(env, morph0, context, "unless", [get(env, context, "isMobile")], {}, child0, null);
        attribute(env, attrMorph0, element11, "class", concat(env, ["pad-s-b ", subexpr(env, context, "if", [get(env, context, "isMobile"), "font-xxx-l fore-color", "font-x-l"], {})]));
        content(env, morph1, context, "annObj.dHed");
        attribute(env, attrMorph1, element13, "class", concat(env, ["left ", subexpr(env, context, "if", [get(env, context, "isMobile"), "fade-fore-color font-thick", "symbol-fore-color"], {})]));
        content(env, morph2, context, "annObj.dispProp1");
        attribute(env, attrMorph2, element14, "class", concat(env, ["left pad-m-l ", subexpr(env, context, "if", [get(env, context, "annObj.isAnnouncement"), "icon-megaphone-1 ann-icon-color", "icon-tv news-icon-color"], {})]));
        content(env, morph3, context, "annObj.dDt");
        content(env, morph4, context, "annObj.dBody");
        block(env, morph5, context, "if", [get(env, context, "isMobile")], {}, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/announcement/components/titlebar-news-announcement", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width appttl-height font-m dark-bg-fore-color highlight-back-color-2");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline font-x-l pad-m-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "fa fa-info news-icon-color");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-inline pad-m-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-inline");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("m");
        dom.setAttribute(el4, "class", "layout-inline pad-m-l bold dark-bg-fore-color ellipsis news-announcement-width");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1, 3]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        content(env, morph0, context, "annObj.dispProp1");
        content(env, morph1, context, "annObj.dHed");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/announcement/exchange-announcement", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["price/widgets/news-announcement"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/announcement/quote-announcement", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "left");
        dom.setAttribute(el1, "style", "max-height: 280px; position: relative;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("Announcement goes here...");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/announcement/symbol-announcement", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["price/widgets/news-announcement"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/chat", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "tabpanel");
        dom.setAttribute(el1, "class", "right-panel-tabpanel");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h6");
        dom.setAttribute(el2, "style", "margin-top: 15px; font-size: 14px");
        var el3 = dom.createTextNode("Under Construction");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/commodities-overview", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "full-height full-width");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          inline(env, morph0, context, "outlet", ["gmsOutlet"], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col row-height pad-m-l font-m");
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element1 = dom.childAt(fragment, [1, 0]);
              element(env, element1, context, "bind-attr", [], { "class": "indexArrowCssDown" });
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col row-height pad-m-l font-m");
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element0 = dom.childAt(fragment, [1, 0]);
              element(env, element0, context, "bind-attr", [], { "class": "indexArrowCssUp" });
              return fragment;
            }
          };
        }();
        var child2 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col row-height font-m bold h-right down-fore-color pad-m-l pad-widget-right");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ltr");
              var el3 = dom.createTextNode("\n                                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              inline(env, morph0, context, "formatNumberPercentage", [get(env, context, "symbol.pctChg")], {});
              return fragment;
            }
          };
        }();
        var child3 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col row-height font-m bold h-right up-fore-color pad-m-l pad-widget-right");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              inline(env, morph0, context, "formatNumberPercentage", [get(env, context, "symbol.pctChg")], {});
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-row cursor-pointer");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col row-height icon-fore-color pad-widget-left");
            var el3 = dom.createElement("i");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col-24 row-height font-m bold symbol-fore-color pad-m-l");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col row-height font-m h-right highlight-fore-color bold pad-m-l");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute,
                element = hooks.element,
                content = hooks.content,
                block = hooks.block,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1, 0]);
            var attrMorph0 = dom.createAttrMorph(element2, 'id');
            var attrMorph1 = dom.createAttrMorph(element3, 'class');
            var morph0 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
            var morph1 = dom.createMorphAt(element2, 5, 5);
            var morph2 = dom.createMorphAt(dom.childAt(element2, [7]), 0, 0);
            var morph3 = dom.createMorphAt(element2, 9, 9);
            attribute(env, attrMorph0, element2, "id", get(env, context, "_view.contentIndex"));
            element(env, element2, context, "action", ["doubleClickRow", get(env, context, "symbol")], { "on": "doubleClick" });
            attribute(env, attrMorph1, element3, "class", get(env, context, "symbol.icon"));
            content(env, morph0, context, "symbol.sDes");
            block(env, morph1, context, "if", [get(env, context, "symbol.isNegative")], {}, child0, child1);
            inline(env, morph2, context, "formatNumber", [get(env, context, "symbol.ltp")], {});
            block(env, morph3, context, "if", [get(env, context, "symbol.isNegative")], {}, child2, child3);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-row height-zero display-none");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1]);
          var attrMorph0 = dom.createAttrMorph(element4, 'class');
          var attrMorph1 = dom.createAttrMorph(element5, 'id');
          var attrMorph2 = dom.createAttrMorph(element5, 'class');
          var morph0 = dom.createMorphAt(element5, 3, 3);
          attribute(env, attrMorph0, element4, "class", concat(env, ["widget-container-new ", subexpr(env, context, "if", [get(env, context, "isTablet"), "full-height", "mkt-ovw-row-1-height"], {})]));
          attribute(env, attrMorph1, element5, "id", concat(env, ["table-", get(env, context, "wkey")]));
          attribute(env, attrMorph2, element5, "class", concat(env, ["layout-container data-table ", subexpr(env, context, "if", [get(env, context, "isTablet"), "", "full-height"], {})]));
          block(env, morph0, context, "each", [get(env, context, "gmsContent")], { "keyword": "symbol" }, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element6 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(element6, 1, 1);
        var morph1 = dom.createMorphAt(element6, 3, 3);
        var attrMorph0 = dom.createAttrMorph(element6, 'id');
        attribute(env, attrMorph0, element6, "id", concat(env, ["gms-", get(env, context, "wkey")]));
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.gms"), "hideWidgetLink": true, "hideSymbol": true, "isResizeAvailable": false, "resizeAction": "fullScreenToggle", "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss") });
        block(env, morph1, context, "if", [get(env, context, "isFullScreenWL")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/company-profile/company-basic-info", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "style", "list-style: none;");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "fAddress");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "height:20px;");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "font-x-l bold data-table-fore-color left");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-12 col-lg-3 company-logo");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "clearfix visible-xs");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-4 col-lg-3 text-left company-heading");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-xx-l bold data-table-fore-color text-left fore-color");
          dom.setAttribute(el2, "style", "height: 17px;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m header-colour fade-fore-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-4 col-lg-3  text-left company-heading");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-xx-l bold data-table-fore-color text-left fore-color layout-inline ltr");
          dom.setAttribute(el2, "style", "height: 17px;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m header-colour fade-fore-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-4 col-lg-3 text-left company-heading-last pad-s-r");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-xx-l bold data-table-fore-color text-left fore-color layout-inline ltr");
          dom.setAttribute(el2, "style", "height: 17px;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m header-colour fade-fore-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-12 pad-l-b");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-m clr-both company-text pad-m-t full-width");
          dom.setAttribute(el1, "style", "white-space: normal;");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-lg-4 col-xs-6");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-lg-4 col-xs-6");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell pad-s-r");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold data-table-fore-color ellipsis intraday-cell-text-normal fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-lg-4 col-xs-6");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "intraday-cell");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
          dom.setAttribute(el3, "style", "margin-bottom:3px");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-l bold fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "bottom-zero left mgn-m-b");
          dom.setAttribute(el1, "style", "width:100%");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "border-bottom");
          dom.setAttribute(el2, "style", "width:100%; margin-top:-4px;");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-lg-4 col-xs-6 font-m");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "company-address");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-lg-4 col-xs-6 font-m");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", " company-address");
          var el4 = dom.createTextNode("  ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(": ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("br");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(": ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-lg-4 col-xs-6 font-m");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "company-address");
          var el4 = dom.createElement("a");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("br");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              inline = hooks.inline,
              block = hooks.block,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [7]);
          var element1 = dom.childAt(fragment, [9]);
          var element2 = dom.childAt(fragment, [11]);
          var element3 = dom.childAt(fragment, [17]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element3, [3]);
          var element6 = dom.childAt(element3, [5]);
          var element7 = dom.childAt(fragment, [19]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element7, [3]);
          var element10 = dom.childAt(element7, [5]);
          var element11 = dom.childAt(fragment, [21]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element11, [3]);
          var element14 = dom.childAt(element11, [5]);
          var element15 = dom.childAt(fragment, [23]);
          var element16 = dom.childAt(element15, [5, 1]);
          var element17 = dom.childAt(element15, [7, 1]);
          var element18 = dom.childAt(element17, [0]);
          var element19 = dom.childAt(element17, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          var morph1 = dom.createUnsafeMorphAt(dom.childAt(fragment, [3]), 0, 0);
          var morph2 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          var morph3 = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          var morph4 = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          var morph5 = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          var morph6 = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          var morph7 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          var morph8 = dom.createMorphAt(dom.childAt(fragment, [15]), 0, 0);
          var morph9 = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
          var morph10 = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
          var morph11 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
          var morph12 = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
          var morph13 = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
          var morph14 = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
          var morph15 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
          var morph16 = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
          var morph17 = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
          var morph18 = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
          var morph19 = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
          var morph20 = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
          var morph21 = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
          var morph22 = dom.createMorphAt(dom.childAt(element12, [3]), 0, 0);
          var morph23 = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
          var morph24 = dom.createMorphAt(dom.childAt(element13, [3]), 0, 0);
          var morph25 = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
          var morph26 = dom.createMorphAt(dom.childAt(element14, [3]), 0, 0);
          var morph27 = dom.createMorphAt(dom.childAt(element15, [3, 1]), 1, 1);
          var morph28 = dom.createMorphAt(element16, 1, 1);
          var morph29 = dom.createMorphAt(element16, 3, 3);
          var morph30 = dom.createMorphAt(element16, 7, 7);
          var morph31 = dom.createMorphAt(element16, 9, 9);
          var morph32 = dom.createMorphAt(element18, 0, 0);
          var attrMorph0 = dom.createAttrMorph(element18, 'href');
          var morph33 = dom.createMorphAt(element19, 0, 0);
          var attrMorph1 = dom.createAttrMorph(element19, 'href');
          content(env, morph0, context, "basicInfo.compName");
          content(env, morph1, context, "image");
          content(env, morph2, context, "basicInfo.sector");
          content(env, morph3, context, "app.lang.labels.sector");
          inline(env, morph4, context, "divideNumber", [get(env, context, "basicInfo.mktCap1")], {});
          content(env, morph5, context, "app.lang.labels.mktCap");
          inline(env, morph6, context, "divideNumber", [get(env, context, "basicInfo.listedShr")], {});
          content(env, morph7, context, "app.lang.labels.listedShr");
          content(env, morph8, context, "basicInfo.des");
          content(env, morph9, context, "app.lang.labels.trdName");
          content(env, morph10, context, "basicInfo.trdName");
          content(env, morph11, context, "app.lang.labels.currency");
          content(env, morph12, context, "basicInfo.currency");
          content(env, morph13, context, "app.lang.labels.country");
          content(env, morph14, context, "basicInfo.country");
          content(env, morph15, context, "app.lang.labels.estbOn");
          inline(env, morph16, context, "formatToDate", [get(env, context, "basicInfo.stkLstOn")], {});
          content(env, morph17, context, "app.lang.labels.auditor");
          content(env, morph18, context, "basicInfo.auditor");
          content(env, morph19, context, "app.lang.labels.isin");
          content(env, morph20, context, "basicInfo.isin");
          content(env, morph21, context, "app.lang.labels.bbgid");
          content(env, morph22, context, "basicInfo.bbgid");
          content(env, morph23, context, "app.lang.labels.indGrp");
          content(env, morph24, context, "basicInfo.indGrp");
          content(env, morph25, context, "app.lang.labels.subInd");
          content(env, morph26, context, "basicInfo.subInd");
          block(env, morph27, context, "each", [get(env, context, "formattedAddress")], { "keyword": "fAddress" }, child0, null);
          content(env, morph28, context, "app.lang.labels.phn");
          content(env, morph29, context, "basicInfo.phn");
          content(env, morph30, context, "app.lang.labels.fax");
          content(env, morph31, context, "basicInfo.fax");
          attribute(env, attrMorph0, element18, "href", get(env, context, "basicInfo.email"));
          content(env, morph32, context, "basicInfo.email");
          attribute(env, attrMorph1, element19, "href", get(env, context, "basicInfo.web"));
          content(env, morph33, context, "basicInfo.web");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "nano has-scrollbar");
        dom.setAttribute(el2, "style", "height: calc(100% - 22px);");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget-container-new pad-widget-top pad-widget-right pad-widget-left nano-content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element20 = dom.childAt(fragment, [0]);
        var element21 = dom.childAt(element20, [3, 1]);
        var morph0 = dom.createMorphAt(element20, 1, 1);
        var morph1 = dom.createMorphAt(element21, 1, 1);
        var morph2 = dom.createMorphAt(element21, 3, 3);
        var morph3 = dom.createMorphAt(element21, 5, 5);
        inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "app.lang.labels.companyInfor"), "symbol": get(env, context, "symbolObj.dispProp1"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "symbolObj.dispProp1"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        inline(env, morph1, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph2, context, "single-message-viewer", [], { "showMessage": get(env, context, "showError"), "message": get(env, context, "errorMessage"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph3, context, "if", [get(env, context, "isDataAvailable")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/company-profile/company-management-info", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width data-table-header");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-9");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline font-m pad-s-l pad-s-b pad-s-t");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-3");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline font-m h-right pad-s-r pad-s-b pad-s-t");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element2, [1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element2, [3, 1]), 0, 0);
          content(env, morph0, context, "app.lang.labels.name");
          content(env, morph1, context, "app.lang.labels.asOf");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "pad-s-tb pad-widget-left pad-s-r");
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "font-m company-ellipsis fore-color");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "font-m header-colour fade-fore-color");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right pad-widget-right");
            dom.setAttribute(el2, "style", "width:75px");
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "font-m header-colour");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
            var morph2 = dom.createMorphAt(dom.childAt(element0, [3, 1]), 0, 0);
            content(env, morph0, context, "mngrInfo.name");
            content(env, morph1, context, "mngrInfo.desig");
            inline(env, morph2, context, "formatToDate", [get(env, context, "mngrInfo.date")], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "width", "100%");
          dom.setAttribute(el1, "border", "0");
          dom.setAttribute(el1, "cellspacing", "0");
          dom.setAttribute(el1, "cellpadding", "0");
          dom.setAttribute(el1, "class", "table-layout-fixed full-width");
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          block(env, morph0, context, "each", [get(env, context, "sortedContent")], { "keyword": "mngrInfo" }, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-header-fix");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-container-new pad-s-b");
        dom.setAttribute(el2, "style", "height: calc(100% - 26px);");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "nano full-height-without-header pos-rel has-scrollbar");
        dom.setAttribute(el3, "style", "height: calc(100% - 22px);");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "nano-content full-height");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            attribute = hooks.attribute,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element4, [3, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        var morph1 = dom.createMorphAt(element4, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element4, 'id');
        var morph2 = dom.createMorphAt(element5, 1, 1);
        var morph3 = dom.createMorphAt(element5, 3, 3);
        var morph4 = dom.createMorphAt(element5, 5, 5);
        inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "app.lang.labels.mngtNBrdMbrs"), "symbol": get(env, context, "symbolObj.dispProp1"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "symbolObj.dispProp1"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        attribute(env, attrMorph0, element4, "id", get(env, context, "wkey"));
        block(env, morph1, context, "if", [get(env, context, "isDataAvailable")], {}, child0, null);
        inline(env, morph2, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph3, context, "single-message-viewer", [], { "showMessage": get(env, context, "showError"), "message": get(env, context, "errorMessage"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph4, context, "if", [get(env, context, "isDataAvailable")], {}, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/company-profile/company-owners-info", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width data-table-header");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-9");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline font-m pad-s-l pad-s-b pad-s-t");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-3");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline font-m h-right pad-s-r pad-s-b pad-s-t");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element1, [3, 1]), 0, 0);
          content(env, morph0, context, "app.lang.labels.name");
          content(env, morph1, context, "app.lang.labels.sherPrs");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "pad-s-tb pad-widget-left pad-s-r");
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "font-m company-ellipsis");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "pad-s-tb pad-widget-right pad-s-l h-right");
            dom.setAttribute(el2, "style", "width: 33%");
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "font-m header-colour");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 1]), 0, 0);
            content(env, morph0, context, "ownInfo.ownerName");
            inline(env, morph1, context, "multiplyNumberPercentage", [get(env, context, "ownInfo.sherPrs"), 100, 4], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "width", "100%");
          dom.setAttribute(el1, "border", "0");
          dom.setAttribute(el1, "cellspacing", "0");
          dom.setAttribute(el1, "cellpadding", "0");
          dom.setAttribute(el1, "class", "table-layout-fixed full-width");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          block(env, morph0, context, "each", [get(env, context, "sortedContent")], { "keyword": "ownInfo" }, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-container-new pad-s-b");
        dom.setAttribute(el2, "style", "height: calc(100% - 26px);");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "nano full-height-without-header pos-rel has-scrollbar");
        dom.setAttribute(el3, "style", "height: calc(100% - 22px);");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "nano-content full-height");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            attribute = hooks.attribute,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element3, [3, 1]);
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var morph1 = dom.createMorphAt(element3, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element3, 'id');
        var morph2 = dom.createMorphAt(element4, 1, 1);
        var morph3 = dom.createMorphAt(element4, 3, 3);
        var morph4 = dom.createMorphAt(element4, 5, 5);
        inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "app.lang.labels.owners"), "symbol": get(env, context, "symbolObj.dispProp1"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "symbolObj.dispProp1"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        attribute(env, attrMorph0, element3, "id", get(env, context, "wkey"));
        block(env, morph1, context, "if", [get(env, context, "isDataAvailable")], {}, child0, null);
        inline(env, morph2, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph3, context, "single-message-viewer", [], { "showMessage": get(env, context, "showError"), "message": get(env, context, "errorMessage"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph4, context, "if", [get(env, context, "isDataAvailable")], {}, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/company-profile/company-subsidiaries-info", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width data-table-header");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-9");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline font-m pad-s-l pad-s-b pad-s-t");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-3");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline font-m h-right pad-s-r pad-s-b pad-s-t");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element1, [3, 1]), 0, 0);
          content(env, morph0, context, "app.lang.labels.name");
          content(env, morph1, context, "app.lang.labels.sherPrs");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "pad-s-tb pad-widget-left pad-s-r");
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "font-m company-ellipsis");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "pad-s-tb pad-widget-right pad-s-l h-right");
            dom.setAttribute(el2, "style", "width: 33%");
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "font-m header-colour");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 1]), 0, 0);
            content(env, morph0, context, "subsiInfo.subsiName");
            inline(env, morph1, context, "multiplyNumberPercentage", [get(env, context, "subsiInfo.subsiSherPrs"), 100, 4], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "width", "100%");
          dom.setAttribute(el1, "border", "0");
          dom.setAttribute(el1, "cellspacing", "0");
          dom.setAttribute(el1, "cellpadding", "0");
          dom.setAttribute(el1, "class", "table-layout-fixed full-width");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          block(env, morph0, context, "each", [get(env, context, "sortedContent")], { "keyword": "subsiInfo" }, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-container-new no-padding-top pad-s-b");
        dom.setAttribute(el2, "style", "height: calc(100% - 26px);");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "nano full-height-without-header pos-rel has-scrollbar");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "nano-content full-height");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            attribute = hooks.attribute,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element3, [3, 1]);
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var morph1 = dom.createMorphAt(element3, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element3, 'id');
        var morph2 = dom.createMorphAt(element4, 1, 1);
        var morph3 = dom.createMorphAt(element4, 3, 3);
        var morph4 = dom.createMorphAt(element4, 5, 5);
        inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "app.lang.labels.subsidiaries"), "symbol": get(env, context, "symbolObj.dispProp1"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "symbolObj.dispProp1"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        attribute(env, attrMorph0, element3, "id", get(env, context, "wkey"));
        block(env, morph1, context, "if", [get(env, context, "isDataAvailable")], {}, child0, null);
        inline(env, morph2, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph3, context, "single-message-viewer", [], { "showMessage": get(env, context, "showError"), "message": get(env, context, "errorMessage"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph4, context, "if", [get(env, context, "isDataAvailable")], {}, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/detail-quote", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container intraday-dq-widget hint--bounce hint--top hint--rounded");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width");
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col font-m ellipsis fade-fore-color pad-s-tb");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col font-l bold fore-color right pad-s-tb h-right pad-s-r");
          var el4 = dom.createElement("span");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width");
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "widget-hline full-width");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              content = hooks.content,
              concat = hooks.concat;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [3, 0]);
          var attrMorph0 = dom.createAttrMorph(element0, 'data-hint');
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element2, 0, 0);
          var attrMorph1 = dom.createAttrMorph(element2, 'class');
          attribute(env, attrMorph0, element0, "data-hint", get(env, context, "field.detailQouteTitle"));
          content(env, morph0, context, "field.caption");
          attribute(env, attrMorph1, element2, "class", concat(env, [get(env, context, "field.style")]));
          content(env, morph1, context, "field.formattedValue");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-s-b full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container-fluid");
        dom.setAttribute(el2, "style", "height: 44px;");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        dom.setAttribute(el3, "style", "padding-bottom: 5px;");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container col-lg-12 pad-m-lr pad-m-t");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-4");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col pad-m-r pad-s-l");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "font-m pad-s-r");
        dom.setAttribute(el6, "style", "white-space:nowrap");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-inline full-width quote-x-large-width hint--bottom hint--rounded");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-4");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col widget-vline");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-4");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col pad-m-lr");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "font-m pad-s-r");
        dom.setAttribute(el6, "style", "white-space:nowrap");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-inline full-width quote-x-large-width hint--bottom hint--rounded");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-4");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col widget-vline");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-4");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col pad-m-lr pad-s-l");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "font-m pad-s-r");
        dom.setAttribute(el6, "style", "white-space:nowrap");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-inline full-width quote-x-large-width hint--bottom hint--rounded");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-4");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container widget-hline");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row mgn-s-t mgn-s-l mgn-s-r");
        dom.setAttribute(el2, "style", "height: calc(100% - 44px)");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-height");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "full-height y-scroll");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            get = hooks.get,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1, 1, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element5, [3]);
        var element7 = dom.childAt(element4, [11]);
        var element8 = dom.childAt(element7, [3]);
        var element9 = dom.childAt(element4, [19]);
        var element10 = dom.childAt(element9, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        var morph1 = dom.createMorphAt(element6, 0, 0);
        var attrMorph0 = dom.createAttrMorph(element6, 'data-hint');
        var morph2 = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        var morph3 = dom.createMorphAt(element8, 0, 0);
        var attrMorph1 = dom.createAttrMorph(element8, 'data-hint');
        var morph4 = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        var morph5 = dom.createMorphAt(element10, 0, 0);
        var attrMorph2 = dom.createAttrMorph(element10, 'data-hint');
        var morph6 = dom.createMorphAt(dom.childAt(element3, [5, 1, 1]), 1, 1);
        content(env, morph0, context, "app.lang.labels.cashMap");
        attribute(env, attrMorph0, element6, "data-hint", concat(env, [get(env, context, "app.lang.labels.cashMap"), " %   ", subexpr(env, context, "formatNumber", [get(env, context, "cashMapValues.calculateCash"), 2], {}), "\n", get(env, context, "app.lang.labels.cashIn"), "       ", subexpr(env, context, "formatNumber", [get(env, context, "stock.cit"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.cashOut"), "    ", subexpr(env, context, "formatNumber", [get(env, context, "stock.cot"), get(env, context, "stock.deci")], {})]));
        inline(env, morph1, context, "cash-map", [], { "id": get(env, context, "cashMapId"), "stock": get(env, context, "stock"), "isValueHidden": true });
        content(env, morph2, context, "app.lang.labels.daysRange");
        attribute(env, attrMorph1, element8, "data-hint", concat(env, [get(env, context, "app.lang.labels.daysRange"), " %   ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.dayRangePosition"), 2], {}), "\n", get(env, context, "app.lang.labels.lastTrade"), "           ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.lastTradeValue"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.todayHigh"), "       ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.highValue"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.todayLow"), "        ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.lowValue"), get(env, context, "stock.deci")], {})]));
        inline(env, morph3, context, "days-range", [], { "id": get(env, context, "daysRangeId"), "stock": get(env, context, "stock"), "isBarAvailable": true });
        content(env, morph4, context, "app.lang.labels.week52Range");
        attribute(env, attrMorph2, element10, "data-hint", concat(env, [get(env, context, "app.lang.labels.week52Range"), " %  ", subexpr(env, context, "formatNumber", [get(env, context, "fiftyTowWkValues.fiftyTwoWkPosition"), 2], {}), "\n", get(env, context, "app.lang.labels.lastTrade"), "        ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.lastTradeValue"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.fiftyTwoWkH"), "        ", subexpr(env, context, "formatNumber", [get(env, context, "fiftyTowWkValues.highValue"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.fiftyTwoWkL"), "         ", subexpr(env, context, "formatNumber", [get(env, context, "fiftyTowWkValues.lowValue"), get(env, context, "stock.deci")], {})]));
        inline(env, morph5, context, "fifty-two-wk-hl", [], { "id": get(env, context, "fiftyTowWkId"), "stock": get(env, context, "stock"), "isBarAvailable": true });
        block(env, morph6, context, "each", [get(env, context, "panelFields")], { "keyword": "field" }, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/gms-container", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          attribute(env, attrMorph0, element0, "class", concat(env, ["layout-col pad-s-tb pad-l-lr wdgttl-tab-item ellipsis h-middle ", get(env, context, "tabItem.css")]));
          element(env, element0, context, "action", ["onGmsTabItemSelected", get(env, context, "tabItem")], {});
          content(env, morph0, context, "tabItem.displayName");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-height");
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container full-width pad-m-lr");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container appmnu-back-color full-width");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(dom.childAt(element1, [1, 1]), 1, 1);
        var morph1 = dom.createMorphAt(element1, 3, 3);
        block(env, morph0, context, "each", [get(env, context, "gmsTabs")], { "keyword": "tabItem" }, child0, null);
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/gms-summary-table", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "widgetTitle"), "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "setLink": "setLink", "hideSymbol": true });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "data-table-header layout-container pad-widget-left pad-s-t full-width");
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout-container row-height-header font-m pad-widget-left pad-widget-right");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
              content(env, morph0, context, "item.countryHeader");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    element = hooks.element;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element1 = dom.childAt(fragment, [1]);
                element(env, element1, context, "bind-attr", [], { "class": "indexArrowCssDown" });
                return fragment;
              }
            };
          }();
          var child1 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    element = hooks.element;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element0 = dom.childAt(fragment, [1]);
                element(env, element0, context, "bind-attr", [], { "class": "indexArrowCssUp" });
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col pad-m-l border-bottom");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              block(env, morph0, context, "if", [get(env, context, "item.entity.isChangeNegative")], {}, child0, child1);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-row cursor-pointer");
            var el2 = dom.createTextNode("\n\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment(" Flag or icon ");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment(" Symbol description ");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "pad-s-t");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment(" Symbol up / down indicator ");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment(" Symbol last price ");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col-7 h-right v-top pad-s-t pad-m-l border-bottom ellipsis");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "font-l h-right highlight-fore-color bold pad-s-tb");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment(" Symbol change / % chg");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-col-6 h-right ltr pad-m-l border-bottom pad-widget-right ellipsis");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block,
                concat = hooks.concat,
                attribute = hooks.attribute,
                element = hooks.element,
                content = hooks.content,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [2]);
            var element3 = dom.childAt(element2, [3]);
            var element4 = dom.childAt(element3, [1]);
            var element5 = dom.childAt(element2, [7]);
            var element6 = dom.childAt(element2, [19]);
            var element7 = dom.childAt(element6, [1]);
            var element8 = dom.childAt(element6, [3]);
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            var attrMorph0 = dom.createAttrMorph(element2, 'id');
            var attrMorph1 = dom.createAttrMorph(element3, 'class');
            var attrMorph2 = dom.createAttrMorph(element4, 'class');
            var morph1 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
            var morph2 = dom.createMorphAt(element2, 11, 11);
            var morph3 = dom.createMorphAt(dom.childAt(element2, [15, 1]), 0, 0);
            var morph4 = dom.createMorphAt(element7, 0, 0);
            var morph5 = dom.createMorphAt(element8, 0, 0);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "item.isHeaderAvailable")], {}, child0, null);
            attribute(env, attrMorph0, element2, "id", concat(env, ["gms-", get(env, context, "item.entity.sym"), "-", get(env, context, "item.entity.exg")]));
            element(env, element2, context, "action", ["doubleClickRow", get(env, context, "item.entity")], { "on": "doubleClick" });
            attribute(env, attrMorph1, element3, "class", concat(env, ["layout-col-3 pad-s-t v-top border-bottom pad-widget-left ", get(env, context, "item.containerCss")]));
            attribute(env, attrMorph2, element4, "class", concat(env, [get(env, context, "item.icon")]));
            element(env, element5, context, "bind-attr", [], { "class": ":layout-col-8 :white-space-normal :sym-desc-line-height :v-top :pad-xs-t :border-bottom :symbol-fore-color :dual-row-height :font-l :bold :pad-s-l item.css" });
            content(env, morph1, context, "item.entity.sDes");
            block(env, morph2, context, "unless", [get(env, context, "isMobile")], {}, child1, null);
            inline(env, morph3, context, "formatNumber", [get(env, context, "item.entity.ltp"), get(env, context, "item.entity.deci")], {});
            element(env, element7, context, "bind-attr", [], { "class": ":pad-s-tb :font-l :bold item.entity.isChangeNegative:down-fore-color:up-fore-color" });
            inline(env, morph4, context, "formatNumberPercentage", [get(env, context, "item.entity.pctChg")], {});
            element(env, element8, context, "bind-attr", [], { "class": ":pad-s-tb :font-m item.entity.isChangeNegative:down-fore-color:up-fore-color" });
            inline(env, morph5, context, "formatNumber", [get(env, context, "item.entity.chg"), get(env, context, "item.entity.deci")], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element9 = dom.childAt(fragment, [3]);
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          var morph1 = dom.createMorphAt(element9, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element9, 'class');
          inline(env, morph0, context, "widget-header", [], { "class": "full-width", "widgetTitle": get(env, context, "gmsSymbols.title"), "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "setLink": "setLink", "hideSymbol": true });
          attribute(env, attrMorph0, element9, "class", concat(env, ["full-width ", subexpr(env, context, "if", [get(env, context, "isTablet"), "nano-content full-height-without-header", "layout-container pad-xs-t"], {})]));
          block(env, morph1, context, "each", [get(env, context, "gmsSymbols")], { "keyword": "item" }, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element10 = dom.childAt(fragment, [0]);
        var element11 = dom.childAt(element10, [3]);
        var element12 = dom.childAt(element11, [1]);
        var morph0 = dom.createMorphAt(element10, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element10, 'class');
        var attrMorph1 = dom.createAttrMorph(element11, 'class');
        var morph1 = dom.createMorphAt(element12, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element12, 'id');
        var attrMorph3 = dom.createAttrMorph(element12, 'class');
        attribute(env, attrMorph0, element10, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "widget_new full-height", "page-container gms-container-height mgn-s-t"], {})]));
        block(env, morph0, context, "unless", [get(env, context, "isWidgetHeaderDisable")], {}, child0, null);
        attribute(env, attrMorph1, element11, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isTablet"), "nano", ""], {})]));
        attribute(env, attrMorph2, element12, "id", concat(env, ["div-", get(env, context, "wkey")]));
        attribute(env, attrMorph3, element12, "class", concat(env, ["widget-container-new ", subexpr(env, context, "if", [get(env, context, "isTablet"), "nano", ""], {})]));
        block(env, morph1, context, "each", [get(env, context, "gmsSymbolsByAssetType")], { "keyword": "gmsSymbols" }, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/heatmap", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "widget-header", [], { "hideWidgetLink": true, "widgetTitle": get(env, context, "app.lang.labels.perHeatMap"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col overflow-visible pad-m-r");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            inline(env, morph0, context, "more-markets-dropdown", [], { "exchangeValue": get(env, context, "exchange"), "key": get(env, context, "wkey"), "setExchange": "setExchange" });
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col overflow-visible input-group pad-m-r");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            inline(env, morph0, context, "sub-markets-dropdown", [], { "exchange": get(env, context, "exchange"), "key": get(env, context, "wkey"), "currentMarketId": get(env, context, "currentSubMarketId"), "onSubMarketChanged": "setSubMarket" });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container toolbar-styles");
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col font-m fade-fore-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col dropdown overflow-visible pad-s-l");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-m-l font-m fade-fore-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "dropdown layout-col overflow-visible pad-s-l");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block,
              content = hooks.content,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0, 1, 1);
          var morph1 = dom.createMorphAt(element0, 3, 3);
          var morph2 = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          var morph3 = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
          var morph4 = dom.createMorphAt(dom.childAt(element0, [9]), 0, 0);
          var morph5 = dom.createMorphAt(dom.childAt(element0, [11]), 1, 1);
          block(env, morph0, context, "if", [get(env, context, "isMoreMarketsAvailable")], {}, child0, null);
          block(env, morph1, context, "if", [get(env, context, "isSubMarketsAvailable")], {}, child1, null);
          content(env, morph2, context, "app.lang.labels.sizeRepresenation");
          inline(env, morph3, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "sizeDropdownOptions"), "defaultSelect": get(env, context, "defaultForSizeDropdown"), "valueKey": "val", "labelKey": "DisplayName", "selectedLabelKey": "DisplayName", "wkey": get(env, context, "wkey"), "selectAction": "setSizeField" });
          content(env, morph4, context, "app.lang.labels.colorRepresenation");
          inline(env, morph5, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "colorDropdownOptions"), "defaultSelect": get(env, context, "defaultForColorDropdown"), "valueKey": "val", "labelKey": "DisplayName", "selectedLabelKey": "DisplayName", "wkey": get(env, context, "wkey"), "selectAction": "setColorField" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width widget_new full-height");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-container-new");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "id", "treemap_container");
        dom.setAttribute(el3, "class", "full-width heat-map-content");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(element1, 1, 1);
        var morph1 = dom.createMorphAt(element2, 1, 1);
        var morph2 = dom.createMorphAt(element2, 3, 3);
        var morph3 = dom.createMorphAt(element2, 5, 5);
        block(env, morph0, context, "unless", [get(env, context, "isMobile")], {}, child0, null);
        block(env, morph1, context, "unless", [get(env, context, "isMobile")], {}, child1, null);
        inline(env, morph2, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph3, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/indices-world-map", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "vmap");
        dom.setAttribute(el1, "class", "full-height");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/market-depth-summary", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-8 row-height up-fore-color bold h-right pad-s-r");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.qty"), 0], {});
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-8 row-height up-fore-color h-right pad-s-r");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.qty"), 0], {});
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-8 row-height up-fore-color bold  table-row-up-back-color font-l cursor-pointer");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element9 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element9, 0, 0);
            element(env, element9, context, "action", ["onClick", get(env, context, "bidItem")], { "on": "click" });
            inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.prc"), get(env, context, "symbolObj.deci")], {});
            return fragment;
          }
        };
      }();
      var child3 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-8 row-height up-fore-color bold  table-row-up-back-color cursor-pointer");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element8 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element8, 0, 0);
            element(env, element8, context, "action", ["onClick", get(env, context, "bidItem")], { "on": "click" });
            inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.prc"), get(env, context, "symbolObj.deci")], {});
            return fragment;
          }
        };
      }();
      var child4 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "progress-bar-height pos-abs bottom-zero left-zero prominent-up-back-color");
            dom.setAttribute(el1, "role", "progressbar");
            dom.setAttribute(el1, "aria-valuenow", "70");
            dom.setAttribute(el1, "aria-valuemin", "10");
            dom.setAttribute(el1, "aria-valuemax", "100");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element7 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createUnsafeAttrMorph(element7, 'style');
            attribute(env, attrMorph0, element7, "style", get(env, context, "bidItem.per"));
            return fragment;
          }
        };
      }();
      var child5 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "progress-bar-height pos-abs bottom-zero left-zero fade-up-back-color");
            dom.setAttribute(el1, "role", "progressbar");
            dom.setAttribute(el1, "aria-valuenow", "70");
            dom.setAttribute(el1, "aria-valuemin", "10");
            dom.setAttribute(el1, "aria-valuemax", "100");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element6 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createUnsafeAttrMorph(element6, 'style');
            attribute(env, attrMorph0, element6, "style", get(env, context, "bidItem.per"));
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-row");
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width pos-rel");
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-row");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element10 = dom.childAt(fragment, [1, 1]);
          var element11 = dom.childAt(element10, [1]);
          var morph0 = dom.createMorphAt(element11, 1, 1);
          var morph1 = dom.createMorphAt(element11, 3, 3);
          var morph2 = dom.createMorphAt(element10, 3, 3);
          block(env, morph0, context, "if", [get(env, context, "bidItem.isHighestVol")], {}, child0, child1);
          block(env, morph1, context, "if", [get(env, context, "bidItem.isBestPrice")], {}, child2, child3);
          block(env, morph2, context, "if", [get(env, context, "bidItem.isHighestVol")], {}, child4, child5);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-8 row-height down-fore-color bold table-row-down-back-color font-l cursor-pointer");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element3 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element3, 0, 0);
            element(env, element3, context, "action", ["onClick", get(env, context, "offerItem")], { "on": "click" });
            inline(env, morph0, context, "formatNumber", [get(env, context, "offerItem.prc"), get(env, context, "symbolObj.deci")], {});
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-8 row-height down-fore-color bold table-row-down-back-color cursor-pointer");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element2, 0, 0);
            element(env, element2, context, "action", ["onClick", get(env, context, "offerItem")], { "on": "click" });
            inline(env, morph0, context, "formatNumber", [get(env, context, "offerItem.prc"), get(env, context, "symbolObj.deci")], {});
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-8 row-height down-fore-color bold h-right pad-s-r");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            inline(env, morph0, context, "formatNumber", [get(env, context, "offerItem.qty"), 0], {});
            return fragment;
          }
        };
      }();
      var child3 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-8 row-height down-fore-color h-right pad-s-r");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            inline(env, morph0, context, "formatNumber", [get(env, context, "offerItem.qty"), 0], {});
            return fragment;
          }
        };
      }();
      var child4 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "progress-bar-height pos-abs bottom-zero right-zero prominent-down-back-color");
            dom.setAttribute(el1, "role", "progressbar");
            dom.setAttribute(el1, "aria-valuenow", "90");
            dom.setAttribute(el1, "aria-valuemin", "0");
            dom.setAttribute(el1, "aria-valuemax", "100");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createUnsafeAttrMorph(element1, 'style');
            attribute(env, attrMorph0, element1, "style", get(env, context, "offerItem.per"));
            return fragment;
          }
        };
      }();
      var child5 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "progress-bar-height pos-abs bottom-zero right-zero fade-down-back-color");
            dom.setAttribute(el1, "role", "progressbar");
            dom.setAttribute(el1, "aria-valuenow", "90");
            dom.setAttribute(el1, "aria-valuemin", "0");
            dom.setAttribute(el1, "aria-valuemax", "100");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createUnsafeAttrMorph(element0, 'style');
            attribute(env, attrMorph0, element0, "style", get(env, context, "offerItem.per"));
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-row");
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width pos-rel");
          var el3 = dom.createTextNode("\n\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-row");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1, 1]);
          var element5 = dom.childAt(element4, [1]);
          var morph0 = dom.createMorphAt(element5, 1, 1);
          var morph1 = dom.createMorphAt(element5, 3, 3);
          var morph2 = dom.createMorphAt(element4, 3, 3);
          block(env, morph0, context, "if", [get(env, context, "offerItem.isBestPrice")], {}, child0, child1);
          block(env, morph1, context, "if", [get(env, context, "offerItem.isHighestVol")], {}, child2, child3);
          block(env, morph2, context, "if", [get(env, context, "offerItem.isHighestVol")], {}, child4, child5);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new border-none");
        dom.setAttribute(el1, "style", "height: 132px");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "nano quote-page-second-row-wght");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-12 v-top");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container font-m h-middle full-width");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-row");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-container full-width");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col-8 row-height-header font-m data-table-header");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col-8 row-height-header font-m data-table-header");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-12 v-top");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "width", "50%");
        dom.setAttribute(el5, "border", "0");
        dom.setAttribute(el5, "cellspacing", "0");
        dom.setAttribute(el5, "cellpadding", "0");
        dom.setAttribute(el5, "class", "layout-container font-m h-middle full-width");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-row");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-container full-width");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col-8 row-height-header font-m data-table-header");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-col-8 row-height-header font-m data-table-header");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element12 = dom.childAt(fragment, [0, 1, 1]);
        var element13 = dom.childAt(element12, [1, 1]);
        var element14 = dom.childAt(element13, [1, 1]);
        var element15 = dom.childAt(element12, [3, 1]);
        var element16 = dom.childAt(element15, [1, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element14, [3]), 0, 0);
        var morph2 = dom.createMorphAt(element13, 3, 3);
        var morph3 = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        var morph4 = dom.createMorphAt(dom.childAt(element16, [3]), 0, 0);
        var morph5 = dom.createMorphAt(element15, 3, 3);
        content(env, morph0, context, "app.lang.labels.quantity");
        content(env, morph1, context, "app.lang.labels.bid");
        block(env, morph2, context, "each", [get(env, context, "bidRecordList")], { "keyword": "bidItem" }, child0, null);
        content(env, morph3, context, "app.lang.labels.offer");
        content(env, morph4, context, "app.lang.labels.quantity");
        block(env, morph5, context, "each", [get(env, context, "offerRecordList")], { "keyword": "offerItem" }, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/market-overview", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pad-m-t");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width pad-l-tb pad-m-lr shade-back mgn-m-t xs-border-radius");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-container full-width");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col pad-l-b h-left");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col-24 pad-l-b h-left pad-m-r");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "full-height font-l bold");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-container full-width");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col-10 widget-vline");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-container full-width pad-m-b pad-m-t pad-m-l");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-col pad-l-b h-middle pad-m-r");
          var el7 = dom.createTextNode("\n                                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("span");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-container full-width pad-m-l");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-col pad-l-b h-middle pad-m-r");
          var el7 = dom.createTextNode("\n                                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("span");
          dom.setAttribute(el7, "class", "full-height font-l");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col-14 pad-widget-right pad-l-l");
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-container pad-l-b h-left pad-m-r");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "full-height symbol-fore-color");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "layout-container");
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          var el7 = dom.createTextNode("\n                                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("i");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("div");
          dom.setAttribute(el6, "class", "layout-container");
          var el7 = dom.createTextNode("\n                                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("div");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                                ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              concat = hooks.concat,
              attribute = hooks.attribute,
              content = hooks.content,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [1, 1]);
          var element3 = dom.childAt(element0, [3]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element4, [1, 1, 1]);
          var element6 = dom.childAt(element3, [3]);
          var element7 = dom.childAt(element6, [3]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(element7, [3]);
          var element11 = dom.childAt(element10, [1]);
          var element12 = dom.childAt(element10, [3]);
          var attrMorph0 = dom.createAttrMorph(element2, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element1, [3, 1]), 0, 0);
          var morph1 = dom.createMorphAt(element5, 0, 0);
          var attrMorph1 = dom.createAttrMorph(element5, 'class');
          var morph2 = dom.createMorphAt(dom.childAt(element4, [3, 1, 1]), 0, 0);
          var morph3 = dom.createMorphAt(dom.childAt(element6, [1, 1]), 0, 0);
          var morph4 = dom.createMorphAt(element8, 3, 3);
          var morph5 = dom.createMorphAt(element11, 0, 0);
          var morph6 = dom.createMorphAt(element12, 0, 0);
          element(env, element0, context, "action", ["loadSubMarketOverview", get(env, context, "exchange.exg")], {});
          attribute(env, attrMorph0, element2, "class", concat(env, [get(env, context, "exchange.flagCss")]));
          content(env, morph0, context, "exchange.des");
          attribute(env, attrMorph1, element5, "class", concat(env, ["full-height bold ", get(env, context, "exchange.colorCss")]));
          content(env, morph1, context, "exchange.statStr");
          content(env, morph2, context, "exchange.marketTime");
          content(env, morph3, context, "exchange.index.dSym");
          element(env, element8, context, "bind-attr", [], { "class": ":layout-container :ltr exchange.indexCss :pad-l-b" });
          element(env, element9, context, "bind-attr", [], { "class": "exchange.ltpIconCSS :glyphicon :font-m :pad-m-r" });
          inline(env, morph4, context, "formatNumber", [get(env, context, "exchange.index.ltp"), get(env, context, "exchange.index.deci")], {});
          element(env, element11, context, "bind-attr", [], { "class": ":layout-inline :ltr exchange.backColorCSS exchange.fontColorCSS :pad-s-tb :pad-l-lr :xs-border-radius" });
          inline(env, morph5, context, "formatNumber", [get(env, context, "exchange.index.chg"), get(env, context, "exchange.index.deci")], {});
          element(env, element12, context, "bind-attr", [], { "class": ":layout-inline :ltr :bold :pad-l-l exchange.indexCss" });
          inline(env, morph6, context, "formatNumberPercentage", [get(env, context, "exchange.index.pctChg"), get(env, context, "exchange.index.deci")], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width full-height pad-widget-left pad-widget-right ");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container full-height-without-header");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        block(env, morph0, context, "each", [get(env, context, "exchangeArray")], { "keyword": "exchange" }, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/about-us", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col ltr highlight-fore-color");
            var el2 = dom.createElement("a");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element3 = dom.childAt(fragment, [1, 0]);
            var morph0 = dom.createMorphAt(element3, 0, 0);
            var attrMorph0 = dom.createAttrMorph(element3, 'href');
            attribute(env, attrMorph0, element3, "href", concat(env, ["tel: ", get(env, context, "field.value")]));
            content(env, morph0, context, "field.value");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col highlight-fore-color");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "target", "_blank");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element2 = dom.childAt(fragment, [1, 0]);
              var morph0 = dom.createMorphAt(element2, 0, 0);
              var attrMorph0 = dom.createAttrMorph(element2, 'href');
              attribute(env, attrMorph0, element2, "href", concat(env, ["mailto:", get(env, context, "field.value")]));
              content(env, morph0, context, "field.value");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col highlight-fore-color");
                var el2 = dom.createElement("a");
                dom.setAttribute(el2, "target", "_blank");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                    ");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    concat = hooks.concat,
                    attribute = hooks.attribute,
                    content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element1 = dom.childAt(fragment, [1, 0]);
                var morph0 = dom.createMorphAt(element1, 0, 0);
                var attrMorph0 = dom.createAttrMorph(element1, 'href');
                attribute(env, attrMorph0, element1, "href", concat(env, ["http://", get(env, context, "field.value")]));
                content(env, morph0, context, "field.value");
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "field.isUrl")], {}, child0, null);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "field.isEmail")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "font-m fore-color pad-s-b");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "field.desc");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col fore-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              content = hooks.content,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element4, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element4, 3, 3);
          var morph2 = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          attribute(env, attrMorph0, element4, "class", concat(env, ["layout-container font-l ", subexpr(env, context, "if", [get(env, context, "field.desc"), "pad-s-r left", "pad-s-b"], {})]));
          content(env, morph0, context, "field.lanKey");
          block(env, morph1, context, "if", [get(env, context, "field.isTel")], {}, child0, child1);
          block(env, morph2, context, "if", [get(env, context, "field.desc")], {}, child2, null);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "contactUsContainer");
          dom.setAttribute(el1, "class", "layout-col pad-m-r pad-l-tb");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-inline pad-m-l");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1, 1]);
          var morph0 = dom.createMorphAt(element0, 0, 0);
          element(env, element0, context, "action", ["onBackToLogin"], {});
          content(env, morph0, context, "app.lang.labels.backToLogin");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "aboutUsPopup");
        dom.setAttribute(el1, "class", "widget-container-new full-width full-height container-back-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container full-width pad-l-tb");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col pad-l-b h-middle pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "about-us-logo theme-logo-properties");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-row h-middle fore-color font-l pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "pad-s-r");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "y-scroll about-us-container-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-m-tb h-left pad-widget-left pad-widget-right ltr");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container fade-fore-color h-left font-l pad-s-b bold");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-s-t pad-l-b pad-widget-left pad-widget-right h-left full-width");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container pad-l-t pad-s-b font-s h-left pad-widget-left pad-widget-right");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container pad-l-tb font-s h-left pad-widget-left pad-widget-right");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element5 = dom.childAt(fragment, [0]);
        var element6 = dom.childAt(element5, [1, 3]);
        var element7 = dom.childAt(element5, [3]);
        var element8 = dom.childAt(element7, [1]);
        var morph0 = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
        var morph2 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        var morph3 = dom.createMorphAt(element8, 3, 3);
        var morph4 = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        var morph5 = dom.createMorphAt(dom.childAt(element5, [5, 1]), 0, 0);
        var morph6 = dom.createMorphAt(dom.childAt(element5, [7]), 1, 1);
        var morph7 = dom.createMorphAt(element5, 9, 9);
        content(env, morph0, context, "app.lang.labels.version");
        content(env, morph1, context, "longVersion");
        content(env, morph2, context, "app.lang.labels.contactInformation");
        inline(env, morph3, context, "partial", ["price/widgets/about-us-contact-info"], {});
        block(env, morph4, context, "each", [get(env, context, "supportedContacts")], { "keyword": "field" }, child0, null);
        content(env, morph5, context, "replaceCopyrightText");
        content(env, morph6, context, "app.lang.messages.copyrightLaw");
        block(env, morph7, context, "unless", [get(env, context, "isBackToLoginDisabled")], {}, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/alert-context-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "font-xxx-l bold btn-txt-color pad-s-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "btn btn-alert btn-animation bold");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "icon-rename font-xxx-l");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "font-xxx-l bold btn-txt-color pad-m-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "btn btn-alert btn-animation bold");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "glyphicon glyphicon-trash font-xxx-l");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-24 pad-l-lr");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ellipsis font-xx-l h-left pad-s-tb symbol-fore-color bold");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ellipsis font-x-l h-left pad-s-b fade-fore-color");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            element = hooks.element,
            subexpr = hooks.subexpr,
            attribute = hooks.attribute,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1, 1]);
        var element3 = dom.childAt(element0, [3]);
        var element4 = dom.childAt(element0, [5]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var attrMorph0 = dom.createAttrMorph(element2, 'disabled');
        var morph0 = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
        element(env, element1, context, "action", ["buttonMenuAction", true, get(env, context, "view.rowValues"), get(env, context, "view.content")], {});
        attribute(env, attrMorph0, element2, "disabled", subexpr(env, context, "isEqual", [get(env, context, "view.rowValues.content.isEditEnabled"), false, true], {}));
        element(env, element3, context, "action", ["buttonMenuAction", false, get(env, context, "view.rowValues"), get(env, context, "view.content")], {});
        element(env, element5, context, "view.styleFirstValue", [], {});
        content(env, morph0, context, "view.rowValues.content.dispProp1");
        element(env, element6, context, "view.styleSecondValue", [], {});
        content(env, morph1, context, "view.rowValues.content.exg");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/alert-price", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "global-search-mobile", [], { "enableContentSettings": false, "searchKey": get(env, context, "searchKey"), "defaultLink": get(env, context, "defaultLink"), "showWidgetButtons": true, "clickAction": "onSymbolSelected", "closePopup": "closeSearchPopup", "openPopup": "showSearchPopup", "analyticsKey": get(env, context, "gaKey") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" Default value of this boolean value is true ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 3, 3, contextualElement);
          inline(env, morph0, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "arrangedContent"), "rowHeight": 60, "hasFooter": false, "isActiveOnSymbolChange": false, "minHeaderHeight": 32, "isRefreshed": get(env, context, "isRefreshed"), "headerNames": get(env, context, "headerNames"), "isOddEvenRowStyleDisabled": true, "contextPath": get(env, context, "contextPath"), "rowClickAction": "clickRow", "isContextPanel": get(env, context, "isContextPanel"), "id": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height overflow-hidden");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container font-xxx-l full-width pad-l-lr pad-s-b pad-m-t");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "input-group pad-s-lr full-width font-m left mgn-s-b full-width");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pos-abs top-zero fade-fore-color search-icon");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "glyphicon glyphicon-search");
        dom.setAttribute(el5, "aria-hidden", "true");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "search-popup-price-alert font-m alert-pop-up-line-height");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container full-width font-m pad-l-lr pad-s-b pad-l-t");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-11 pad-s-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-2");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-11 pad-s-r");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container full-width font-m pad-l-lr pad-s-tb");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-11 pad-m-tb pad-s-l font-xx-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-2");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-11 pad-s-r");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "font-x-l bold btn-txt-color");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "button");
        dom.setAttribute(el5, "class", "btn bold confirm-btn btn-animation add-alert-btn font-l");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element0, [3]);
        var element4 = dom.childAt(element0, [5]);
        var element5 = dom.childAt(element4, [5, 1, 1]);
        var element6 = dom.childAt(element0, [7]);
        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        var morph1 = dom.createMorphAt(element2, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element2, 'style');
        var morph2 = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element3, [5]), 1, 1);
        var morph4 = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
        var attrMorph1 = dom.createAttrMorph(element5, 'disabled');
        var morph5 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        var morph6 = dom.createMorphAt(element6, 1, 1);
        var morph7 = dom.createMorphAt(element6, 3, 3);
        var morph8 = dom.createMorphAt(element6, 5, 5);
        var attrMorph2 = dom.createAttrMorph(element6, 'class');
        inline(env, morph0, context, "input", [], { "type": "text", "value": get(env, context, "searchKey"), "action": "showSearchPopup", "class": "alert-padding-left full-width filter-panel alert-filter-panel form-control mousetrap", "placeholder": get(env, context, "app.lang.labels.symbol") });
        attribute(env, attrMorph0, element2, "style", concat(env, ["top: ", get(env, context, "searchPopupTop")]));
        block(env, morph1, context, "modal-popup", [], { "isEnabled": false, "id": "alertSymbolSearch", "isOverlayEnabled": true }, child0, null);
        inline(env, morph2, context, "bootstrap-dropdown-select", [], { "value": get(env, context, "selectedParameter"), "options": get(env, context, "parameters"), "defaultSelect": get(env, context, "defaultParameter"), "valueKey": "value", "labelKey": "caption", "selectAction": "setParameter", "buttonClass": "full-width dropdown-solid-back-color", "lblClass": "dropdown-item-container" });
        inline(env, morph3, context, "bootstrap-dropdown-select", [], { "value": get(env, context, "selectedCriteria"), "options": get(env, context, "criteria"), "defaultSelect": get(env, context, "defaultCriteria"), "valueKey": "value", "labelKey": "caption", "selectAction": "setCriteria", "buttonClass": "full-width dropdown-solid-back-color", "lblClass": "dropdown-item-container" });
        inline(env, morph4, context, "input-field-number", [], { "class": "form-control search-query h-right fore-color font-xx-l full-width alert-text-box input-font-size", "decimalPlaces": get(env, context, "valueDecimalPlaces"), "maxlength": 15, "numValue": get(env, context, "value"), "isScrollDisabled": true, "placeholder": get(env, context, "alertValuePlaceHolder"), "id": "alertValue" });
        attribute(env, attrMorph1, element5, "disabled", get(env, context, "isAddAlertDisabled"));
        element(env, element5, context, "action", ["addAlert"], {});
        content(env, morph5, context, "alertButtonText");
        attribute(env, attrMorph2, element6, "class", concat(env, ["full-width pos-rel ", get(env, context, "tableHeight")]));
        inline(env, morph6, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph7, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color mgn-l-t", "backgroundCss": "pos-abs h-middle mgn-l-t" });
        block(env, morph8, context, "if", [get(env, context, "isWidgetRefreshed")], {}, child1, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/chart/quote-chart", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
            inline(env, morph0, context, "global-search-mobile", [], { "enableContentSettings": false, "searchKey": get(env, context, "searchKey"), "defaultLink": get(env, context, "defaultLink"), "showWidgetButtons": true, "clickAction": "onSearchSymbolSelected", "closePopup": "closeSearchPopup", "openPopup": "showSearchPopup", "analyticsKey": get(env, context, "gaKey") });
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                element = hooks.element,
                subexpr = hooks.subexpr,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element19 = dom.childAt(fragment, [1]);
            var element20 = dom.childAt(element19, [1]);
            var attrMorph0 = dom.createAttrMorph(element19, 'class');
            var morph0 = dom.createMorphAt(element20, 0, 0);
            var attrMorph1 = dom.createAttrMorph(element20, 'class');
            attribute(env, attrMorph0, element19, "class", concat(env, ["layout-col border-right ", get(env, context, "tabItem.activeClass")]));
            element(env, element19, context, "action", ["chartTypeSelected", get(env, context, "tabItem")], {});
            attribute(env, attrMorph1, element20, "class", concat(env, [subexpr(env, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "chart-free-space", 2], {}), "pad-m-lr", "pad-l-lr"], {})]));
            content(env, morph0, context, "tabItem.DisplayName");
            return fragment;
          }
        };
      }();
      var child2 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
              inline(env, morph0, context, "global-search-mobile", [], { "enableContentSettings": false, "searchKey": get(env, context, "compareSearchKey"), "defaultLink": get(env, context, "defaultLink"), "showWidgetButtons": true, "clickAction": "onCompareSearchSymbolSelected", "closePopup": "closeCompareSearchPopup", "openPopup": "showCompareSearchPopup", "analyticsKey": get(env, context, "gaKey") });
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("  =========  Search Box - 02 =============  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col border-right");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width full-height pos-rel");
            dom.setAttribute(el2, "style", "width: 120px");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "pos-abs fade-fore-color font-xx-l full-height overflow-hidden transform z-index-hundred full-width");
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createElement("i");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-search pad-s-all mgn-xs-t");
            dom.setAttribute(el5, "aria-hidden", "true");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("<div class=\"layout-col-24 pad-l-l\" {{action 'toggleCompareSearch'}}>\n                            <span class=\"fore-color pad-l-l bold font-xx-l\">{{app.lang.labels.compare}}</span>\n                        </div>");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "search-popup-mobile");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("  =========  /Search Box - 02 =============  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col border-right layout-col-24");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("  =========  More =============  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "pad-m-lr");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("  =========  /More =============  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                get = hooks.get,
                inline = hooks.inline,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element16 = dom.childAt(fragment, [3]);
            var element17 = dom.childAt(element16, [1, 1]);
            var element18 = dom.childAt(element17, [1, 0]);
            var morph0 = dom.createMorphAt(element17, 3, 3);
            var morph1 = dom.createMorphAt(dom.childAt(element16, [3]), 1, 1);
            var morph2 = dom.createMorphAt(dom.childAt(fragment, [11, 1]), 1, 1);
            element(env, element17, context, "action", ["toggleCompareSearch"], {});
            element(env, element18, context, "action", ["toggleCompareSearch"], {});
            inline(env, morph0, context, "input-field-text", [], { "id": "compareChartPanelSearch", "value": get(env, context, "compareSearchKey"), "type": "text", "class": "font-l search-ctrl search-query v-top chart-search", "placeholder": get(env, context, "app.lang.labels.compare") });
            block(env, morph1, context, "modal-popup", [], { "isEnabled": false, "id": "compareChartPanelSearchPopup", "isOverlayEnabled": true, "isContainerAvailable": true, "containerAction": "toggleDisplay" }, child0, null);
            inline(env, morph2, context, "bootstrap-icon-dropdown", [], { "options": get(env, context, "moreItems"), "valueKey": "DisplayName", "labelKey": "DisplayName", "selectAction": "onItemSelection", "iconStyle": "icon-ellipsis-v glyphicon font-4x-l", "dropdownCss": "dropdown-menu-align-right", "itemCss": "font-s" });
            return fragment;
          }
        };
      }();
      var child3 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col border-right");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "pad-m-lr");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element15 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
            element(env, element15, context, "action", ["onResetChart", get(env, context, "tabItem")], {});
            content(env, morph0, context, "app.lang.labels.reset");
            return fragment;
          }
        };
      }();
      var child4 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col border-right");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "type", "submit");
              dom.setAttribute(el2, "class", "dropdown-text-only chart-status-panel-button-height btn btn-buy btn-animation up-fore-color font-l");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col border-right");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "type", "submit");
              dom.setAttribute(el2, "class", "dropdown-text-only chart-status-panel-button-height btn btn-sell btn-animation up-fore-color font-l");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element13 = dom.childAt(fragment, [1, 1]);
              var element14 = dom.childAt(fragment, [3, 1]);
              var morph0 = dom.createMorphAt(element13, 0, 0);
              var morph1 = dom.createMorphAt(element14, 0, 0);
              element(env, element13, context, "action", ["onBuyMore"], {});
              content(env, morph0, context, "app.lang.labels.buyMore");
              element(env, element14, context, "action", ["onLiquidate"], {});
              content(env, morph1, context, "app.lang.labels.liquidate");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col border-right");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "bold btn-txt-color");
              var el3 = dom.createElement("button");
              dom.setAttribute(el3, "type", "button");
              dom.setAttribute(el3, "class", "dropdown-text-only chart-status-panel-button-height btn btn-buy up-back-color btn-animation");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  attribute = hooks.attribute,
                  element = hooks.element,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element12 = dom.childAt(fragment, [1, 1, 0]);
              var morph0 = dom.createMorphAt(element12, 0, 0);
              var attrMorph0 = dom.createAttrMorph(element12, 'disabled');
              attribute(env, attrMorph0, element12, "disabled", get(env, context, "isIndices"));
              element(env, element12, context, "action", ["buy"], {});
              content(env, morph0, context, "app.lang.labels.buy");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "isLiquidateEnable")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child5 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col border-right");
              var el2 = dom.createTextNode("\n\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout-col cursor-pointer pad-s-lr");
              var el3 = dom.createTextNode("\n                            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "icon-fore-color");
              var el4 = dom.createTextNode("\n                                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("i");
              dom.setAttribute(el4, "class", "icon-share glyphicon pad-m-lr font-4x-l");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element11 = dom.childAt(fragment, [1, 1]);
              element(env, element11, context, "action", ["onShareScreen"], {});
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "unless", [get(env, context, "isShareIconDisabled")], {}, child0, null);
            return fragment;
          }
        };
      }();
      var child6 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col border-right");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "icon-fore-color");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element9 = dom.childAt(fragment, [1]);
            var element10 = dom.childAt(element9, [1, 1]);
            element(env, element9, context, "action", ["addStocksToCustomWL"], {});
            element(env, element10, context, "bind-attr", [], { "class": ":glyphicon-star-empty :glyphicon :pad-m-lr :font-4x-l isAddedToCustomWatchList:symbol-fore-color" });
            return fragment;
          }
        };
      }();
      var child7 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col border-right");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout-col pad-s-l pad-l-r h-middle font-4x-l fade-fore-color overflow-visible");
              var el3 = dom.createTextNode("\n                            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "icon-fore-color");
              var el4 = dom.createElement("i");
              dom.setAttribute(el4, "class", "glyphicon glyphicon-bell");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element8 = dom.childAt(fragment, [1, 1]);
              element(env, element8, context, "action", ["itemClicked"], {});
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "isAlertIconEnabled")], {}, child0, null);
            return fragment;
          }
        };
      }();
      var child8 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "pos-abs full-width full-height transparent top-zero");
            dom.setAttribute(el1, "style", "z-index: 95");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element7 = dom.childAt(fragment, [1]);
            element(env, element7, context, "action", ["onSymbolPopupFocusLost"], {});
            return fragment;
          }
        };
      }();
      var child9 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "display-block");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ellipsis v-bottom pad-s-t");
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element6 = dom.childAt(fragment, [1, 1]);
            var attrMorph0 = dom.createAttrMorph(element6, 'class');
            var morph0 = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
            attribute(env, attrMorph0, element6, "class", concat(env, ["layout-col ellipsis pad-s-t h-left pad-m-r pad-widget-left bold symbol-fore-color ", get(env, context, "symbolFontCss"), " "]));
            content(env, morph0, context, "symbolObj.dispProp1");
            return fragment;
          }
        };
      }();
      var child10 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col pad-s-t h-left pad-m-r pad-widget-left font-xx-l");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("(");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(")");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline pad-l-l v-bottom");
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "hu left ltr font-l fade-fore-color");
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("O ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "id", "huOpen");
            dom.setAttribute(el4, "class", "pad-m-r bold");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("H ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "id", "huHigh");
            dom.setAttribute(el4, "class", "pad-m-r bold");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("L ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "id", "huLow");
            dom.setAttribute(el4, "class", "pad-m-r bold");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("C ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "id", "huClose");
            dom.setAttribute(el4, "class", "pad-m-r bold");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "id", "dynamic-study-view");
            dom.setAttribute(el1, "class", "chart-data-view pad-widget-left");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                get = hooks.get,
                inline = hooks.inline,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element0, [3]);
            var element4 = dom.childAt(element0, [5]);
            var element5 = dom.childAt(element0, [7, 1]);
            var morph0 = dom.createMorphAt(element1, 3, 3);
            var morph1 = dom.createMorphAt(element3, 0, 0);
            var morph2 = dom.createMorphAt(element4, 1, 1);
            var morph3 = dom.createMorphAt(dom.childAt(element5, [2]), 0, 0);
            var morph4 = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
            var morph5 = dom.createMorphAt(dom.childAt(element5, [8]), 0, 0);
            var morph6 = dom.createMorphAt(dom.childAt(element5, [11]), 0, 0);
            element(env, element1, context, "bind-attr", [], { "class": ":layout-inline :ltr :bold :font-xx-l colorCSS" });
            element(env, element2, context, "bind-attr", [], { "class": "ltpIconCSS :glyphicon :v-bottom :font-m" });
            inline(env, morph0, context, "formatNumber", [get(env, context, "symbolObj.ltp")], {});
            element(env, element3, context, "bind-attr", [], { "class": ":layout-inline :ltr :v-bottom :font-l :pad-widget-left colorCSS" });
            inline(env, morph1, context, "formatNumber", [get(env, context, "symbolObj.chg")], {});
            element(env, element4, context, "bind-attr", [], { "class": ":layout-inline :ltr :v-bottom :font-l :pad-m-l colorCSS" });
            inline(env, morph2, context, "formatNumberPercentage", [get(env, context, "symbolObj.pctChg")], {});
            content(env, morph3, context, "pointOpen");
            content(env, morph4, context, "pointHigh");
            content(env, morph5, context, "pointLow");
            content(env, morph6, context, "pointClose");
            return fragment;
          }
        };
      }();
      var child11 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "pad-s-lr border-right");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "subMarket");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width pad-widget-left fade-fore-color font-x-l chart-tab-panel");
          dom.setAttribute(el1, "style", "height: 35px;");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Search Box - 01 =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col border-right");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-container full-width full-height pos-rel");
          dom.setAttribute(el3, "style", "width: 120px");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          var el6 = dom.createElement("i");
          dom.setAttribute(el6, "class", "glyphicon glyphicon-search pad-s-all mgn-xs-t");
          dom.setAttribute(el6, "aria-hidden", "true");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("<input class=\"\" id=\"chartPanelSearch\" placeholder=\"Search\" value=\"\" style=\"width: 85px\">");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col-24 pad-l-l");
          var el5 = dom.createTextNode("\n                        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "fore-color pad-l-l bold font-xx-l");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "search-popup-mobile");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("  =========  /Search Box - 01 =============  ");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Period =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col");
          dom.setAttribute(el2, "data-id", "period-dropdown");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-container full-height");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  /Period =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Chart Styles =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "data-id", "chartStyles-dropdown");
          dom.setAttribute(el2, "class", "layout-col border-right");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "pad-m-lr");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  /Chart Styles =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Indicators =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col border-right");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "pad-m-lr");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  /Indicators =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Reset =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  /Reset =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Trading Panel =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  /Trading Panel =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Share =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  /Share =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Custom WL =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  /Custom WL =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  Alert =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("  =========  /Alert =============  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "data-id", "chart-free-space");
          dom.setAttribute(el2, "class", "layout-col-24");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "horizontal-separator mgn-m-lr mgn-s-b");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("  =========  Chart Details =============  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width pos-abs pad-s-l z-index-hundred ltr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "display-block");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("  =========  /Chart Details =============  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("  =========  Chart Background =============  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "detailPanelChart");
          dom.setAttribute(el1, "class", "layout-container full-height full-width pos-abs");
          dom.setAttribute(el1, "style", "z-index: 0");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col h-middle");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "style", "font-size: 110px; color: rgba(221,221,221,0.42)");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "pos-abs bottom-zero pad-xs-b left-zero font-l fade-fore-color");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "pad-s-lr border-right");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "pad-s-lr border-right");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "pad-s-lr");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("  =========  /Chart Background =============  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element,
              inline = hooks.inline,
              content = hooks.content,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element21 = dom.childAt(fragment, [1]);
          var element22 = dom.childAt(element21, [3]);
          var element23 = dom.childAt(element22, [1]);
          var element24 = dom.childAt(element23, [1]);
          var element25 = dom.childAt(element24, [1, 0]);
          var element26 = dom.childAt(element23, [3]);
          var element27 = dom.childAt(fragment, [9]);
          var element28 = dom.childAt(fragment, [15]);
          var element29 = dom.childAt(element28, [3]);
          var attrMorph0 = dom.createAttrMorph(element24, 'class');
          var morph0 = dom.createMorphAt(element24, 5, 5);
          var morph1 = dom.createMorphAt(dom.childAt(element26, [1]), 0, 0);
          var morph2 = dom.createMorphAt(dom.childAt(element22, [3]), 1, 1);
          var morph3 = dom.createMorphAt(dom.childAt(element21, [7, 1]), 1, 1);
          var morph4 = dom.createMorphAt(dom.childAt(element21, [13, 1]), 1, 1);
          var morph5 = dom.createMorphAt(dom.childAt(element21, [19, 1]), 1, 1);
          var morph6 = dom.createMorphAt(element21, 23, 23);
          var morph7 = dom.createMorphAt(element21, 27, 27);
          var morph8 = dom.createMorphAt(element21, 33, 33);
          var morph9 = dom.createMorphAt(element21, 39, 39);
          var morph10 = dom.createMorphAt(element21, 45, 45);
          var morph11 = dom.createMorphAt(element21, 51, 51);
          var morph12 = dom.createMorphAt(fragment, 5, 5, contextualElement);
          var morph13 = dom.createMorphAt(element27, 1, 1);
          var morph14 = dom.createMorphAt(dom.childAt(element27, [3]), 1, 1);
          var morph15 = dom.createMorphAt(dom.childAt(element28, [1, 1]), 0, 0);
          var morph16 = dom.createMorphAt(dom.childAt(element29, [1]), 0, 0);
          var morph17 = dom.createMorphAt(dom.childAt(element29, [3]), 0, 0);
          var morph18 = dom.createMorphAt(element29, 5, 5);
          var morph19 = dom.createMorphAt(dom.childAt(element29, [7]), 0, 0);
          attribute(env, attrMorph0, element24, "class", concat(env, ["pos-abs fade-fore-color font-xx-l full-height overflow-hidden transform z-index-hundred ", get(env, context, "searchCss")]));
          element(env, element25, context, "action", ["toggleSearch"], {});
          inline(env, morph0, context, "input-field-text", [], { "id": "chartPanelSearch", "value": get(env, context, "searchKey"), "type": "text", "class": "font-l search-ctrl search-query v-top chart-search", "placeholder": get(env, context, "app.lang.labels.search") });
          element(env, element26, context, "action", ["toggleSearch"], {});
          content(env, morph1, context, "symbolObj.dispProp1");
          block(env, morph2, context, "modal-popup", [], { "isEnabled": false, "id": "chartPanelSearchPopup", "isOverlayEnabled": true, "isContainerAvailable": true, "containerAction": "toggleDisplay" }, child0, null);
          block(env, morph3, context, "each", [get(env, context, "arrDisplayPeriods")], { "keyword": "tabItem" }, child1, null);
          inline(env, morph4, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "chartStyles"), "value": get(env, context, "chartStyle.DisplayName"), "valueKey": "DisplayName", "labelKey": "DisplayName", "selectAction": "setChartStyle", "responsiveIcon": true, "iconClass": "icon-chart-area", "buttonClass": "full-height dropdown-text-only" });
          inline(env, morph5, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "indicators"), "valueKey": "DisplayName", "labelKey": "DisplayName", "selectAction": "onCreateStudy", "buttonClass": "full-height dropdown-text-only", "iconClass": "fa fa-line-chart", "responsiveIcon": true });
          block(env, morph6, context, "if", [get(env, context, "isComparisonEnabled")], {}, child2, null);
          block(env, morph7, context, "unless", [get(env, context, "isComparisonEnabled")], {}, child3, null);
          block(env, morph8, context, "if", [get(env, context, "isTradingEnabled")], {}, child4, null);
          block(env, morph9, context, "unless", [get(env, context, "isComparisonEnabled")], {}, child5, null);
          block(env, morph10, context, "unless", [get(env, context, "isComparisonEnabled")], {}, child6, null);
          block(env, morph11, context, "unless", [get(env, context, "isComparisonEnabled")], {}, child7, null);
          block(env, morph12, context, "if", [get(env, context, "enableOverlay")], {}, child8, null);
          block(env, morph13, context, "unless", [get(env, context, "isLandscapeMode")], {}, child9, null);
          block(env, morph14, context, "if", [get(env, context, "isLandscapeMode")], {}, child10, null);
          content(env, morph15, context, "symbolObj.dispProp1");
          content(env, morph16, context, "symbolObj.lDes");
          content(env, morph17, context, "symbolObj.exg");
          block(env, morph18, context, "if", [get(env, context, "subMarket")], {}, child11, null);
          content(env, morph19, context, "activePeriod");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-width full-height pad-s-b");
        dom.setAttribute(el1, "style", "height: 113px;");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" Inline style used to restore full screen to normal screen");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "id", "dq_chart");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "dpi");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "chart-styles");
        dom.setAttribute(el1, "style", "display: none");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element30 = dom.childAt(fragment, [0]);
        var element31 = dom.childAt(element30, [5]);
        var element32 = dom.childAt(element31, [1]);
        var morph0 = dom.createMorphAt(element30, 3, 3);
        var attrMorph0 = dom.createAttrMorph(element30, 'id');
        attribute(env, attrMorph0, element30, "id", concat(env, [get(env, context, "pageContainer")]));
        block(env, morph0, context, "if", [get(env, context, "isLandscapeMode")], {}, child0, null);
        element(env, element31, context, "bind-attr", [], { "class": ":full-width :full-height isLandscapeMode:pad-m-lr :pos-rel isLandscapeMode:pad-s-b chartHeightStyle" });
        element(env, element32, context, "bind-attr", [], { "class": ":full-width :full-height :pos-rel chartContainer" });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/components/days-range", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "day-range");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "day-range-bar");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1, 3]);
          var attrMorph0 = dom.createAttrMorph(element1, 'class');
          var attrMorph1 = dom.createAttrMorph(element1, 'style');
          attribute(env, attrMorph0, element1, "class", concat(env, ["day-range-position ", get(env, context, "dotColor")]));
          attribute(env, attrMorph1, element1, "style", get(env, context, "styles"));
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-small-light");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "pad-s-all");
          var el4 = dom.createTextNode("\n        -\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n     ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("\n         ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n     ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
          content(env, morph0, context, "lowValue");
          content(env, morph1, context, "highValue");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isBarAvailable")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/components/fifty-two-wk-hl", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "day-range");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "day-range-bar");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1, 3]);
          var attrMorph0 = dom.createAttrMorph(element1, 'class');
          var attrMorph1 = dom.createAttrMorph(element1, 'style');
          attribute(env, attrMorph0, element1, "class", concat(env, ["day-range-position ", get(env, context, "dotColor")]));
          attribute(env, attrMorph1, element1, "style", get(env, context, "styles"));
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-small-light");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "pad-s-all");
          var el4 = dom.createTextNode("\n        -\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n     ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("\n         ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n     ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
          content(env, morph0, context, "lowValue");
          content(env, morph1, context, "highValue");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isBarAvailable")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/components/summary-chart", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width pad-s-t pad-widget-left pad-widget-right widget-hline overflow-hidden");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "navbar-nav-chart ltr");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "mgn-l-t");
        dom.setAttribute(el3, "id", "chart");
        dom.setAttribute(el3, "class", "index-chart-position");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'id');
        attribute(env, attrMorph0, element0, "id", get(env, context, "chartId"));
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/components/title-index-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-24 v-top appttl-fade-fore-color");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "font-s h-right pad-m-r ltr");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "font-x-s h-right pad-m-r pad-xs-t");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pad-m-lr ltr font-m");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "bold");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pad-m-lr ltr font-s");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            element = hooks.element,
            get = hooks.get,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [1, 1]), 0, 0);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        content(env, morph0, context, "index.dSym");
        element(env, element1, context, "bind-attr", [], { "class": ":layout-col :btn-txt-color indexContainerCSS" });
        inline(env, morph1, context, "formatNumber", [get(env, context, "index.ltp"), get(env, context, "index.deci")], {});
        inline(env, morph2, context, "formatNumberPercentage", [get(env, context, "index.pctChg"), get(env, context, "index.deci")], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-account-summary", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Account Summary Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("The Account Summary displays your Cash details as well as Margin details. The cash details are displayed in terms of holdings, overdrawn limit, margin, blocked amounts, unsettled sales, buying power, etc.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View your Account Summary");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Account Summary");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- The Account summary of your portfolio will be displayed");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Optional");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap the portfolio name to select another portfolio");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-alert", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Price Alerts for Symbols");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("Use the Alerts tool to be notified when a symbol meets the conditions defined by you.\n                You can select the symbol you want and set the condition by selecting the parameter, criteria and value.\n                You can update or delete an alert condition.\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Set an Alert");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and then select\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Alerts");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createElement("span");
        var el6 = dom.createTextNode(" - ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        var el6 = dom.createTextNode("In the ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("Symbol");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" field, type the symbol/index code using the keyboard. Select the required symbol/index");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode(" Parameter ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" field and select the parameter");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode(" Criteria ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" field and choose the criteria for the alert condition\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode(" Value ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" field and enter the value for the condition\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Add Alert ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" to create the alert");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Update an Alert");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- In the alert list, tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/slidearrow.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and then tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/edit01.png");
        dom.setAttribute(el5, "class", "help-icon-large");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Delete an Alert");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- In the alert list, tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/slidearrow.png");
        dom.setAttribute(el5, "class", "help-icon-large");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and then\n                tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/delete02.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-customize", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Settings - Customizing the Application");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("You can customize the language and theme of the application and your current password.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Change the Language");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Settings");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Under Language section, tap and select the language");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Change the Theme");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Settings");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Under ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Themes");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" select the required theme");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- There are two types of themes: ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Dark ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("and ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Light");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Change your Current Password");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Change Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Enter your ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode(" Current Password ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("and");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode(" New Password ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" in the respective fields");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Confirm your new password in the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Confirm New Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" field");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Save");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-depth", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Market Depth Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("This section displays the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Market Depth by Price");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" of a symbol.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View Market Depth");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Market Depth");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- You can view the market depth of the selected symbol");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-index", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Basics");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Overview");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Settings/ Customization");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Viewing the Markets");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Top Stocks");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Market Indices");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Watchlist");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Quote");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Market Depth");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Time and Sales");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Alerts");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Trading");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("About Trading");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Portfolio");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Order List");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "font-x-l highlight-fore-color");
        var el6 = dom.createTextNode("Account Summary");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element1, [5]);
        var element4 = dom.childAt(element1, [7]);
        var element5 = dom.childAt(element1, [9]);
        var element6 = dom.childAt(element1, [11]);
        var element7 = dom.childAt(element1, [13]);
        var element8 = dom.childAt(element1, [15]);
        var element9 = dom.childAt(element1, [17]);
        var element10 = dom.childAt(element1, [19]);
        var element11 = dom.childAt(element1, [21]);
        var element12 = dom.childAt(element0, [3]);
        var element13 = dom.childAt(element12, [3]);
        var element14 = dom.childAt(element12, [5]);
        var element15 = dom.childAt(element12, [7]);
        var element16 = dom.childAt(element12, [9]);
        element(env, element2, context, "action", ["invokeWidget", "guide-overview"], {});
        element(env, element3, context, "action", ["invokeWidget", "guide-customize"], {});
        element(env, element4, context, "action", ["invokeWidget", "guide-market"], {});
        element(env, element5, context, "action", ["invokeWidget", "guide-top-stock"], {});
        element(env, element6, context, "action", ["invokeWidget", "guide-indices"], {});
        element(env, element7, context, "action", ["invokeWidget", "guide-watch-list"], {});
        element(env, element8, context, "action", ["invokeWidget", "guide-quote"], {});
        element(env, element9, context, "action", ["invokeWidget", "guide-depth"], {});
        element(env, element10, context, "action", ["invokeWidget", "guide-time-and-sales"], {});
        element(env, element11, context, "action", ["invokeWidget", "guide-alert"], {});
        element(env, element13, context, "action", ["invokeWidget", "guide-trade"], {});
        element(env, element14, context, "action", ["invokeWidget", "guide-portfolio"], {});
        element(env, element15, context, "action", ["invokeWidget", "guide-order-list"], {});
        element(env, element16, context, "action", ["invokeWidget", "guide-account-summary"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-indices", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Market Indices Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("This section gives an overview of the current status of a market (exchange) and its indices.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View Market Indices");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Market Indices");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Note");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(": Tapping an index will direct you to view the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Quote");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" of the index");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-market", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Market Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("This section gives you information regarding the Markets.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View Market Summary");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/market.png");
        dom.setAttribute(el5, "class", "help-icon-large");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" at the bottom of the app");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- You can view the market summary details (Volume, Turnover, Trades, Cash map, Net Cash%, YTD and etc)");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Scroll down to view the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("News and Announcements");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" of the respective market");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Landscape view of mobile provides Advanced Chart");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-order-list", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Order List and Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("You can view the details of the orders placed using Order List.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View Order List and Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Order List");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Optional: Tap the portfolio name to select another portfolio from the drop-down");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- To view the orders by the order status, tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" drop-down, and select the order status accordingly");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- To view the order details, tab on required row (order)");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-overview", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Overview");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("This application provides real-time price data, news, and announcements to keep you up-to-date with market activities even when you are on the move.It also helps the customer to perform Trading. Just tap to view the market summary, top stocks, and even detail quotes for any symbol in an exchange.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("You can create personalized watch lists to keep track of your favorite symbols in multiple exchanges. This application also comes with a chart feature that provides a graphical view of a symbol's performance for pre-defined periods, and price analysis features.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Note:");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" You can only view the exchanges to which you have subscribed. If your subscription supports only one exchange, features related to selecting other exchanges will not be available.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Log on");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap the product logo on the mobile Home screen");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Enter your username and password after loading login page");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Mark the \"Remember Me\" checkbox");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Login");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Logout and return to the Home Screen");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap this icon ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" in the Left top corner of the window, and tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/logout.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-portfolio", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Portfolio Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("You can view the symbol wise portfolio summary of yours. Also can be switched to watchlist of particular symbols of portfolio.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View Portfolio Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Portfolio");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Select a portfolio from the drop-down");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- The symbol wise portfolio summary will be displayed");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Row Click gives a detail view of portfolio for a particular symbol");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-quote", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Detail Quote");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("This section gives the detail quote of a selected symbol/index.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View Detail Quote of Selected Symbol");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Quote");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Or tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/quote.png");
        dom.setAttribute(el5, "class", "help-icon-large");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Scroll down to view the respective ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("News and Announcements");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Note:");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" User can tap the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/favorite.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" to add the symbol / index to the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Favorites");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" watchlist");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Below details of the symbol / index can be viewed via Quote");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Best Bid and Offer");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Bid and Offer Qty");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Prev.Closed");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Open");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Low and High");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Volume");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Trades");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Turnover");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Net Cash");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- 52wk High and 52wk Low");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Min and Max");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- TOP");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- TOV");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Market Cap");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Last Traded Time");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Market");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-time-and-sales", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Time and Sales Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("This section displays the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Time and Sales");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" of a symbol.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View Time and Sales");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Time and Sales");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-top-stock", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Top Stocks Information");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("You can view Top Stocks information which displays the top gainers, top losers and the symbols with the highest active trades. From the top stocks view, you can tap any symbol and view the detail quote and the chart.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("View Top Stocks Information");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Top Stocks");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- You can view the market depth of the selected symbol");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Below information can be viewed under Top Stocks");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Top Gainers by Change");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Top Gainers by % Change");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Top Losers by change");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Top Losers by % change");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Most Active by Trades");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-trade", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("About Trading");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("You can place orders in real time by specifying the order type and the Time-in-force (TIF) or Good Till details as required. When you enter a symbol, the current bid and offer prices, change and the change percentage appears on the screen. Once you place an order, it appears in the Order List screen.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("The Order List screen displays the orders and their current status. You can also view the details of an order via this screen.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Place a buy/sell order");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/menublack.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" and select ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Trade");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" under Trade Section");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/search01.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" to search for the symbol you wish to trade with");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Enter the order details:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-l-l");
        var el5 = dom.createTextNode("Enter the price and quantity using the keyboard and tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Done");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-l-l");
        var el5 = dom.createTextNode("In the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("TIF type");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" drop-down select the applicable TIF Type");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-l-l");
        var el5 = dom.createTextNode("Set the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Order Type (Market / Limit )");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" slider as applicable");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-l-l");
        var el5 = dom.createTextNode("If you selected ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("GTD");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" in the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("TIF type ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("drop-down, tap the date field, select the applicable date from the calendar, and tap Set");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-l-l");
        var el5 = dom.createTextNode("Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Buy");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" or ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Sell");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" accordingly");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("NOTE");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(": Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/order.png");
        dom.setAttribute(el5, "class", "help-icon-large");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" to view ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Recent Orders");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/help/guide-watch-list", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width fore-color");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Creating and Managing Watch Lists");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Full Market Watch Lists");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" can be viewed for enabled Markets.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb");
        var el5 = dom.createTextNode("In order to keep track of your favourite symbols, you can create a watch list with an unlimited number of symbols. You can add or remove symbols from a watch list as required.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Create a Watch List");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/watchlist.png");
        dom.setAttribute(el5, "class", "help-icon-large");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("  at the bottom of the app");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Favorites");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/addsymbol.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" to search and add symbols to the watchlist");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Note:");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Symbols can also be added to the watchlist via ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode(" Quote ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" menu by tapping the ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/favorite.png");
        dom.setAttribute(el5, "alt", "Star");
        dom.setAttribute(el5, "width", "30");
        dom.setAttribute(el5, "height", "25");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" icon");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container pad-l-tb h-left pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l bold pad-m-tb");
        var el5 = dom.createTextNode("Remove a symbol from Custom Watch List");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/slidearrow.png");
        dom.setAttribute(el5, "class", "help-icon-small");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" , near the symbol you wish to remove");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-s-tb pad-m-l");
        var el5 = dom.createTextNode("- Then tap ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5, "src", "assets/images/help/delete.png");
        dom.setAttribute(el5, "class", "help-icon-large");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/indices", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["price/widgets/mobile/watch-list/watch-list"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/market-overview-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "market-status-panel");
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/market-summary/components/chart-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "chart-52-high-low up-fore-color");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "chart-52-high-low down-fore-color");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "chart-max up-fore-color");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "chart-max down-fore-color");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container pad-m-tb");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-widget-left bold font-xx-l font-thick symbol-fore-color ltr pad-xs-t");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-24 pad-s-t font-l pad-m-l fade-fore-color");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-widget-right pad-m-l font-m");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width widget-hline pad-widget-left pad-widget-right");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width pad-m-b pad-s-t");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-16 pad-widget-left widget-vline");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-8 pad-widget-right pad-m-l");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width pad-m-b pad-s-t pad-m-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-24 font-m fade-fore-color pad-s-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-row");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width pad-s-tb pad-m-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-8 ltr font-m fade-fore-color pad-s-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-row");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element,
            content = hooks.content,
            get = hooks.get,
            block = hooks.block,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(fragment, [4]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element3, [3]);
        var element7 = dom.childAt(element3, [5]);
        var element8 = dom.childAt(element2, [3]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element8, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        var morph2 = dom.createMorphAt(element1, 1, 1);
        var morph3 = dom.createMorphAt(element1, 2, 2);
        var morph4 = dom.createMorphAt(element1, 3, 3);
        var morph5 = dom.createMorphAt(element1, 4, 4);
        var morph6 = dom.createMorphAt(element4, 3, 3);
        var morph7 = dom.createMorphAt(element6, 0, 0);
        var morph8 = dom.createMorphAt(element7, 0, 0);
        var morph9 = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        var morph10 = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
        var morph11 = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        var morph12 = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
        element(env, element0, context, "action", ["onNavigateIndicesTab"], {});
        content(env, morph0, context, "index.dSym");
        content(env, morph1, context, "index.lDes");
        block(env, morph2, context, "if", [get(env, context, "stock.is52WeekHigh")], {}, child0, null);
        block(env, morph3, context, "if", [get(env, context, "stock.is52WeekLow")], {}, child1, null);
        block(env, morph4, context, "if", [get(env, context, "stock.isTodayHigh")], {}, child2, null);
        block(env, morph5, context, "if", [get(env, context, "stock.isTodayLow")], {}, child3, null);
        element(env, element4, context, "bind-attr", [], { "class": ":layout-col :ltr colorCSS :font-5x-l :pad-l-b" });
        element(env, element5, context, "bind-attr", [], { "class": "ltpIconCSS :glyphicon :font-m" });
        inline(env, morph6, context, "formatNumber", [get(env, context, "index.ltp"), get(env, context, "index.deci")], {});
        element(env, element6, context, "bind-attr", [], { "class": ":layout-inline :ltr :font-xxx-l backColorCSS fontColorCSS :pad-s-tb :pad-l-lr :xs-border-radius" });
        inline(env, morph7, context, "formatNumber", [get(env, context, "index.chg"), get(env, context, "index.deci")], {});
        element(env, element7, context, "bind-attr", [], { "class": ":layout-inline :ltr :font-xxx-l :bold :pad-l-l colorCSS" });
        inline(env, morph8, context, "formatNumberPercentage", [get(env, context, "index.pctChg"), get(env, context, "index.deci")], {});
        content(env, morph9, context, "app.lang.labels.daysRange");
        inline(env, morph10, context, "days-range", [], { "stock": get(env, context, "index"), "isBarAvailable": true });
        content(env, morph11, context, "app.lang.labels.wkRange52");
        inline(env, morph12, context, "fifty-two-wk-hl", [], { "stock": get(env, context, "index"), "isBarAvailable": true });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/market-summary/components/market-status-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col overflow-visible pad-m-l");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "more-markets-dropdown", [], { "setExchange": "setWlExchange", "exchangeValue": get(env, context, "exchange"), "lblClass": "font-xx-l font-thick", "buttonClass": "fore-color btn-border bold dropdown-text-only", "defaultExchangeForDropdown": get(env, context, "defaultExchange"), "isShowDefaultMarket": true, "value": get(env, context, "value"), "key": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          content(env, morph0, context, "exchange.de");
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-m-lr");
          dom.setAttribute(el1, "data-id", "subMarketDropdown");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "sub-markets-dropdown", [], { "exchange": get(env, context, "exchange"), "key": get(env, context, "wkey"), "onSubMarketChanged": "subMarketChange", "lblClass": get(env, context, "lblClass") });
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col h-middle bold font-x-l fade-fore-color pad-m-lr");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          content(env, morph0, context, "marketTime");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "market-status-panel");
        dom.setAttribute(el1, "class", "layout-container ltr status-panel separator separator-shadow pad-widget-left pad-widget-right full-width pad-s-tb");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-12");
        dom.setAttribute(el2, "data-id", "subMarket-free");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col h-middle font-x-l bold fore-color pad-m-l font-thick");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-12");
        dom.setAttribute(el2, "data-id", "subMarket-free");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "horizontal-separator mgn-m-lr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element,
            content = hooks.content,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(element1, 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        var morph2 = dom.createMorphAt(element0, 9, 9);
        element(env, element1, context, "bind-attr", [], { "class": ":layout-col :h-middle :font-x-l :bold colorCss :pad-m-l" });
        content(env, morph0, context, "exchange.statStr");
        block(env, morph1, context, "if", [get(env, context, "isMoreMarketAvailable")], {}, child0, child1);
        block(env, morph2, context, "if", [get(env, context, "isSubMarketAvailable")], {}, child2, child3);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/market-summary/market-summary", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "progress-market ms-top-bar-progress-vertical ms-top-bar-vertical-top");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "role", "progressbar");
          dom.setAttribute(el2, "aria-valuenow", "70");
          dom.setAttribute(el2, "aria-valuemin", "0");
          dom.setAttribute(el2, "aria-valuemax", "100");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createUnsafeAttrMorph(element0, 'style');
          attribute(env, attrMorph0, element0, "style", get(env, context, "barItem.barWidth"));
          element(env, element0, context, "bind-attr", [], { "class": "barItem.barClass" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-m-lr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width pad-m-lr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width pad-s-t pad-widget-left pad-widget-right widget-hline overflow-hidden pos-rel");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pos-abs");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "icon-fore-color");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "icon-mobile-rotate pad-m-r font-4x-l");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "navbar-nav-chart ltr pad-s-t");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "mgn-l-t index-chart-position");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-m-lr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-hline");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container pad-widget-left pad-widget-right full-width ms-progress-bar-panel-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-4 pos-rel");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-x-l h-left fore-color bold pos-abs top-zero pad-l-t");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-l h-left fade-fore-color pos-abs bottom-zero pad-l-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-4 pos-rel");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pad-l-l pad-l-t");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-5 pad-m-r pos-rel up-down-panel-item");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-x-l h-left up-fore-color bold pos-abs top-zero pad-l-t");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("<div class=\"layout-inline m-circle up-back-color h-left mgn-s-b\"></div>");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-inline font-l h-left fade-fore-color pos-abs bottom-zero pad-l-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-5 pos-rel");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-x-l h-left down-fore-color bold pos-abs top-zero pad-l-t");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("<div class=\"layout-inline m-circle down-back-color h-left mgn-s-b\"></div>");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-inline font-l h-left fade-fore-color pos-abs bottom-zero pad-l-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-6 pos-rel");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-x-l h-left highlight-fore-color bold pos-abs top-zero pad-l-t");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("<div class=\"layout-inline m-circle no-changed-back-color h-left mgn-s-b\"></div>");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-inline font-l h-left fade-fore-color pos-abs bottom-zero pad-l-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-hline");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width pad-l-tb pad-m-lr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col pad-widget-left pad-l-b");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "h-left font-l fade-fore-color pad-s-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l h-left fore-color font-thick");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-24 pad-m-l");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col pad-widget-right pad-m-l pad-l-b");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "h-right font-l fade-fore-color pad-s-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l h-right fore-color font-thick");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col pad-widget-left pad-l-b");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "h-left font-l fade-fore-color pad-s-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l h-left fore-color font-thick");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-24 pad-m-l");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col pad-widget-right pad-m-l pad-l-b");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "h-right font-l fade-fore-color pad-s-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col pad-widget-left");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "h-left font-l fade-fore-color pad-s-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "font-xx-l h-left fore-color bold font-thick ");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-24 pad-m-l");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col pad-widget-right pad-m-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "h-right font-l fade-fore-color pad-s-b");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("%");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            element = hooks.element,
            content = hooks.content,
            block = hooks.block,
            concat = hooks.concat,
            attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [4, 3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [5]);
        var element4 = dom.childAt(element1, [7]);
        var element5 = dom.childAt(element1, [9]);
        var element6 = dom.childAt(fragment, [6]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element7, [5]);
        var element10 = dom.childAt(element6, [3]);
        var element11 = dom.childAt(element10, [1]);
        var element12 = dom.childAt(element10, [5]);
        var element13 = dom.childAt(element12, [3]);
        var element14 = dom.childAt(element6, [5]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element14, [5]);
        var element17 = dom.childAt(element16, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3, 0]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        var morph3 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
        var morph4 = dom.createMorphAt(dom.childAt(element1, [3, 1]), 1, 1);
        var morph5 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
        var morph6 = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
        var morph7 = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        var morph8 = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
        var morph9 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        var morph10 = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
        var morph11 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        var morph12 = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
        var morph13 = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        var morph14 = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
        var morph15 = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        var morph16 = dom.createMorphAt(dom.childAt(element11, [3]), 0, 0);
        var morph17 = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        var morph18 = dom.createMorphAt(element13, 0, 0);
        var attrMorph0 = dom.createAttrMorph(element13, 'class');
        var morph19 = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        var morph20 = dom.createMorphAt(dom.childAt(element15, [3]), 0, 0);
        var morph21 = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        var morph22 = dom.createMorphAt(element17, 0, 0);
        var attrMorph1 = dom.createAttrMorph(element17, 'class');
        inline(env, morph0, context, "chart-panel", [], { "stock": get(env, context, "index"), "app": get(env, context, "app") });
        inline(env, morph1, context, "outlet", ["marketChartOutlet"], {});
        element(env, element1, context, "action", ["onNavigateTopStocks"], {});
        inline(env, morph2, context, "formatNumber", [get(env, context, "exchange.symt"), 0], {});
        content(env, morph3, context, "app.lang.labels.total");
        block(env, morph4, context, "each", [get(env, context, "upsDownsNoChgValueArray")], { "keyword": "barItem" }, child0, null);
        inline(env, morph5, context, "formatNumber", [get(env, context, "exchange.ups"), 0], {});
        content(env, morph6, context, "app.lang.labels.up");
        inline(env, morph7, context, "formatNumber", [get(env, context, "exchange.dwns"), 0], {});
        content(env, morph8, context, "app.lang.labels.down");
        inline(env, morph9, context, "formatNumber", [get(env, context, "exchange.nChg"), 0], {});
        content(env, morph10, context, "app.lang.labels.unchanged");
        content(env, morph11, context, "app.lang.labels.volume");
        inline(env, morph12, context, "formatNumber", [get(env, context, "exchange.vol"), 0], {});
        content(env, morph13, context, "app.lang.labels.trades");
        inline(env, morph14, context, "formatNumber", [get(env, context, "exchange.trades"), 0], {});
        content(env, morph15, context, "app.lang.labels.turnover");
        inline(env, morph16, context, "formatNumber", [get(env, context, "exchange.tovr"), 0], {});
        content(env, morph17, context, "app.lang.labels.ytdt");
        attribute(env, attrMorph0, element13, "class", concat(env, ["font-xx-l ltr h-right font-thick ", get(env, context, "ytdCss")]));
        inline(env, morph18, context, "formatNumberPercentage", [get(env, context, "index.pctYtd"), get(env, context, "index.deci")], {});
        content(env, morph19, context, "app.lang.labels.cashMap");
        inline(env, morph20, context, "cash-map", [], { "id": get(env, context, "cashMapId"), "stock": get(env, context, "exchange"), "isValueHidden": false });
        content(env, morph21, context, "app.lang.labels.netCash");
        attribute(env, attrMorph1, element17, "class", concat(env, ["font-xx-l ltr h-right bold font-thick ", get(env, context, "netCashCss")]));
        inline(env, morph22, context, "formatNumberPercentage", [get(env, context, "exchange.netCashPer"), get(env, context, "exchange.dep")], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/option-chain", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "full-width toggle");
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "toggle-label watchlist-toggle-label");
          dom.setAttribute(el2, "for", "nearMoney");
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "toggle-inner watchlist-toggle-style");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "toggle-animation");
          var el4 = dom.createTextNode("\n                                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "toggle-switch watchlist-toggle-switch");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "input", [], { "type": "checkbox", "name": "nearMoney", "class": "toggle-checkbox", "id": "nearMoney", "checked": get(env, context, "nearMoney") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "nearMoney");
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "simple-switch dark");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "input", [], { "type": "checkbox", "name": "nearMoney", "checked": get(env, context, "nearMoney"), "class": "simple-switch-input", "id": "nearMoney" });
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment(" Default value of this boolean value is true ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 3, 3, contextualElement);
            inline(env, morph0, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "oneWayContent"), "rowHeight": get(env, context, "rowHeight"), "minHeaderHeight": 25, "hasFooter": false, "sortAscending": get(env, context, "sortAscending"), "id": get(env, context, "wkey") });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, null);
          block(env, morph0, context, "if", [get(env, context, "isWidgetRefreshed")], {}, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12 widget-container-new pad-widget-top");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col pad-l-l");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "vertical-separator");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col pad-l-r");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col font-x-l pad-m-lr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "id", "annPrevious");
        dom.setAttribute(el7, "class", "pad-l-tb");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8, "class", "glyphicon-triangle-left glyphicon sidebar-nav-icon-color font-xx-l");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col layout-col h-right full-width overflow-visible");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col font-x-l pad-m-lr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "id", "annNext");
        dom.setAttribute(el7, "class", "pad-l-tb");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8, "class", "glyphicon-triangle-right glyphicon sidebar-nav-icon-color font-xx-l");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col h-right");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col pad-m-l font-l fade-fore-color");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "font-xx-l");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col pad-l-lr pad-m-tb h-right full-width");
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width pad-widget-top");
        dom.setAttribute(el3, "style", "height: calc(100% - 143px);");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element,
            get = hooks.get,
            inline = hooks.inline,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element2, [3]);
        var element6 = dom.childAt(element2, [5]);
        var element7 = dom.childAt(element1, [5]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element8, [3]);
        var element11 = dom.childAt(element8, [5]);
        var element12 = dom.childAt(element7, [3, 1]);
        var element13 = dom.childAt(element0, [3]);
        var morph0 = dom.createMorphAt(element3, 3, 3);
        var morph1 = dom.createMorphAt(element5, 0, 0);
        var morph2 = dom.createMorphAt(element6, 0, 0);
        var morph3 = dom.createMorphAt(element10, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element10, 'title');
        var morph4 = dom.createMorphAt(dom.childAt(element12, [1, 1]), 1, 1);
        var morph5 = dom.createMorphAt(dom.childAt(element12, [3]), 1, 1);
        var morph6 = dom.createMorphAt(element13, 1, 1);
        var morph7 = dom.createMorphAt(element13, 3, 3);
        var morph8 = dom.createMorphAt(element13, 5, 5);
        element(env, element3, context, "bind-attr", [], { "class": ":layout-col :ltr colorCSS :font-5x-l :pad-l-b" });
        element(env, element4, context, "bind-attr", [], { "class": "ltpIconCSS :glyphicon :font-m" });
        inline(env, morph0, context, "formatNumber", [get(env, context, "stock.ltp")], {});
        element(env, element5, context, "bind-attr", [], { "class": ":layout-inline :ltr :font-xxx-l backColorCSS fontColorCSS :pad-s-tb :pad-s-lr :xs-border-radius" });
        inline(env, morph1, context, "formatNumberPercentage", [get(env, context, "stock.pctChg")], {});
        element(env, element6, context, "bind-attr", [], { "class": ":layout-inline :ltr :font-xxx-l :pad-m-lr :bold colorCSS" });
        inline(env, morph2, context, "formatNumber", [get(env, context, "stock.chg")], {});
        element(env, element9, context, "action", ["nextMonth"], {});
        attribute(env, attrMorph0, element10, "title", concat(env, [get(env, context, "app.lang.labels.optionPeriods")]));
        inline(env, morph3, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "optPeriodArray"), "defaultSelect": get(env, context, "currentOptPeriod"), "buttonClass": "full-width font-m", "lblClass": "font-l", "valueKey": "code", "labelKey": "desc", "selectAction": "setOptionPeriod", "value": get(env, context, "currentOpt") });
        element(env, element11, context, "action", ["nextMonth", true], {});
        content(env, morph4, context, "app.lang.labels.nearMoney");
        block(env, morph5, context, "if", [get(env, context, "Ember.isIos")], {}, child0, child1);
        inline(env, morph6, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph7, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph8, context, "if", [get(env, context, "isDataAvailable")], {}, child2, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/quote-overview-tab", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "quote-status-panel", [], { "stock": get(env, context, "stock") });
        inline(env, morph1, context, "outlet", ["w1"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/quote-summary/components/chart-status-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-s-t h-left pad-m-r pad-widget-left");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("(");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(")");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element6, [3]);
          var element10 = dom.childAt(element6, [5]);
          var morph0 = dom.createMorphAt(element7, 3, 3);
          var morph1 = dom.createMorphAt(element9, 0, 0);
          var morph2 = dom.createMorphAt(element10, 1, 1);
          element(env, element7, context, "bind-attr", [], { "class": ":layout-inline :ltr :bold :font-4x-l colorCSS" });
          element(env, element8, context, "bind-attr", [], { "class": "ltpIconCSS :glyphicon :v-bottom :font-m" });
          inline(env, morph0, context, "formatNumber", [get(env, context, "stock.ltp")], {});
          element(env, element9, context, "bind-attr", [], { "class": ":layout-inline :ltr :v-bottom :font-xx-l :pad-widget-left colorCSS" });
          inline(env, morph1, context, "formatNumber", [get(env, context, "stock.chg")], {});
          element(env, element10, context, "bind-attr", [], { "class": ":layout-inline :ltr :v-bottom :font-xx-l :pad-m-l colorCSS" });
          inline(env, morph2, context, "formatNumberPercentage", [get(env, context, "stock.pctChg")], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col pad-m-l");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "type", "submit");
            dom.setAttribute(el3, "class", "btn btn-animation order-ticket-text-boxes up-back-color appttl-fore-color font-xx-l");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline  pad-m-l");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "type", "submit");
            dom.setAttribute(el3, "class", "btn btn-animation order-ticket-text-boxes down-back-color appttl-fore-color font-l");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element3 = dom.childAt(fragment, [1]);
            var element4 = dom.childAt(element3, [1, 1]);
            var element5 = dom.childAt(element3, [3, 1]);
            var morph0 = dom.createMorphAt(element4, 0, 0);
            var morph1 = dom.createMorphAt(element5, 0, 0);
            element(env, element4, context, "action", ["onBuyMore"], {});
            content(env, morph0, context, "app.lang.labels.buyMore");
            element(env, element5, context, "action", ["onLiquidate"], {});
            content(env, morph1, context, "app.lang.labels.liquidate");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "bold btn-txt-color pad-s-l");
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "type", "button");
            dom.setAttribute(el3, "class", "btn btn-buy up-back-color btn-animation");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute,
                element = hooks.element,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [1, 1, 0]);
            var morph0 = dom.createMorphAt(element2, 0, 0);
            var attrMorph0 = dom.createAttrMorph(element2, 'disabled');
            attribute(env, attrMorph0, element2, "disabled", get(env, context, "isIndices"));
            element(env, element2, context, "action", ["buy"], {});
            content(env, morph0, context, "app.lang.labels.buy");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-s-t");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          block(env, morph0, context, "if", [get(env, context, "isLiquidateEnable")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col cursor-pointer pad-s-lr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "icon-fore-color");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "icon-share glyphicon pad-m-lr font-4x-l");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          element(env, element1, context, "action", ["onShareScreen"], {});
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-s-l pad-l-r h-middle font-4x-l fade-fore-color overflow-visible");
          var el2 = dom.createTextNode("\n                 ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "icon-fore-color");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "glyphicon glyphicon-bell");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          element(env, element0, context, "action", ["itemClicked"], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width separator separator-shadow status-panel pad-s-tb");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ellipsis v-bottom pad-s-t");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-24 full-width");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-s-t h-right");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col cursor-pointer pad-s-lr");
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "icon-fore-color");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "horizontal-separator mgn-m-lr");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content,
            block = hooks.block,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element11 = dom.childAt(fragment, [0]);
        var element12 = dom.childAt(element11, [1]);
        var element13 = dom.childAt(element11, [9]);
        var element14 = dom.childAt(element13, [3]);
        var element15 = dom.childAt(element14, [1, 1]);
        var attrMorph0 = dom.createAttrMorph(element12, 'class');
        var morph0 = dom.createMorphAt(dom.childAt(element12, [1]), 1, 1);
        var morph1 = dom.createMorphAt(element11, 3, 3);
        var morph2 = dom.createMorphAt(element11, 7, 7);
        var morph3 = dom.createMorphAt(element13, 1, 1);
        var morph4 = dom.createMorphAt(element13, 5, 5);
        attribute(env, attrMorph0, element12, "class", concat(env, ["layout-col ellipsis pad-s-t h-left pad-m-r pad-widget-left bold symbol-fore-color ", get(env, context, "symbolFontCss"), " "]));
        content(env, morph0, context, "stock.dispProp1");
        block(env, morph1, context, "if", [get(env, context, "isLandscapeMode")], {}, child0, null);
        block(env, morph2, context, "if", [get(env, context, "isTradingEnabled")], {}, child1, null);
        block(env, morph3, context, "unless", [get(env, context, "isShareIconDisabled")], {}, child2, null);
        element(env, element14, context, "action", ["addStocksToCustomWL"], {});
        element(env, element15, context, "bind-attr", [], { "class": ":glyphicon-star-empty :glyphicon :pad-m-lr :font-4x-l isAddedToCustomWatchList:symbol-fore-color" });
        block(env, morph4, context, "if", [get(env, context, "isAlertIconEnabled")], {}, child3, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/quote-summary/components/market-quote", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "annIcon");
          dom.setAttribute(el1, "class", "watch-list-text-cell pad-s-l");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "icon-megaphone-1 ann-icon-color");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element10 = dom.childAt(fragment, [1, 0]);
          element(env, element10, context, "bind-attr", [], { "title": "annToolTip" });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-6");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col v-top pad-s-t");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col fade-fore-color font-m");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "layout-inline quote-x-large-width hint--bottom hint--rounded");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-6");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "vertical-separator");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element8 = dom.childAt(fragment, [3]);
          var element9 = dom.childAt(element8, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element9, 0, 0);
          var attrMorph0 = dom.createAttrMorph(element9, 'data-hint');
          content(env, morph0, context, "app.lang.labels.cashMap");
          attribute(env, attrMorph0, element9, "data-hint", concat(env, [get(env, context, "app.lang.labels.cashMap"), " %   ", subexpr(env, context, "formatNumber", [get(env, context, "cashMapValues.calculateCash"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.cashIn"), "       ", subexpr(env, context, "formatNumber", [get(env, context, "stock.cit"), 0], {}), "\n", get(env, context, "app.lang.labels.cashOut"), "    ", subexpr(env, context, "formatNumber", [get(env, context, "stock.cot"), 0], {})]));
          inline(env, morph1, context, "cash-map", [], { "id": get(env, context, "cashMapId"), "stock": get(env, context, "stock"), "isValueHidden": false, "isVertical": true });
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-24 up-fore-color pad-s-b font-m");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "chart-max up-fore-color");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "up-fore-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
          element(env, element7, context, "bind-attr", [], { "title": get(env, context, "app.lang.labels.lastTradedReachedHigh") });
          content(env, morph0, context, "app.lang.labels.dayHigh");
          return fragment;
        }
      };
    }();
    var child3 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-24 up-fore-color pad-s-b font-m");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "chart-max down-fore-color");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "down-fore-color");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(element4, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
            element(env, element5, context, "bind-attr", [], { "title": get(env, context, "app.lang.labels.lastTradedReachedLow") });
            content(env, morph0, context, "app.lang.labels.dayLow");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-24 fade-fore-color font-m pad-s-b");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.labels.daysRange");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "stock.isTodayLow")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    var child4 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-24 up-fore-color pad-s-b font-m");
          var el2 = dom.createTextNode("\n                   ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "wk52-up-icon");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "icon-high-low-52 dark-bg-fore-color");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "up-fore-color pad-s-l");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          element(env, element3, context, "bind-attr", [], { "title": get(env, context, "app.lang.labels.highReachedFiftyTwoWeekHigh") });
          content(env, morph0, context, "app.lang.labels.wkHigh");
          return fragment;
        }
      };
    }();
    var child5 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-24 up-fore-color pad-s-b font-m");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "wk52-down-icon");
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "icon-high-low-52 dark-bg-fore-color");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "down-fore-color pad-s-l");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1, 1]);
            var morph0 = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            element(env, element1, context, "bind-attr", [], { "title": get(env, context, "app.lang.labels.lowReachedFiftyTwoWeekLow") });
            content(env, morph0, context, "app.lang.labels.wkLow");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col-24 fade-fore-color font-m pad-s-b");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.labels.wkRange52");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "stock.is52WeekLow")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width pad-s-tb");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col pad-s-b");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col v-top pad-s-lr");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-6");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "vertical-separator");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-6 pad-s-l");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width pad-m-b pad-s-t");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-row");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width pad-s-tb");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-row");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element,
            get = hooks.get,
            inline = hooks.inline,
            block = hooks.block,
            concat = hooks.concat,
            attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element11 = dom.childAt(fragment, [0]);
        var element12 = dom.childAt(element11, [1, 1]);
        var element13 = dom.childAt(element12, [1]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element13, [3]);
        var element17 = dom.childAt(element13, [5]);
        var element18 = dom.childAt(element11, [11]);
        var element19 = dom.childAt(element18, [1]);
        var element20 = dom.childAt(element18, [3]);
        var morph0 = dom.createMorphAt(element14, 3, 3);
        var morph1 = dom.createMorphAt(element16, 0, 0);
        var morph2 = dom.createMorphAt(element17, 0, 0);
        var morph3 = dom.createMorphAt(dom.childAt(element12, [3]), 1, 1);
        var morph4 = dom.createMorphAt(element11, 7, 7);
        var attrMorph0 = dom.createAttrMorph(element18, 'class');
        var morph5 = dom.createMorphAt(element19, 1, 1);
        var morph6 = dom.createMorphAt(dom.childAt(element19, [3]), 0, 0);
        var morph7 = dom.createMorphAt(element20, 1, 1);
        var morph8 = dom.createMorphAt(dom.childAt(element20, [3]), 0, 0);
        element(env, element14, context, "bind-attr", [], { "class": ":layout-col :ltr colorCSS :font-5x-l :pad-l-b" });
        element(env, element15, context, "bind-attr", [], { "class": "ltpIconCSS :glyphicon :font-m" });
        inline(env, morph0, context, "formatNumber", [get(env, context, "stock.ltp"), get(env, context, "stock.deci")], {});
        element(env, element16, context, "bind-attr", [], { "class": ":layout-inline :ltr :font-xxx-l backColorCSS fontColorCSS :pad-s-tb :pad-s-lr :xs-border-radius" });
        inline(env, morph1, context, "formatNumberPercentage", [get(env, context, "stock.pctChg"), 2], {});
        element(env, element17, context, "bind-attr", [], { "class": ":layout-inline :ltr :font-xxx-l :pad-m-l :bold colorCSS" });
        inline(env, morph2, context, "formatNumber", [get(env, context, "stock.chg"), get(env, context, "stock.deci")], {});
        block(env, morph3, context, "if", [get(env, context, "stock.ann")], {}, child0, null);
        block(env, morph4, context, "unless", [get(env, context, "isDisabledCashMap")], {}, child1, null);
        attribute(env, attrMorph0, element18, "class", concat(env, ["layout-col pad-s-r ", get(env, context, "dayRangeContainerCss")]));
        block(env, morph5, context, "if", [get(env, context, "stock.isTodayHigh")], {}, child2, child3);
        inline(env, morph6, context, "days-range", [], { "stock": get(env, context, "stock"), "isBarAvailable": true });
        block(env, morph7, context, "if", [get(env, context, "stock.is52WeekHigh")], {}, child4, child5);
        inline(env, morph8, context, "fifty-two-wk-hl", [], { "stock": get(env, context, "stock"), "isBarAvailable": true });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/quote-summary/components/quote-status-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col pad-m-l");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline font-l");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "type", "submit");
            dom.setAttribute(el3, "class", "btn btn-buy up-back-color btn-animation btn-trade-small");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline font-l pad-m-l");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "type", "submit");
            dom.setAttribute(el3, "class", "btn btn-sell down-back-color btn-animation btn-trade-small");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element5 = dom.childAt(fragment, [1]);
            var element6 = dom.childAt(element5, [1, 1]);
            var element7 = dom.childAt(element5, [3, 1]);
            var morph0 = dom.createMorphAt(element6, 0, 0);
            var morph1 = dom.createMorphAt(element7, 0, 0);
            element(env, element6, context, "action", ["onBuyMore"], {});
            content(env, morph0, context, "buyText");
            element(env, element7, context, "action", ["onLiquidate"], {});
            content(env, morph1, context, "sellText");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col font-l");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "bold btn-txt-color pad-s-l");
              var el3 = dom.createElement("button");
              dom.setAttribute(el3, "type", "button");
              dom.setAttribute(el3, "class", "btn btn-buy btn-trade-small up-back-color btn-animation");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element4 = dom.childAt(fragment, [1, 1, 0]);
              var morph0 = dom.createMorphAt(element4, 0, 0);
              element(env, element4, context, "action", ["buy"], {});
              content(env, morph0, context, "buyText");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "isTradableAssetType")], {}, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          block(env, morph0, context, "if", [get(env, context, "isLiquidateEnable")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col cursor-pointer pad-s-lr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "icon-fore-color");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "icon-share glyphicon pad-m-lr font-4x-l");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          element(env, element3, context, "action", ["onShareScreen"], {});
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-s-l pad-l-r icon-fore-color");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "bootstrap-icon-dropdown", [], { "options": get(env, context, "customWLArray"), "valueKey": "name", "labelKey": "name", "selectAction": "addStocksToCustomWL", "iconStyle": "glyphicon-star-empty glyphicon font-4x-l", "enableSideDropDown": true, "dropdownCss": "dropdown-menu-align-right", "itemCss": "font-s" });
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col cursor-pointer pad-s-lr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "icon-fore-color");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1, 1]);
          element(env, element1, context, "action", ["addStocksToCustomWL"], {});
          element(env, element2, context, "bind-attr", [], { "class": ":glyphicon-star-empty :glyphicon :pad-m-lr :font-4x-l isAddedToCustomWatchList:symbol-fore-color" });
          return fragment;
        }
      };
    }();
    var child4 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-s-l pad-l-r h-middle font-4x-l fade-fore-color overflow-visible");
          var el2 = dom.createTextNode("\n                 ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "icon-fore-color");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "glyphicon glyphicon-bell pad-m-l");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          element(env, element0, context, "action", ["itemClicked"], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width separator separator-shadow status-panel pad-s-tb");
        dom.setAttribute(el1, "id", "quoteStatusPanelContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col h-right");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "horizontal-separator mgn-m-lr");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element8 = dom.childAt(fragment, [0]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element9, [1]);
        var element11 = dom.childAt(element8, [5]);
        var attrMorph0 = dom.createAttrMorph(element9, 'class');
        var morph0 = dom.createMorphAt(element10, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element10, 'class');
        var morph1 = dom.createMorphAt(element8, 3, 3);
        var morph2 = dom.createMorphAt(element11, 1, 1);
        var morph3 = dom.createMorphAt(element11, 3, 3);
        var morph4 = dom.createMorphAt(element11, 5, 5);
        attribute(env, attrMorph0, element9, "class", concat(env, ["layout-col-24 h-left full-width font-xxx-l pad-m-r pad-widget-left font-thick symbol-fore-color ltr ", get(env, context, "dSymbolCss")]));
        attribute(env, attrMorph1, element10, "class", concat(env, [get(env, context, "symbolFontCss")]));
        element(env, element10, context, "action", ["showSymbolSearch"], {});
        content(env, morph0, context, "stock.dispProp1");
        block(env, morph1, context, "if", [get(env, context, "isTradingEnabled")], {}, child0, null);
        block(env, morph2, context, "unless", [get(env, context, "isShareIconDisabled")], {}, child1, null);
        block(env, morph3, context, "if", [get(env, context, "isMultipleCustomWLAvailable")], {}, child2, child3);
        block(env, morph4, context, "if", [get(env, context, "isAlertIconEnabled")], {}, child4, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/quote-summary/quote-summary", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-12 pad-m-tb pad-s-r");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-row");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("<div class=\"layout-col h-left font-x-l up-fore-color\"></div>");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("<div class=\"layout-col font-l fade-fore-color\"> </div>");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col font-l fade-fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-24 h-right font-x-l bold up-fore-color btn-animation");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-12 pad-m-tb pad-s-l");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-row");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("<div class=\"layout-col h-left font-x-l down-fore-color\"></div>");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("<div class=\"layout-col font-l fade-fore-color\"> </div>");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col font-l fade-fore-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-24 h-right font-x-l bold down-fore-color btn-animation");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              element = hooks.element,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element9 = dom.childAt(fragment, [1, 1]);
          var element10 = dom.childAt(element9, [13]);
          var element11 = dom.childAt(fragment, [3, 1]);
          var element12 = dom.childAt(element11, [13]);
          var morph0 = dom.createMorphAt(dom.childAt(element9, [11]), 0, 0);
          var morph1 = dom.createMorphAt(element10, 1, 1);
          var morph2 = dom.createMorphAt(dom.childAt(element11, [11]), 0, 0);
          var morph3 = dom.createMorphAt(element12, 1, 1);
          content(env, morph0, context, "app.lang.labels.bestBid");
          element(env, element10, context, "action", ["sell"], {});
          inline(env, morph1, context, "formatNumber", [get(env, context, "stock.bbp"), get(env, context, "stock.deci")], {});
          content(env, morph2, context, "app.lang.labels.bestOffer");
          element(env, element12, context, "action", ["buy"], {});
          inline(env, morph3, context, "formatNumber", [get(env, context, "stock.bap"), get(env, context, "stock.deci")], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element7 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element7, 1, 1);
              var attrMorph0 = dom.createAttrMorph(element7, 'class');
              attribute(env, attrMorph0, element7, "class", concat(env, ["layout-col bold font-x-l fore-color widget-hline pad-m-l h-right ltr ", get(env, context, "field.style")]));
              content(env, morph0, context, "field.formattedValue");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element6 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element6, 1, 1);
              var attrMorph0 = dom.createAttrMorph(element6, 'class');
              attribute(env, attrMorph0, element6, "class", concat(env, ["layout-col bold font-x-l fore-color widget-hline pad-m-l h-right ltr ", get(env, context, "field.style")]));
              content(env, morph0, context, "field.formattedValue");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "hnav-panel-mobile", 1], {})], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element5 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element5, 1, 1);
            var attrMorph0 = dom.createAttrMorph(element5, 'class');
            attribute(env, attrMorph0, element5, "class", concat(env, ["layout-col bold font-x-l fore-color widget-hline pad-m-l h-right ltr ", get(env, context, "field.style")]));
            content(env, morph0, context, "field.formattedValue");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-row");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-24 font-l fade-fore-color widget-hline pad-m-tb");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element8 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element8, 3, 3);
          content(env, morph0, context, "field.caption");
          block(env, morph1, context, "if", [get(env, context, "field.isLong")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element3 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element3, 1, 1);
              var attrMorph0 = dom.createAttrMorph(element3, 'class');
              attribute(env, attrMorph0, element3, "class", concat(env, ["layout-col bold font-x-l fore-color widget-hline pad-m-l h-right ltr", get(env, context, "field.style")]));
              content(env, morph0, context, "field.formattedValue");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element2 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element2, 1, 1);
              var attrMorph0 = dom.createAttrMorph(element2, 'class');
              attribute(env, attrMorph0, element2, "class", concat(env, ["layout-col bold font-x-l fore-color widget-hline pad-m-l h-right ltr ", get(env, context, "field.style")]));
              content(env, morph0, context, "field.formattedValue");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "hnav-panel-mobile", 1], {})], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element1, 1, 1);
            var attrMorph0 = dom.createAttrMorph(element1, 'class');
            attribute(env, attrMorph0, element1, "class", concat(env, ["layout-col bold font-x-l fore-color widget-hline pad-m-l h-right ltr ", get(env, context, "field.style")]));
            content(env, morph0, context, "field.formattedValue");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-row");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-24 font-l fade-fore-color widget-hline pad-m-tb");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element4, 3, 3);
          content(env, morph0, context, "field.caption");
          block(env, morph1, context, "if", [get(env, context, "field.isLong")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width widget-hline pad-l-b");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col font-l fade-fore-color pad-m-tb");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 bold font-x-l fore-color pad-m-l h-right");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          content(env, morph0, context, "app.lang.labels.market");
          content(env, morph1, context, "subMarket");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width pad-s-t widget-hline overflow-hidden pos-rel");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pos-abs");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col pad-xs-t h-left");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col pad-l-l");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "icon-fore-color");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "icon-mobile-rotate pad-m-lr font-4x-l");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pad-s-t");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "navbar-nav-chart ltr pad-m-t");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "mgn-l-t index-chart-position");
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "full-width");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-12 pad-s-r v-top");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col-12 pad-s-l v-top");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content,
            subexpr = hooks.subexpr,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element13 = dom.childAt(fragment, [2, 1]);
        var element14 = dom.childAt(element13, [1, 1, 1]);
        var element15 = dom.childAt(fragment, [4]);
        var element16 = dom.childAt(fragment, [6]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var morph1 = dom.createMorphAt(element14, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element14, 'class');
        var morph2 = dom.createMorphAt(dom.childAt(element13, [3, 1, 0]), 1, 1);
        var morph3 = dom.createMorphAt(element15, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element15, 'class');
        var attrMorph2 = dom.createAttrMorph(element16, 'class');
        var morph4 = dom.createMorphAt(dom.childAt(element16, [1]), 1, 1);
        var morph5 = dom.createMorphAt(dom.childAt(element16, [3]), 1, 1);
        var morph6 = dom.createMorphAt(fragment, 8, 8, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "market-quote", [], { "stock": get(env, context, "stock"), "app": get(env, context, "app") });
        attribute(env, attrMorph0, element14, "class", concat(env, ["full-width ", get(env, context, "descFontCss"), " font-l fade-fore-color"]));
        content(env, morph1, context, "stock.lDes");
        inline(env, morph2, context, "outlet", ["quoteChartOutlet"], {});
        attribute(env, attrMorph1, element15, "class", concat(env, ["layout-container full-width ", subexpr(env, context, "if", [get(env, context, "bidOfferAvailable"), "widget-hline", ""], {})]));
        block(env, morph3, context, "if", [get(env, context, "bidOfferAvailable")], {}, child0, null);
        attribute(env, attrMorph2, element16, "class", concat(env, ["layout-container full-width ", subexpr(env, context, "if", [get(env, context, "subMarket"), "", "pad-l-b"], {})]));
        block(env, morph4, context, "each", [get(env, context, "columnOne")], { "keyword": "field" }, child1, null);
        block(env, morph5, context, "each", [get(env, context, "columnTwo")], { "keyword": "field" }, child2, null);
        block(env, morph6, context, "if", [get(env, context, "subMarket")], {}, child3, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/settings", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "outlet", ["customSettingsOutlet"], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-height pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-left");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              concat = hooks.concat,
              attribute = hooks.attribute,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element11 = dom.childAt(fragment, [1]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element12, [1]);
          var attrMorph0 = dom.createAttrMorph(element13, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element12, [3]), 0, 0);
          element(env, element11, context, "action", ["changeTheme", get(env, context, "item.code")], {});
          attribute(env, attrMorph0, element13, "class", concat(env, [get(env, context, "item.active")]));
          content(env, morph0, context, "item.langDesc");
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-height pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-left");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              concat = hooks.concat,
              attribute = hooks.attribute,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(element9, [1]);
          var attrMorph0 = dom.createAttrMorph(element10, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
          element(env, element8, context, "action", ["changeLanguage", get(env, context, "item.code")], {});
          attribute(env, attrMorph0, element10, "class", concat(env, [get(env, context, "item.active")]));
          content(env, morph0, context, "item.desc");
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width pad-l-t");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-header-height bold font-l highlight-fore-color pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-right");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width pad-m-b");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-height pad-s-t pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-right");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "slider-container pad-l-l pad-l-tb");
          var el4 = dom.createTextNode("\n                            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "pad-m-r");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "pad-m-l");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element6 = dom.childAt(fragment, [3, 1]);
          var element7 = dom.childAt(element6, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
          var morph2 = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
          var morph3 = dom.createMorphAt(element7, 2, 2);
          var morph4 = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
          content(env, morph0, context, "app.lang.labels.tickerSettings");
          content(env, morph1, context, "app.lang.labels.tickerSpeed");
          content(env, morph2, context, "app.lang.labels.high");
          inline(env, morph3, context, "input", [], { "type": "range", "min": "-5", "max": "80", "value": get(env, context, "tickerSpeed"), "class": "slider price-ticker-caption" });
          content(env, morph4, context, "app.lang.labels.low");
          return fragment;
        }
      };
    }();
    var child4 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "font-x-l bold btn-txt-color pad-l-l pad-l-tb");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "btn bold btn-default confirm-btn btn-animation font-l btn-txt-color");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element5 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
          element(env, element5, context, "action", ["loadCustomSettingsPopup", "watchListSettingsPopup"], {});
          content(env, morph0, context, "app.lang.labels.selectWatchLists");
          return fragment;
        }
      };
    }();
    var child5 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width pad-l-t pad-m-b");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-header-height bold font-l highlight-fore-color pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-right");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "font-x-l bold btn-txt-color pad-l-l pad-xl-t pad-m-t");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "btn bold btn-default confirm-btn btn-animation font-l btn-txt-color");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [3, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
          content(env, morph0, context, "app.lang.labels.socialMediaSettings");
          element(env, element4, context, "action", ["loadCustomSettingsPopup", "socialMediaSettingsPopup"], {});
          content(env, morph1, context, "app.lang.labels.socialMediaSelect");
          return fragment;
        }
      };
    }();
    var child6 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width pad-l-t");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-header-height bold font-l highlight-fore-color pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-right");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-height pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-left");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              element = hooks.element,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [3]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element2, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
          var attrMorph0 = dom.createAttrMorph(element3, 'class');
          var morph1 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          content(env, morph0, context, "app.lang.labels.touchId");
          element(env, element1, context, "action", ["changeBioAuth"], {});
          attribute(env, attrMorph0, element3, "class", concat(env, [get(env, context, "bioAuthActiveCss")]));
          content(env, morph1, context, "app.lang.labels.touchIdLoginEnable");
          return fragment;
        }
      };
    }();
    var child7 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width pad-l-t");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-header-height bold font-l highlight-fore-color pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-right");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-height full-width");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 nav-row-height pad-widget-left");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "pad-widget-left");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
          content(env, morph0, context, "app.lang.labels.viewLog");
          element(env, element0, context, "action", ["loadCustomSettingsPopup", "viewLogSettingsPopup"], {});
          content(env, morph1, context, "app.lang.labels.viewLog");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new over full-width");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container");
        dom.setAttribute(el2, "style", "height: calc(100% - 45px);");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("Settings Popup Outlet");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/Settings Popup Outlet");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("Theme Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-height full-width pad-l-t");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-24 nav-row-header-height bold font-l highlight-fore-color pad-widget-left");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("a");
        dom.setAttribute(el6, "class", "pad-widget-right");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/Theme Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("Language Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-height full-width pad-l-t");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-24 nav-row-header-height bold font-l highlight-fore-color pad-widget-left");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("a");
        dom.setAttribute(el6, "class", "pad-widget-right");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/Language Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("Price Ticker Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("Price Ticker Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/Watch List Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/Watch List Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/Social Media Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/Social Media Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("Biometric Auth Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/Biometric Auth Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("View Log Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/View Log Settings");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element14 = dom.childAt(fragment, [0, 1, 1]);
        var morph0 = dom.createMorphAt(element14, 3, 3);
        var morph1 = dom.createMorphAt(dom.childAt(element14, [9, 1, 1]), 0, 0);
        var morph2 = dom.createMorphAt(element14, 11, 11);
        var morph3 = dom.createMorphAt(dom.childAt(element14, [17, 1, 1]), 0, 0);
        var morph4 = dom.createMorphAt(element14, 19, 19);
        var morph5 = dom.createMorphAt(element14, 25, 25);
        var morph6 = dom.createMorphAt(element14, 31, 31);
        var morph7 = dom.createMorphAt(element14, 37, 37);
        var morph8 = dom.createMorphAt(element14, 43, 43);
        var morph9 = dom.createMorphAt(element14, 49, 49);
        block(env, morph0, context, "if", [get(env, context, "customSettingsPopup")], {}, child0, null);
        content(env, morph1, context, "app.lang.labels.themes");
        block(env, morph2, context, "each", [get(env, context, "supportedThemes")], { "keyword": "item" }, child1, null);
        content(env, morph3, context, "app.lang.labels.languages");
        block(env, morph4, context, "each", [get(env, context, "supportedLanguages")], { "keyword": "item" }, child2, null);
        block(env, morph5, context, "if", [get(env, context, "isTickerSettingsEnabled")], {}, child3, null);
        block(env, morph6, context, "if", [get(env, context, "isWatchListSettingsEnabled")], {}, child4, null);
        block(env, morph7, context, "if", [get(env, context, "isSocialMediaSettingsEnabled")], {}, child5, null);
        block(env, morph8, context, "if", [get(env, context, "isShowBiometricAuthSignup")], {}, child6, null);
        block(env, morph9, context, "if", [get(env, context, "isAppLogEnabled")], {}, child7, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/watch-list/watch-list-context-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "font-xx-l bold btn-txt-color pad-s-l");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn btn-buy btn-animation up-back-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "font-xx-l bold btn-txt-color pad-m-l");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn btn-sell btn-animation bold down-back-color");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(fragment, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(element4, [1, 1]), 0, 0);
          var morph1 = dom.createMorphAt(dom.childAt(element5, [1, 1]), 0, 0);
          element(env, element4, context, "action", ["buttonMenuAction", false, get(env, context, "view.rowValues"), get(env, context, "view.content")], {});
          content(env, morph0, context, "view.app.lang.labels.buy");
          element(env, element5, context, "action", ["buttonMenuAction", true, get(env, context, "view.rowValues"), get(env, context, "view.content")], {});
          content(env, morph1, context, "view.app.lang.labels.sell");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "font-xx-l bold btn-txt-color pad-m-lr");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn bold sidebar-nav-icon-color add-favorite-btn");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1, 1, 1]);
          element(env, element2, context, "action", ["deleteSymbol", get(env, context, "view.rowValues")], { "target": "view" });
          element(env, element3, context, "bind-attr", [], { "class": ":glyphicon-trash :glyphicon :font-xxx-l" });
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
            inline(env, morph0, context, "bootstrap-icon-dropdown", [], { "options": get(env, context, "view.customWLArray"), "valueKey": "name", "labelKey": "name", "targetObject": get(env, context, "view"), "selectAction": "addStocksToCustomWL", "iconStyle": "glyphicon-star-empty glyphicon font-xxx-l", "enableSideDropDown": true, "dropdownCss": "dropdown-menu-align-right", "buttonCss": "font-xx-l bold pad-l-lr pad-m-tb icon-fore-color", "itemCss": "font-s bold" });
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "font-xx-l bold btn-txt-color pad-m-lr");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "type", "button");
            dom.setAttribute(el2, "class", "btn bold add-favorite-btn sidebar-nav-icon-color");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1, 1]);
            element(env, element0, context, "action", ["addStocksToCustomWL", get(env, context, "view.rowValues")], { "target": "view" });
            element(env, element1, context, "bind-attr", [], { "class": ":glyphicon-star-empty :glyphicon :font-xxx-l view.favouriteIconCss" });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          block(env, morph0, context, "if", [get(env, context, "view.isMultipleCustomWLAvailable")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-s-l pad-widget-right");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element6 = dom.childAt(fragment, [0]);
        var element7 = dom.childAt(element6, [4]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element7, [3]);
        var morph0 = dom.createMorphAt(element6, 1, 1);
        var morph1 = dom.createMorphAt(element6, 2, 2);
        var morph2 = dom.createMorphAt(element9, 1, 1);
        var morph3 = dom.createMorphAt(element10, 1, 1);
        block(env, morph0, context, "if", [get(env, context, "view.isTradingEnabled")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "view.isDeleteButtonEnabled")], {}, child1, child2);
        element(env, element8, context, "bind-attr", [], { "class": ":symbol-fore-color :pad-s-tb :h-left :ltr view.styleFirstValue" });
        element(env, element9, context, "bind-attr", [], { "class": "view.is52WeekHigh:up-fore-color view.is52WeekLow:down-fore-color :bold :font-xxx-l" });
        content(env, morph2, context, "view.rowValues.content.dispProp1");
        element(env, element10, context, "bind-attr", [], { "class": ":pad-s-t :fade-fore-color :ellipsis :font-x-l view.styleSecondValue" });
        content(env, morph3, context, "view.rowValues.content.lDes");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/mobile/watch-list/watch-list", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
            inline(env, morph0, context, "custom-watchlist-dialog", [], { "watchListName": get(env, context, "currentCustomWLName"), "app": get(env, context, "app"), "title": "renameWL", "actionType": "renameWL", "currentCustomWLId": get(env, context, "currentCustomWLId"), "customWLCallBack": "renameCustomWLCallBack" });
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
            inline(env, morph0, context, "custom-watchlist-dialog", [], { "app": get(env, context, "app"), "actionType": "addNewWL", "customWLCallBack": "onCustomWlSelect" });
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
            inline(env, morph0, context, "watchlist-menu-popup", [], { "app": get(env, context, "app"), "isWatchlistMenu": get(env, context, "isWatchlistMenu"), "sortProperties": get(env, context, "sortProperties"), "sortAscending": get(env, context, "sortAscending"), "detailedView": get(env, context, "isShowDetailedView"), "isCustomWLMode": get(env, context, "isCustomWLMode"), "secondarySort": get(env, context, "secondarySort") });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width full-height pos-abs top-zero left-zero z-index-hundred");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-height full-width pos-abs transparent-dark-background");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-height full-width pos-abs");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col h-middle");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "v-middle");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element12 = dom.childAt(fragment, [1]);
          var element13 = dom.childAt(element12, [3, 1, 1]);
          var morph0 = dom.createMorphAt(element13, 1, 1);
          var morph1 = dom.createMorphAt(element13, 2, 2);
          var morph2 = dom.createMorphAt(element13, 3, 3);
          element(env, element12, context, "action", ["closePopup"], {});
          block(env, morph0, context, "if", [get(env, context, "isRenameWL")], {}, child0, null);
          block(env, morph1, context, "if", [get(env, context, "isAddNewWL")], {}, child1, null);
          block(env, morph2, context, "if", [get(env, context, "isWatchlistMenu")], {}, child2, null);
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element7 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element7, 1, 1);
            element(env, element7, context, "bind-attr", [], { "class": ":layout-col :pad-l-l :overflow-visible :wdgttl-tab-item :more-market-container isCustomWLMode::active" });
            inline(env, morph0, context, "more-markets-dropdown", [], { "setExchange": "onSelectExchange", "exchangeValue": get(env, context, "exchange"), "buttonClass": "wdgttl-drp-dwn-btn ltr", "lblClass": "wdgttl-drp-dwn-btn-width font-l pad-xs-t", "defaultExchangeForDropdown": get(env, context, "defaultExchange"), "exg": get(env, context, "exg"), "isShowDefaultMarket": true, "value": get(env, context, "value"), "key": get(env, context, "wkey") });
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col mgn-m-r");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "role", "presentation");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "class", "font-l wdgttl-tab-link hint--top hint--bounce hint--rounded");
            dom.setAttribute(el3, "aria-controls", "");
            dom.setAttribute(el3, "role", "tab");
            dom.setAttribute(el3, "data-toggle", "tab");
            var el4 = dom.createTextNode("\n                                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                get = hooks.get,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element6 = dom.childAt(fragment, [1, 1]);
            var morph0 = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
            element(env, element6, context, "bind-attr", [], { "class": ":pad-xs-t :ltr :wdgttl-tab-item isCustomWLMode::active" });
            element(env, element6, context, "action", ["onSelectExchange", get(env, context, "marketTab")], {});
            content(env, morph0, context, "marketTab.de");
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
            inline(env, morph0, context, "sub-markets-dropdown", [], { "exchange": get(env, context, "exchange"), "key": get(env, context, "wkey"), "buttonClass": "wdgttl-drp-dwn-btn ltr", "onSubMarketChanged": "onSelectSubMarket", "lblClass": "wdgttl-drp-dwn-btn-width font-l pad-m-l pad-xs-t", "currentMarketId": get(env, context, "currentSubMarketId") });
            return fragment;
          }
        };
      }();
      var child3 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "glyphicon-star-empty glyphicon");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  concat = hooks.concat,
                  attribute = hooks.attribute;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element5 = dom.childAt(fragment, [1]);
              var attrMorph0 = dom.createAttrMorph(element5, 'class');
              attribute(env, attrMorph0, element5, "class", concat(env, ["layout-col wdgttl-tab-link wdgttl-tab-item font-l pad-l-l ", get(env, context, "favouritesActive")]));
              return fragment;
            }
          };
        }();
        var child1 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
                inline(env, morph0, context, "tab-dropdown", [], { "isDropdown": get(env, context, "isDropdown"), "displayList": get(env, context, "customWatchListArray"), "newActive": get(env, context, "customWLNewActive"), "isDisplayListChanged": get(env, context, "isCustomWLChanged"), "labelKey": "name", "actionName": "onCustomWlSelect", "tabItemClass": "wdgttl-tab-item font-normal pad-xs-t", "tabLinkClass": "wdgttl-tab-link bold wdgttl-fore-color font-l", "lblClass": "wdgttl-tab-link bold wdgttl-fore-color font-l", "buttonClass": "wdgttl-drp-dwn-btn font-normal pad-xs-t" });
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  element = hooks.element,
                  get = hooks.get,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element4 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element4, 1, 1);
              element(env, element4, context, "bind-attr", [], { "class": ":layout-col :overflow-visible :wdgttl-tab-item isActiveCustomDropdown:active:" });
              block(env, morph0, context, "if", [get(env, context, "isWidgetRefreshed")], {}, child0, null);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "isFavouriteTextDisabled")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child4 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col h-right icon-fore-color pad-l-r ");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline font-xx-l pad-m-lr");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "glyphicon glyphicon-plus");
            dom.setAttribute(el3, "aria-hidden", "true");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline font-xxx-l pad-xs-t pad-s-l");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
            element(env, element3, context, "action", ["openGlobalSearch"], {});
            inline(env, morph0, context, "bootstrap-icon-dropdown", [], { "options": get(env, context, "menuConfig"), "valueKey": "name", "labelKey": "name", "selectAction": "onSelectOption", "dropdownCss": "dropdown-menu-align-right", "itemCss": "font-s bold" });
            return fragment;
          }
        };
      }();
      var child5 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "icon-close-round");
              dom.setAttribute(el1, "aria-hidden", "true");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-filter");
              dom.setAttribute(el1, "aria-hidden", "true");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col h-right icon-fore-color pad-l-lr font-xxx-l pad-xs-t");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                element = hooks.element,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element1, 1, 1);
            element(env, element1, context, "action", ["displayFilter"], {});
            block(env, morph0, context, "if", [get(env, context, "isDisplayFilter")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      var child6 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "hint--top-left hint--bounce hint--rounded pos-abs quote-watchlist-link");
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element0, 1, 1);
            var attrMorph0 = dom.createAttrMorph(element0, 'data-hint');
            attribute(env, attrMorph0, element0, "data-hint", concat(env, [get(env, context, "app.lang.labels.linkWidgets")]));
            inline(env, morph0, context, "link-dropdown", [], { "options": get(env, context, "links"), "defaultSelect": get(env, context, "defaultLink"), "value": get(env, context, "selectedLink"), "valueKey": "code", "labelKey": "desc", "selectAction": "setLink" });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "tabPanelWatchlist");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col wdgttl-tab");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col pad-m-lr");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("Filter will be applied later");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute,
              inline = hooks.inline,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [1]);
          var element10 = dom.childAt(element9, [1]);
          var element11 = dom.childAt(element9, [3]);
          var morph0 = dom.createMorphAt(element10, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element10, 'class');
          var morph1 = dom.createMorphAt(element11, 1, 1);
          var attrMorph1 = dom.createAttrMorph(element11, 'class');
          var morph2 = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
          var morph3 = dom.createMorphAt(dom.childAt(element11, [5]), 1, 1);
          var morph4 = dom.createMorphAt(element8, 5, 5);
          var morph5 = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          element(env, element8, context, "bind-attr", [], { "class": ":layout-container :full-width :pos-rel :fade-fore-color" });
          element(env, element9, context, "bind-attr", [], { "class": ":layout-container :pos-rel :full-width isIndexView:pad-xs-b" });
          attribute(env, attrMorph0, element10, "class", concat(env, ["layout-col pos-abs transform z-index-hundred pad-m-l pad-s-tb ", get(env, context, "filterCss")]));
          inline(env, morph0, context, "input-field-text", [], { "id": "filterWatchlist", "value": get(env, context, "textFilter"), "type": "text", "class": "font-l search-ctrl full-height full-width watch-list-filter-panel search-query", "placeholder": get(env, context, "app.lang.labels.filter") });
          attribute(env, attrMorph1, element11, "class", concat(env, ["layout-container font-xxx-l wdgttl-tab-panel ", get(env, context, "tabPanelCss")]));
          block(env, morph1, context, "if", [get(env, context, "isMoreMarketAvailable")], {}, child0, child1);
          block(env, morph2, context, "unless", [get(env, context, "isIndexView")], {}, child2, null);
          block(env, morph3, context, "unless", [get(env, context, "isIndexView")], {}, child3, null);
          block(env, morph4, context, "if", [get(env, context, "isCustomWLMode")], {}, child4, child5);
          block(env, morph5, context, "unless", [get(env, context, "isHideLink")], {}, child6, null);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "table-component", [], { "hasBody": get(env, context, "isRenderingEnabled"), "columns": get(env, context, "columns"), "content": get(env, context, "oneWayContent"), "rowHeight": get(env, context, "rowHeight"), "indicatorConfig": get(env, context, "indicatorConfig"), "hasFooter": false, "isActiveOnSymbolChange": true, "rowClickAction": "clickRow", "minHeaderHeight": 40, "isRefreshed": get(env, context, "isRefreshed"), "isOddEvenRowStyleDisabled": get(env, context, "isOddEvenRowStyleDisabled"), "isExpandedView": get(env, context, "isExpandedView"), "deleteSymbol": "deleteSymbol", "expandColumnAction": "expandColumnAction", "contextPath": get(env, context, "contextPath"), "isIndexView": get(env, context, "isIndexView"), "disableExpand": get(env, context, "disableExpand"), "isCustomWLMode": get(env, context, "isCustomWLMode"), "isDeleteButtonDisabled": get(env, context, "isDeleteButtonDisabled"), "isAddedToCustomWatchList": get(env, context, "isAddedToCustomWatchList"), "id": get(env, context, "wkey"), "isContextPanel": get(env, context, "isContextPanel"), "enableColumnReorder": false });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height overflow-hidden pos-rel");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element14 = dom.childAt(fragment, [0]);
        var element15 = dom.childAt(element14, [5]);
        var morph0 = dom.createMorphAt(element14, 1, 1);
        var morph1 = dom.createMorphAt(element14, 3, 3);
        var morph2 = dom.createMorphAt(element15, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element15, 'class');
        block(env, morph0, context, "if", [get(env, context, "showPopup")], {}, child0, null);
        block(env, morph1, context, "unless", [get(env, context, "isTableControlPanelDisabled")], {}, child1, null);
        attribute(env, attrMorph0, element15, "class", concat(env, ["full-width ", get(env, context, "portfolioWatchlistHeight"), " ", subexpr(env, context, "if", [get(env, context, "isIndexView"), "indices-container-height", "watch-list-container-height"], {})]));
        block(env, morph2, context, "if", [get(env, context, "isWidgetRefreshed")], {}, child2, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/news-announcement", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "id", "tablist");
          dom.setAttribute(el1, "class", "nav nav-tabs");
          dom.setAttribute(el1, "role", "tablist");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          dom.setAttribute(el2, "class", "active");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "href", "#location1");
          dom.setAttribute(el3, "aria-controls", "location1");
          dom.setAttribute(el3, "role", "tab");
          dom.setAttribute(el3, "data-toggle", "tab");
          dom.setAttribute(el3, "style", "padding:3px 7px");
          dom.setAttribute(el3, "class", "font-m");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "href", "#location1");
          dom.setAttribute(el3, "aria-controls", "location1");
          dom.setAttribute(el3, "role", "tab");
          dom.setAttribute(el3, "data-toggle", "tab");
          dom.setAttribute(el3, "style", "padding:3px 7px");
          dom.setAttribute(el3, "class", "font-m");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "href", "#location1");
          dom.setAttribute(el3, "aria-controls", "location1");
          dom.setAttribute(el3, "role", "tab");
          dom.setAttribute(el3, "data-toggle", "tab");
          dom.setAttribute(el3, "style", "padding:3px 7px");
          dom.setAttribute(el3, "class", "font-m");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element13 = dom.childAt(fragment, [1]);
          var element14 = dom.childAt(element13, [1, 1]);
          var element15 = dom.childAt(element13, [3, 1]);
          var element16 = dom.childAt(element13, [5, 1]);
          var morph0 = dom.createMorphAt(element14, 0, 0);
          var morph1 = dom.createMorphAt(element15, 0, 0);
          var morph2 = dom.createMorphAt(element16, 0, 0);
          element(env, element14, context, "action", ["loadAll"], {});
          content(env, morph0, context, "app.lang.labels.all");
          element(env, element15, context, "action", ["loadAnnouncements"], {});
          content(env, morph1, context, "app.lang.labels.announcement");
          element(env, element16, context, "action", ["loadNews"], {});
          content(env, morph2, context, "app.lang.labels.news");
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-megaphone-1 ann-icon-color");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-tv news-icon-color");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width fade-fore-color");
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-24 bold highlight-fore-color font-m");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col font-m fade-fore-color");
            var el4 = dom.createElement("span");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element5 = dom.childAt(fragment, [1]);
            var element6 = dom.childAt(element5, [1]);
            var element7 = dom.childAt(element6, [0]);
            var element8 = dom.childAt(element5, [3]);
            var element9 = dom.childAt(element8, [3, 0]);
            var attrMorph0 = dom.createAttrMorph(element5, 'class');
            var attrMorph1 = dom.createAttrMorph(element6, 'class');
            var morph0 = dom.createMorphAt(element7, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element7, 'class');
            var morph1 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
            var morph2 = dom.createMorphAt(element9, 0, 0);
            var attrMorph3 = dom.createAttrMorph(element9, 'class');
            attribute(env, attrMorph0, element5, "class", concat(env, ["layout-col full-width v-top white-space-normal pad-m-l pad-widget-right ", subexpr(env, context, "if", [get(env, context, "announcement.isAnnouncement"), "announcement-vertical-seperator", "news-vertical-seperator"], {})]));
            attribute(env, attrMorph1, element6, "class", concat(env, ["news-title fore-color ", subexpr(env, context, "if", [get(env, context, "isMobile"), "pad-l-b", "pad-m-b"], {})]));
            attribute(env, attrMorph2, element7, "class", get(env, context, "announcement.annNewsHeadCss"));
            content(env, morph0, context, "announcement.dHed");
            content(env, morph1, context, "announcement.dispProp1");
            attribute(env, attrMorph3, element9, "class", get(env, context, "announcement.annNewsTimeCss"));
            content(env, morph2, context, "announcement.dDTt");
            return fragment;
          }
        };
      }();
      var child3 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createElement("span");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width fade-fore-color");
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-24 bold highlight-fore-color font-m");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col font-m fade-fore-color");
            var el4 = dom.createElement("span");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element1, [0]);
            var element3 = dom.childAt(element0, [3]);
            var element4 = dom.childAt(element3, [3, 0]);
            var attrMorph0 = dom.createAttrMorph(element0, 'class');
            var attrMorph1 = dom.createAttrMorph(element1, 'class');
            var morph0 = dom.createMorphAt(element2, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element2, 'class');
            var morph1 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            var morph2 = dom.createMorphAt(element4, 0, 0);
            var attrMorph3 = dom.createAttrMorph(element4, 'class');
            attribute(env, attrMorph0, element0, "class", concat(env, ["layout-col full-width v-top white-space-normal pad-m-l pad-widget-right ", subexpr(env, context, "if", [get(env, context, "announcement.isAnnouncement"), "announcement-vertical-seperator", "news-vertical-seperator"], {})]));
            attribute(env, attrMorph1, element1, "class", concat(env, ["news-title fore-color ", subexpr(env, context, "if", [get(env, context, "isMobile"), "pad-l-b", "pad-m-b"], {})]));
            attribute(env, attrMorph2, element2, "class", get(env, context, "announcement.annNewsHeadCss"));
            content(env, morph0, context, "announcement.dHed");
            content(env, morph1, context, "announcement.dispProp1");
            attribute(env, attrMorph3, element4, "class", get(env, context, "announcement.annNewsTimeCss"));
            content(env, morph2, context, "announcement.dDTt");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          var el4 = dom.createTextNode("\n\n                                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-col v-top pad-widget-left pad-m-r");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                                    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              element = hooks.element,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element10 = dom.childAt(fragment, [1]);
          var element11 = dom.childAt(element10, [1]);
          var element12 = dom.childAt(element11, [1]);
          var attrMorph0 = dom.createAttrMorph(element10, 'class');
          var attrMorph1 = dom.createAttrMorph(element11, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element12, [1]), 1, 1);
          var morph1 = dom.createMorphAt(element12, 3, 3);
          attribute(env, attrMorph0, element10, "class", concat(env, ["table-row-hover-back-color ", subexpr(env, context, "isEqual", [get(env, context, "announcement.id"), get(env, context, "selectedNewAnn"), "table-row-selected-back-color"], {}), " "]));
          attribute(env, attrMorph1, element11, "class", concat(env, ["layout-container full-width news-list-item-right-panel border-bottom ", subexpr(env, context, "if", [get(env, context, "isMobile"), "pad-l-tb", "pad-m-tb"], {})]));
          element(env, element12, context, "action", ["itemClicked", get(env, context, "announcement.id"), get(env, context, "announcement.type")], {});
          block(env, morph0, context, "if", [get(env, context, "announcement.isAnnouncement")], {}, child0, child1);
          block(env, morph1, context, "if", [get(env, context, "announcement.isArabic")], {}, child2, child3);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "app.lang.messages.dataNotAvailable");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "isAnnUnavailable")], {}, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isInvokedBySearch")], {}, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "nano full-height-without-header pos-rel has-scrollbar");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget-container-new nano-content full-height");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "tab-content");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "role", "tabpanel");
        dom.setAttribute(el5, "class", "tab-pane active");
        dom.setAttribute(el5, "id", "location1");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "role", "tabpanel");
        dom.setAttribute(el5, "class", "tab-pane");
        dom.setAttribute(el5, "id", "location2");
        var el6 = dom.createTextNode("\n\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("         <div id=\"datepicker\"></div>  ");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "role", "tabpanel");
        dom.setAttribute(el5, "class", "tab-pane");
        dom.setAttribute(el5, "id", "location3");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h2");
        var el7 = dom.createTextNode("Buyaka");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            attribute = hooks.attribute,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element17 = dom.childAt(fragment, [0]);
        var element18 = dom.childAt(element17, [3, 1]);
        var morph0 = dom.createMorphAt(element17, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element17, 'id');
        var morph1 = dom.createMorphAt(element18, 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element18, [3, 1]), 1, 1);
        attribute(env, attrMorph0, element17, "id", get(env, context, "wkey"));
        inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "title"), "hideSymbol": get(env, context, "hideSymbol"), "hideWidgetLink": get(env, context, "hideWidgetLink"), "symbol": get(env, context, "symbolObj.dispProp1"), "setLink": "setLink", "searchedSymbol": get(env, context, "symbolObj.dispProp1"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "app": get(env, context, "app") });
        block(env, morph1, context, "if", [get(env, context, "showAnnTabs")], {}, child0, null);
        block(env, morph2, context, "each", [get(env, context, "filteredContent")], { "keyword": "announcement" }, child1, child2);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/option-chain", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "oneWayContent"), "rowHeight": get(env, context, "rowHeight"), "minHeaderHeight": 25, "hasFooter": false, "sortAscending": get(env, context, "sortAscending"), "id": get(env, context, "wkey"), "isRefreshed": get(env, context, "isRefreshed"), "rowClickAction": "clickRow", "doubleClickAction": "doubleClickRow" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12 widget-container-new full-height-without-header pad-s-b");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width pad-widget-left pad-widget-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col overflow-visible");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col pad-m-l overflow-visible");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-24 pad-xs-tb");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width");
        dom.setAttribute(el3, "style", "height: calc(100% - 47px);");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(element0, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element0, 'id');
        var morph1 = dom.createMorphAt(element3, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element3, 'title');
        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        var morph4 = dom.createMorphAt(element4, 1, 1);
        var morph5 = dom.createMorphAt(element4, 3, 3);
        var morph6 = dom.createMorphAt(element4, 5, 5);
        attribute(env, attrMorph0, element0, "id", concat(env, ["option-chain-", get(env, context, "wkey")]));
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.optionChain"), "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "setLink": "setLink", "isSearchAvailable": true, "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss"), "isResizeAvailable": true, "resizeAction": "fullScreenToggle" });
        attribute(env, attrMorph1, element3, "title", concat(env, [get(env, context, "app.lang.labels.optionPeriods")]));
        inline(env, morph1, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "optPeriodArray"), "defaultSelect": get(env, context, "currentOptPeriod"), "valueKey": "code", "labelKey": "desc", "selectAction": "setOptionPeriod" });
        inline(env, morph2, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "nearMonArray"), "defaultSelect": get(env, context, "currentNearMon"), "valueKey": "code", "labelKey": "desc", "selectAction": "setNearMoney" });
        inline(env, morph3, context, "outlet", ["quoteSummary"], {});
        inline(env, morph4, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph5, context, "single-message-viewer", [], { "showMessage": get(env, context, "showError"), "message": get(env, context, "errorMessage"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph6, context, "if", [get(env, context, "isDataAvailable")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/quote-fields", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container intraday-dq-widget hint--top hint--bounce hint--rounded pad-widget-left pad-widget-right");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col font-m ellipsis left fade-fore-color pad-xs-tb");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col font-l bold fade-fore-color right pad-xs-tb");
          var el4 = dom.createElement("span");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container full-width");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "widget-hline full-width");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              content = hooks.content,
              concat = hooks.concat;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [3, 0]);
          var attrMorph0 = dom.createAttrMorph(element0, 'data-hint');
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element2, 0, 0);
          var attrMorph1 = dom.createAttrMorph(element2, 'class');
          attribute(env, attrMorph0, element0, "data-hint", get(env, context, "field.detailQouteTitle"));
          content(env, morph0, context, "field.caption");
          attribute(env, attrMorph1, element2, "class", concat(env, ["layout-inline ltr ", get(env, context, "field.style")]));
          content(env, morph1, context, "field.formattedValue");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "nano detailquote-height has-scrollbar pos-rel");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget-container-new nano-content full-height pad-xs-t");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element3 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(element3, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element3, 'id');
        var morph1 = dom.createMorphAt(dom.childAt(element3, [3, 1]), 1, 1);
        attribute(env, attrMorph0, element3, "id", concat(env, [get(env, context, "wkey")]));
        inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "app.lang.labels.detailQuote"), "symbol": get(env, context, "stock.dispProp1"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "stock.dispProp1"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        block(env, morph1, context, "each", [get(env, context, "panelFields")], { "keyword": "field" }, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/quote-fundamental", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["price/widgets/quote-fields"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/quote-intraday-performance", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["price/widgets/quote-fields"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/quote-market-depth", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "title"), "symbol": get(env, context, "titleSymbol"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "titleSymbol"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline font-m fade-fore-color pad-s-l");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline font-m bold up-fore-color pad-s-l");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element14 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element14, [3]), 0, 0);
            content(env, morph0, context, "app.lang.labels.bidOffer");
            inline(env, morph1, context, "formatNumber", [get(env, context, "symbolObj.bar")], {});
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-col");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline font-m fade-fore-color pad-s-l");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-inline font-m bold up-fore-color pad-s-l");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element13 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
            var morph1 = dom.createMorphAt(dom.childAt(element13, [3]), 0, 0);
            content(env, morph0, context, "app.lang.labels.spread");
            inline(env, morph1, context, "formatNumber", [get(env, context, "symbolObj.spread")], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isMarketDepthByPrice")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pad-l-t mgn-l-t");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "upgrade-subscription", [], { "app": get(env, context, "app") });
          return fragment;
        }
      };
    }();
    var child3 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "font-m text-center mgn-l-t pad-l-t");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            content(env, morph0, context, "app.lang.messages.delayedUserDataNotAvailable");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col-5 row-height-header font-m data-table-header");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "app.lang.labels.splits");
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col-5 row-height-header font-m data-table-header");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "app.lang.labels.seq");
              return fragment;
            }
          };
        }();
        var child2 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col-10 h-right pad-m-r row-height font-m up-fore-color bold");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.qty"), 0], {});
                return fragment;
              }
            };
          }();
          var child1 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col-10 h-right pad-m-r row-height font-m up-fore-color");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.qty"), 0], {});
                return fragment;
              }
            };
          }();
          var child2 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col-9 pad-s-lr row-height up-fore-color bold  table-row-up-back-color font-l");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.prc"), get(env, context, "symbolObj.deci")], {});
                return fragment;
              }
            };
          }();
          var child3 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col-9 pad-s-lr row-height up-fore-color bold  table-row-up-back-color font-m");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.prc"), get(env, context, "symbolObj.deci")], {});
                return fragment;
              }
            };
          }();
          var child4 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "progress-bar-height pos-abs bottom-zero left-zero prominent-up-back-color");
                dom.setAttribute(el1, "role", "progressbar");
                dom.setAttribute(el1, "aria-valuenow", "70");
                dom.setAttribute(el1, "aria-valuemin", "10");
                dom.setAttribute(el1, "aria-valuemax", "100");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    attribute = hooks.attribute;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element5 = dom.childAt(fragment, [1]);
                var attrMorph0 = dom.createUnsafeAttrMorph(element5, 'style');
                attribute(env, attrMorph0, element5, "style", get(env, context, "bidItem.per"));
                return fragment;
              }
            };
          }();
          var child5 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "progress-bar-height pos-abs bottom-zero left-zero fade-up-back-color");
                dom.setAttribute(el1, "role", "progressbar");
                dom.setAttribute(el1, "aria-valuenow", "70");
                dom.setAttribute(el1, "aria-valuemin", "10");
                dom.setAttribute(el1, "aria-valuemax", "100");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    attribute = hooks.attribute;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element4 = dom.childAt(fragment, [1]);
                var attrMorph0 = dom.createUnsafeAttrMorph(element4, 'style');
                attribute(env, attrMorph0, element4, "style", get(env, context, "bidItem.per"));
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-row");
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout-container full-width pos-rel");
              var el3 = dom.createTextNode("\n                                            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "layout-row");
              var el4 = dom.createTextNode("\n                                                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4, "class", "layout-col-5 row-height font-m pad-s-lr fore-color");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("                                            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                                        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  inline = hooks.inline,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element6 = dom.childAt(fragment, [1, 1]);
              var element7 = dom.childAt(element6, [1]);
              var morph0 = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
              var morph1 = dom.createMorphAt(element7, 3, 3);
              var morph2 = dom.createMorphAt(element7, 5, 5);
              var morph3 = dom.createMorphAt(element6, 3, 3);
              inline(env, morph0, context, "formatNumber", [get(env, context, "bidItem.splt"), 0], {});
              block(env, morph1, context, "if", [get(env, context, "bidItem.isHighestVol")], {}, child0, child1);
              block(env, morph2, context, "if", [get(env, context, "bidItem.isBestPrice")], {}, child2, child3);
              block(env, morph3, context, "if", [get(env, context, "bidItem.isHighestVol")], {}, child4, child5);
              return fragment;
            }
          };
        }();
        var child3 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col-6 row-height-header font-m data-table-header pad-l-r");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "app.lang.labels.splits");
              return fragment;
            }
          };
        }();
        var child4 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col-6 row-height-header font-m data-table-header");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "app.lang.labels.seq");
              return fragment;
            }
          };
        }();
        var child5 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col-9 pad-s-l row-height down-fore-color bold table-row-down-back-color font-l");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                inline(env, morph0, context, "formatNumber", [get(env, context, "offerItem.prc"), get(env, context, "symbolObj.deci")], {});
                return fragment;
              }
            };
          }();
          var child1 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col-9 pad-s-l row-height down-fore-color bold table-row-down-back-color font-m");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                inline(env, morph0, context, "formatNumber", [get(env, context, "offerItem.prc"), get(env, context, "symbolObj.deci")], {});
                return fragment;
              }
            };
          }();
          var child2 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col-10 h-right pad-s-lr row-height font-m down-fore-color bold");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                inline(env, morph0, context, "formatNumber", [get(env, context, "offerItem.qty"), 0], {});
                return fragment;
              }
            };
          }();
          var child3 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout-col-10 h-right pad-s-lr row-height font-m down-fore-color");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                inline(env, morph0, context, "formatNumber", [get(env, context, "offerItem.qty"), 0], {});
                return fragment;
              }
            };
          }();
          var child4 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "progress-bar-height pos-abs bottom-zero right-zero prominent-down-back-color");
                dom.setAttribute(el1, "role", "progressbar");
                dom.setAttribute(el1, "aria-valuenow", "90");
                dom.setAttribute(el1, "aria-valuemin", "0");
                dom.setAttribute(el1, "aria-valuemax", "100");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    attribute = hooks.attribute;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element1 = dom.childAt(fragment, [1]);
                var attrMorph0 = dom.createUnsafeAttrMorph(element1, 'style');
                attribute(env, attrMorph0, element1, "style", get(env, context, "offerItem.per"));
                return fragment;
              }
            };
          }();
          var child5 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "progress-bar-height pos-abs bottom-zero right-zero fade-down-back-color");
                dom.setAttribute(el1, "role", "progressbar");
                dom.setAttribute(el1, "aria-valuenow", "90");
                dom.setAttribute(el1, "aria-valuemin", "0");
                dom.setAttribute(el1, "aria-valuemax", "100");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    attribute = hooks.attribute;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element0 = dom.childAt(fragment, [1]);
                var attrMorph0 = dom.createUnsafeAttrMorph(element0, 'style');
                attribute(env, attrMorph0, element0, "style", get(env, context, "offerItem.per"));
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-row");
              var el2 = dom.createTextNode("\n                                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout-container full-width pos-rel");
              var el3 = dom.createTextNode("\n                                            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "layout-row");
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4, "class", "layout-col-5 font-m row-height pad-s-lr fore-color");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                                        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  block = hooks.block,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element2 = dom.childAt(fragment, [1, 1]);
              var element3 = dom.childAt(element2, [1]);
              var morph0 = dom.createMorphAt(element3, 1, 1);
              var morph1 = dom.createMorphAt(element3, 3, 3);
              var morph2 = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
              var morph3 = dom.createMorphAt(element2, 3, 3);
              block(env, morph0, context, "if", [get(env, context, "offerItem.isBestPrice")], {}, child0, child1);
              block(env, morph1, context, "if", [get(env, context, "offerItem.isHighestVol")], {}, child2, child3);
              inline(env, morph2, context, "formatNumber", [get(env, context, "offerItem.splt"), 0], {});
              block(env, morph3, context, "if", [get(env, context, "offerItem.isHighestVol")], {}, child4, child5);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "font-xx-l pad-widget-top quote-depth-height y-scroll");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-12 v-top");
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-container font-m h-middle full-width");
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "layout-row");
            var el6 = dom.createTextNode("\n                                    ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("div");
            dom.setAttribute(el6, "class", "layout-container full-width");
            var el7 = dom.createTextNode("\n");
            dom.appendChild(el6, el7);
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("                                        ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("div");
            dom.setAttribute(el7, "class", "layout-col-10 row-height-header font-m data-table-header");
            var el8 = dom.createComment("");
            dom.appendChild(el7, el8);
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                                        ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("div");
            dom.setAttribute(el7, "class", "layout-col-9 row-height-header font-m data-table-header");
            var el8 = dom.createComment("");
            dom.appendChild(el7, el8);
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                                    ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                                ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                            ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-12 v-top");
            var el4 = dom.createTextNode("\n                            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "layout-container font-m h-middle full-width");
            var el5 = dom.createTextNode("\n                                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "layout-row");
            var el6 = dom.createTextNode("\n                                    ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("div");
            dom.setAttribute(el6, "class", "layout-container full-width");
            var el7 = dom.createTextNode("\n                                        ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("div");
            dom.setAttribute(el7, "class", "layout-col-9 row-height-header font-m data-table-header");
            var el8 = dom.createComment("");
            dom.appendChild(el7, el8);
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n                                        ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("div");
            dom.setAttribute(el7, "class", "layout-col-9 row-height-header font-m data-table-header");
            var el8 = dom.createComment("");
            dom.appendChild(el7, el8);
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n");
            dom.appendChild(el6, el7);
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("                                    ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n                                ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("                            ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element8 = dom.childAt(fragment, [1, 1]);
            var element9 = dom.childAt(element8, [1, 1]);
            var element10 = dom.childAt(element9, [1, 1]);
            var element11 = dom.childAt(element8, [3, 1]);
            var element12 = dom.childAt(element11, [1, 1]);
            var morph0 = dom.createMorphAt(element10, 1, 1);
            var morph1 = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
            var morph2 = dom.createMorphAt(dom.childAt(element10, [5]), 0, 0);
            var morph3 = dom.createMorphAt(element9, 3, 3);
            var morph4 = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
            var morph5 = dom.createMorphAt(dom.childAt(element12, [3]), 0, 0);
            var morph6 = dom.createMorphAt(element12, 5, 5);
            var morph7 = dom.createMorphAt(element11, 3, 3);
            block(env, morph0, context, "if", [get(env, context, "isMarketDepthByPrice")], {}, child0, child1);
            content(env, morph1, context, "app.lang.labels.quantity");
            content(env, morph2, context, "app.lang.labels.bid");
            block(env, morph3, context, "each", [get(env, context, "bidRecordList")], { "keyword": "bidItem" }, child2, null);
            content(env, morph4, context, "app.lang.labels.offer");
            content(env, morph5, context, "app.lang.labels.quantity");
            block(env, morph6, context, "if", [get(env, context, "isMarketDepthByPrice")], {}, child3, child4);
            block(env, morph7, context, "each", [get(env, context, "offerRecordList")], { "keyword": "offerItem" }, child5, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isDelayedUser")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "pos-rel widget-container-new quote-page-second-row-wght full-height-without-header");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container h-middle pad-widget-left pad-widget-right pad-widget-top full-width");
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-inline font-m fade-fore-color pad-s-l");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-inline font-m bold up-fore-color pad-s-l");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-inline font-m fade-fore-color pad-s-l");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-inline font-m bold down-fore-color pad-s-l");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            attribute = hooks.attribute,
            block = hooks.block,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element15 = dom.childAt(fragment, [0]);
        var element16 = dom.childAt(element15, [3]);
        var element17 = dom.childAt(element16, [1]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(element17, [5]);
        var morph0 = dom.createMorphAt(element15, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element15, 'id');
        var morph1 = dom.createMorphAt(dom.childAt(element18, [1]), 0, 0);
        var morph2 = dom.createMorphAt(dom.childAt(element18, [3]), 0, 0);
        var morph3 = dom.createMorphAt(element17, 3, 3);
        var morph4 = dom.createMorphAt(dom.childAt(element19, [1]), 0, 0);
        var morph5 = dom.createMorphAt(dom.childAt(element19, [3]), 0, 0);
        var morph6 = dom.createMorphAt(element16, 3, 3);
        attribute(env, attrMorph0, element15, "id", get(env, context, "wkey"));
        block(env, morph0, context, "if", [get(env, context, "isShowTitle")], {}, child0, null);
        content(env, morph1, context, "app.lang.labels.totalQty");
        inline(env, morph2, context, "formatNumber", [get(env, context, "symbolObj.tbq"), 0], {});
        block(env, morph3, context, "unless", [get(env, context, "isMobile")], {}, child1, null);
        content(env, morph4, context, "app.lang.labels.totalQty");
        inline(env, morph5, context, "formatNumber", [get(env, context, "symbolObj.taq"), 0], {});
        block(env, morph6, context, "if", [get(env, context, "isShowUpgrade")], {}, child2, child3);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/quote-summery", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.quoteSummary"), "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "stock.dispProp1"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n                                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "hint--bottom-right hint--bounce hint-info hint--rounded");
          var el3 = dom.createTextNode("\n                                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "wk52-up-icon");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-high-low-52 dark-bg-fore-color");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element13 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element13, 'data-hint');
          attribute(env, attrMorph0, element13, "data-hint", concat(env, [get(env, context, "app.lang.labels.highReachedFiftyTwoWeekHigh")]));
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n                                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "hint--bottom-right hint--bounce hint-info hint--rounded");
          var el3 = dom.createTextNode("\n                                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "wk52-down-icon");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-high-low-52 dark-bg-fore-color");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element12 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element12, 'data-hint');
          attribute(env, attrMorph0, element12, "data-hint", concat(env, [get(env, context, "app.lang.labels.lowReachedFiftyTwoWeekLow")]));
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n                                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "hint--bottom-right hint--bounce hint-info hint--rounded");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "chart-max up-fore-color");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element11 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element11, 'data-hint');
          attribute(env, attrMorph0, element11, "data-hint", concat(env, [get(env, context, "app.lang.labels.lastTradedReachedHigh")]));
          return fragment;
        }
      };
    }();
    var child4 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n                                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "hint--bottom-right hint--bounce hint-info hint--rounded");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "chart-max red");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element10 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element10, 'data-hint');
          attribute(env, attrMorph0, element10, "data-hint", concat(env, [get(env, context, "app.lang.labels.lastTradedReachedLow")]));
          return fragment;
        }
      };
    }();
    var child5 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n                                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "hint--bottom-right hint--bounce hint-info hint--rounded");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "icon-megaphone-1 colour-1");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              concat = hooks.concat,
              attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element9 = dom.childAt(fragment, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element9, 'data-hint');
          attribute(env, attrMorph0, element9, "data-hint", concat(env, [get(env, context, "app.lang.labels.annAvailable")]));
          return fragment;
        }
      };
    }();
    var child6 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col v-top pad-l-l");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-l bold up-fore-color");
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn btn-sell-small bold");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element8 = dom.childAt(fragment, [1, 1, 1]);
          var morph0 = dom.createMorphAt(element8, 0, 0);
          element(env, element8, context, "action", ["sell"], {});
          content(env, morph0, context, "app.lang.labels.sell");
          return fragment;
        }
      };
    }();
    var child7 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col v-top pad-l-l");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-l bold up-fore-color");
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn btn-buy-small bold");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element7 = dom.childAt(fragment, [1, 1, 1]);
          var morph0 = dom.createMorphAt(element7, 0, 0);
          element(env, element7, context, "action", ["buy"], {});
          content(env, morph0, context, "app.lang.labels.buy");
          return fragment;
        }
      };
    }();
    var child8 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("Hide elements");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child9 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "widget-vline layout-col");
          dom.setAttribute(el1, "style", "width: 1px");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-4");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "data-id", "quoteSummery-cashMap");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-m-r pad-s-l");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline full-width quote-x-large-width hint--bottom hint--rounded");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m pad-s-r");
          dom.setAttribute(el3, "style", "white-space:nowrap");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-m-lr");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline full-width quote-x-large-width hint--bottom hint--rounded");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m pad-s-r");
          dom.setAttribute(el3, "style", "white-space:nowrap");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-m-lr pad-s-l");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-inline full-width quote-x-large-width hint--bottom hint--rounded");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "font-m pad-s-r");
          dom.setAttribute(el3, "style", "white-space:nowrap");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              inline = hooks.inline,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [5]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element0, [3]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element0, [5]);
          var element6 = dom.childAt(element5, [1]);
          var morph0 = dom.createMorphAt(element2, 0, 0);
          var attrMorph0 = dom.createAttrMorph(element2, 'data-hint');
          var morph1 = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          var morph2 = dom.createMorphAt(element4, 0, 0);
          var attrMorph1 = dom.createAttrMorph(element4, 'data-hint');
          var morph3 = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          var morph4 = dom.createMorphAt(element6, 0, 0);
          var attrMorph2 = dom.createAttrMorph(element6, 'data-hint');
          var morph5 = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
          attribute(env, attrMorph0, element2, "data-hint", concat(env, [get(env, context, "app.lang.labels.cashMap"), " %   ", subexpr(env, context, "formatNumber", [get(env, context, "cashMapValues.calculateCash"), 2], {}), "\n", get(env, context, "app.lang.labels.cashIn"), "       ", subexpr(env, context, "formatNumber", [get(env, context, "stock.cit"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.cashOut"), "    ", subexpr(env, context, "formatNumber", [get(env, context, "stock.cot"), get(env, context, "stock.deci")], {})]));
          inline(env, morph0, context, "cash-map", [], { "id": get(env, context, "cashMapId"), "stock": get(env, context, "stock"), "isValueHidden": true });
          content(env, morph1, context, "app.lang.labels.cashMap");
          attribute(env, attrMorph1, element4, "data-hint", concat(env, [get(env, context, "app.lang.labels.daysRange"), " %   ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.dayRangePosition"), 2], {}), "\n", get(env, context, "app.lang.labels.lastTrade"), "           ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.lastTradeValue"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.todayHigh"), "       ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.highValue"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.todayLow"), "        ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.lowValue"), get(env, context, "stock.deci")], {})]));
          inline(env, morph2, context, "days-range", [], { "id": get(env, context, "daysRangeId"), "stock": get(env, context, "stock"), "isBarAvailable": true });
          content(env, morph3, context, "app.lang.labels.daysRange");
          attribute(env, attrMorph2, element6, "data-hint", concat(env, [get(env, context, "app.lang.labels.week52Range"), " %  ", subexpr(env, context, "formatNumber", [get(env, context, "fiftyTowWkValues.fiftyTwoWkPosition"), 2], {}), "\n", get(env, context, "app.lang.labels.lastTrade"), "        ", subexpr(env, context, "formatNumber", [get(env, context, "daysRangeValues.lastTradeValue"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.fiftyTwoWkH"), "        ", subexpr(env, context, "formatNumber", [get(env, context, "fiftyTowWkValues.highValue"), get(env, context, "stock.deci")], {}), "\n", get(env, context, "app.lang.labels.fiftyTwoWkL"), "         ", subexpr(env, context, "formatNumber", [get(env, context, "fiftyTowWkValues.lowValue"), get(env, context, "stock.deci")], {})]));
          inline(env, morph4, context, "fifty-two-wk-hl", [], { "id": get(env, context, "fiftyTowWkId"), "stock": get(env, context, "stock"), "isBarAvailable": true });
          content(env, morph5, context, "app.lang.labels.week52Range");
          return fragment;
        }
      };
    }();
    var child10 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col h-middle v-top pad-m-lr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          inline(env, morph0, context, "link-dropdown", [], { "options": get(env, context, "links"), "defaultSelect": get(env, context, "defaultLink"), "value": get(env, context, "selectedLink"), "valueKey": "code", "labelKey": "desc", "selectAction": "setLink", "toolTip": get(env, context, "app.lang.labels.linkWidgets") });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "data-id", "quoteSummery-right");
        dom.setAttribute(el2, "class", "layout-container full-width");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container full-width h-right");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col font-x-l bold symbol-fore-color");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "horizontal-list-left font-m");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        dom.setAttribute(el9, "class", "layout-col indicator-li");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("i");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container pad-s-t");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col font-m fade-fore-color");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col v-top");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "full-width");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "mgn-l-l");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        dom.setAttribute(el9, "class", "layout-inline pad-s-l font-l");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        var el11 = dom.createTextNode(" ");
        dom.appendChild(el10, el11);
        var el11 = dom.createElement("i");
        dom.appendChild(el10, el11);
        var el11 = dom.createTextNode(" ");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode("\n                                ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        dom.setAttribute(el9, "class", "layout-inline pad-s-l font-x-l bold highlight-fore-color");
        var el10 = dom.createTextNode("\n                                    ");
        dom.appendChild(el9, el10);
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container pad-s-t");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col font-m bold fore-color pad-m-l ltr");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "layout-col font-m pad-m-l ltr");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-4");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget-vline layout-col");
        dom.setAttribute(el3, "style", "width: 1px");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-4");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "font-x-l bold up-fore-color");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "font-l up-fore-color  pad-m-l");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "font-m pad-s-t fade-fore-color bottom-zero");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(" ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("/");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        var el8 = dom.createTextNode(" ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-4");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget-vline layout-col");
        dom.setAttribute(el3, "style", "width: 1px");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-4");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "font-x-l bold down-fore-color ");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "font-l down-fore-color pad-m-l");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "font-m pad-s-t fade-fore-color bottom-zero");
        var el7 = dom.createElement("span");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(" ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("/");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        var el8 = dom.createTextNode(" ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-4");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content,
            inline = hooks.inline,
            subexpr = hooks.subexpr;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element14 = dom.childAt(fragment, [2]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element15, [1]);
        var element17 = dom.childAt(element16, [1]);
        var element18 = dom.childAt(element17, [1, 1]);
        var element19 = dom.childAt(element18, [3, 1]);
        var element20 = dom.childAt(element19, [1, 1]);
        var element21 = dom.childAt(element16, [3]);
        var element22 = dom.childAt(element21, [1, 1, 1, 1]);
        var element23 = dom.childAt(element22, [1, 1]);
        var element24 = dom.childAt(element23, [1]);
        var element25 = dom.childAt(element21, [3, 1]);
        var element26 = dom.childAt(element25, [1, 1]);
        var element27 = dom.childAt(element25, [3, 1]);
        var element28 = dom.childAt(element15, [9, 1]);
        var element29 = dom.childAt(element28, [1]);
        var element30 = dom.childAt(element29, [5]);
        var element31 = dom.childAt(element15, [17, 1]);
        var element32 = dom.childAt(element31, [1]);
        var element33 = dom.childAt(element32, [5]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var attrMorph0 = dom.createAttrMorph(element14, 'id');
        var morph1 = dom.createMorphAt(dom.childAt(element18, [1]), 0, 0);
        var morph2 = dom.createMorphAt(element19, 3, 3);
        var morph3 = dom.createMorphAt(element19, 4, 4);
        var morph4 = dom.createMorphAt(element19, 5, 5);
        var morph5 = dom.createMorphAt(element19, 6, 6);
        var morph6 = dom.createMorphAt(element19, 7, 7);
        var morph7 = dom.createMorphAt(dom.childAt(element17, [3, 1]), 0, 0);
        var morph8 = dom.createMorphAt(dom.childAt(element22, [3]), 1, 1);
        var morph9 = dom.createMorphAt(element26, 0, 0);
        var morph10 = dom.createMorphAt(element27, 0, 0);
        var morph11 = dom.createMorphAt(dom.childAt(element29, [1]), 0, 0);
        var morph12 = dom.createMorphAt(dom.childAt(element29, [3]), 0, 0);
        var morph13 = dom.createMorphAt(dom.childAt(element30, [1]), 0, 0);
        var morph14 = dom.createMorphAt(dom.childAt(element30, [3]), 1, 1);
        var morph15 = dom.createMorphAt(element28, 3, 3);
        var morph16 = dom.createMorphAt(dom.childAt(element32, [1]), 0, 0);
        var morph17 = dom.createMorphAt(dom.childAt(element32, [3]), 0, 0);
        var morph18 = dom.createMorphAt(dom.childAt(element33, [0]), 0, 0);
        var morph19 = dom.createMorphAt(dom.childAt(element33, [2]), 1, 1);
        var morph20 = dom.createMorphAt(element31, 3, 3);
        var morph21 = dom.createMorphAt(element15, 21, 21);
        var morph22 = dom.createMorphAt(element15, 23, 23);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isWidgetHeaderAvailable")], {}, child0, null);
        attribute(env, attrMorph0, element14, "id", concat(env, ["quoteSummery-", get(env, context, "wkey")]));
        element(env, element14, context, "bind-attr", [], { "class": "addBorder :pad-widget-left :pad-widget-right :pad-s-tb isWidgetHeaderAvailable:full-height-without-header" });
        content(env, morph1, context, "stock.dispProp1");
        element(env, element20, context, "bind-attr", [], { "class": "dcfsStyle" });
        element(env, element20, context, "bind-attr", [], { "title": "dcfsToolTip" });
        block(env, morph2, context, "if", [get(env, context, "stock.is52WeekHigh")], {}, child1, null);
        block(env, morph3, context, "if", [get(env, context, "stock.is52WeekLow")], {}, child2, null);
        block(env, morph4, context, "if", [get(env, context, "stock.isTodayHigh")], {}, child3, null);
        block(env, morph5, context, "if", [get(env, context, "stock.isTodayLow")], {}, child4, null);
        block(env, morph6, context, "if", [get(env, context, "stock.ann")], {}, child5, null);
        content(env, morph7, context, "stock.sDes");
        element(env, element23, context, "bind-attr", [], { "class": "perChgCss" });
        element(env, element24, context, "bind-attr", [], { "class": "changeSign" });
        inline(env, morph8, context, "formatNumber", [get(env, context, "stock.ltp"), get(env, context, "stock.deci")], {});
        element(env, element26, context, "bind-attr", [], { "class": "perChgCss" });
        inline(env, morph9, context, "formatNumberPercentage", [get(env, context, "stock.pctChg")], {});
        element(env, element27, context, "bind-attr", [], { "class": "changeCss" });
        inline(env, morph10, context, "formatNumber", [get(env, context, "stock.chg"), get(env, context, "stock.deci")], {});
        inline(env, morph11, context, "formatNumber", [get(env, context, "stock.bbp"), get(env, context, "stock.deci")], {});
        inline(env, morph12, context, "formatNumber", [get(env, context, "stock.bbq"), 0], {});
        content(env, morph13, context, "app.lang.labels.bestBid");
        content(env, morph14, context, "app.lang.labels.quantity");
        block(env, morph15, context, "if", [get(env, context, "isTradingEnabled")], {}, child6, null);
        inline(env, morph16, context, "formatNumber", [get(env, context, "stock.bap"), get(env, context, "stock.deci")], {});
        inline(env, morph17, context, "formatNumber", [get(env, context, "stock.baq"), 0], {});
        content(env, morph18, context, "app.lang.labels.bestOffer");
        content(env, morph19, context, "app.lang.labels.quantity");
        block(env, morph20, context, "if", [get(env, context, "isTradingEnabled")], {}, child7, null);
        block(env, morph21, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "quoteSummery-right", 1], {})], {}, child8, child9);
        block(env, morph22, context, "unless", [get(env, context, "isTablet")], {}, child10, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/quote-top-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width intraday-dq-widget hint--bounce hint--top hint--rounded");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout-container full-width");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col-24 font-m ellipsis fade-fore-color pad-s-tb");
            var el4 = dom.createElement("span");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "layout-col font-l bold fore-color right pad-s-tb h-right pad-s-lr");
            var el4 = dom.createElement("span");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-container full-width");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "widget-hline full-width bor");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute,
                concat = hooks.concat,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element1, [1, 0]);
            var element3 = dom.childAt(element1, [3, 0]);
            var attrMorph0 = dom.createAttrMorph(element0, 'data-hint');
            var morph0 = dom.createMorphAt(element2, 0, 0);
            var attrMorph1 = dom.createAttrMorph(element2, 'class');
            var morph1 = dom.createMorphAt(element3, 0, 0);
            var attrMorph2 = dom.createAttrMorph(element3, 'class');
            attribute(env, attrMorph0, element0, "data-hint", get(env, context, "field.detailQouteTitle"));
            attribute(env, attrMorph1, element2, "class", concat(env, [get(env, context, "field.captionStyle")]));
            content(env, morph0, context, "field.caption");
            attribute(env, attrMorph2, element3, "class", concat(env, [get(env, context, "field.style")]));
            content(env, morph1, context, "field.formattedValue");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-4 pad-s-lr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          block(env, morph0, context, "each", [get(env, context, "rowField")], { "keyword": "field" }, child0, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new widget-new-border border-bottom full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container full-width border-bottom");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "y-scroll quote-fields-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width full-height pad-s-b");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element4 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element4, [3, 1]), 1, 1);
        inline(env, morph0, context, "outlet", ["quoteSummary"], {});
        block(env, morph1, context, "each", [get(env, context, "adjustedPanelFields")], { "keyword": "rowField" }, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/sector-overview", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-lg-10");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "outlet", ["wlWidgetOutlet"], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  subexpr = hooks.subexpr,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element19 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element19, 0, 0);
              var attrMorph0 = dom.createAttrMorph(element19, 'class');
              attribute(env, attrMorph0, element19, "class", concat(env, ["layout-col row-height-header font-m pad-widget-left pad-widget-right sector-overview-row ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-lr font-l", ""], {})]));
              content(env, morph0, context, "field.name");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "data-table-header");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            block(env, morph0, context, "each", [get(env, context, "fieldList")], { "keyword": "field" }, child0, null);
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-row height-zero display-none");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child2 = function () {
        var child0 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  subexpr = hooks.subexpr,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  element = hooks.element,
                  content = hooks.content,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element9 = dom.childAt(fragment, [1]);
              var element10 = dom.childAt(element9, [1]);
              var element11 = dom.childAt(fragment, [3]);
              var element12 = dom.childAt(element11, [1]);
              var element13 = dom.childAt(fragment, [5]);
              var element14 = dom.childAt(element13, [1]);
              var element15 = dom.childAt(fragment, [7]);
              var element16 = dom.childAt(element15, [1]);
              var attrMorph0 = dom.createAttrMorph(element9, 'class');
              var attrMorph1 = dom.createAttrMorph(element9, 'data-hint');
              var morph0 = dom.createMorphAt(element10, 0, 0);
              var attrMorph2 = dom.createAttrMorph(element11, 'class');
              var attrMorph3 = dom.createAttrMorph(element11, 'data-hint');
              var morph1 = dom.createMorphAt(element12, 0, 0);
              var attrMorph4 = dom.createAttrMorph(element13, 'class');
              var attrMorph5 = dom.createAttrMorph(element15, 'class');
              var morph2 = dom.createMorphAt(element16, 0, 0);
              attribute(env, attrMorph0, element9, "class", concat(env, ["layout-col row-height font-m bold pad-widget-left hint--bottom-left hint--bounce hint--rounded sector-overview-row ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", ""], {})]));
              attribute(env, attrMorph1, element9, "data-hint", concat(env, [get(env, context, "sectors.sDes"), " - ", get(env, context, "sectors.pctChg")]));
              element(env, element10, context, "bind-attr", [], { "class": "downColorCss" });
              content(env, morph0, context, "sectors.dSym");
              attribute(env, attrMorph2, element11, "class", concat(env, ["layout-col-24 row-height font-m bold pad-widget-left hint--bottom-left hint--bounce hint--rounded sector-overview-row ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", ""], {})]));
              attribute(env, attrMorph3, element11, "data-hint", concat(env, [get(env, context, "sectors.sDes"), " - ", get(env, context, "sectors.pctChg")]));
              element(env, element12, context, "bind-attr", [], { "class": "downColorCss" });
              content(env, morph1, context, "sectors.lDes");
              attribute(env, attrMorph4, element13, "class", concat(env, ["layout-col row-height font-m h-right sector-overview-row ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", "pad-m-l"], {})]));
              element(env, element14, context, "bind-attr", [], { "class": "indexArrowCssBottom" });
              attribute(env, attrMorph5, element15, "class", concat(env, ["layout-col row-height font-m bold h-right ltr ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", "pad-m-l"], {}), " sector-overview-row"]));
              element(env, element16, context, "bind-attr", [], { "class": "downColorCss" });
              inline(env, morph2, context, "formatNumberPercentage", [get(env, context, "sectors.pctChg")], {});
              return fragment;
            }
          };
        }();
        var child1 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  subexpr = hooks.subexpr,
                  concat = hooks.concat,
                  attribute = hooks.attribute,
                  element = hooks.element,
                  content = hooks.content,
                  inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element1 = dom.childAt(fragment, [1]);
              var element2 = dom.childAt(element1, [1]);
              var element3 = dom.childAt(fragment, [3]);
              var element4 = dom.childAt(element3, [1]);
              var element5 = dom.childAt(fragment, [5]);
              var element6 = dom.childAt(element5, [1]);
              var element7 = dom.childAt(fragment, [7]);
              var element8 = dom.childAt(element7, [1]);
              var attrMorph0 = dom.createAttrMorph(element1, 'class');
              var attrMorph1 = dom.createAttrMorph(element1, 'data-hint');
              var morph0 = dom.createMorphAt(element2, 0, 0);
              var attrMorph2 = dom.createAttrMorph(element3, 'class');
              var attrMorph3 = dom.createAttrMorph(element3, 'data-hint');
              var morph1 = dom.createMorphAt(element4, 0, 0);
              var attrMorph4 = dom.createAttrMorph(element5, 'class');
              var attrMorph5 = dom.createAttrMorph(element7, 'class');
              var morph2 = dom.createMorphAt(element8, 0, 0);
              attribute(env, attrMorph0, element1, "class", concat(env, ["layout-col row-height font-m bold pad-widget-left hint--bottom-left hint--bounce hint--rounded sector-overview-row ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", ""], {})]));
              attribute(env, attrMorph1, element1, "data-hint", concat(env, [get(env, context, "sectors.sDes"), " - ", get(env, context, "sectors.pctChg")]));
              element(env, element2, context, "bind-attr", [], { "class": "upColorCss" });
              content(env, morph0, context, "sectors.dSym");
              attribute(env, attrMorph2, element3, "class", concat(env, ["layout-col-24 row-height font-m bold pad-widget-left hint--bottom-left hint--bounce hint--rounded sector-overview-row ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", ""], {})]));
              attribute(env, attrMorph3, element3, "data-hint", concat(env, [get(env, context, "sectors.sDes"), " - ", get(env, context, "sectors.pctChg")]));
              element(env, element4, context, "bind-attr", [], { "class": "upColorCss" });
              content(env, morph1, context, "sectors.lDes");
              attribute(env, attrMorph4, element5, "class", concat(env, ["layout-col row-height font-m h-right ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", "pad-m-l"], {}), " sector-overview-row"]));
              element(env, element6, context, "bind-attr", [], { "class": "indexArrowCssTop" });
              attribute(env, attrMorph5, element7, "class", concat(env, ["layout-col row-height font-m bold h-right ltr ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", "pad-m-l"], {}), " sector-overview-row"]));
              element(env, element8, context, "bind-attr", [], { "class": "upColorCss" });
              inline(env, morph2, context, "formatNumberPercentage", [get(env, context, "sectors.pctChg")], {});
              return fragment;
            }
          };
        }();
        var child2 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col sector-overview-row font-l bold h-right fore-color pad-l-l");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col sector-overview-row font-l bold h-right fore-color pad-l-l");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col sector-overview-row font-l bold h-right fore-color pad-l-l");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col sector-overview-row font-l bold h-right fore-color pad-l-l pad-l-r");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  inline = hooks.inline,
                  subexpr = hooks.subexpr,
                  concat = hooks.concat,
                  attribute = hooks.attribute;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element0 = dom.childAt(fragment, [5]);
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
              var morph2 = dom.createMorphAt(element0, 1, 1);
              var attrMorph0 = dom.createAttrMorph(element0, 'class');
              var morph3 = dom.createMorphAt(dom.childAt(fragment, [7]), 0, 0);
              var morph4 = dom.createMorphAt(dom.childAt(fragment, [9]), 0, 0);
              inline(env, morph0, context, "formatNumber", [get(env, context, "sectors.vol"), 0], {});
              inline(env, morph1, context, "formatNumber", [get(env, context, "sectors.tovr"), 2], {});
              attribute(env, attrMorph0, element0, "class", concat(env, ["layout-col sector-overview-row font-l bold h-right fore-color pad-l-l ", subexpr(env, context, "if", [get(env, context, "sectors.isNegative"), "down-fore-color", "up-fore-color"], {})]));
              inline(env, morph2, context, "formatNumber", [get(env, context, "sectors.chg"), 2], {});
              inline(env, morph3, context, "formatNumber", [get(env, context, "sectors.trades"), 0], {});
              inline(env, morph4, context, "formatNumber", [get(env, context, "sectors.prvCls"), 0], {});
              return fragment;
            }
          };
        }();
        var child3 = function () {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-col row-height font-m bold h-right fore-color pad-m-l pad-widget-right");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              content(env, morph0, context, "sectors.sortedProperty");
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout-row");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                block = hooks.block,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element17 = dom.childAt(fragment, [1]);
            var element18 = dom.childAt(element17, [3]);
            var morph0 = dom.createMorphAt(element17, 1, 1);
            var morph1 = dom.createMorphAt(element18, 0, 0);
            var attrMorph0 = dom.createAttrMorph(element18, 'class');
            var morph2 = dom.createMorphAt(element17, 5, 5);
            block(env, morph0, context, "if", [get(env, context, "sectors.isNegative")], {}, child0, child1);
            attribute(env, attrMorph0, element18, "class", concat(env, ["layout-col row-height font-m bold h-right fore-color ", subexpr(env, context, "if", [get(env, context, "isTablet"), "pad-l-l font-l", "pad-m-l"], {})]));
            inline(env, morph1, context, "formatNumber", [get(env, context, "sectors.ltp"), 2], {});
            block(env, morph2, context, "if", [get(env, context, "isTablet")], {}, child2, child3);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element20 = dom.childAt(fragment, [1]);
          var element21 = dom.childAt(element20, [1]);
          var attrMorph0 = dom.createAttrMorph(element20, 'class');
          var morph0 = dom.createMorphAt(element21, 1, 1);
          var morph1 = dom.createMorphAt(element21, 2, 2);
          var morph2 = dom.createMorphAt(element21, 3, 3);
          var attrMorph1 = dom.createAttrMorph(element21, 'class');
          attribute(env, attrMorph0, element20, "class", concat(env, ["widget-container-new ", subexpr(env, context, "if", [get(env, context, "isTablet"), "full-height", "mkt-ovw-row-1-height"], {})]));
          attribute(env, attrMorph1, element21, "class", concat(env, ["layout-container data-table ", subexpr(env, context, "if", [get(env, context, "isTablet"), "", "full-height pad-xs-t"], {})]));
          block(env, morph0, context, "if", [get(env, context, "isTablet")], {}, child0, null);
          block(env, morph1, context, "unless", [get(env, context, "isTablet")], {}, child1, null);
          block(env, morph2, context, "each", [get(env, context, "sortedContent")], { "keyword": "sectors" }, child2, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "sectorOverviewContainer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            subexpr = hooks.subexpr,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element22 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(element22, 1, 1);
        var morph1 = dom.createMorphAt(element22, 3, 3);
        var attrMorph0 = dom.createAttrMorph(element22, 'class');
        attribute(env, attrMorph0, element22, "class", concat(env, ["widget_new full-height ", subexpr(env, context, "if", [get(env, context, "isTablet"), "", "overflow-visible"], {})]));
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.sectorOverview"), "hideWidgetLink": true, "hideSymbol": true, "isDropdownAvailable": get(env, context, "isDropdownAvailable"), "dropDownOptions": get(env, context, "sortBySelectBox"), "defaultSelect": get(env, context, "defaultCriteria"), "valueKey": "val", "labelKey": "name", "toolTip": get(env, context, "app.lang.labels.sortBy"), "selectAction": "onSortChanged", "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        block(env, morph1, context, "if", [get(env, context, "isFullScreenMode")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/sub-market-overview", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "widget-hline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width pad-l-tb pad-m-lr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-row");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col pad-widget-left pad-l-b");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "h-left font-l fade-fore-color pad-s-b");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "font-xx-l h-left fore-color bold");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-24 pad-m-l");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col pad-widget-right pad-m-l pad-l-b");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "h-right font-l fade-fore-color pad-s-b");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "font-xx-l h-right fore-color bold");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-row");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col pad-widget-left pad-l-b");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "h-left font-l fade-fore-color pad-s-b");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "font-xx-l h-left fore-color bold");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-24 pad-m-l");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col pad-widget-right pad-m-l pad-l-b");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "h-right font-l fade-fore-color pad-s-b");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "font-xx-l ltr h-right bold");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pad-m-lr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "widget-hline");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-container pad-widget-left pad-widget-right full-width ms-progress-bar-panel-height");
          var el3 = dom.createTextNode("\n\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-8 pad-m-r pos-rel up-down-panel-item");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "font-xx-l h-left up-fore-color bold pos-abs top-zero pad-l-t");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-inline font-l h-left fade-fore-color pos-abs bottom-zero pad-l-b");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-8 pos-rel");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "font-xx-l h-left down-fore-color bold pos-abs top-zero pad-l-t");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-inline font-l h-left fade-fore-color pos-abs bottom-zero pad-l-b");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "layout-col-8 pos-rel");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "font-xx-l h-left highlight-fore-color bold pos-abs top-zero pad-l-t");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "layout-inline font-l h-left fade-fore-color pos-abs bottom-zero pad-l-b");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "widget-hline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [5]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [5]);
          var element4 = dom.childAt(element0, [3]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element4, [5]);
          var element7 = dom.childAt(fragment, [7, 3]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element7, [3]);
          var element10 = dom.childAt(element7, [5]);
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          var morph1 = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          var morph2 = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          var morph3 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
          var morph4 = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          var morph5 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
          var morph6 = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
          var morph7 = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
          var morph8 = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
          var morph9 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
          var morph10 = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
          var morph11 = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
          var morph12 = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
          var morph13 = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
          var morph14 = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
          inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "submarket.lDes"), "hideWidgetLink": true, "hideSymbol": true });
          content(env, morph1, context, "app.lang.labels.volume");
          inline(env, morph2, context, "formatNumber", [get(env, context, "submarket.vol"), 0], {});
          content(env, morph3, context, "app.lang.labels.trades");
          inline(env, morph4, context, "formatNumber", [get(env, context, "submarket.trades"), 0], {});
          content(env, morph5, context, "app.lang.labels.turnover");
          inline(env, morph6, context, "formatNumber", [get(env, context, "submarket.tovr"), 0], {});
          content(env, morph7, context, "app.lang.labels.symTraded");
          inline(env, morph8, context, "formatNumber", [get(env, context, "submarket.symt"), 0], {});
          inline(env, morph9, context, "formatNumber", [get(env, context, "submarket.ups"), 0], {});
          content(env, morph10, context, "app.lang.labels.up");
          inline(env, morph11, context, "formatNumber", [get(env, context, "submarket.dwns"), 0], {});
          content(env, morph12, context, "app.lang.labels.down");
          inline(env, morph13, context, "formatNumber", [get(env, context, "submarket.nChg"), 0], {});
          content(env, morph14, context, "app.lang.labels.unchanged");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget-container-new full-width full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-hline");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "page-container full-height-without-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element11 = dom.childAt(fragment, [0]);
        var element12 = dom.childAt(element11, [5]);
        var morph0 = dom.createMorphAt(element11, 1, 1);
        var morph1 = dom.createMorphAt(element12, 1, 1);
        var morph2 = dom.createMorphAt(element12, 3, 3);
        var morph3 = dom.createMorphAt(element12, 5, 5);
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "exchange.des"), "hideWidgetLink": true, "widgetClass": "pad-s-tb sub-header", "hideSymbol": true });
        inline(env, morph1, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph2, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph3, context, "each", [get(env, context, "subMarketArray")], { "keyword": "submarket" }, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/sub-market-summary", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "title"), "hideWidgetLink": get(env, context, "hideWidgetLink"), "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss") });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new overflow-visible full-height");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "mkt-ovw-row-1-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-md-12 widget-container-new");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            block = hooks.block,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3, 1]);
        var morph0 = dom.createMorphAt(element0, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element0, 'id');
        var morph1 = dom.createMorphAt(element1, 1, 1);
        var morph2 = dom.createMorphAt(element1, 3, 3);
        var morph3 = dom.createMorphAt(element1, 5, 5);
        attribute(env, attrMorph0, element0, "id", concat(env, ["subMarketSummary-", get(env, context, "wkey")]));
        block(env, morph0, context, "if", [get(env, context, "isShowTitle")], {}, child0, null);
        inline(env, morph1, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph2, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "arrangedContent"), "rowHeight": get(env, context, "rowHeight"), "minHeaderHeight": get(env, context, "minHeaderHeight"), "hasFooter": false, "sortAction": "sort", "isRefreshed": get(env, context, "isRefreshed"), "sortAscending": get(env, context, "sortAscending"), "id": get(env, context, "wkey") });
        inline(env, morph3, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/time-and-sales/market-time-and-sales", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "app.lang.labels.marketTimeAndSales"), "hideWidgetLink": true, "app": get(env, context, "app") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-m text-center mgn-l-t pad-l-t");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          content(env, morph0, context, "app.lang.messages.delayedUserDataNotAvailable");
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment(" Default value of this boolean value is true ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 3, 3, contextualElement);
            inline(env, morph0, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "customArrayProxy"), "rowHeight": get(env, context, "rowHeight"), "hasFooter": false, "minHeaderHeight": 25, "isRefreshed": get(env, context, "isRefreshed"), "sortAscending": get(env, context, "sortAscending"), "indicatorConfig": get(env, context, "indicatorConfig"), "rowClickAction": "clickRow", "id": get(env, context, "wkey"), "decimalPlaces": get(env, context, "decimalPlaces") });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-lg-12 full-height");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "full-width full-height");
          var el4 = dom.createTextNode("\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("Removed loading indicator coz application is getting stuck in market open time");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              inline = hooks.inline,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          var morph0 = dom.createMorphAt(element1, 1, 1);
          var morph1 = dom.createMorphAt(element1, 5, 5);
          var morph2 = dom.createMorphAt(element1, 7, 7);
          attribute(env, attrMorph0, element0, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isMobile"), "time-and-sales", "full-height"], {}), " ltr"]));
          inline(env, morph0, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
          block(env, morph1, context, "if", [get(env, context, "isWidgetRefreshed")], {}, child0, null);
          inline(env, morph2, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new pad-s-b full-height");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-container-new");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        block(env, morph0, context, "if", [get(env, context, "isShowTitle")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "isDelayedUser")], {}, child1, child2);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/time-and-sales/quote-time-and-sales", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "widget-header", [], { "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "widgetTitle": get(env, context, "app.lang.labels.timeAndSales"), "symbol": get(env, context, "stockDetails.dispProp1"), "setLink": "setLink", "hideSymbol": get(env, context, "hideSymbol"), "searchedSymbol": get(env, context, "stockDetails.dispProp1"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "isSearchAvailable": get(env, context, "isSearchAvailable"), "searchID": get(env, context, "searchID"), "clickAction": "changeSymbol", "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pad-l-t mgn-l-t");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "upgrade-subscription", [], { "app": get(env, context, "app") });
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "font-m text-center mgn-l-t pad-l-t");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            content(env, morph0, context, "app.lang.messages.delayedUserDataNotAvailable");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment(" Default value of this boolean value is true ");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment, 3, 3, contextualElement);
                inline(env, morph0, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "customArrayProxy"), "rowHeight": get(env, context, "rowHeight"), "hasFooter": false, "minHeaderHeight": get(env, context, "minHeaderHeight"), "isRefreshed": get(env, context, "isRefreshed"), "sortAscending": get(env, context, "sortAscending"), "indicatorConfig": get(env, context, "indicatorConfig"), "rowClickAction": "clickRow", "decimalPlaces": get(env, context, "stockDetails.deci"), "id": get(env, context, "wkey") });
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, null);
              block(env, morph0, context, "if", [get(env, context, "isWidgetRefreshed")], {}, child0, null);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-lg-12 full-height");
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "full-width full-height");
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("Removed loading indicator coz application is getting stuck");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                    ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                subexpr = hooks.subexpr,
                concat = hooks.concat,
                attribute = hooks.attribute,
                inline = hooks.inline,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1, 1]);
            var attrMorph0 = dom.createAttrMorph(element0, 'class');
            var morph0 = dom.createMorphAt(element1, 1, 1);
            var morph1 = dom.createMorphAt(element1, 5, 5);
            var morph2 = dom.createMorphAt(element1, 7, 7);
            attribute(env, attrMorph0, element0, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isShowTitle"), "time-and-sales-with-header", "time-and-sales"], {}), " ltr"]));
            inline(env, morph0, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
            inline(env, morph1, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
            block(env, morph2, context, "if", [get(env, context, "isDataAvailable")], {}, child0, null);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isDelayedUser")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new pad-s-b full-height");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-container-new");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "full-width layout-container");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col h-middle pad-widget-left");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "font-m fade-fore-color");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "font-m bold fore-color pad-s-b pad-s-t");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col h-middle pad-m-l");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "font-m fade-fore-color");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "font-m bold fore-color pad-s-b pad-s-t");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col h-middle pad-m-l");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "font-m fade-fore-color");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "font-m bold fore-color pad-s-b pad-s-t");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col h-middle pad-m-l");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "font-m fade-fore-color");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "font-m bold fore-color pad-s-b pad-s-t");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col h-middle pad-widget-right pad-m-l");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "font-m fade-fore-color");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "font-m bold highlight-fore-color pad-s-b pad-s-t");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element4, [5]);
        var element8 = dom.childAt(element4, [7]);
        var element9 = dom.childAt(element4, [9]);
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        var morph2 = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
        var morph3 = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        var morph4 = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
        var morph5 = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        var morph6 = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
        var morph7 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        var morph8 = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
        var morph9 = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        var morph10 = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
        var morph11 = dom.createMorphAt(element3, 3, 3);
        block(env, morph0, context, "if", [get(env, context, "isShowTitle")], {}, child0, null);
        content(env, morph1, context, "app.lang.labels.open");
        inline(env, morph2, context, "formatNumber", [get(env, context, "stockDetails.open"), get(env, context, "stockDetails.deci")], {});
        content(env, morph3, context, "app.lang.labels.high");
        inline(env, morph4, context, "formatNumber", [get(env, context, "stockDetails.high"), get(env, context, "stockDetails.deci")], {});
        content(env, morph5, context, "app.lang.labels.low");
        inline(env, morph6, context, "formatNumber", [get(env, context, "stockDetails.low"), get(env, context, "stockDetails.deci")], {});
        content(env, morph7, context, "app.lang.labels.close");
        inline(env, morph8, context, "formatNumber", [get(env, context, "stockDetails.cls"), get(env, context, "stockDetails.deci")], {});
        content(env, morph9, context, "app.lang.labels.volume");
        inline(env, morph10, context, "formatNumber", [get(env, context, "stockDetails.vol"), 0], {});
        block(env, morph11, context, "if", [get(env, context, "isShowUpgrade")], {}, child1, child2);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/top-stock", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                concat = hooks.concat,
                attribute = hooks.attribute,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element4 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element4, 0, 0);
            var attrMorph0 = dom.createAttrMorph(element4, 'class');
            attribute(env, attrMorph0, element4, "class", concat(env, ["row-height-header font-m pad-widget-left pad-widget-right ", get(env, context, "data.padding"), " ", get(env, context, "data.textAlign"), " ", get(env, context, "data.col"), " ", get(env, context, "data.externalCss")]));
            content(env, morph0, context, "data.name");
            return fragment;
          }
        };
      }();
      var child1 = function () {
        var child0 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ellipsis");
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    concat = hooks.concat,
                    attribute = hooks.attribute,
                    subexpr = hooks.subexpr,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element2 = dom.childAt(fragment, [1]);
                var attrMorph0 = dom.createAttrMorph(element2, 'data-id');
                var attrMorph1 = dom.createAttrMorph(element2, 'class');
                var morph0 = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
                attribute(env, attrMorph0, element2, "data-id", concat(env, ["topstock-", get(env, context, "field.objName")]));
                attribute(env, attrMorph1, element2, "class", concat(env, ["font-xx-l row-height pad-widget-left ", get(env, context, "field.padding"), " ", subexpr(env, context, "fontColor", [get(env, context, "topStockObj.val"), get(env, context, "field.objName"), get(env, context, "field.fontColor")], {}), " ", get(env, context, "field.bold"), " ", get(env, context, "field.textAlign"), " ", get(env, context, "field.col"), " bold"]));
                inline(env, morph0, context, "dataTextField", [get(env, context, "topStockObj.val"), get(env, context, "field.objName"), get(env, context, "field.formatter"), get(env, context, "topStockObj.val.stock.deci")], {});
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-row cursor-pointer font-m");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  attribute = hooks.attribute,
                  element = hooks.element,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element3 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element3, 1, 1);
              var attrMorph0 = dom.createAttrMorph(element3, 'id');
              attribute(env, attrMorph0, element3, "id", get(env, context, "index"));
              element(env, element3, context, "action", ["clickRow", get(env, context, "topStockObj.val")], {});
              block(env, morph0, context, "each", [get(env, context, "fieldList")], { "keyword": "field" }, child0, null);
              return fragment;
            }
          };
        }();
        var child1 = function () {
          var child0 = function () {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ellipsis ltr");
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks,
                    get = hooks.get,
                    concat = hooks.concat,
                    attribute = hooks.attribute,
                    subexpr = hooks.subexpr,
                    inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element0 = dom.childAt(fragment, [1]);
                var attrMorph0 = dom.createAttrMorph(element0, 'data-id');
                var attrMorph1 = dom.createAttrMorph(element0, 'class');
                var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
                attribute(env, attrMorph0, element0, "data-id", concat(env, ["topstock-", get(env, context, "field.objName")]));
                attribute(env, attrMorph1, element0, "class", concat(env, ["font-m row-height pad-widget-left ", get(env, context, "field.padding"), " ", subexpr(env, context, "fontColor", [get(env, context, "topStockObj.val"), get(env, context, "field.objName"), get(env, context, "field.fontColor")], {}), " ", get(env, context, "field.bold"), " ", get(env, context, "field.textAlign"), " ", get(env, context, "field.col"), " bold"]));
                inline(env, morph0, context, "dataTextField", [get(env, context, "topStockObj.val"), get(env, context, "field.objName"), get(env, context, "field.formatter"), get(env, context, "topStockObj.val.stock.deci")], {});
                return fragment;
              }
            };
          }();
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout-row cursor-pointer");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks,
                  get = hooks.get,
                  attribute = hooks.attribute,
                  element = hooks.element,
                  block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element1 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element1, 1, 1);
              var attrMorph0 = dom.createAttrMorph(element1, 'id');
              attribute(env, attrMorph0, element1, "id", get(env, context, "index"));
              element(env, element1, context, "action", ["doubleClickRow", get(env, context, "topStockObj.val")], { "on": "doubleClick" });
              block(env, morph0, context, "each", [get(env, context, "fieldList")], { "keyword": "field" }, child0, null);
              return fragment;
            }
          };
        }();
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 2,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement, blockArguments) {
            var dom = env.dom;
            var hooks = env.hooks,
                set = hooks.set,
                get = hooks.get,
                block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            set(env, context, "topStockObj", blockArguments[0]);
            set(env, context, "index", blockArguments[1]);
            block(env, morph0, context, "if", [get(env, context, "appConfig.customisation.isMobile")], {}, child0, child1);
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "data-table full-width");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "data-table-header");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element5 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
          var morph1 = dom.createMorphAt(element5, 3, 3);
          block(env, morph0, context, "each", [get(env, context, "fieldList")], { "keyword": "data" }, child0, null);
          block(env, morph1, context, "each", [get(env, context, "content")], {}, child1, null);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "nano has-scrollbar");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget-container-new nano-content full-height-without-header");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            attribute = hooks.attribute,
            inline = hooks.inline,
            concat = hooks.concat,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element6 = dom.childAt(fragment, [0]);
        var element7 = dom.childAt(element6, [3, 1, 1]);
        var morph0 = dom.createMorphAt(element6, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element6, 'id');
        var morph1 = dom.createMorphAt(element7, 1, 1);
        var morph2 = dom.createMorphAt(element7, 3, 3);
        var morph3 = dom.createMorphAt(element7, 5, 5);
        var attrMorph1 = dom.createAttrMorph(element7, 'id');
        attribute(env, attrMorph0, element6, "id", get(env, context, "wkey"));
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "title"), "titleCss": get(env, context, "titleCss"), "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "setLink": "setLink", "hideSymbol": true, "isTabAvailable": get(env, context, "showTopStockTabs"), "titleTabs": get(env, context, "tabs"), "tabAction": "loadTab", "isTitleIconAvailable": true, "icon": get(env, context, "icon"), "isMoreMarketAvailable": true, "isSubMarketsAvailable": true, "setExchange": "setTopStockExchange", "setSubMarket": "setTopStockSubMarket", "buttonClass": "wdgttl-drp-dwn-btn", "defaultExchangeForDropdown": get(env, context, "defaultExchangeForDropdown"), "value": get(env, context, "exgCode"), "exchange": get(env, context, "exchange"), "subMarket": get(env, context, "subMarket"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss") });
        attribute(env, attrMorph1, element7, "id", concat(env, ["table-", get(env, context, "wkey")]));
        inline(env, morph1, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph2, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle pad-m-b" });
        block(env, morph3, context, "if", [get(env, context, "isDataAvailable")], {}, child0, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/top-stocks", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-container full-width");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "widget-header", [], { "widgetTitle": "Top Stocks", "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "setLink": "setLink", "hideSymbol": true, "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "data-id", "topstocks-tg-row");
            dom.setAttribute(el1, "class", "layout-col row-height pad-m-l font-m h-right highlight-fore-color bold");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "data-id", "topstocks-tg-row");
            dom.setAttribute(el1, "class", "layout-col row-height pad-m-l font-m h-right highlight-fore-color bold");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            inline(env, morph0, context, "formatNumber", [get(env, context, "topStockObj.val.ltp"), get(env, context, "topStockObj.val.stock.deci")], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-row cursor-pointer row-height");
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 row-height pad-widget-left font-m symbol-fore-color bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col row-height pad-m-lr font-m h-right up-fore-color bold");
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ltr");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element,
              content = hooks.content,
              subexpr = hooks.subexpr,
              block = hooks.block,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element3, 'id');
          var morph0 = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element3, 3, 3);
          var morph2 = dom.createMorphAt(dom.childAt(element3, [5, 0]), 0, 0);
          attribute(env, attrMorph0, element3, "id", get(env, context, "_view.contentIndex"));
          element(env, element3, context, "action", ["doubleClickRow", get(env, context, "topStockObj.val")], { "on": "doubleClick" });
          content(env, morph0, context, "topStockObj.val.stock.dispProp1");
          block(env, morph1, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "topstoks-symbol", 1], {})], {}, child0, child1);
          inline(env, morph2, context, "formatNumberPercentage", [get(env, context, "topStockObj.val.pctChg")], {});
          return fragment;
        }
      };
    }();
    var child2 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "data-id", "topstocks-tl");
            dom.setAttribute(el1, "class", "layout-col row-height pad-m-l font-m h-right highlight-fore-color bold");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "data-id", "topstocks-tl");
            dom.setAttribute(el1, "class", "layout-col row-height pad-m-l font-m h-right highlight-fore-color bold");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            inline(env, morph0, context, "formatNumber", [get(env, context, "topStockObj.val.ltp"), get(env, context, "topStockObj.val.stock.deci")], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-row row-height cursor-pointer");
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "data-id", "topstoks-symbol");
          dom.setAttribute(el2, "class", "layout-col-24 row-height pad-m-l font-m symbol-fore-color bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col row-height pad-m-lr font-m h-right down-fore-color bold");
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ltr");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element,
              content = hooks.content,
              subexpr = hooks.subexpr,
              block = hooks.block,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element2, 'id');
          var morph0 = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element2, 3, 3);
          var morph2 = dom.createMorphAt(dom.childAt(element2, [5, 0]), 0, 0);
          attribute(env, attrMorph0, element2, "id", get(env, context, "_view.contentIndex"));
          element(env, element2, context, "action", ["doubleClickRow", get(env, context, "topStockObj.val")], { "on": "doubleClick" });
          content(env, morph0, context, "topStockObj.val.stock.dispProp1");
          block(env, morph1, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "topstoks-symbol", 1], {})], {}, child0, child1);
          inline(env, morph2, context, "formatNumberPercentage", [get(env, context, "topStockObj.val.pctChg")], {});
          return fragment;
        }
      };
    }();
    var child3 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "data-id", "topstocks-ma");
            dom.setAttribute(el1, "class", "layout-col row-height pad-m-l font-m h-right highlight-fore-color pad-m-l bold");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "data-id", "topstocks-ma");
            dom.setAttribute(el1, "class", "layout-col row-height pad-m-l font-m h-right highlight-fore-color pad-m-l bold");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            inline(env, morph0, context, "formatNumber", [get(env, context, "topStockObj.val.ltp"), get(env, context, "topStockObj.val.stock.deci")], {});
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-row row-height cursor-pointer");
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col-24 row-height pad-m-l font-m symbol-fore-color bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "font-m row-height h-right layout-col pad-widget-right pad-m-l symbol-fore-color bold ltr");
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "hint--bottom-left hint--bounce hint--rounded");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              attribute = hooks.attribute,
              element = hooks.element,
              content = hooks.content,
              subexpr = hooks.subexpr,
              block = hooks.block,
              concat = hooks.concat,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [5, 0]);
          var attrMorph0 = dom.createAttrMorph(element0, 'id');
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          var morph1 = dom.createMorphAt(element0, 3, 3);
          var morph2 = dom.createMorphAt(element1, 0, 0);
          var attrMorph1 = dom.createAttrMorph(element1, 'data-hint');
          attribute(env, attrMorph0, element0, "id", get(env, context, "_view.contentIndex"));
          element(env, element0, context, "action", ["doubleClickRow", get(env, context, "topStockObj.val")], { "on": "doubleClick" });
          content(env, morph0, context, "topStockObj.val.stock.dispProp1");
          block(env, morph1, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "topstoks-symbol", 1], {})], {}, child0, child1);
          attribute(env, attrMorph1, element1, "data-hint", concat(env, [subexpr(env, context, "formatNumber", [get(env, context, "topStockObj.val.vol"), 0], {})]));
          inline(env, morph2, context, "divideNumber", [get(env, context, "topStockObj.val.vol"), 0], {});
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "widget_new full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "wdgttl");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "horizontal-line-header");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "wdgttl-header layout-container full-width");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-8");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-inline pad-m-l");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-triangle-top appttl-up-fore-color widget-title-with-icon pad-s-r");
        var el7 = dom.createTextNode(" ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-8");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-inline pad-m-l");
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-triangle-bottom appttl-down-fore-color pad-s-r");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col-8");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-inline pad-m-l");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-triangle-top appttl-up-fore-color pad-s-r");
        var el7 = dom.createTextNode(" ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-triangle-bottom appttl-down-fore-color pad-s-r");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "horizontal_line");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget-container-new mkt-ovw-row-1-height border-bottom-zero pos-rel");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "full-width");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-container full-width");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-row row-height");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-8 mkt-ovw-row-1-height v-top table-row-up-back-color");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "id", "topstock-tgp");
        dom.setAttribute(el6, "class", "layout-container full-width pad-xs-t top-gainers");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-8 mkt-ovw-row-1-height v-top table-row-down-back-color");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("<div class=\"Vertical_Seperator_topstocks\"></div>");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "id", "topstock-tlp");
        dom.setAttribute(el6, "class", "layout-container full-width pad-xs-t top-losers");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-8 mkt-ovw-row-1-height v-top table-row-prominent-back-color");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "id", "topstock-mav");
        dom.setAttribute(el6, "class", "layout-container full-width pad-xs-t most-active");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [1, 3]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element6, [1, 1]);
        var element8 = dom.childAt(element6, [3, 1]);
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        var attrMorph0 = dom.createAttrMorph(element4, 'id');
        var morph1 = dom.createMorphAt(dom.childAt(element5, [1, 1]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element5, [3, 1]), 2, 2);
        var morph3 = dom.createMorphAt(dom.childAt(element5, [5, 1]), 3, 3);
        var morph4 = dom.createMorphAt(element7, 1, 1);
        var morph5 = dom.createMorphAt(element7, 3, 3);
        var morph6 = dom.createMorphAt(dom.childAt(element8, [1, 1]), 1, 1);
        var morph7 = dom.createMorphAt(dom.childAt(element8, [3, 3]), 1, 1);
        var morph8 = dom.createMorphAt(dom.childAt(element8, [5, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isWidgetHeaderAvailable")], {}, child0, null);
        attribute(env, attrMorph0, element4, "id", concat(env, ["topstocks-", get(env, context, "wkey")]));
        content(env, morph1, context, "app.lang.labels.topGainers");
        content(env, morph2, context, "app.lang.labels.topLosers");
        content(env, morph3, context, "app.lang.labels.mostActive");
        inline(env, morph4, context, "loading-indicator", [], { "isLoading": get(env, context, "isLoading") });
        inline(env, morph5, context, "single-message-viewer", [], { "message": get(env, context, "errorMessage"), "showMessage": get(env, context, "showError"), "messageCss": "appttl-light-bg-fore-color", "backgroundCss": "h-middle" });
        block(env, morph6, context, "each", [get(env, context, "tgpFilteredContent")], { "keyword": "topStockObj" }, child1, null);
        block(env, morph7, context, "each", [get(env, context, "tlpFilteredContent")], { "keyword": "topStockObj" }, child2, null);
        block(env, morph8, context, "each", [get(env, context, "mavFilteredContent")], { "keyword": "topStockObj" }, child3, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/watch-list/components/watchlist-extended-header", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "role", "presentation");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "aria-controls", "watchlist-area");
          dom.setAttribute(el2, "role", "tab");
          dom.setAttribute(el2, "data-toggle", "tab");
          dom.setAttribute(el2, "class", "wdgttl-tab-link font-m wdgttl-fore-color");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              get = hooks.get,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          element(env, element0, context, "bind-attr", [], { "class": ":pad-s-lr :wdgttl-tab-item isExchangeSelected:active" });
          element(env, element0, context, "action", ["setWlExchange", get(env, context, "selectedExchange")], {});
          content(env, morph0, context, "selectedExchange.des");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container wdgttl-tab-panel pad-s-lr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "role", "presentation");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "aria-controls", "watchlist-area");
        dom.setAttribute(el3, "role", "tab");
        dom.setAttribute(el3, "data-toggle", "tab");
        dom.setAttribute(el3, "class", "wdgttl-tab-link font-m wdgttl-fore-color");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "wdgttl-tab-item wdgttl-tab-link wdgttl-fore-color overflow-visible wdgttl-border-right");
        dom.setAttribute(el2, "style", "border-left: none !important");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element,
            get = hooks.get,
            content = hooks.content,
            block = hooks.block,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        var morph1 = dom.createMorphAt(element1, 3, 3);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        var morph3 = dom.createMorphAt(element1, 7, 7);
        element(env, element2, context, "bind-attr", [], { "class": ":pad-s-lr :wdgttl-border-left :wdgttl-tab-item isDefaultExchangeSelected:active" });
        element(env, element2, context, "action", ["setWlExchange", get(env, context, "defaultExchange"), true], {});
        content(env, morph0, context, "defaultExchange.des");
        block(env, morph1, context, "if", [get(env, context, "selectedExchange")], {}, child0, null);
        inline(env, morph2, context, "more-markets-dropdown", [], { "setExchange": "setWlExchange", "key": get(env, context, "key"), "isShowOnlyDefault": true, "buttonClass": "wdgttl-drp-dwn-btn" });
        inline(env, morph3, context, "tab-dropdown", [], { "isDropdown": get(env, context, "isCurrentWLDropdown"), "displayList": get(env, context, "customWatchListArray"), "newActive": get(env, context, "customWLNewActive"), "isDisplayListChanged": get(env, context, "isCustomWLChanged"), "labelKey": "name", "actionName": "onCustomWlSelect", "tabItemClass": "pad-s-lr wdgttl-tab-item", "tabLinkClass": "wdgttl-tab-link bold wdgttl-fore-color", "buttonClass": "wdgttl-drp-dwn-btn" });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/watch-list/components/watchlist-header-container", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "render", ["price/widgets/watch-list/components/watchlist-extended-header"], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/watch-list/index-watch-list", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "style", "width:1200px; height:500px;");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        inline(env, morph0, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "arrangedContent"), "rowHeight": get(env, context, "rowHeight"), "hasFooter": false, "minHeaderHeight": get(env, context, "headerHeight") });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/watch-list/quote-watch-list", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.watchList"), "isMarketTabAvailable": true, "titleTabs": get(env, context, "exgTabs"), "tabAction": "setWlExchange", "buttonClass": "wdgttl-drp-dwn-btn", "isShowOnlyDefault": get(env, context, "isShowOnlyDefault"), "hideWidgetLink": true, "hideSymbol": true, "isMoreMarketAvailable": true, "setExchange": "onSelectExchange", "defaultExchangeForDropdown": get(env, context, "defaultExchangeForDropdown"), "value": get(env, context, "exg") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col pad-m-l font-m btn");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-search");
          dom.setAttribute(el2, "aria-hidden", "true");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          element(env, element1, context, "action", ["showFilterBox"], {});
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "watch-list-transform-filter-box pad-m-lr");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "input-field-text", [], { "type": "text", "value": get(env, context, "textFilter"), "placeholder": get(env, context, "app.lang.labels.filter"), "onKeyDown": "onKeyDown", "class": "search-query form-control pad-s-l" });
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              subexpr = hooks.subexpr,
              concat = hooks.concat,
              attribute = hooks.attribute,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0, 1, 1);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          attribute(env, attrMorph0, element0, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isChangeWidth"), "watch-list-filter-area-show", "watch-list-filter-area-hide"], {}), " watch-list-transform-filter-box"]));
          inline(env, morph0, context, "input-field-text", [], { "type": "text", "value": get(env, context, "textFilter"), "placeholder": get(env, context, "app.lang.labels.filter"), "onKeyDown": "onKeyDown", "class": "search-query search-ctrl form-control watch-list-filter-area-show pad-s-l" });
          return fragment;
        }
      };
    }();
    var child4 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col-24");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child5 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          inline(env, morph0, context, "more-markets-dropdown", [], { "setExchange": "onSelectExchange", "key": get(env, context, "wkey"), "isShowDefaultMarket": true, "responsiveIcon": get(env, context, "isChangeWidth") });
          return fragment;
        }
      };
    }();
    var child6 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
            inline(env, morph0, context, "link-dropdown", [], { "options": get(env, context, "links"), "defaultSelect": get(env, context, "defaultLink"), "value": get(env, context, "selectedLink"), "valueKey": "code", "labelKey": "desc", "selectAction": "setLink", "toolTip": get(env, context, "app.lang.labels.linkWidgets") });
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "unless", [get(env, context, "isHideLink")], {}, child0, null);
          return fragment;
        }
      };
    }();
    var child7 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "table-component", [], { "columns": get(env, context, "columns"), "content": get(env, context, "arrangedContent"), "rowHeight": get(env, context, "rowHeight"), "hasFooter": false, "isActiveOnSymbolChange": true, "minHeaderHeight": 40, "isRefreshed": get(env, context, "isRefreshed"), "rowClickAction": "clickRow", "doubleClickAction": "doubleClickRow", "id": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-height full-width overflow-hidden");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("  =========  Search Box  =============  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-container full-width pos-rel pad-s-tb");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col pad-s-l");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col pad-s-l");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("  =========  /Search Box  =============  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ember-table-panel full-width quote-watchlist-height");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [5]);
        var element4 = dom.childAt(element3, [7]);
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var morph1 = dom.createMorphAt(element3, 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        var morph3 = dom.createMorphAt(element3, 5, 5);
        var morph4 = dom.createMorphAt(element4, 1, 1);
        var morph5 = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
        var morph6 = dom.createMorphAt(dom.childAt(element3, [9]), 1, 1);
        var morph7 = dom.createMorphAt(dom.childAt(element2, [9]), 1, 1);
        block(env, morph0, context, "if", [get(env, context, "isShowTitle")], {}, child0, null);
        block(env, morph1, context, "unless", [get(env, context, "isTablet")], {}, child1, null);
        block(env, morph2, context, "if", [get(env, context, "isTablet")], {}, child2, child3);
        block(env, morph3, context, "unless", [get(env, context, "isTablet")], {}, child4, null);
        block(env, morph4, context, "unless", [get(env, context, "isTablet")], {}, child5, null);
        inline(env, morph5, context, "sub-markets-dropdown", [], { "exchange": get(env, context, "exchange"), "key": get(env, context, "wkey"), "lblClass": "watch-list-quote-wl-filter-btn", "onSubMarketChanged": "onSelectSubMarket", "responsiveIcon": get(env, context, "isChangeWidth") });
        block(env, morph6, context, "unless", [get(env, context, "isTablet")], {}, child6, null);
        block(env, morph7, context, "if", [get(env, context, "isRenderingEnabled")], {}, child7, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/watch-list/watch-list-container", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "full-width full-height widget_new border-none overflow-visible");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full-width full-height");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var morph0 = dom.createMorphAt(element0, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element0, 'id');
        attribute(env, attrMorph0, element0, "id", concat(env, [get(env, context, "wkey")]));
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.marketWatch"), "hideSymbol": true, "hideWidgetLink": true, "app": get(env, context, "app") });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/price/widgets/watch-list/watch-list", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "widget_new full-height overflow-visible");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n           ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "widget-container-new overflow-visible watch-list-container-height");
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "watchlist-ul");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "id", "menuWL");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ember-table-panel full-width");
        dom.setAttribute(el4, "style", "padding: 0 0 1px 0; height:calc(100% - 39px);");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [3]);
        var attrMorph0 = dom.createAttrMorph(element0, 'id');
        var morph0 = dom.createMorphAt(element1, 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        attribute(env, attrMorph0, element0, "id", concat(env, [get(env, context, "widgetContainerKey")]));
        element(env, element0, context, "bind-attr", [], { "class": ":col-xs-12 :full-height" });
        inline(env, morph0, context, "widget-header", [], { "widgetTitle": get(env, context, "app.lang.labels.marketWatch"), "linkOptions": get(env, context, "links"), "defaultSelectedLink": get(env, context, "defaultLink"), "selectedLink": get(env, context, "selectedLink"), "setLink": "setLink", "chaeck": get(env, context, "linkdrveLogic"), "isPartialHeaderAvailable": true, "partialHeaderName": "price/widgets/watch-list/components/watchlist-header-container", "extendedComponentName": "price/widgets/watch-list/components/watchlist-extended-header", "hideSymbol": true, "isSettingsAvailable": true, "dropDownOptions": get(env, context, "settings"), "iconStyle": "widget-title-fore-color", "defaultSelect": get(env, context, "defaultCriteria"), "valueKey": "code", "labelKey": "desc", "selectAction": "setTableSettings", "isResizeAvailable": true, "resizeAction": "fullScreenToggle", "fullScreenToggleTitle": get(env, context, "fullScreenToggleTitle"), "innerWidgets": get(env, context, "innerWidgets"), "innerWidgetAction": "renderInnerWidgetItems", "isWidgetCloseAvailable": get(env, context, "isWidgetCloseAvailable"), "closeWidgetAction": "closeWidgetAction", "closeActionTarget": get(env, context, "controller"), "cursorMoveCss": get(env, context, "cursorMoveCss"), "app": get(env, context, "app") });
        inline(env, morph1, context, "partial", [get(env, context, "partialControlPanel")], {});
        inline(env, morph2, context, "table-component", [], { "hasBody": get(env, context, "isRenderingEnabled"), "columns": get(env, context, "columns"), "content": get(env, context, "customArrayProxy"), "lenContent": get(env, context, "content"), "rowHeight": get(env, context, "rowHeight"), "hasFooter": false, "minHeaderHeight": get(env, context, "minHeaderHeight"), "numFixedColumns": get(env, context, "numOfFixedColumns"), "selection": get(env, context, "selection"), "watchButton": get(env, context, "customWatchListArray"), "indicatorConfig": get(env, context, "indicatorConfig"), "sortAction": "sort", "onColumnReordered": "reOrderColumns", "rowClickAction": "clickRow", "doubleClickAction": "doubleClickRow", "isRefreshed": get(env, context, "isRefreshed"), "isHorizontalScrollAvailable": get(env, context, "isHorizontalScrollAvailable"), "availableHorizontalScrollWidth": get(env, context, "availableHorizontalScrollWidth"), "sortAscending": get(env, context, "sortAscending"), "isThinWL": get(env, context, "isThinWL"), "id": get(env, context, "tableComponentId"), "startIndex": get(env, context, "customArrayProxy.startIndex"), "numItemsShowing": get(env, context, "customArrayProxy.numItemsShowing"), "scrollLeft": get(env, context, "scrollLeft"), "enableColumnReorder": get(env, context, "enableColumnReorder"), "columnsFillTable": get(env, context, "columnsFillTable") });
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/symbol-popup-summary", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pad-m-l font-l up-fore-color");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          inline(env, morph0, context, "formatNumber", [get(env, context, "view.detailSymbol.bbq"), 0], {});
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-l bold up-fore-color");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "btn btn-sell-small bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(element1, 0, 0);
          element(env, element1, context, "action", ["sell"], { "target": "view" });
          content(env, morph0, context, "view.app.lang.labels.sell");
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pad-m-l font-l down-fore-color");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          inline(env, morph0, context, "formatNumber", [get(env, context, "view.detailSymbol.baq"), 0], {});
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "font-l bold up-fore-color");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "btn btn-buy-small bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              element = hooks.element,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(element0, 0, 0);
          element(env, element0, context, "action", ["buy"], { "target": "view" });
          content(env, morph0, context, "view.app.lang.labels.buy");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pad-widget-left pad-widget-right");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col-24");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-width");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-24");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "pad-s-b font-x-l bold symbol-fore-color ellipsis");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col v-top");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "full-width");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "mgn-l-l");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-inline v-top pad-s-l font-l");
        var el9 = dom.createElement("span");
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("i");
        dom.appendChild(el9, el10);
        var el10 = dom.createTextNode(" ");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "layout-inline v-top pad-s-l font-x-l bold symbol-fore-color");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-width");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col-24 ellipsis font-m");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col font-m bold pad-m-l ltr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col font-m pad-m-l ltr");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col widget-vline pad-l-l");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col full-height pad-l-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "pad-s-b font-x-l bold up-fore-color");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col v-top");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "font-m ellipsis popup-label-max-width");
        var el7 = dom.createElement("span");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col v-top pad-l-l");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col widget-vline pad-l-l");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout-col full-height pad-l-l");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "pad-s-b font-x-l bold down-fore-color");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "layout-col v-top");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "font-m ellipsis popup-label-max-width");
        var el7 = dom.createElement("span");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-col v-top pad-l-l");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            element = hooks.element,
            content = hooks.content,
            get = hooks.get,
            inline = hooks.inline,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [3, 1, 1]);
        var element6 = dom.childAt(element5, [1, 0]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element3, [3]);
        var element9 = dom.childAt(element8, [3]);
        var element10 = dom.childAt(element9, [1, 1]);
        var element11 = dom.childAt(element9, [3, 1]);
        var element12 = dom.childAt(element2, [5]);
        var element13 = dom.childAt(element12, [1]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element2, [9]);
        var element16 = dom.childAt(element15, [1]);
        var element17 = dom.childAt(element16, [1]);
        var morph0 = dom.createMorphAt(dom.childAt(element4, [1, 1]), 0, 0);
        var morph1 = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        var morph3 = dom.createMorphAt(element10, 0, 0);
        var morph4 = dom.createMorphAt(element11, 0, 0);
        var morph5 = dom.createMorphAt(dom.childAt(element14, [1, 1]), 0, 0);
        var morph6 = dom.createMorphAt(dom.childAt(element14, [3]), 1, 1);
        var morph7 = dom.createMorphAt(dom.childAt(element13, [3, 1, 0]), 0, 0);
        var morph8 = dom.createMorphAt(dom.childAt(element12, [3]), 1, 1);
        var morph9 = dom.createMorphAt(dom.childAt(element17, [1, 1]), 0, 0);
        var morph10 = dom.createMorphAt(dom.childAt(element17, [3]), 1, 1);
        var morph11 = dom.createMorphAt(dom.childAt(element16, [3, 1, 0]), 0, 0);
        var morph12 = dom.createMorphAt(dom.childAt(element15, [3]), 1, 1);
        element(env, element2, context, "bind-attr", [], { "class": ":layout-container :pad-s-tb :netplus-watchlist-table-header :price-info-panel-height view.mainCss full-width" });
        content(env, morph0, context, "view.detailSymbol.dispProp1");
        element(env, element6, context, "bind-attr", [], { "class": "view.perChgCss" });
        element(env, element7, context, "bind-attr", [], { "class": "view.changeSign" });
        inline(env, morph1, context, "formatNumber", [get(env, context, "view.detailSymbol.ltp"), get(env, context, "view.detailSymbol.deci")], {});
        content(env, morph2, context, "view.detailSymbol.sDes");
        element(env, element10, context, "bind-attr", [], { "class": "view.perChgCss" });
        inline(env, morph3, context, "formatNumberPercentage", [get(env, context, "view.detailSymbol.pctChg")], {});
        element(env, element11, context, "bind-attr", [], { "class": "view.changeCss" });
        inline(env, morph4, context, "formatNumber", [get(env, context, "view.detailSymbol.chg"), get(env, context, "view.detailSymbol.deci")], {});
        inline(env, morph5, context, "formatNumber", [get(env, context, "view.detailSymbol.bbp"), get(env, context, "view.detailSymbol.deci")], {});
        block(env, morph6, context, "unless", [get(env, context, "view.isTradingEnabled")], {}, child0, null);
        content(env, morph7, context, "view.app.lang.labels.bestBid");
        block(env, morph8, context, "if", [get(env, context, "view.isTradingEnabled")], {}, child1, null);
        inline(env, morph9, context, "formatNumber", [get(env, context, "view.detailSymbol.bap"), get(env, context, "view.detailSymbol.deci")], {});
        block(env, morph10, context, "unless", [get(env, context, "view.isTradingEnabled")], {}, child2, null);
        content(env, morph11, context, "view.app.lang.labels.bestOffer");
        block(env, morph12, context, "if", [get(env, context, "view.isTradingEnabled")], {}, child3, null);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/symbol-popup-view", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "my-tab-content");
        dom.setAttribute(el1, "class", "tab-content popup-animation");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "tab-pane active");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-lg-4");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 1, 1);
        inline(env, morph0, context, "outlet", [get(env, context, "view.outletName")], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/alert/alert-criteria-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "layout-inline fore-color bold font-s alert-criteria-cell-width ellipsis");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "layout-inline icon-fore-color bold font-s pad-s-lr");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "layout-inline fore-color bold font-s alert-criteria-cell-width ellipsis ltr");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "bold font-s");
        var el4 = dom.createTextNode("(\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "bold font-s");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "bold font-s");
        var el4 = dom.createTextNode(")\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var attrMorph0 = dom.createAttrMorph(element0, 'cell-id');
        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        var morph3 = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        attribute(env, attrMorph0, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        element(env, element0, context, "bind-attr", [], { "class": ":cell-container :full-width :full-height :pad-m-lr :ellipsis :pad-s-t :border-bottom :text-align-left view.styleBackground view.styles" });
        element(env, element1, context, "bind-attr", [], { "class": ":h-left :font-s :pad-s-t view.styleFirstValue" });
        content(env, morph0, context, "view.firstValue");
        content(env, morph1, context, "view.thirdValue");
        content(env, morph2, context, "view.secondValue");
        element(env, element2, context, "bind-attr", [], { "class": ":pad-s-t :font-s :icon-fore-color :h-left :ellipsis :font-s view.styleThirdValue" });
        content(env, morph3, context, "view.fourthValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/alert/alert-menu-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "btn btn-alert btn-animation bold");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "icon-rename font-l");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "font-xxx-l bold btn-txt-color");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "btn btn-alert btn-animation bold");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "glyphicon glyphicon-trash font-l");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            subexpr = hooks.subexpr;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element0, [3]);
        var attrMorph0 = dom.createAttrMorph(element0, 'cell-id');
        var attrMorph1 = dom.createAttrMorph(element2, 'class');
        var attrMorph2 = dom.createAttrMorph(element3, 'disabled');
        attribute(env, attrMorph0, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        element(env, element0, context, "bind-attr", [], { "class": ":layout-container :full-width :full-height :ellipsis :border-bottom :text-align-left view.styleBackground :pad-m-l view.styles" });
        element(env, element1, context, "action", ["buttonMenuAction", true, get(env, context, "view.rowValues"), get(env, context, "view.content")], {});
        attribute(env, attrMorph1, element2, "class", concat(env, ["font-xxx-l bold btn-txt-color ", get(env, context, "view.displayStyle")]));
        attribute(env, attrMorph2, element3, "disabled", subexpr(env, context, "isEqual", [get(env, context, "view.rowValues.content.isEditEnabled"), false, true], {}));
        element(env, element4, context, "action", ["buttonMenuAction", false, get(env, context, "view.rowValues"), get(env, context, "view.content")], {});
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/alert/alert-status-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'cell-id');
        var morph0 = dom.createMorphAt(element1, 1, 1);
        attribute(env, attrMorph0, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        element(env, element0, context, "bind-attr", [], { "class": ":cell-container :full-width :full-height :font-m :pad-m-lr :ellipsis :pad-m-t :border-bottom :text-align-left view.styleBackground view.styles" });
        element(env, element1, context, "bind-attr", [], { "class": ":text-align-center :font-m :ellipsis :pad-s-lr :alert-status-cell :pad-s-tb view.styleFirstValue" });
        content(env, morph0, context, "view.formattedFirstValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/alert/alert-symbol-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'cell-id');
        var morph0 = dom.createMorphAt(element1, 1, 1);
        attribute(env, attrMorph0, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        element(env, element0, context, "bind-attr", [], { "class": ":layout-container :full-width :full-height :v-middle :pad-m-lr :ellipsis :border-bottom :text-align-left view.styleBackground view.styles" });
        element(env, element1, context, "bind-attr", [], { "class": ":layout-col :symbol-fore-color :ellipsis :font-l :bold :h-left :pad-s-t view.styleFirstValue" });
        content(env, morph0, context, "view.firstValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/buy-sell-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col panel-table font-m");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var morph0 = dom.createMorphAt(element0, 1, 1);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        attribute(env, attrMorph0, element0, "class", concat(env, [get(env, context, "view.styles")]));
        content(env, morph0, context, "view.cellValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/change-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'cell-id');
        var morph0 = dom.createMorphAt(element1, 1, 1);
        attribute(env, attrMorph0, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        element(env, element0, context, "bind-attr", [], { "class": ":layout-col :panel-table view.styles" });
        element(env, element1, context, "bind-attr", [], { "class": ":font-m :bold view.styleFirstValue" });
        content(env, morph0, context, "view.formattedFirstValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/dual-change-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel-table");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var attrMorph0 = dom.createAttrMorph(element0, 'cell-id');
        var morph0 = dom.createMorphAt(element1, 1, 1);
        var attrMorph1 = dom.createAttrMorph(element1, 'class');
        var morph1 = dom.createMorphAt(element2, 1, 1);
        var attrMorph2 = dom.createAttrMorph(element2, 'class');
        attribute(env, attrMorph0, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        attribute(env, attrMorph1, element1, "class", concat(env, ["font-l bold ", get(env, context, "view.styleFirstValue"), " ltr"]));
        content(env, morph0, context, "view.formattedFirstValue");
        attribute(env, attrMorph2, element2, "class", concat(env, ["font-m pad-xs-t ", get(env, context, "view.styleSecondValue")]));
        content(env, morph1, context, "view.formattedSecondValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/financial-title-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var attrMorph0 = dom.createAttrMorph(element0, 'cell-id');
        var morph0 = dom.createMorphAt(element2, 1, 1);
        var morph1 = dom.createMorphAt(element3, 1, 1);
        attribute(env, attrMorph0, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        element(env, element0, context, "bind-attr", [], { "class": ":panel-table :border-bottom view.styleBackground view.styles" });
        element(env, element2, context, "bind-attr", [], { "class": "view.isMobile:font-l view.isTablet:font-m :ltr :bold view.styleFirstValue view.isLevelIncreased:pad-m-l" });
        content(env, morph0, context, "view.formattedFirstValue");
        element(env, element3, context, "bind-attr", [], { "class": ":font-m :ltr :bold :pad-xs-t view.styleSecondValue" });
        content(env, morph1, context, "view.formattedSecondValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/fs-color-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'style');
        var morph0 = dom.createMorphAt(element1, 1, 1);
        attribute(env, attrMorph0, element0, "style", concat(env, ["background-color: ", get(env, context, "view.colorCode"), "; color: #2f2f2f"]));
        element(env, element0, context, "bind-attr", [], { "class": ":layout-col-24 :ltr :panel-table :border-top :border-bottom :ellipsis view.styles view.styleBackground", "title": "view.formattedFirstValue", "cell-id": "view.columnId" });
        element(env, element1, context, "bind-attr", [], { "class": ":font-m view.styleFirstValue" });
        content(env, morph0, context, "view.formattedFirstValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/market-status-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout-container full-width full-height");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        var attrMorph1 = dom.createAttrMorph(element0, 'title');
        var attrMorph2 = dom.createAttrMorph(element0, 'cell-id');
        var morph0 = dom.createMorphAt(element1, 1, 1);
        var attrMorph3 = dom.createAttrMorph(element1, 'class');
        attribute(env, attrMorph0, element0, "class", concat(env, ["layout-col-24 ltr panel-table ellipsis ", get(env, context, "view.styles"), " ", get(env, context, "view.styleBackground")]));
        attribute(env, attrMorph1, element0, "title", concat(env, [get(env, context, "view.firstValue")]));
        attribute(env, attrMorph2, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        attribute(env, attrMorph3, element1, "class", concat(env, ["font-l ", get(env, context, "view.firstValueStyle")]));
        content(env, morph0, context, "view.firstValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/partial/default-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "sectors");
          dom.setAttribute(el1, "class", "layout-col overflow-visible input-group pad-m-l ");
          dom.setAttribute(el1, "aria-controls", "watchlist-area");
          dom.setAttribute(el1, "role", "tab");
          dom.setAttribute(el1, "data-toggle", "tab");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          inline(env, morph0, context, "bootstrap-dropdown-select", [], { "options": get(env, context, "sectorsArray"), "isStaticLableEnabled": get(env, context, "isSectorStaticLabelEnabled"), "staticLabel": get(env, context, "defaultSectorForDropdown"), "valueKey": "sec", "labelKey": "des", "wkey": get(env, context, "wkey"), "selectAction": "setSector" });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "data-id", "todays-traded");
            dom.setAttribute(el1, "class", "font-m fade-fore-color hint--bottom-left hint--bounce hint--rounded");
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "icon-clock");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element2, 'data-hint');
            attribute(env, attrMorph0, element2, "data-hint", get(env, context, "app.lang.labels.todaysTraded"));
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "data-id", "todays-traded");
            dom.setAttribute(el1, "class", "font-m fade-fore-color");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.labels.todaysTraded");
            return fragment;
          }
        };
      }();
      var child2 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "data-id", "hideSuspended");
            dom.setAttribute(el1, "class", "font-m fade-fore-color hint--bottom-left hint--bounce hint--rounded");
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-ban-circle");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element1, 'data-hint');
            attribute(env, attrMorph0, element1, "data-hint", get(env, context, "app.lang.labels.hideSuspended"));
            return fragment;
          }
        };
      }();
      var child3 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "data-id", "hideSuspended");
            dom.setAttribute(el1, "class", "font-m fade-fore-color");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.labels.hideSuspended");
            return fragment;
          }
        };
      }();
      var child4 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "font-m fade-fore-color hint--bottom-left hint--bounce hint--rounded");
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "icon-megaphone-1");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                get = hooks.get,
                attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element0, 'data-hint');
            attribute(env, attrMorph0, element0, "data-hint", get(env, context, "app.lang.labels.announcement"));
            return fragment;
          }
        };
      }();
      var child5 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "font-m fade-fore-color");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks,
                content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            content(env, morph0, context, "app.lang.labels.announcement");
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          dom.setAttribute(el1, "data-id", "announcement");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-m-l");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "checkbox-label");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-l-l");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "checkbox-label");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout-col pad-l-l");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "checkbox-label ");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline,
              subexpr = hooks.subexpr,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [1, 1]);
          var element5 = dom.childAt(element3, [3, 1]);
          var element6 = dom.childAt(element3, [5, 1]);
          var morph0 = dom.createMorphAt(element4, 1, 1);
          var morph1 = dom.createMorphAt(element4, 3, 3);
          var morph2 = dom.createMorphAt(element5, 1, 1);
          var morph3 = dom.createMorphAt(element5, 3, 3);
          var morph4 = dom.createMorphAt(element6, 1, 1);
          var morph5 = dom.createMorphAt(element6, 3, 3);
          inline(env, morph0, context, "input", [], { "checked": get(env, context, "todayFilter"), "type": "checkbox", "name": "cc" });
          block(env, morph1, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "watchList-middle", 2], {})], {}, child0, child1);
          inline(env, morph2, context, "input", [], { "checked": get(env, context, "hideSuspendedFilter"), "type": "checkbox", "name": "cc" });
          block(env, morph3, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "watchList-middle", 2], {})], {}, child2, child3);
          inline(env, morph4, context, "input", [], { "checked": get(env, context, "isAnnColumnAdded"), "type": "checkbox", "name": "cc" });
          block(env, morph5, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "watchList-middle", 2], {})], {}, child4, child5);
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "layout-col icon-th");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child3 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "layout-col h-right pad-m-l icon-angle-down");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          content(env, morph0, context, "app.lang.labels.moreColumns");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("  =========  Search Box  =============  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pos-rel");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "input-group-btn pos-abs top-zero");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn search-ctrl-btn");
        dom.setAttribute(el4, "type", "button");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "glyphicon glyphicon-search");
        dom.setAttribute(el5, "aria-hidden", "true");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("  =========  /Search Box  =============  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col overflow-visible input-group pad-m-l");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "data-id", "assetType-dropdown");
        dom.setAttribute(el2, "class", "layout-col overflow-visible pad-m-l ");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "data-id", "watchList-middle");
        dom.setAttribute(el2, "class", "layout-col-24");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col overflow-visible dropdown pad-m-l pad-widget-right");
        dom.setAttribute(el2, "data-id", "moreColumns");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "btn btn-dropdown btn-default dropdown-solid-back-color");
        dom.setAttribute(el3, "data-toggle", "dropdown");
        dom.setAttribute(el3, "aria-expanded", "false");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout-container full-width");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            subexpr = hooks.subexpr,
            inline = hooks.inline,
            block = hooks.block,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [17, 1]);
        var attrMorph0 = dom.createAttrMorph(element7, 'id');
        var attrMorph1 = dom.createAttrMorph(element7, 'class');
        var morph0 = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element7, [7]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element7, [9]), 1, 1);
        var morph3 = dom.createMorphAt(element7, 11, 11);
        var morph4 = dom.createMorphAt(element7, 15, 15);
        var morph5 = dom.createMorphAt(dom.childAt(element8, [1]), 1, 1);
        attribute(env, attrMorph0, element7, "id", concat(env, ["defaultPanel-", get(env, context, "wkey")]));
        attribute(env, attrMorph1, element7, "class", concat(env, ["layout-container ", subexpr(env, context, "if", [get(env, context, "isMobile"), "wl-def-panel-height pad-widget-left pad-widget-right", "toolbar-styles"], {})]));
        inline(env, morph0, context, "input-field-text", [], { "type": "text", "value": get(env, context, "textFilter"), "placeholder": get(env, context, "app.lang.labels.filter"), "class": "search-query search-ctrl form-control default-panel-width" });
        inline(env, morph1, context, "sub-markets-dropdown", [], { "exchange": get(env, context, "exchange"), "key": get(env, context, "wkey"), "onSubMarketChanged": "onSelectSubMarket", "currentMarketId": get(env, context, "currentSubMarketId") });
        inline(env, morph2, context, "tab-dropdown", [], { "isDropdown": get(env, context, "isAssetTypeDropdown"), "displayList": get(env, context, "defaultAssetTypes"), "newActive": get(env, context, "assetTypNewActive"), "isDisplayListChanged": get(env, context, "isAssetTypeChanged"), "labelKey": "displayDesc", "actionName": "onTabSelectionChanged", "tabPanelClass": "widget-tab-panel", "tabItemClass": "layout-inline widget-tab-item mgn-s-r", "tabLinkClass": "layout-inline" });
        block(env, morph3, context, "unless", [get(env, context, "isThinWL")], {}, child0, null);
        block(env, morph4, context, "unless", [get(env, context, "isThinWL")], {}, child1, null);
        element(env, element8, context, "action", ["loadMoreColumnsDropDown"], {});
        block(env, morph5, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "watchList-middle", 3], {})], {}, child2, child3);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/partial/favourite-panel", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 1, 1, contextualElement);
          inline(env, morph0, context, "global-search", [], { "searchKey": get(env, context, "addStockSearchKey"), "showWidgetButtons": get(env, context, "showWidgetButtons"), "stopGlobalNotification": true, "clickAction": "addStocksFromCustomWL", "analyticsKey": get(env, context, "gaKey"), "wkey": get(env, context, "wkey") });
          return fragment;
        }
      };
    }();
    var child1 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "layout-col icon-th");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child2 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout-col");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "layout-col h-right pad-m-l icon-angle-down");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          content(env, morph0, context, "app.lang.labels.moreColumns");
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col");
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n            ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "input-group-btn pos-abs top-zero");
        var el4 = dom.createTextNode("\n                ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn search-ctrl-btn");
        dom.setAttribute(el4, "type", "button");
        var el5 = dom.createTextNode("\n                    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "glyphicon glyphicon-search");
        dom.setAttribute(el5, "aria-hidden", "true");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "modal-symbol");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "data-id", "favorite-free");
        dom.setAttribute(el2, "class", "layout-col-24");
        dom.setAttribute(el2, "id", "");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-m-l overflow-visible");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dropdown");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "btn btn-dropdown btn-default dropdown-toggle");
        dom.setAttribute(el4, "data-toggle", "dropdown");
        dom.setAttribute(el4, "aria-expanded", "false");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col icon-plus colour-2");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-col pad-s-l");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "dropdown-menu");
        dom.setAttribute(el4, "role", "menu");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-m-l overflow-visible");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dropdown");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "btn btn-dropdown btn-default dropdown-toggle");
        dom.setAttribute(el4, "data-toggle", "dropdown");
        dom.setAttribute(el4, "aria-expanded", "false");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "class", "btn-icon colour-2");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("  ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4, "class", "dropdown-menu");
        dom.setAttribute(el4, "role", "menu");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "id", "deleteWatchListBtn");
        dom.setAttribute(el2, "class", "layout-col pad-m-l");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "btn btn-dropdown btn-default dropdown-toggle");
        dom.setAttribute(el3, "data-toggle", "dropdown");
        dom.setAttribute(el3, "aria-expanded", "false");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col pad-m-l");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dropdown");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "data-id", "favorite-more-columns");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "btn btn-dropdown btn-default dropdown-solid-back-color");
        dom.setAttribute(el4, "data-toggle", "dropdown");
        dom.setAttribute(el4, "aria-expanded", "false");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "layout-container full-width");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            subexpr = hooks.subexpr,
            inline = hooks.inline,
            block = hooks.block,
            content = hooks.content,
            element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [5, 1]);
        var element3 = dom.childAt(element0, [7, 1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element0, [9, 1]);
        var element6 = dom.childAt(element0, [11, 1, 1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'id');
        var attrMorph1 = dom.createAttrMorph(element0, 'class');
        var morph0 = dom.createMorphAt(element1, 1, 1);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        var morph2 = dom.createMorphAt(dom.childAt(element2, [1, 2]), 0, 0);
        var morph3 = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        var morph4 = dom.createMorphAt(dom.childAt(element4, [2]), 0, 0);
        var morph5 = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        var morph6 = dom.createMorphAt(element5, 0, 0);
        var morph7 = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
        attribute(env, attrMorph0, element0, "id", concat(env, ["favoritePanel-", get(env, context, "wkey")]));
        attribute(env, attrMorph1, element0, "class", concat(env, ["layout-container toolbar-styles full-width pad-widget-left pad-widget-right overflow-visible ", subexpr(env, context, "if", [get(env, context, "isMobile"), "mgn-s-t", ""], {})]));
        inline(env, morph0, context, "input", [], { "type": "text", "value": get(env, context, "addStockSearchKey"), "action": "showSearchPopup", "on": "key-press", "class": "search-query search-ctrl form-control mousetrap fav-panel-width", "placeholder": get(env, context, "app.lang.labels.addSymbols") });
        block(env, morph1, context, "modal-popup", [], { "isEnabled": false, "id": "watchListSymbolSearch" }, child0, null);
        content(env, morph2, context, "app.lang.labels.newWatchList");
        inline(env, morph3, context, "custom-watchlist-dialog", [], { "app": get(env, context, "app"), "actionType": "addNewWL", "customWLCallBack": "onCustomWlSelect" });
        element(env, element4, context, "action", ["setCurrentCustomWLName"], {});
        element(env, element4, context, "bind-attr", [], { "disabled": get(env, context, "isRenameWLDisabled") });
        content(env, morph4, context, "app.lang.labels.renameWL");
        inline(env, morph5, context, "custom-watchlist-dialog", [], { "watchListName": get(env, context, "currentCustomWLName"), "app": get(env, context, "app"), "title": "renameWL", "actionType": "renameWL", "currentCustomWLId": get(env, context, "currentCustomWLId"), "customWLCallBack": "renameCustomWLCallBack" });
        element(env, element5, context, "action", ["deleteWatchList"], {});
        element(env, element5, context, "bind-attr", [], { "disabled": get(env, context, "isDeleteWLDisabled") });
        content(env, morph6, context, "app.lang.labels.deleteWL");
        element(env, element6, context, "action", ["loadMoreColumnsDropDown"], {});
        block(env, morph7, context, "if", [subexpr(env, context, "onResponsive", [get(env, context, "responsive.trigger"), get(env, context, "responsive"), "favorite-free", 1], {})], {}, child1, child2);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/technical-score-color-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            concat = hooks.concat,
            attribute = hooks.attribute,
            element = hooks.element,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element1, [1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'cell-id');
        var morph0 = dom.createMorphAt(element2, 0, 0);
        attribute(env, attrMorph0, element0, "cell-id", concat(env, [get(env, context, "view.columnId")]));
        element(env, element0, context, "bind-attr", [], { "class": ":panel-table view.styleBackground view.styles" });
        element(env, element1, context, "bind-attr", [], { "class": ":ltr :bold" });
        element(env, element2, context, "bind-attr", [], { "class": "view.changeColor" });
        content(env, morph0, context, "view.formattedFirstValue");
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/table/views/up-down-cell", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    var child0 = function () {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-triangle-top font-m up-fore-color");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }();
    var child1 = function () {
      var child0 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "icon-equal font-m highlight-fore-color");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      var child1 = function () {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-triangle-bottom font-m down-fore-color");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }();
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks,
              get = hooks.get,
              block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "view.isSame")], {}, child0, child1);
          return fragment;
        }
      };
    }();
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel-table layout-container");
        var el2 = dom.createTextNode("\n ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout-col");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            get = hooks.get,
            block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        block(env, morph0, context, "if", [get(env, context, "view.isIncreased")], {}, child0, child1);
        return fragment;
      }
    };
  }());
});
define("universal-app/templates/top-panel-container-controller", ["exports"], function (exports) {
  "use strict";

  exports.default = Ember.HTMLBars.template(function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "outlet", ["priceTopPanel"], {});
        return fragment;
      }
    };
  }());
});
define('universal-app/views/custom-workspace/custom-layout-view', ['exports', 'ember', '../../models/shared/shared-service', '../../controllers/custom-workspace/template-generator', '../../utils/utils', '../../config/price-widget-config'], function (exports, _ember, _sharedService, _templateGenerator, _utils, _priceWidgetConfig) {
    'use strict';

    exports.default = _ember.default.View.extend({
        widgetList: _priceWidgetConfig.default.WidgetList,
        hGap: 5, // Horizontal gap
        cellHeight: 5, // Set unit cell height
        amountOfCols: 12, // Amount of columns provided by grid stack framework
        maximumWidgetCount: 10, // Maximum allowed widget count

        loadTemplate: function () {
            var controller = this.get('controller.targetController');

            if (controller) {
                var htmlArray = ['<div class="grid-stack">'];
                var viewHeight = _ember.default.$(window).height(); // Height of the view port
                var workspace = controller.getCustomWorkSpace(_sharedService.default.userState.customWS);

                if (workspace.length > 0) {
                    // If condition executes all the time except initial layout selection
                    htmlArray = this.generateWorkspaceHtml(htmlArray, controller, workspace);
                } else if (controller.get('complexLayoutContent')) {
                    var complexLayoutContent = controller.get('complexLayoutContent');
                    var complexWidgetCount = complexLayoutContent.widgetCount;

                    var heightArray = this.calculateHeight(viewHeight, complexLayoutContent.rowCounts, complexWidgetCount);
                    var coordinatesArray = this.calculateComplexCoordinates(complexLayoutContent.coordinates, complexLayoutContent.yCoordinates, heightArray);
                    var extraCoordinatesArray = this.calculateExtraCoordinates(complexWidgetCount, 2, 2, 48); // TODO [Atheesan]: Need to calculate values dynamically

                    htmlArray = this.generateComplexLayoutHtml(htmlArray, controller, coordinatesArray, extraCoordinatesArray, heightArray, complexLayoutContent.widths, complexWidgetCount);
                } else {
                    var rowCount = controller.get('rowCount') ? controller.get('rowCount') : controller.tabContent.row;
                    var colCount = controller.get('colCount') ? controller.get('colCount') : controller.tabContent.col;

                    // Height of a single container is calculated by considering the overall height and the number of rows in the layout
                    // This function is derived based on the height calculation function available in the grid stack framework
                    // To be precise, below function is the inverse of the grid stack height calculation function
                    // Values returning from this function is tested for most of the cases in different resolutions
                    // But there may be exceptions encountered for some resolutions
                    // top panel + footer = 145px
                    var height = ((viewHeight - 145 - this.hGap * (rowCount - 1)) / rowCount - this.cellHeight) / (this.cellHeight + this.hGap) + 1;
                    height = Math.floor(height);

                    // Width of a single container is simply calculated by dividing the available column count by user selected column count
                    var width = this.amountOfCols / colCount;

                    var widgetCount = rowCount * colCount;
                    var coordinates = this.calculateCoordinates(rowCount, colCount, height, width);
                    var extraCoordinates = this.calculateExtraCoordinates(widgetCount, rowCount, colCount, height);

                    htmlArray = this.generateLayoutHtml(htmlArray, controller, coordinates, extraCoordinates, height, width, widgetCount);
                }

                htmlArray[htmlArray.length] = '</div>';
                _ember.default.set(this, 'template', _ember.default.HTMLBars.compile(htmlArray.join(_utils.default.Constants.StringConst.Empty)));
            }
        }.on('init'),

        didInsertElement: function didInsertElement() {
            var controller = this.get('controller.targetController');

            if (controller) {
                var rowCount = controller.get('rowCount') ? controller.get('rowCount') : controller.tabContent.row;
                var colCount = controller.get('colCount') ? controller.get('colCount') : controller.tabContent.col;
                var widgetCount = rowCount * colCount;
                var complexLayoutContent = controller.get('complexLayoutContent');

                if (complexLayoutContent) {
                    widgetCount = complexLayoutContent.widgetCount;
                }

                if (!controller.tabContent.w || controller.tabContent.w.length === 0) {
                    this.generateWidget(controller, widgetCount);
                } else {
                    _ember.default.$.each(controller.tabContent.w, function (wKey, widgetDef) {
                        if (widgetDef && widgetDef.iw) {
                            controller.prepareWidget(controller.menuContent, controller.tabContent, widgetDef);
                        }
                    });
                }

                this.initializeContainers();
                this.loadWorkspaceContent(controller);
            }

            this._super();
        },

        initializeContainers: function initializeContainers() {
            var that = this;
            var grid = _ember.default.$('.grid-stack').data('gridstack');

            if (grid) {
                _ember.default.$('div[grid-name=gs-w-c]').each(function () {
                    var containerId = this.attributes['grid-index'].value;
                    var isActive = this.attributes['active-c'].value === _utils.default.Constants.Yes;
                    var isWidgetAdded = that.get('targetController').widgetMap['w' + containerId];
                    var isResizable = false;

                    if (isWidgetAdded || isActive) {
                        grid.min_height(this, 5); // Number of rows for minimum height
                        isResizable = true;
                    }

                    grid.resizable(this, isResizable);
                });
            }
        },

        loadWorkspaceContent: function loadWorkspaceContent(customLayout) {
            var options = {
                /*eslint-disable */
                cell_height: 5, // Set unit cell height
                vertical_margin: 5, // Vertical gap between rows
                /*eslint-enable */
                resizable: {
                    handles: 'se, sw' // Resizing is available in these direction e, se, s, sw, w
                },
                draggable: {
                    handle: '.wdgttl' // Dragging will be enabled only in 'wdgttl' class
                }
            };

            var gridDiv = _ember.default.$('.grid-stack');

            if (!gridDiv.data('gridstack')) {
                gridDiv.gridstack(options);

                gridDiv.on('change', function () {
                    customLayout.saveWorkspace();
                });

                gridDiv.on('resizestop', function (event, ui) {
                    customLayout.onResizeContainer(event, ui);
                });
            }
        },

        generateLayoutHtml: function generateLayoutHtml(htmlArray, controller, coordinates, extraCoordinates, height, width, widgetCount) {
            for (var i = 0; i < this.maximumWidgetCount; i++) {
                var index = i + 1;

                if (i < widgetCount) {
                    _ember.default.set(controller.outletMap, 'o' + index, '');
                    htmlArray[htmlArray.length] = _templateGenerator.default.generateWorkspaceWidgetContainer(index, height, width, coordinates[i], true);
                } else {
                    _ember.default.set(controller.outletMap, 'o' + index, 'display: none');
                    htmlArray[htmlArray.length] = _templateGenerator.default.generateWorkspaceWidgetContainer(index, 1, 12, extraCoordinates[i], false);
                }

                _ember.default.set(controller.widgetMap, 'w' + index, false);
            }

            return htmlArray;
        },

        generateComplexLayoutHtml: function generateComplexLayoutHtml(htmlArray, controller, coordinates, extraCoordinates, heights, widths, widgetCount) {
            for (var i = 0; i < this.maximumWidgetCount; i++) {
                var index = i + 1;

                if (i < widgetCount) {
                    _ember.default.set(controller.outletMap, 'o' + index, '');
                    htmlArray[htmlArray.length] = _templateGenerator.default.generateWorkspaceWidgetContainer(index, heights[i], widths[i], coordinates[i], true);
                } else {
                    _ember.default.set(controller.outletMap, 'o' + index, 'display: none');
                    htmlArray[htmlArray.length] = _templateGenerator.default.generateWorkspaceWidgetContainer(index, 1, 12, extraCoordinates[i], false);
                }

                _ember.default.set(controller.widgetMap, 'w' + index, false);
            }

            return htmlArray;
        },

        generateWidget: function generateWidget(controller, widgetCount) {
            for (var i = 0; i < this.maximumWidgetCount; i++) {
                var index = i + 1;

                if (i < widgetCount) {
                    controller.setWidgetToContainer(index, this.widgetList.selection);
                }
            }
        },

        generateWorkspaceHtml: function generateWorkspaceHtml(htmlArray, controller, workspace) {
            _ember.default.$.each(workspace, function (key, containerObj) {
                var index = containerObj.i;
                var activeContainer = containerObj.act === _utils.default.Constants.Yes;

                htmlArray[htmlArray.length] = _templateGenerator.default.generateWorkspaceWidgetContainer(index, containerObj.h, containerObj.w, {
                    x: containerObj.x,
                    y: containerObj.y
                }, activeContainer);

                if (activeContainer) {
                    _ember.default.set(controller.outletMap, 'o' + index, '');
                } else {
                    _ember.default.set(controller.outletMap, 'o' + index, 'display: none');
                }

                _ember.default.set(controller.widgetMap, 'w' + index, false);
            });

            return htmlArray;
        },

        calculateCoordinates: function calculateCoordinates(rowCount, colCount, height, width) {
            var coordinates = [];
            var index;

            for (var i = 0; i < rowCount; i++) {
                for (var j = 0; j < colCount; j++) {
                    index = colCount * i + j;
                    coordinates[index] = coordinates[index] || {};
                    coordinates[index].x = width * j;
                }
            }

            for (var k = 0; k < colCount; k++) {
                for (var l = 0; l < rowCount; l++) {
                    index = colCount * l + k;
                    coordinates[index] = coordinates[index] || {};
                    coordinates[index].y = height * l;
                }
            }

            return coordinates;
        },

        calculateExtraCoordinates: function calculateExtraCoordinates(widgetCount, rowCount, colCount, height) {
            var coordinates = [];
            var index = widgetCount;
            var extraWidgetCount = this.maximumWidgetCount - widgetCount;
            var extraRows = Math.ceil(extraWidgetCount / this.amountOfCols);
            var yStart = height * rowCount;

            for (var i = 0; i < extraRows; i++) {
                for (var j = 0; j < this.amountOfCols; j++) {
                    coordinates[index] = coordinates[index] || {};
                    coordinates[index].y = i * this.amountOfCols + yStart + j;
                    coordinates[index].x = 0;

                    index++;

                    if (index >= this.maximumWidgetCount) {
                        return coordinates;
                    }
                }
            }

            return coordinates;
        },

        calculateHeight: function calculateHeight(viewHeight, rowCounts, widgetCount) {
            var heights = [];

            for (var i = 0; i < widgetCount; i++) {
                var height = ((viewHeight - 145 - this.hGap * (rowCounts[i] - 1)) / rowCounts[i] - this.cellHeight) / (this.cellHeight + this.hGap) + 1;
                heights[i] = Math.ceil(height);
            }

            return heights;
        },

        calculateComplexCoordinates: function calculateComplexCoordinates(coordinates, yCoordinateArray, heightArray) {
            for (var i = 0; i < heightArray.length; i++) {
                coordinates[i].y = heightArray[i] * yCoordinateArray[i];
            }

            return coordinates;
        }
    });
});
define('universal-app/views/symbol-popup-view', ['exports', 'ember', '../models/shared/language/language-data-store', '../utils/utils', '../models/shared/shared-service', '../app-events', '../config/app-config', '../controllers/controller-factory', '../models/price/price-constants'], function (exports, _ember, _languageDataStore, _utils, _sharedService, _appEvents, _appConfig, _controllerFactory, _priceConstants) {
    'use strict';

    exports.default = _ember.default.View.extend({
        dimensions: {
            w: 445,
            h: 339
        },

        userSettings: _sharedService.default.userSettings,
        currentPosition: 0,
        displacementScale: 20, // Number of pixels between adjacent popups
        showWidget1: true,
        outletName: '',
        widgetId: '',
        widgetSymbol: '',
        widgetExchange: '',
        widgetIns: '', // Instrument Type
        widgetSymbolDescription: '',
        app: _languageDataStore.default.getLanguageObj(),
        currentWidgetController: null,
        detailSymbol: {},
        mainCss: '',
        widgetClose: true,
        dockedMode: false,
        searchID: {},

        // Link Parameters
        links: [],
        currentLink: undefined,

        // Widget Ids
        detailQuoteWidgetId: 0,
        timeAndSalesWidgetId: 1,
        depthByPriceWidgetId: 2,
        depthByOrderWidgetId: 3,
        chartWidgetId: 4,
        alertsWidgetId: 5,

        classNames: [], // Ember framework will add this css class to the ember component
        windowTypes: {},
        activeWidget: undefined,

        priceService: {},

        isTradingEnabled: function () {
            var instId = this.get('detailSymbol.inst');

            return instId !== undefined && _appConfig.default.customisation.isTradingEnabled && _utils.default.AssetTypes.isTradableAssetType(instId);
        }.property('detailSymbol.inst'),

        popupContainerCss: function () {
            return this.get('dockedMode') ? 'full-height full-width' : 'symbol-pop popup-widget js-resizable';
        }.property(),

        popupHeightCss: function () {
            return this.get('dockedMode') ? 'height: calc(100% - 52px)' : '';
        }.property(),

        load: function () {
            this.priceService = _sharedService.default.getService('price');
            this.outletName = 'out-' + Math.floor(Date.now());
            this.searchID = { popup: 'searchPopup' + this.get('outletName'), search: 'search' + this.get('outletName') };

            if (this.get('dockedMode')) {
                this.set('widgetClose', false);
                var symbol = this.get('detailSymbol');
                this.prepare(this.get('dockedWidgetId') ? this.get('dockedWidgetId') : 0, symbol.sym, symbol.exg, symbol.inst);
                this.set('mainCss', 's-popup-padding');
                this.set('classNames', ['full-height']);
            }

            this.template = _ember.default.HTMLBars.compile('<div class="popup-animation ' + this.get('popupContainerCss') + '">' + '<div id="title-handle" style="cursor: move;" class="link-fix">{{widget-header isSearchAvailable=true widgetTitle=view.detailSymbol.lDes searchedSymbol=view.detailSymbol.dispProp1 isWidgetCloseAvailable=view.widgetClose closeWidgetAction="closePopup" closeActionTarget=view linkOptions=view.links defaultSelectedLink=view.currentLink selectedLink=view.currentLink hideSymbol=true app=view.app searchID=view.searchID clickAction="clickAction"}}</div>' + '<div class="widget-container-new">{{#unless view.dockedMode}}{{partial "symbol-popup-summary"}}{{/unless}}<div id="tabs" class="layout-container widget-inner-tab-panel margin-8-top margin-9-left font-l overflow-visible full-width" data-tabs="tabs" style="margin-left: 0;margin-top: 0;">' + '<div class="layout-col widget-inner-tab-item" id =' + 'symPopViewW0' + this.get('outletName') + '><a class="h-middle full-width hint--bottom hint--rounded hint--bounce" data-hint={{view.app.lang.labels.detailQuote}} name="widgetOne" {{action "showWidget" 0 target="view"}} data-toggle="tab"><i class="layout-inline icon-list-ul"></i> <span class="layout-inline font-m symbol-popup-name pad-s-l">{{view.app.lang.labels.detailQuote}}</span></a></div>' + '<div class="layout-col widget-inner-tab-item {{unless view.windowTypes.tns "hide" ""}}" id =' + 'symPopViewW1' + this.get('outletName') + '><a class="h-middle full-width hint--bottom hint--rounded hint--bounce" data-hint={{view.app.lang.labels.timeAndSales}} name="widgetTwo" {{action "showWidget" 1 target="view"}} data-toggle="tab"><i class="layout-inline icon-clock"></i> <span class="layout-inline font-m symbol-popup-name pad-s-l">{{view.app.lang.labels.timeAndSales}}</span></a></div>' + '<div class="layout-col widget-inner-tab-item {{unless view.windowTypes.mdp "hide" ""}}" id =' + 'symPopViewW2' + this.get('outletName') + '><a class="h-middle full-width hint--bottom hint--rounded hint--bounce" data-hint={{view.app.lang.labels.depthByPrice}} name="widgetThree" {{action "showWidget" 2 target="view"}} data-toggle="tab"><i class="layout-inline icon-add-fav"></i> <span class="layout-inline font-m symbol-popup-name pad-s-l">{{view.app.lang.labels.depthByPrice}}</span></a></div>' + '<div class="layout-col widget-inner-tab-item {{unless view.windowTypes.mdo "hide" ""}}" id =' + 'symPopViewW3' + this.get('outletName') + '><a class="h-middle full-width hint--bottom hint--rounded hint--bounce" data-hint={{view.app.lang.labels.depthByOrder}} name="widgetFour" {{action "showWidget" 3 target="view"}} data-toggle="tab"><i class="layout-inline icon-sitemap"></i><span class="layout-inline font-m symbol-popup-name pad-s-l">{{view.app.lang.labels.depthByOrder}}</span></a></div>' + '<div class="layout-col widget-inner-tab-item {{unless view.windowTypes.chart "hide" ""}}" id =' + 'symPopViewW4' + this.get('outletName') + '><a class="h-middle full-width hint--bottom hint--rounded hint--bounce" data-hint={{view.app.lang.labels.chart}} name="widgetFive" {{action "showWidget" 4 target="view"}} data-toggle="tab"><i class="layout-inline icon-chart-bar"></i><span class="layout-inline font-m symbol-popup-name pad-s-l">{{view.app.lang.labels.chart}}</span></a></div>' + '<div class="layout-col widget-inner-tab-item {{unless view.windowTypes.alerts "hide" ""}}" id =' + 'symPopViewW5' + this.get('outletName') + '><a class="h-middle full-width hint--bottom hint--rounded hint--bounce" data-hint={{view.app.lang.labels.alerts}} name="widgetSix" {{action "showWidget" 5 target="view"}} data-toggle="tab"><i class="layout-inline icon-bell"></i><span class="layout-inline font-m symbol-popup-name pad-s-l">{{view.app.lang.labels.alerts}}</span></a></div>' + '</div><div class="popup-height" style="' + this.get('popupHeightCss') + '">{{outlet OUTLET_NAME}}</div></div></div>'.replace('OUTLET_NAME', '"' + this.outletName + '"'));

            this.set('showWidget1', true);

            if (!this.get('currentLink')) {
                this.set('currentLink', 0);
            }
        }.on('init'),

        setTabVisibility: function setTabVisibility(stock) {
            if (!this._isDestroyed()) {
                this.set('detailSymbol', this.priceService.stockDS.getStock(stock.exg, stock.sym, stock.inst));
            }

            if (stock.inst === _utils.default.AssetTypes.SukukBonds || stock.inst === _utils.default.AssetTypes.Indices || _utils.default.AssetTypes.isOption(stock.inst) || _utils.default.AssetTypes.isForex(stock.inst)) {
                this.hideWidget(this.get('timeAndSalesWidgetId'));
                this.hideWidget(this.get('depthByPriceWidgetId'));
                this.hideWidget(this.get('depthByOrderWidgetId'));
                this.hideWidget(this.get('alertsWidgetId'));
            } else if (_utils.default.AssetTypes.isOption(stock.inst)) {
                this.hideWidget(this.get('chartWidgetId'));
            } else if (!_appConfig.default.customisation.isAlertEnabled) {
                this.hideWidget(this.get('alertsWidgetId'));
            } else {
                var isExchangeDelayed = this.priceService.userDS.isExchangeDelayed(stock.exg);
                var mdoAvailable = this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByOrder, _priceConstants.default.WindowType.MarketDepthByOrderAdvanced], stock.exg);
                var mdpAvailable = this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByPrice, _priceConstants.default.WindowType.MarketDepthByPriceAdvanced], stock.exg);

                if (!isExchangeDelayed) {
                    this.showWidget(this.get('timeAndSalesWidgetId'));
                }

                if (mdoAvailable && !isExchangeDelayed) {
                    this.showWidget(this.get('depthByOrderWidgetId'));
                }

                if (mdpAvailable && !isExchangeDelayed) {
                    this.showWidget(this.get('depthByPriceWidgetId'));
                }
            }
        },

        onWidgetKeysChange: function onWidgetKeysChange(stock) {
            var previousInsType = this.get('detailSymbol') ? this.get('detailSymbol').inst : '';
            var currentWidgetId = this.get('widgetId');

            var isAdvancedMode = previousInsType !== _utils.default.AssetTypes.SukukBonds && previousInsType !== _utils.default.AssetTypes.Indices;
            var isSimpleMode = stock.inst === _utils.default.AssetTypes.SukukBonds || stock.inst === _utils.default.AssetTypes.Indices;
            var isCurrentTabNotInSimpleMode = currentWidgetId === this.get('timeAndSalesWidgetId') || currentWidgetId === this.get('depthByPriceWidgetId') || currentWidgetId === this.get('depthByOrderWidgetId');

            this.setTabVisibility(stock);

            if (isAdvancedMode && isSimpleMode && isCurrentTabNotInSimpleMode) {
                _ember.default.$('#symPopViewW' + currentWidgetId + this.get('outletName')).removeClass('active');

                this.unloadCurrentController();
                this.prepare(this.get('detailQuoteWidgetId'), stock.sym, stock.exg, stock.inst);
            } else {
                this.setProperties(stock.sym, stock.exg, stock.inst);
            }
        },

        setProperties: function setProperties(symbol, exchange, insType) {
            if (!this._isDestroyed()) {
                this.set('detailSymbol', this.priceService.stockDS.getStock(exchange, symbol, insType));

                var isExchangeDelayed = this.priceService.userDS.isExchangeDelayed(this.get('detailSymbol').exg);
                var mdoAvailable = this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByOrder, _priceConstants.default.WindowType.MarketDepthByOrderAdvanced], exchange);
                var mdpAvailable = this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByPrice, _priceConstants.default.WindowType.MarketDepthByPriceAdvanced], exchange);

                // Set true if widget required to be enabled, false to be disabled
                _ember.default.set(this.windowTypes, 'mdo', mdoAvailable && !isExchangeDelayed);
                _ember.default.set(this.windowTypes, 'mdp', mdpAvailable && !isExchangeDelayed);
                _ember.default.set(this.windowTypes, 'tns', !isExchangeDelayed);
                _ember.default.set(this.windowTypes, 'chart', !_utils.default.AssetTypes.isOption(insType));
                _ember.default.set(this.windowTypes, 'alerts', !_utils.default.AssetTypes.isIndices(insType) && _appConfig.default.customisation.isAlertEnabled);
            }
        },

        prepare: function prepare(id, symbol, exchange, insType) {
            if (symbol) {
                this.setProperties(symbol, exchange, insType);
            }

            // Subscribe popup container
            _appEvents.default.subscribeSymbolChanged(this.get('outletName'), this, this.get('currentLink'));

            this.preparePopUp(id);

            _utils.default.analyticsService.trackEvent('popup:symbol-popup', _utils.default.Constants.GAActions.show, ['sym:', symbol, '~', exchange].join(''));
        },

        preparePopUp: function preparePopUp(id) {
            var controllerString, routeString, mode, hideWidgetLink, targetController;
            var widgetId = id;

            var isExchangeDelayed = this.priceService.userDS.isExchangeDelayed(this.get('detailSymbol').exg);
            var mdoAvailable = this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByOrder, _priceConstants.default.WindowType.MarketDepthByOrderAdvanced], this.get('detailSymbol').exg);
            var mdpAvailable = this.priceService.userDS.isWindowTypeAvailable([_priceConstants.default.WindowType.MarketDepthByPrice, _priceConstants.default.WindowType.MarketDepthByPriceAdvanced], this.get('detailSymbol').exg);

            if (widgetId === this.timeAndSalesWidgetId && isExchangeDelayed) {
                widgetId = 0;
            }

            if (widgetId === this.depthByOrderWidgetId && (!mdoAvailable || isExchangeDelayed)) {
                widgetId = 0;
            }

            if (widgetId === this.depthByPriceWidgetId && (!mdpAvailable || isExchangeDelayed)) {
                widgetId = 0;
            }

            this.set('widgetId', widgetId);

            switch (widgetId) {
                case 0:
                    controllerString = 'controller:price/widgets/detail-quote';
                    routeString = 'price/widgets/detail-quote';
                    break;

                case 1:
                    controllerString = 'controller:price/widgets/time-and-sales/quote-time-and-sales';
                    routeString = 'price/widgets/time-and-sales/quote-time-and-sales';
                    break;

                case 2:
                    controllerString = 'controller:price/widgets/quote-market-depth';
                    routeString = 'price/widgets/quote-market-depth';
                    mode = 1;
                    break;

                case 3:
                    controllerString = 'controller:price/widgets/quote-market-depth';
                    routeString = 'price/widgets/quote-market-depth';
                    mode = 2;
                    break;

                case 4:
                    controllerString = 'controller:chart/regular-chart';
                    routeString = 'chart/regular-chart';
                    hideWidgetLink = true;
                    break;

                case 5:
                    controllerString = 'controller:price/widgets/alert-price';
                    routeString = 'price/widgets/alert-price';
                    break;

                default:
                    controllerString = 'controller:price/widgets/top-stocks';
                    routeString = 'price/widgets/top-stocks';
                    break;
            }

            var widgetKey = this.get('widgetId') + this.get('outletName');
            var widgetController = _controllerFactory.default.createController(this.container, controllerString);

            widgetController.set('sym', this.get('detailSymbol').sym);
            widgetController.set('exg', this.get('detailSymbol').exg);
            widgetController.set('inst', this.get('detailSymbol').inst);
            widgetController.set('wkey', widgetKey);
            widgetController.set('hideTitle', true);
            widgetController.set('hideWidgetLink', hideWidgetLink);

            if (mode) {
                widgetController.set('mode', mode);
            }

            if (_utils.default.validators.isAvailable(this.get('widgetId'))) {
                // Un-subscribe previous widget
                _appEvents.default.unSubscribeLanguageChanged(widgetKey);
                _appEvents.default.unSubscribeThemeChanged(widgetKey);
            }

            // Subscribe new widget
            _appEvents.default.subscribeLanguageChanged(widgetController, widgetKey);
            _appEvents.default.subscribeThemeChanged(widgetController, widgetKey);

            widgetController.initializeWidget({ wn: controllerString.split('/').pop() }, { widgetArgs: { selectedLink: this.get('currentLink') } });
            targetController = this.get('dockedMode') ? 'view-container-controller' : 'application';

            var route = this.container.lookup('route:application');
            route.render(routeString, {
                into: targetController,
                outlet: this.outletName,
                controller: widgetController
            });

            this.set('currentWidgetController', widgetController);
            this.set('links', widgetController.get('links'));
        },

        click: function click() {
            var elem = document.getElementById(this.elementId);

            if (!_ember.default.PopupZIndex) {
                _ember.default.PopupZIndex = 2000;
            }

            _ember.default.PopupZIndex = _ember.default.PopupZIndex + 1;
            elem.style.zIndex = _ember.default.PopupZIndex;

            this.set('activeWidget', _ember.default.appGlobal.activeWidget);
            _ember.default.appGlobal.activeWidget = _ember.default.PopupZIndex;
            var that = this;

            Mousetrap.bind('esc', function () {
                that._closePopup();
            }, _ember.default.PopupZIndex);
        },

        hideWidget: function hideWidget(widgetId) {
            _ember.default.$('#symPopViewW' + widgetId + this.get('outletName')).addClass('hide');
        },

        showWidget: function showWidget(widgetId) {
            _ember.default.$('#symPopViewW' + widgetId + this.get('outletName')).removeClass('hide');
        },

        getPopupCount: function getPopupCount() {
            var popupCount = _ember.default.appGlobal.session.popupCount;

            if (this.get('dimensions.h') + popupCount * this.get('displacementScale') > _ember.default.$(window).height() || this.get('dimensions.w') + popupCount * this.get('displacementScale') > _ember.default.$(window).width()) {
                _ember.default.appGlobal.session.popupCount = 0;
            } else {
                _ember.default.appGlobal.session.popupCount = popupCount + 1;
            }

            return popupCount;
        },

        show: function show(id, symbol, exchange, insType) {
            _ember.default.PopupContainerView.addPopupView(this);

            var popupElement = document.getElementById(_ember.default.PopupContainerView.elementId);
            var popupElementId = this.elementId;
            var currentPosition = this.getPopupCount() * this.get('displacementScale');
            this.set('currentPosition', currentPosition);

            if (popupElement) {
                popupElement.setAttribute('style', 'height: 1px; max-height: 1px; position: absolute;');
            }

            // Subscribe popup container
            _appEvents.default.subscribeLanguageChanged(this, this.get('outletName'));
            _appEvents.default.subscribeThemeChanged(this, this.get('outletName'));

            this.prepare(id, symbol, exchange, insType);

            _ember.default.run.later(function () {
                var elem = document.getElementById(popupElementId);

                if (elem) {
                    new Draggabilly(elem, { // eslint-disable-line
                        handle: '#title-handle',
                        x: 100,
                        y: 200
                    });

                    _ember.default.$('.js-resizable').resizable();
                }
            }, 1000);
        },

        setPopupPosition: function () {
            this.setTabVisibility(this.get('detailSymbol'));

            // Set active tab
            _ember.default.$('#symPopViewW' + this.get('widgetId') + this.get('outletName')).addClass('active');

            var elem = document.getElementById(this.elementId);
            var currentPosition = this.get('currentPosition');
            var leftPosition = currentPosition;

            if (!this.get('dockedMode')) {
                if (this.get('userSettings').currentLanguage === 'AR') {
                    leftPosition = -(this.get('dimensions').w + currentPosition);
                }

                elem.setAttribute('style', 'position: absolute; top:' + currentPosition + 'px;left:' + leftPosition + 'px;');
            }

            this.click(); // To add the z-index when the popup is created
        }.on('didInsertElement'),

        unloadCurrentController: function unloadCurrentController() {
            var currentController = this.get('currentWidgetController');

            if (currentController) {
                currentController.closeWidget();
            }
        },

        languageChanged: function languageChanged() {
            this.setPopupPosition();
        },

        setActiveTab: function setActiveTab(currentId) {
            for (var id = 0; id < 6; id++) {
                if (id === currentId) {
                    _ember.default.$('#symPopViewW' + currentId + this.get('outletName')).addClass('active');
                } else {
                    _ember.default.$('#symPopViewW' + id + this.get('outletName')).removeClass('active');
                }
            }
        },

        themeChanged: function themeChanged() {
            // Symbol-popup-view should implement this method to provide specific functionality
            // Otherwise base function will be executed
        },

        summaryViewSettings: {
            intZero: 0,
            emptyString: '',
            styles: {
                upForeColor: 'up-fore-color',
                downForeColor: 'down-fore-color',
                white: 'white',
                upArrow: 'glyphicon-triangle-top glyphicon ',
                downArrow: 'glyphicon-triangle-bottom glyphicon '
            }
        },

        updatePercentageChangeCss: function () {
            var changeSign, perChgCss;
            var changeCss = '';
            var pctChg = this.get('detailSymbol').pctChg;

            if (pctChg > this.summaryViewSettings.intZero) {
                changeSign = this.summaryViewSettings.styles.upArrow;
                perChgCss = this.summaryViewSettings.styles.upForeColor;
                changeCss = this.summaryViewSettings.styles.upForeColor;
            } else if (pctChg < this.summaryViewSettings.intZero) {
                changeSign = this.summaryViewSettings.styles.downArrow;
                perChgCss = this.summaryViewSettings.styles.downForeColor;
                changeCss = this.summaryViewSettings.styles.downForeColor;
            } else {
                changeSign = this.summaryViewSettings.emptyString;
                perChgCss = this.summaryViewSettings.styles.white;
            }

            this.set('changeSign', changeSign);
            this.set('perChgCss', perChgCss);
            this.set('changeCss', changeCss);
        }.observes('detailSymbol.pctChg'),

        showOrderTicketPopup: function showOrderTicketPopup(side) {
            var symbol = this.get('detailSymbol');
            var controllerString, routeString, viewName;
            controllerString = 'controller:trade/widgets/order-ticket/order-ticket-portrait';
            routeString = 'trade/widgets/order-ticket/order-ticket-portrait';
            viewName = 'view:widget-popup-view';

            var sharedUIService = _sharedService.default.getService('sharedUI');
            sharedUIService.showPopupWidget({ container: this.container, controllerString: controllerString, routeString: routeString, viewName: viewName }, { tabId: side, sym: symbol.sym, exg: symbol.exg, inst: symbol.inst });
        },

        myModel: null,

        _closePopup: function _closePopup() {
            // Un-subscribe popup container
            _appEvents.default.unSubscribeSymbolChanged(this.get('outletName'), this.get('currentLink'));

            this.unloadCurrentController();
            _ember.default.PopupContainerView.removeObject(this);

            // Un-subscribing the widget on language changed
            _appEvents.default.unSubscribeLanguageChanged(this.get('widgetId') + this.get('outletName'));
            // Un-subscribing the symbol-popup-view on language changed
            _appEvents.default.unSubscribeLanguageChanged(this.get('outletName'));
            // Un-subscribing the widget on theme changed
            _appEvents.default.unSubscribeThemeChanged(this.get('widgetId') + this.get('outletName'));
            // Un-subscribing the symbol-popup-view on theme changed
            _appEvents.default.unSubscribeThemeChanged(this.get('outletName'));

            _ember.default.appGlobal.activeWidget = this.get('activeWidget');
        },

        _isDestroyed: function _isDestroyed() {
            return this.get('isDestroyed') || this.get('isDestroying');
        },

        _updateOnSymbolChange: function () {
            this._loadWidgetForSymbol(this.get('detailSymbol'));
        }.observes('detailSymbol.sym'),

        _loadWidgetForSymbol: function _loadWidgetForSymbol(stock) {
            this.onWidgetKeysChange({ sym: stock.sym, exg: stock.exg, inst: stock.inst });

            var currentController = this.get('currentWidgetController');

            if (currentController) {
                currentController.onWidgetKeysChange({ sym: stock.sym, exg: stock.exg, inst: stock.inst });
            }
        },

        actions: {
            clickAction: function clickAction(item) {
                this._loadWidgetForSymbol(item);
            },

            showWidget: function showWidget(id) {
                this.unloadCurrentController();
                this.preparePopUp(id);
                this.setActiveTab(id);
                _utils.default.analyticsService.trackEvent('popup:symbol-popup', _utils.default.Constants.GAActions.viewChanged, ['tab:', this.get('currentWidgetController') ? this.get('currentWidgetController').gaKey : id].join(''));
            },

            closePopup: function closePopup() {
                this._closePopup();
            },

            setLinkView: function setLinkView(option) {
                if (this.get('currentLink') !== undefined && this.get('currentLink') !== 0) {
                    _appEvents.default.unSubscribeSymbolChanged(this.get('outletName'), this.get('currentLink'));
                }

                this.set('currentLink', option.code);

                if (this.get('currentLink') !== undefined && this.get('currentLink') !== 0) {
                    _appEvents.default.subscribeSymbolChanged(this.get('outletName'), this, this.get('currentLink'));
                }

                var currentController = this.get('currentWidgetController');

                if (currentController) {
                    currentController.setWidgetLink(option);
                }
            },

            buy: function buy() {
                this.showOrderTicketPopup('1');
            },

            sell: function sell() {
                this.showOrderTicketPopup('2');
            }
        }
    });
});
define('universal-app/views/table/alert/alert-criteria-cell', ['exports', 'ember', '../dual-cells/dual-cell', '../../../config/price-widget-config', '../../../models/shared/language/language-data-store', '../../../utils/utils', '../../../models/shared/shared-service'], function (exports, _ember, _dualCell, _priceWidgetConfig, _languageDataStore, _utils, _sharedService) {
    'use strict';

    exports.default = _dualCell.default.extend({
        templateName: 'table/views/alert/alert-criteria-cell',
        app: _languageDataStore.default.getLanguageObj(),

        firstValue: _ember.default.computed(function () {
            var param = this.get('row') ? this.get('row.param') : undefined;

            if (param) {
                var lanStore = this.get('app').lang.labels;
                param = lanStore[param] ? lanStore[param] : param;
            }

            return param;
        }).property('row.param'),

        secondValue: _ember.default.computed(function () {
            return _utils.default.formatters.formatNumber(this.get('row') ? this.get('row.val') : undefined, this.get('row') && !isNaN(this.get('row.deci')) ? this.get('row.deci') : _sharedService.default.userSettings.displayFormat.decimalPlaces);
        }).property('row.val'),

        thirdValue: _ember.default.computed(function () {
            return this.get('row') ? this.get('row.crit') : undefined;
        }).property('row.crit'),

        fourthValue: _ember.default.computed(function () {
            var critText = this.get('thirdValue');
            var that = this;

            _ember.default.$.each(_priceWidgetConfig.default.alert.criteria, function (key, crit) {
                if (crit.value === critText) {
                    var lanStore = that.get('app').lang.labels;
                    critText = lanStore[crit.lanKey] ? lanStore[crit.lanKey] : crit.lanKey;

                    return false;
                }
            });

            return critText;
        }).property('thirdValue'),

        styleFirstValue: _ember.default.computed(function () {
            return this.get('column.firstValueStyle') ? this.get('column.firstValueStyle') : '';
        }).property('firstValue')
    });
});
define('universal-app/views/table/alert/alert-menu-cell', ['exports', '../button-cell'], function (exports, _buttonCell) {
    'use strict';

    exports.default = _buttonCell.default.extend({
        templateName: 'table/views/alert/alert-menu-cell',

        displayStyle: function () {
            var status = this.get('rowValues.content.status');

            return status === 'triggered' || status === 'expired' ? 'disable-style' : '';
        }.property('rowValues.content.status')
    });
});
define('universal-app/views/table/alert/alert-status-cell', ['exports', 'ember', '../dual-cells/dual-cell', '../../../models/shared/language/language-data-store', '../../../models/price/price-constants'], function (exports, _ember, _dualCell, _languageDataStore, _priceConstants) {
    'use strict';

    exports.default = _dualCell.default.extend({
        templateName: 'table/views/alert/alert-status-cell',
        app: _languageDataStore.default.getLanguageObj(),

        formattedFirstValue: _ember.default.computed(function () {
            var status = this.get('row') ? this.get('row.status') : undefined;

            if (status) {
                var lanStore = this.get('app').lang.labels;
                status = lanStore[status] ? lanStore[status] : status;
            }

            return status;
        }).property('row.status'),

        styleFirstValue: _ember.default.computed(function () {
            var backColor = 'down-back-color';
            var status = this.get('row') ? this.get('row.status') : undefined;
            var statusConstants = _priceConstants.default.AlertStatus;

            switch (status) {
                case statusConstants.Active:
                    backColor = 'highlight-back-color-1';
                    break;

                case statusConstants.Triggered:
                    backColor = 'up-back-color';
                    break;
            }

            return backColor;
        }).property('row.status')
    });
});
define('universal-app/views/table/alert/alert-symbol-cell', ['exports', 'ember', '../dual-cells/dual-cell'], function (exports, _ember, _dualCell) {
    'use strict';

    exports.default = _dualCell.default.extend({
        templateName: 'table/views/alert/alert-symbol-cell',

        firstValue: _ember.default.computed(function () {
            return this.get('row') && this.get('row.dispProp1') ? this.get('row.dispProp1') : this.get('row.sym');
        }).property('row.sym'),

        styleFirstValue: _ember.default.computed(function () {
            return this.get('column.firstValueStyle') ? this.get('column.firstValueStyle') : '';
        }).property('firstValue'),

        secondValue: _ember.default.computed(function () {
            return this.get('row') && this.get('row.sDes') ? this.get('row.sDes') : undefined;
        }).property('row.sym', 'row.symbolInfo.sDes'),

        styleSecondValue: _ember.default.computed(function () {
            return this.get('column.secondValueStyle') ? this.get('column.secondValueStyle') : '';
        }).property('secondValue')
    });
});
define('universal-app/views/table/buy-sell-cell', ['exports', 'ember', './cell', '../../config/app-config', '../../models/shared/language/language-data-store'], function (exports, _ember, _cell, _appConfig, _languageDataStore) {
    'use strict';

    exports.default = _cell.default.extend({
        templateName: 'table/views/buy-sell-cell',
        app: _languageDataStore.default.getLanguageObj(),

        cellValue: _ember.default.computed(function () {
            var receivedValue = this.get('cellContent') ? this.get('cellContent').firstValue : undefined;
            var shownValue = '--';

            if (receivedValue === 'B') {
                shownValue = this.get('app').lang.labels.buy;
            } else if (receivedValue === 'S') {
                shownValue = this.get('app').lang.labels.sell;
            }

            return shownValue;
        }).property('cellContent'),

        getPositiveNegativeStyle: function getPositiveNegativeStyle() {
            var positiveStyle = _appConfig.default.customisation.isMobile ? 'up-fore-color font-xxx-l' : 'up-fore-color';
            var negativeStyle = _appConfig.default.customisation.isMobile ? 'down-fore-color font-xxx-l' : 'down-fore-color';
            var value = this.get('cellContent') ? this.get('cellContent').firstValue : undefined;

            return value === 'B' ? positiveStyle : negativeStyle;
        }
    });
});
define('universal-app/views/table/change-cell', ['exports', './dual-cells/dual-change-cell'], function (exports, _dualChangeCell) {
    'use strict';

    exports.default = _dualChangeCell.default.extend({
        templateName: 'table/views/change-cell'
    });
});
define('universal-app/views/table/dual-cells/dual-change-cell', ['exports', 'ember', './dual-cell'], function (exports, _ember, _dualCell) {
    'use strict';

    exports.default = _dualCell.default.extend({
        templateName: 'table/views/dual_change-cell',

        formattedSecondValue: _ember.default.computed(function () {
            // Override formattedSecondValue to add different format
            return this.addPercentageFormat(this.get('cellContent') ? this.get('cellContent').secondValue : undefined, 2);
        }).property('cellContent'),

        styleFirstValue: _ember.default.computed(function () {
            return this.getPositiveNegativeStyle(this.get('firstValue'), this.get('column.positiveStyle'), this.get('column.negativeStyle'), this.get('column.zeroStyle'));
        }).property('firstValue'),

        styleSecondValue: _ember.default.computed(function () {
            return this.getPositiveNegativeStyle(this.get('secondValue'), 'up-fore-color', 'down-fore-color');
        }).property('secondValue')
    });
});
define('universal-app/views/table/financial-title-cell', ['exports', './dual-cells/dual-cell'], function (exports, _dualCell) {
    'use strict';

    exports.default = _dualCell.default.extend({
        templateName: 'table/views/financial-title-cell',

        isLevelIncreased: function () {
            return this.get('row.content') ? this.get('row.content.indent') === '1' : false;
        }.property('cellContent')
    });
});
define('universal-app/views/table/fs-color-cell', ['exports', '../table/classic-cell'], function (exports, _classicCell) {
    'use strict';

    exports.default = _classicCell.default.extend({
        templateName: 'table/views/fs-color-cell',

        colorCode: function () {
            return this.get('row.colorCode');
        }.property('cellContent')
    });
});
define('universal-app/views/table/market-status-cell', ['exports', 'ember-table/views/table-cell', './table-mixins/style-mixin', '../../models/price/price-constants'], function (exports, _tableCell, _styleMixin, _priceConstants) {
    'use strict';

    exports.default = _tableCell.default.extend(_styleMixin.default, {
        templateName: 'table/views/market-status-cell',

        firstValue: function () {
            return this.get('cellContent') ? this.get('cellContent').firstValue : undefined;
        }.property('cellContent'),

        secondValue: function () {
            return this.get('cellContent') ? this.get('cellContent').secondValue : undefined;
        }.property('cellContent'),

        firstValueStyle: function () {
            if (this.get('secondValue') === _priceConstants.default.MarketStatus.Close || this.get('secondValue') === _priceConstants.default.MarketStatus.PreClose) {
                return 'down-fore-color bold';
            } else {
                return 'up-fore-color bold';
            }
        }.property('cellContent')
    });
});
define('universal-app/views/table/symbol-indicator-helper', ['exports', '../../models/price/price-constants'], function (exports, _priceConstants) {
    'use strict';

    exports.default = function () {
        var formatDcfsValueStyle = function formatDcfsValueStyle(dcfs) {
            var dcfsClass = '';
            var dcfsToolTip = '';

            switch (dcfs) {
                case _priceConstants.default.DcfsConstants.DcfsLessThanFifty:
                    break;
                case _priceConstants.default.DcfsConstants.DcfsLessThanSeventyFive:
                    dcfsClass = 'glyphicon glyphicon-flag yellow-fore-color font-l';
                    dcfsToolTip = 'dcfcLessThanSeventyFiveTitle';
                    break;
                case _priceConstants.default.DcfsConstants.DcfsLessThanHundred:
                    dcfsClass = 'glyphicon glyphicon-flag orange-fore-color font-l';
                    dcfsToolTip = 'dcfcLessThanHundredTitle';
                    break;
                case _priceConstants.default.DcfsConstants.DcfsGreaterThanHundred:
                    dcfsClass = 'glyphicon glyphicon-flag red-fore-color font-l';
                    dcfsToolTip = 'dcfcGreaterThanHundredTitle';
                    break;
                default:
                    break;
            }

            return {
                dcfsClass: dcfsClass,
                dcfsToolTip: dcfsToolTip
            };
        };

        return {
            formatDcfsValueStyle: formatDcfsValueStyle
        };
    }();
});
define('universal-app/views/table/technical-score-color-cell', ['exports', '../table/classic-cell'], function (exports, _classicCell) {
    'use strict';

    exports.default = _classicCell.default.extend({
        templateName: 'table/views/technical-score-color-cell',

        changeColor: function () {
            if (this.get('row.content')) {
                return this.get('row.content.signal') === 'B' ? 'up-fore-color' : 'down-fore-color';
            } else {
                return 'widget-back-color';
            }
        }.property('cellContent')
    });
});
define('universal-app/views/table/up-down-cell', ['exports', './dual-cells/dual-cell'], function (exports, _dualCell) {
    'use strict';

    exports.default = _dualCell.default.extend({
        templateName: 'table/views/up-down-cell',

        isActive: function () {
            // TODO [AROSHA] Consider this at hds to enable disable arrows
            return this.isPositive(this.get('cellContent') ? this.get('cellContent').firstValue : undefined);
        }.property('cellContent'),

        changedValue: function () {
            return this.get('cellContent') ? this.get('cellContent').thirdValue : undefined;
        }.property('cellContent'),

        isIncreased: function () {
            return this.isPositive(this.get('changedValue'));
        }.property('changedValue'),

        isSame: function () {
            return this.isZero(this.get('changedValue'));
        }.property('changedValue')
    });
});//# sourceMappingURL=ua-price.map
